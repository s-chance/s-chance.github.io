<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Git分支重命名</title>
    <url>/2022/09/08/Git-Branch-Rename/</url>
    <content><![CDATA[<h3 id="git重命名分支"><a class="markdownIt-Anchor" href="#git重命名分支"></a> Git重命名分支</h3>
<p>在开发过程中，有时需要对分支进行重命名。重命名分支需要考虑到分支是否已经推送到远端的情况<span id="more"></span></p>
<h4 id="git重命名本地分支还未推送到远端"><a class="markdownIt-Anchor" href="#git重命名本地分支还未推送到远端"></a> Git重命名本地分支（还未推送到远端）</h4>
<ul>
<li>
<p>在需要重命名的分支处</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">git branch -m <span class="string">&#x27;新的分支名&#x27;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li>
<p>不在需要重命名的分支处</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">git branch -m <span class="string">&#x27;需要重命名的分支名&#x27;</span> <span class="string">&#x27;新的分支名&#x27;</span></span><br></pre></td></tr></table></figure></div>
</li>
</ul>
<h4 id="git重命名远端分支已经推送到远端"><a class="markdownIt-Anchor" href="#git重命名远端分支已经推送到远端"></a> Git重命名远端分支（已经推送到远端）</h4>
<p><strong>假设已经处于需要重命名的分支上，参考上面的操作，并且在通过命令修改分支名之前没有手动去远端进行过修改，即修改之前本地分支名与远端分支名仍保持一致</strong></p>
<ul>
<li>
<p>重命名本地分支</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">git branch -m 新的分支名</span><br></pre></td></tr></table></figure></div>
</li>
<li>
<p>删除远程分支</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">git push --delete origin 要删除的分支名</span><br></pre></td></tr></table></figure></div>
</li>
<li>
<p>上传新命名的分支</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">git push origin 新的分支名</span><br></pre></td></tr></table></figure></div>
</li>
<li>
<p>关联修改后的本地分支与远端分支</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">git branch --set-upstream-to origin/新的分支名</span><br></pre></td></tr></table></figure></div>
</li>
</ul>
]]></content>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA插件配置</title>
    <url>/2023/01/14/IDEA-plugins/</url>
    <content><![CDATA[<p>作为IntelliJ IDEA的用户之一，原始的IDE已经能够满足大部分需求，但IDE插件提供了更多拓展性的功能，使得开发者能够工作在适宜的“开发环境”中，提高开发效率，提升开发者体验。那么以下是笔者在使用过程中所搜寻到的一些插件，请注意其中部分插件并不能直接提升开发效率，另外过多的插件反而会造成开发效率的低下，请悉知。读者可自行选择感兴趣的插件进行配置<span id="more"></span></p>
<h3 id="视觉体验"><a class="markdownIt-Anchor" href="#视觉体验"></a> 视觉体验</h3>
<h4 id="background-image-plus"><a class="markdownIt-Anchor" href="#background-image-plus"></a> Background Image Plus +</h4>
<p>Background Image Plus +是一款<strong>编辑器背景</strong>图插件，是Background Image Plus的功能增强版。支持<strong>每隔指定时间随机切换背景图片</strong>（需要有包含多个图片文件的背景图片文件夹，部分图片文件格式无法显示）</p>
<h4 id="material-theme-ui"><a class="markdownIt-Anchor" href="#material-theme-ui"></a> Material Theme UI</h4>
<p>Material Theme UI是一款主题美化插件</p>
<h4 id="rainbow-brackets"><a class="markdownIt-Anchor" href="#rainbow-brackets"></a> Rainbow Brackets</h4>
<p>Rainbow Brackets彩虹括号插件，对代码排错有一定帮助</p>
<h4 id="nyan-progress-bar"><a class="markdownIt-Anchor" href="#nyan-progress-bar"></a> Nyan Progress Bar</h4>
<p>Nyan Progress Bar彩虹猫进度条样式插件</p>
<hr />
<h3 id="代码跳转与快速浏览"><a class="markdownIt-Anchor" href="#代码跳转与快速浏览"></a> 代码跳转与快速浏览</h3>
<h4 id="codeglance-pro"><a class="markdownIt-Anchor" href="#codeglance-pro"></a> CodeGlance Pro</h4>
<p>CodeGlance Pro是一款<strong>快速浏览代码</strong>的插件，是CodeGlance的最新版。提供了<strong>代码缩略图</strong>，并能对缩略图中的部分代码进行<strong>放大浏览</strong>以及<strong>快速跳转</strong>到指定的代码</p>
<hr />
<h3 id="代码编辑"><a class="markdownIt-Anchor" href="#代码编辑"></a> 代码编辑</h3>
<h4 id="string-manipulation"><a class="markdownIt-Anchor" href="#string-manipulation"></a> String Manipulation</h4>
<p>String Manipulation用于代码大小写转换、驼峰命名转换、去除空格等</p>
<h4 id="ideavim"><a class="markdownIt-Anchor" href="#ideavim"></a> IdeaVim</h4>
<p>Ideavim是一个Vim仿真插件，用于在IDAE上实现Vim操作。（适用于习惯Vim操作的开发者，部分快捷键与IDEA自带快捷键存在冲突，需要手动配置）</p>
<h3 id="代码生成"><a class="markdownIt-Anchor" href="#代码生成"></a> 代码生成</h3>
<h4 id="easy-code"><a class="markdownIt-Anchor" href="#easy-code"></a> Easy Code</h4>
<p>Easy Code是一款能够根据数据表直接生成entity、controller、service、dao、mapper的代码，非常方便</p>
<h4 id="easy-code-mybatiscodehelperpro"><a class="markdownIt-Anchor" href="#easy-code-mybatiscodehelperpro"></a> Easy Code-MybatisCodeHelperPro</h4>
<p>为了与MybatisCodeHelperPro兼容而的推出的Easy Code版本</p>
<hr />
<h3 id="代码简化"><a class="markdownIt-Anchor" href="#代码简化"></a> 代码简化</h3>
<h4 id="lombok"><a class="markdownIt-Anchor" href="#lombok"></a> Lombok</h4>
<p>Lombok能够通过注解实现实体类的方法，简化、减少代码的编写</p>
<hr />
<h3 id="代码规范"><a class="markdownIt-Anchor" href="#代码规范"></a> 代码规范</h3>
<h4 id="checkstyle"><a class="markdownIt-Anchor" href="#checkstyle"></a> CheckStyle</h4>
<p>Java代码格式规范插件，能够自定义不同的规范</p>
<h4 id="alibaba-java-coding-guidelines"><a class="markdownIt-Anchor" href="#alibaba-java-coding-guidelines"></a> Alibaba Java Coding Guidelines</h4>
<p>Alibaba Java Coding Guidelines阿里巴巴的代码规范插件，用于开发者规范自己的代码编写，改善代码质量</p>
<h4 id="sonarlint"><a class="markdownIt-Anchor" href="#sonarlint"></a> SonarLint</h4>
<p>SonarLint是一个代码质量检测器插件，用于培养开发者良好的开发习惯以及提高代码质量</p>
<hr />
<h3 id="git提交规范"><a class="markdownIt-Anchor" href="#git提交规范"></a> Git提交规范</h3>
<h4 id="git-commit-template"><a class="markdownIt-Anchor" href="#git-commit-template"></a> Git Commit Template</h4>
<p>Git Commit Template用于规范git提交信息</p>
<hr />
<h3 id="代码测试"><a class="markdownIt-Anchor" href="#代码测试"></a> 代码测试</h3>
<h4 id="junitgenerator-v20"><a class="markdownIt-Anchor" href="#junitgenerator-v20"></a> JUnitGenerator V2.0</h4>
<p>JUnitGenerator V2.0用于快速生成代码测试模块</p>
<hr />
<h3 id="项目架构分析"><a class="markdownIt-Anchor" href="#项目架构分析"></a> 项目架构分析</h3>
<h4 id="plantuml-integration"><a class="markdownIt-Anchor" href="#plantuml-integration"></a> PlantUML Integration</h4>
<p>PlantUML Integration是一款用于快速创建UML（统一建模语言）图形的插件，能够通过绘制图形来系统性地分析和设计项目</p>
<h4 id="sequencediagram"><a class="markdownIt-Anchor" href="#sequencediagram"></a> SequenceDiagram</h4>
<p>SequenceDiagram用于生成项目类调用关系与执行流程的时序图</p>
<hr />
<h3 id="云部署"><a class="markdownIt-Anchor" href="#云部署"></a> 云部署</h3>
<h4 id="alibaba-cloud-toolkit"><a class="markdownIt-Anchor" href="#alibaba-cloud-toolkit"></a> Alibaba Cloud Toolkit</h4>
<p>Alibaba Cloud Toolkit用于高效开发并部署适合在云端运行的应用</p>
<hr />
<h3 id="json辅助工具"><a class="markdownIt-Anchor" href="#json辅助工具"></a> Json辅助工具</h3>
<h4 id="json-parser"><a class="markdownIt-Anchor" href="#json-parser"></a> Json Parser</h4>
<p>Json Parser是一款json解析器插件，是一个用于<strong>验证和格式化JSON字符串</strong>的轻量级插件</p>
<h4 id="gsonformatplus"><a class="markdownIt-Anchor" href="#gsonformatplus"></a> GsonFormatPlus</h4>
<p>GsonFormat能够将json数据直接转换为Java的类，提高效率</p>
<hr />
<h3 id="翻译工具"><a class="markdownIt-Anchor" href="#翻译工具"></a> 翻译工具</h3>
<h4 id="translation"><a class="markdownIt-Anchor" href="#translation"></a> Translation</h4>
<p>Translation是一款中英文翻译插件，用于在IDEA内部快速实现中英文翻译</p>
<hr />
<h3 id="maven辅助工具"><a class="markdownIt-Anchor" href="#maven辅助工具"></a> Maven辅助工具</h3>
<h4 id="maven-helper"><a class="markdownIt-Anchor" href="#maven-helper"></a> Maven Helper</h4>
<p>Maven Helper是一款maven依赖冲突分析的插件，主要提供图形化操作来替代命令行操作</p>
<hr />
<h3 id="mybatis辅助工具"><a class="markdownIt-Anchor" href="#mybatis辅助工具"></a> Mybatis辅助工具</h3>
<p>注意部分MyBatis插件和MybatisPlus插件可能会产生冲突</p>
<h4 id="mybatis-log"><a class="markdownIt-Anchor" href="#mybatis-log"></a> Mybatis Log</h4>
<p>Mybatis Log是一款Mybatis的<strong>日志处理</strong>工具，将Mybatis框架日志中的SQL信息转换可直接执行的SQL语句，节省时间。其历史版本不需要付费，最新版本需要付费使用</p>
<h4 id="mybatiscodehelperpro"><a class="markdownIt-Anchor" href="#mybatiscodehelperpro"></a> MybatisCodeHelperPro</h4>
<p>MybatisCodeHelperPro是一款MyBatis的强大辅助插件（不少开发者对此给出很高的评价），提供免费版和付费版，免费版提供的功能基本能够满足日常需求。（可能会与其它插件产生冲突）</p>
<hr />
<h3 id="mybatisplus辅助工具"><a class="markdownIt-Anchor" href="#mybatisplus辅助工具"></a> MybatisPlus辅助工具</h3>
<h4 id="mybatisx"><a class="markdownIt-Anchor" href="#mybatisx"></a> MybatisX</h4>
<p>MybatisX是MybatisPlus的强大辅助插件。（可能会与Mybatis的部分插件产生冲突）</p>
<hr />
<h3 id="restful辅助工具"><a class="markdownIt-Anchor" href="#restful辅助工具"></a> Restful辅助工具</h3>
<h4 id="restfultoolkit"><a class="markdownIt-Anchor" href="#restfultoolkit"></a> Restfultoolkit</h4>
<p>Restfultoolkit是一款针对Restful服务开发的辅助工具，能够根据URL快速跳转到对应的方法接口，提供了一个接口列表窗口，内置一个简单的Http请求工具（相当于一个简化的测试工具，类似于postman和apifox等）</p>
<hr />
<h3 id="k8s辅助工具"><a class="markdownIt-Anchor" href="#k8s辅助工具"></a> K8s辅助工具</h3>
<h4 id="kubernetes"><a class="markdownIt-Anchor" href="#kubernetes"></a> Kubernetes</h4>
<p>Kubernetes插件用于检测管理Kubernetes系统</p>
<hr />
]]></content>
      <tags>
        <tag>配置优化</tag>
      </tags>
  </entry>
  <entry>
    <title>MarkDown进阶:表情、图标</title>
    <url>/2022/09/04/MarkDownPro-face%E3%80%81icon/</url>
    <content><![CDATA[<h1 id="markdown-emoji"><a class="markdownIt-Anchor" href="#markdown-emoji"></a> markdown-emoji</h1>
<p>Markdown语法支持添加 <code>emoji</code> 表情，输入不同的符号码（两个冒号包围的字符）可以显示出不同的表情<span id="more"></span></p>
<hr />
<ul>
<li><a href="#%E4%BA%BA%E7%89%A9">人物</a></li>
<li><a href="#%E8%87%AA%E7%84%B6">自然</a></li>
<li><a href="#%E4%BA%8B%E7%89%A9">事物</a></li>
<li><a href="#%E5%9C%B0%E7%82%B9">地点</a></li>
<li><a href="#%E7%AC%A6%E5%8F%B7">符号</a></li>
</ul>
<h2 id="人物"><a class="markdownIt-Anchor" href="#人物"></a> 人物</h2>
<table>
<thead>
<tr>
<th style="text-align:left">:bowtie: <code>:bowtie:</code></th>
<th style="text-align:left">😄 <code>:smile:</code></th>
<th style="text-align:left">😆 <code>:laughing:</code></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">😊 <code>:blush:</code></td>
<td style="text-align:left">😃 <code>:smiley:</code></td>
<td style="text-align:left">☺️ <code>:relaxed:</code></td>
</tr>
<tr>
<td style="text-align:left">😏 <code>:smirk:</code></td>
<td style="text-align:left">😍 <code>:heart_eyes:</code></td>
<td style="text-align:left">😘 <code>:kissing_heart:</code></td>
</tr>
<tr>
<td style="text-align:left">😚 <code>:kissing_closed_eyes:</code></td>
<td style="text-align:left">😳 <code>:flushed:</code></td>
<td style="text-align:left">😌 <code>:relieved:</code></td>
</tr>
<tr>
<td style="text-align:left">😆 <code>:satisfied:</code></td>
<td style="text-align:left">😁 <code>:grin:</code></td>
<td style="text-align:left">😉 <code>:wink:</code></td>
</tr>
<tr>
<td style="text-align:left">😜 <code>:stuck_out_tongue_winking_eye:</code></td>
<td style="text-align:left">😝 <code>:stuck_out_tongue_closed_eyes:</code></td>
<td style="text-align:left">😀 <code>:grinning:</code></td>
</tr>
<tr>
<td style="text-align:left">😗 <code>:kissing:</code></td>
<td style="text-align:left">😙 <code>:kissing_smiling_eyes:</code></td>
<td style="text-align:left">😛 <code>:stuck_out_tongue:</code></td>
</tr>
<tr>
<td style="text-align:left">😴 <code>:sleeping:</code></td>
<td style="text-align:left">😟 <code>:worried:</code></td>
<td style="text-align:left">😦 <code>:frowning:</code></td>
</tr>
<tr>
<td style="text-align:left">😧 <code>:anguished:</code></td>
<td style="text-align:left">😮 <code>:open_mouth:</code></td>
<td style="text-align:left">😬 <code>:grimacing:</code></td>
</tr>
<tr>
<td style="text-align:left">😕 <code>:confused:</code></td>
<td style="text-align:left">😯 <code>:hushed:</code></td>
<td style="text-align:left">😑 <code>:expressionless:</code></td>
</tr>
<tr>
<td style="text-align:left">😒 <code>:unamused:</code></td>
<td style="text-align:left">😅 <code>:sweat_smile:</code></td>
<td style="text-align:left">😓 <code>:sweat:</code></td>
</tr>
<tr>
<td style="text-align:left">😥 <code>:disappointed_relieved:</code></td>
<td style="text-align:left">😩 <code>:weary:</code></td>
<td style="text-align:left">😔 <code>:pensive:</code></td>
</tr>
<tr>
<td style="text-align:left">😞 <code>:disappointed:</code></td>
<td style="text-align:left">😖 <code>:confounded:</code></td>
<td style="text-align:left">😨 <code>:fearful:</code></td>
</tr>
<tr>
<td style="text-align:left">😰 <code>:cold_sweat:</code></td>
<td style="text-align:left">😣 <code>:persevere:</code></td>
<td style="text-align:left">😢 <code>:cry:</code></td>
</tr>
<tr>
<td style="text-align:left">😭 <code>:sob:</code></td>
<td style="text-align:left">😂 <code>:joy:</code></td>
<td style="text-align:left">😲 <code>:astonished:</code></td>
</tr>
<tr>
<td style="text-align:left">😱 <code>:scream:</code></td>
<td style="text-align:left">:neckbeard: <code>:neckbeard:</code></td>
<td style="text-align:left">😫 <code>:tired_face:</code></td>
</tr>
<tr>
<td style="text-align:left">😠 <code>:angry:</code></td>
<td style="text-align:left">😡 <code>:rage:</code></td>
<td style="text-align:left">😤 <code>:triumph:</code></td>
</tr>
<tr>
<td style="text-align:left">😪 <code>:sleepy:</code></td>
<td style="text-align:left">😋 <code>:yum:</code></td>
<td style="text-align:left">😷 <code>:mask:</code></td>
</tr>
<tr>
<td style="text-align:left">😎 <code>:sunglasses:</code></td>
<td style="text-align:left">😵 <code>:dizzy_face:</code></td>
<td style="text-align:left">👿 <code>:imp:</code></td>
</tr>
<tr>
<td style="text-align:left">😈 <code>:smiling_imp:</code></td>
<td style="text-align:left">😐 <code>:neutral_face:</code></td>
<td style="text-align:left">😶 <code>:no_mouth:</code></td>
</tr>
<tr>
<td style="text-align:left">😇 <code>:innocent:</code></td>
<td style="text-align:left">👽 <code>:alien:</code></td>
<td style="text-align:left">💛 <code>:yellow_heart:</code></td>
</tr>
<tr>
<td style="text-align:left">💙 <code>:blue_heart:</code></td>
<td style="text-align:left">💜 <code>:purple_heart:</code></td>
<td style="text-align:left">❤️ <code>:heart:</code></td>
</tr>
<tr>
<td style="text-align:left">💚 <code>:green_heart:</code></td>
<td style="text-align:left">💔 <code>:broken_heart:</code></td>
<td style="text-align:left">💓 <code>:heartbeat:</code></td>
</tr>
<tr>
<td style="text-align:left">💗 <code>:heartpulse:</code></td>
<td style="text-align:left">💕 <code>:two_hearts:</code></td>
<td style="text-align:left">💞 <code>:revolving_hearts:</code></td>
</tr>
<tr>
<td style="text-align:left">💘 <code>:cupid:</code></td>
<td style="text-align:left">💖 <code>:sparkling_heart:</code></td>
<td style="text-align:left">✨ <code>:sparkles:</code></td>
</tr>
<tr>
<td style="text-align:left">⭐ <code>:star:</code></td>
<td style="text-align:left">🌟 <code>:star2:</code></td>
<td style="text-align:left">💫 <code>:dizzy:</code></td>
</tr>
<tr>
<td style="text-align:left">💥 <code>:boom:</code></td>
<td style="text-align:left">💥 <code>:collision:</code></td>
<td style="text-align:left">💢 <code>:anger:</code></td>
</tr>
<tr>
<td style="text-align:left">❗ <code>:exclamation:</code></td>
<td style="text-align:left">❓ <code>:question:</code></td>
<td style="text-align:left">❕ <code>:grey_exclamation:</code></td>
</tr>
<tr>
<td style="text-align:left">❔ <code>:grey_question:</code></td>
<td style="text-align:left">💤 <code>:zzz:</code></td>
<td style="text-align:left">💨 <code>:dash:</code></td>
</tr>
<tr>
<td style="text-align:left">💦 <code>:sweat_drops:</code></td>
<td style="text-align:left">🎶 <code>:notes:</code></td>
<td style="text-align:left">🎵 <code>:musical_note:</code></td>
</tr>
<tr>
<td style="text-align:left">🔥 <code>:fire:</code></td>
<td style="text-align:left">💩 <code>:hankey:</code></td>
<td style="text-align:left">💩 <code>:poop:</code></td>
</tr>
<tr>
<td style="text-align:left">💩 <code>:shit:</code></td>
<td style="text-align:left">👍 <code>:+1:</code></td>
<td style="text-align:left">👍 <code>:thumbsup:</code></td>
</tr>
<tr>
<td style="text-align:left">👎 <code>:-1:</code></td>
<td style="text-align:left">👎 <code>:thumbsdown:</code></td>
<td style="text-align:left">👌 <code>:ok_hand:</code></td>
</tr>
<tr>
<td style="text-align:left">👊 <code>:punch:</code></td>
<td style="text-align:left">👊 <code>:facepunch:</code></td>
<td style="text-align:left">✊ <code>:fist:</code></td>
</tr>
<tr>
<td style="text-align:left">✌️ <code>:v:</code></td>
<td style="text-align:left">👋 <code>:wave:</code></td>
<td style="text-align:left">✋ <code>:hand:</code></td>
</tr>
<tr>
<td style="text-align:left">✋ <code>:raised_hand:</code></td>
<td style="text-align:left">👐 <code>:open_hands:</code></td>
<td style="text-align:left">☝️ <code>:point_up:</code></td>
</tr>
<tr>
<td style="text-align:left">👇 <code>:point_down:</code></td>
<td style="text-align:left">👈 <code>:point_left:</code></td>
<td style="text-align:left">👉 <code>:point_right:</code></td>
</tr>
<tr>
<td style="text-align:left">🙌 <code>:raised_hands:</code></td>
<td style="text-align:left">🙏 <code>:pray:</code></td>
<td style="text-align:left">👆 <code>:point_up_2:</code></td>
</tr>
<tr>
<td style="text-align:left">👏 <code>:clap:</code></td>
<td style="text-align:left">💪 <code>:muscle:</code></td>
<td style="text-align:left">🤘 <code>:metal:</code></td>
</tr>
<tr>
<td style="text-align:left">🖕 <code>:fu:</code></td>
<td style="text-align:left">🚶 <code>:walking:</code></td>
<td style="text-align:left">🏃 <code>:runner:</code></td>
</tr>
<tr>
<td style="text-align:left">🏃 <code>:running:</code></td>
<td style="text-align:left">👫 <code>:couple:</code></td>
<td style="text-align:left">👪 <code>:family:</code></td>
</tr>
<tr>
<td style="text-align:left">👬 <code>:two_men_holding_hands:</code></td>
<td style="text-align:left">👭 <code>:two_women_holding_hands:</code></td>
<td style="text-align:left">💃 <code>:dancer:</code></td>
</tr>
<tr>
<td style="text-align:left">👯 <code>:dancers:</code></td>
<td style="text-align:left">🙆‍♀️ <code>:ok_woman:</code></td>
<td style="text-align:left">🙅 <code>:no_good:</code></td>
</tr>
<tr>
<td style="text-align:left">💁 <code>:information_desk_person:</code></td>
<td style="text-align:left">🙋 <code>:raising_hand:</code></td>
<td style="text-align:left">👰‍♀️ <code>:bride_with_veil:</code></td>
</tr>
<tr>
<td style="text-align:left">:person_with_pouting_face: <code>:person_with_pouting_face:</code></td>
<td style="text-align:left">:person_frowning: <code>:person_frowning:</code></td>
<td style="text-align:left">🙇 <code>:bow:</code></td>
</tr>
<tr>
<td style="text-align:left">💏 <code>:couplekiss:</code></td>
<td style="text-align:left">💑 <code>:couple_with_heart:</code></td>
<td style="text-align:left">💆 <code>:massage:</code></td>
</tr>
<tr>
<td style="text-align:left">💇 <code>:haircut:</code></td>
<td style="text-align:left">💅 <code>:nail_care:</code></td>
<td style="text-align:left">👦 <code>:boy:</code></td>
</tr>
<tr>
<td style="text-align:left">👧 <code>:girl:</code></td>
<td style="text-align:left">👩 <code>:woman:</code></td>
<td style="text-align:left">👨 <code>:man:</code></td>
</tr>
<tr>
<td style="text-align:left">👶 <code>:baby:</code></td>
<td style="text-align:left">👵 <code>:older_woman:</code></td>
<td style="text-align:left">👴 <code>:older_man:</code></td>
</tr>
<tr>
<td style="text-align:left">:person_with_blond_hair: <code>:person_with_blond_hair:</code></td>
<td style="text-align:left">👲 <code>:man_with_gua_pi_mao:</code></td>
<td style="text-align:left">👳‍♂️ <code>:man_with_turban:</code></td>
</tr>
<tr>
<td style="text-align:left">👷 <code>:construction_worker:</code></td>
<td style="text-align:left">👮 <code>:cop:</code></td>
<td style="text-align:left">👼 <code>:angel:</code></td>
</tr>
<tr>
<td style="text-align:left">👸 <code>:princess:</code></td>
<td style="text-align:left">😺 <code>:smiley_cat:</code></td>
<td style="text-align:left">😸 <code>:smile_cat:</code></td>
</tr>
<tr>
<td style="text-align:left">😻 <code>:heart_eyes_cat:</code></td>
<td style="text-align:left">😽 <code>:kissing_cat:</code></td>
<td style="text-align:left">😼 <code>:smirk_cat:</code></td>
</tr>
<tr>
<td style="text-align:left">🙀 <code>:scream_cat:</code></td>
<td style="text-align:left">😿 <code>:crying_cat_face:</code></td>
<td style="text-align:left">😹 <code>:joy_cat:</code></td>
</tr>
<tr>
<td style="text-align:left">😾 <code>:pouting_cat:</code></td>
<td style="text-align:left">👹 <code>:japanese_ogre:</code></td>
<td style="text-align:left">👺 <code>:japanese_goblin:</code></td>
</tr>
<tr>
<td style="text-align:left">🙈 <code>:see_no_evil:</code></td>
<td style="text-align:left">🙉 <code>:hear_no_evil:</code></td>
<td style="text-align:left">🙊 <code>:speak_no_evil:</code></td>
</tr>
<tr>
<td style="text-align:left">💂‍♂️ <code>:guardsman:</code></td>
<td style="text-align:left">💀 <code>:skull:</code></td>
<td style="text-align:left">🐾 <code>:feet:</code></td>
</tr>
<tr>
<td style="text-align:left">👄 <code>:lips:</code></td>
<td style="text-align:left">💋 <code>:kiss:</code></td>
<td style="text-align:left">💧 <code>:droplet:</code></td>
</tr>
<tr>
<td style="text-align:left">👂 <code>:ear:</code></td>
<td style="text-align:left">👀 <code>:eyes:</code></td>
<td style="text-align:left">👃 <code>:nose:</code></td>
</tr>
<tr>
<td style="text-align:left">👅 <code>:tongue:</code></td>
<td style="text-align:left">💌 <code>:love_letter:</code></td>
<td style="text-align:left">👤 <code>:bust_in_silhouette:</code></td>
</tr>
<tr>
<td style="text-align:left">👥 <code>:busts_in_silhouette:</code></td>
<td style="text-align:left">💬 <code>:speech_balloon:</code></td>
<td style="text-align:left">💭 <code>:thought_balloon:</code></td>
</tr>
<tr>
<td style="text-align:left">:feelsgood: <code>:feelsgood:</code></td>
<td style="text-align:left">:finnadie: <code>:finnadie:</code></td>
<td style="text-align:left">:goberserk: <code>:goberserk:</code></td>
</tr>
<tr>
<td style="text-align:left">:godmode: <code>:godmode:</code></td>
<td style="text-align:left">:hurtrealbad: <code>:hurtrealbad:</code></td>
<td style="text-align:left">:rage1: <code>:rage1:</code></td>
</tr>
<tr>
<td style="text-align:left">:rage2: <code>:rage2:</code></td>
<td style="text-align:left">:rage3: <code>:rage3:</code></td>
<td style="text-align:left">:rage4: <code>:rage4:</code></td>
</tr>
<tr>
<td style="text-align:left">:suspect: <code>:suspect:</code></td>
<td style="text-align:left">:trollface: <code>:trollface:</code></td>
<td style="text-align:left"></td>
</tr>
</tbody>
</table>
<h2 id="自然"><a class="markdownIt-Anchor" href="#自然"></a> 自然</h2>
<table>
<thead>
<tr>
<th style="text-align:left">☀️ <code>:sunny:</code></th>
<th style="text-align:left">☔ <code>:umbrella:</code></th>
<th style="text-align:left">☁️ <code>:cloud:</code></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">❄️ <code>:snowflake:</code></td>
<td style="text-align:left">⛄ <code>:snowman:</code></td>
<td style="text-align:left">⚡ <code>:zap:</code></td>
</tr>
<tr>
<td style="text-align:left">🌀 <code>:cyclone:</code></td>
<td style="text-align:left">🌁 <code>:foggy:</code></td>
<td style="text-align:left">🌊 <code>:ocean:</code></td>
</tr>
<tr>
<td style="text-align:left">🐱 <code>:cat:</code></td>
<td style="text-align:left">🐶 <code>:dog:</code></td>
<td style="text-align:left">🐭 <code>:mouse:</code></td>
</tr>
<tr>
<td style="text-align:left">🐹 <code>:hamster:</code></td>
<td style="text-align:left">🐰 <code>:rabbit:</code></td>
<td style="text-align:left">🐺 <code>:wolf:</code></td>
</tr>
<tr>
<td style="text-align:left">🐸 <code>:frog:</code></td>
<td style="text-align:left">🐯 <code>:tiger:</code></td>
<td style="text-align:left">🐨 <code>:koala:</code></td>
</tr>
<tr>
<td style="text-align:left">🐻 <code>:bear:</code></td>
<td style="text-align:left">🐷 <code>:pig:</code></td>
<td style="text-align:left">🐽 <code>:pig_nose:</code></td>
</tr>
<tr>
<td style="text-align:left">🐮 <code>:cow:</code></td>
<td style="text-align:left">🐗 <code>:boar:</code></td>
<td style="text-align:left">🐵 <code>:monkey_face:</code></td>
</tr>
<tr>
<td style="text-align:left">🐒 <code>:monkey:</code></td>
<td style="text-align:left">🐴 <code>:horse:</code></td>
<td style="text-align:left">🐎 <code>:racehorse:</code></td>
</tr>
<tr>
<td style="text-align:left">🐫 <code>:camel:</code></td>
<td style="text-align:left">🐑 <code>:sheep:</code></td>
<td style="text-align:left">🐘 <code>:elephant:</code></td>
</tr>
<tr>
<td style="text-align:left">🐼 <code>:panda_face:</code></td>
<td style="text-align:left">🐍 <code>:snake:</code></td>
<td style="text-align:left">🐦 <code>:bird:</code></td>
</tr>
<tr>
<td style="text-align:left">🐤 <code>:baby_chick:</code></td>
<td style="text-align:left">🐥 <code>:hatched_chick:</code></td>
<td style="text-align:left">🐣 <code>:hatching_chick:</code></td>
</tr>
<tr>
<td style="text-align:left">🐔 <code>:chicken:</code></td>
<td style="text-align:left">🐧 <code>:penguin:</code></td>
<td style="text-align:left">🐢 <code>:turtle:</code></td>
</tr>
<tr>
<td style="text-align:left">🐛 <code>:bug:</code></td>
<td style="text-align:left">🐝 <code>:honeybee:</code></td>
<td style="text-align:left">🐜 <code>:ant:</code></td>
</tr>
<tr>
<td style="text-align:left">🪲 <code>:beetle:</code></td>
<td style="text-align:left">🐌 <code>:snail:</code></td>
<td style="text-align:left">🐙 <code>:octopus:</code></td>
</tr>
<tr>
<td style="text-align:left">🐠 <code>:tropical_fish:</code></td>
<td style="text-align:left">🐟 <code>:fish:</code></td>
<td style="text-align:left">🐳 <code>:whale:</code></td>
</tr>
<tr>
<td style="text-align:left">🐋 <code>:whale2:</code></td>
<td style="text-align:left">🐬 <code>:dolphin:</code></td>
<td style="text-align:left">🐄 <code>:cow2:</code></td>
</tr>
<tr>
<td style="text-align:left">🐏 <code>:ram:</code></td>
<td style="text-align:left">🐀 <code>:rat:</code></td>
<td style="text-align:left">🐃 <code>:water_buffalo:</code></td>
</tr>
<tr>
<td style="text-align:left">🐅 <code>:tiger2:</code></td>
<td style="text-align:left">🐇 <code>:rabbit2:</code></td>
<td style="text-align:left">🐉 <code>:dragon:</code></td>
</tr>
<tr>
<td style="text-align:left">🐐 <code>:goat:</code></td>
<td style="text-align:left">🐓 <code>:rooster:</code></td>
<td style="text-align:left">🐕 <code>:dog2:</code></td>
</tr>
<tr>
<td style="text-align:left">🐖 <code>:pig2:</code></td>
<td style="text-align:left">🐁 <code>:mouse2:</code></td>
<td style="text-align:left">🐂 <code>:ox:</code></td>
</tr>
<tr>
<td style="text-align:left">🐲 <code>:dragon_face:</code></td>
<td style="text-align:left">🐡 <code>:blowfish:</code></td>
<td style="text-align:left">🐊 <code>:crocodile:</code></td>
</tr>
<tr>
<td style="text-align:left">🐪 <code>:dromedary_camel:</code></td>
<td style="text-align:left">🐆 <code>:leopard:</code></td>
<td style="text-align:left">🐈 <code>:cat2:</code></td>
</tr>
<tr>
<td style="text-align:left">🐩 <code>:poodle:</code></td>
<td style="text-align:left">🐾 <code>:paw_prints:</code></td>
<td style="text-align:left">💐 <code>:bouquet:</code></td>
</tr>
<tr>
<td style="text-align:left">🌸 <code>:cherry_blossom:</code></td>
<td style="text-align:left">🌷 <code>:tulip:</code></td>
<td style="text-align:left">🍀 <code>:four_leaf_clover:</code></td>
</tr>
<tr>
<td style="text-align:left">🌹 <code>:rose:</code></td>
<td style="text-align:left">🌻 <code>:sunflower:</code></td>
<td style="text-align:left">🌺 <code>:hibiscus:</code></td>
</tr>
<tr>
<td style="text-align:left">🍁 <code>:maple_leaf:</code></td>
<td style="text-align:left">🍃 <code>:leaves:</code></td>
<td style="text-align:left">🍂 <code>:fallen_leaf:</code></td>
</tr>
<tr>
<td style="text-align:left">🌿 <code>:herb:</code></td>
<td style="text-align:left">🍄 <code>:mushroom:</code></td>
<td style="text-align:left">🌵 <code>:cactus:</code></td>
</tr>
<tr>
<td style="text-align:left">🌴 <code>:palm_tree:</code></td>
<td style="text-align:left">🌲 <code>:evergreen_tree:</code></td>
<td style="text-align:left">🌳 <code>:deciduous_tree:</code></td>
</tr>
<tr>
<td style="text-align:left">🌰 <code>:chestnut:</code></td>
<td style="text-align:left">🌱 <code>:seedling:</code></td>
<td style="text-align:left">🌼 <code>:blossom:</code></td>
</tr>
<tr>
<td style="text-align:left">🌾 <code>:ear_of_rice:</code></td>
<td style="text-align:left">🐚 <code>:shell:</code></td>
<td style="text-align:left">🌐 <code>:globe_with_meridians:</code></td>
</tr>
<tr>
<td style="text-align:left">🌞 <code>:sun_with_face:</code></td>
<td style="text-align:left">🌝 <code>:full_moon_with_face:</code></td>
<td style="text-align:left">🌚 <code>:new_moon_with_face:</code></td>
</tr>
<tr>
<td style="text-align:left">🌑 <code>:new_moon:</code></td>
<td style="text-align:left">🌒 <code>:waxing_crescent_moon:</code></td>
<td style="text-align:left">🌓 <code>:first_quarter_moon:</code></td>
</tr>
<tr>
<td style="text-align:left">🌔 <code>:waxing_gibbous_moon:</code></td>
<td style="text-align:left">🌕 <code>:full_moon:</code></td>
<td style="text-align:left">🌖 <code>:waning_gibbous_moon:</code></td>
</tr>
<tr>
<td style="text-align:left">🌗 <code>:last_quarter_moon:</code></td>
<td style="text-align:left">🌘 <code>:waning_crescent_moon:</code></td>
<td style="text-align:left">🌜 <code>:last_quarter_moon_with_face:</code></td>
</tr>
<tr>
<td style="text-align:left">🌛 <code>:first_quarter_moon_with_face:</code></td>
<td style="text-align:left">🌔 <code>:moon:</code></td>
<td style="text-align:left">🌍 <code>:earth_africa:</code></td>
</tr>
<tr>
<td style="text-align:left">🌎 <code>:earth_americas:</code></td>
<td style="text-align:left">🌏 <code>:earth_asia:</code></td>
<td style="text-align:left">🌋 <code>:volcano:</code></td>
</tr>
<tr>
<td style="text-align:left">🌌 <code>:milky_way:</code></td>
<td style="text-align:left">⛅ <code>:partly_sunny:</code></td>
<td style="text-align:left">:octocat: <code>:octocat:</code></td>
</tr>
<tr>
<td style="text-align:left">:squirrel: <code>:squirrel:</code></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
</tbody>
</table>
<h2 id="事物"><a class="markdownIt-Anchor" href="#事物"></a> 事物</h2>
<table>
<thead>
<tr>
<th style="text-align:left">🎍 <code>:bamboo:</code></th>
<th style="text-align:left">💝 <code>:gift_heart:</code></th>
<th style="text-align:left">🎎 <code>:dolls:</code></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">🎒 <code>:school_satchel:</code></td>
<td style="text-align:left">🎓 <code>:mortar_board:</code></td>
<td style="text-align:left">🎏 <code>:flags:</code></td>
</tr>
<tr>
<td style="text-align:left">🎆 <code>:fireworks:</code></td>
<td style="text-align:left">🎇 <code>:sparkler:</code></td>
<td style="text-align:left">🎐 <code>:wind_chime:</code></td>
</tr>
<tr>
<td style="text-align:left">🎑 <code>:rice_scene:</code></td>
<td style="text-align:left">🎃 <code>:jack_o_lantern:</code></td>
<td style="text-align:left">👻 <code>:ghost:</code></td>
</tr>
<tr>
<td style="text-align:left">🎅 <code>:santa:</code></td>
<td style="text-align:left">🎄 <code>:christmas_tree:</code></td>
<td style="text-align:left">🎁 <code>:gift:</code></td>
</tr>
<tr>
<td style="text-align:left">🔔 <code>:bell:</code></td>
<td style="text-align:left">🔕 <code>:no_bell:</code></td>
<td style="text-align:left">🎋 <code>:tanabata_tree:</code></td>
</tr>
<tr>
<td style="text-align:left">🎉 <code>:tada:</code></td>
<td style="text-align:left">🎊 <code>:confetti_ball:</code></td>
<td style="text-align:left">🎈 <code>:balloon:</code></td>
</tr>
<tr>
<td style="text-align:left">🔮 <code>:crystal_ball:</code></td>
<td style="text-align:left">💿 <code>:cd:</code></td>
<td style="text-align:left">📀 <code>:dvd:</code></td>
</tr>
<tr>
<td style="text-align:left">💾 <code>:floppy_disk:</code></td>
<td style="text-align:left">📷 <code>:camera:</code></td>
<td style="text-align:left">📹 <code>:video_camera:</code></td>
</tr>
<tr>
<td style="text-align:left">🎥 <code>:movie_camera:</code></td>
<td style="text-align:left">💻 <code>:computer:</code></td>
<td style="text-align:left">📺 <code>:tv:</code></td>
</tr>
<tr>
<td style="text-align:left">📱 <code>:iphone:</code></td>
<td style="text-align:left">☎️ <code>:phone:</code></td>
<td style="text-align:left">☎️ <code>:telephone:</code></td>
</tr>
<tr>
<td style="text-align:left">📞 <code>:telephone_receiver:</code></td>
<td style="text-align:left">📟 <code>:pager:</code></td>
<td style="text-align:left">📠 <code>:fax:</code></td>
</tr>
<tr>
<td style="text-align:left">💽 <code>:minidisc:</code></td>
<td style="text-align:left">📼 <code>:vhs:</code></td>
<td style="text-align:left">🔉 <code>:sound:</code></td>
</tr>
<tr>
<td style="text-align:left">🔈 <code>:speaker:</code></td>
<td style="text-align:left">🔇 <code>:mute:</code></td>
<td style="text-align:left">📢 <code>:loudspeaker:</code></td>
</tr>
<tr>
<td style="text-align:left">📣 <code>:mega:</code></td>
<td style="text-align:left">⌛ <code>:hourglass:</code></td>
<td style="text-align:left">⏳ <code>:hourglass_flowing_sand:</code></td>
</tr>
<tr>
<td style="text-align:left">⏰ <code>:alarm_clock:</code></td>
<td style="text-align:left">⌚ <code>:watch:</code></td>
<td style="text-align:left">📻 <code>:radio:</code></td>
</tr>
<tr>
<td style="text-align:left">📡 <code>:satellite:</code></td>
<td style="text-align:left">➿ <code>:loop:</code></td>
<td style="text-align:left">🔍 <code>:mag:</code></td>
</tr>
<tr>
<td style="text-align:left">🔎 <code>:mag_right:</code></td>
<td style="text-align:left">🔓 <code>:unlock:</code></td>
<td style="text-align:left">🔒 <code>:lock:</code></td>
</tr>
<tr>
<td style="text-align:left">🔏 <code>:lock_with_ink_pen:</code></td>
<td style="text-align:left">🔐 <code>:closed_lock_with_key:</code></td>
<td style="text-align:left">🔑 <code>:key:</code></td>
</tr>
<tr>
<td style="text-align:left">💡 <code>:bulb:</code></td>
<td style="text-align:left">🔦 <code>:flashlight:</code></td>
<td style="text-align:left">🔆 <code>:high_brightness:</code></td>
</tr>
<tr>
<td style="text-align:left">🔅 <code>:low_brightness:</code></td>
<td style="text-align:left">🔌 <code>:electric_plug:</code></td>
<td style="text-align:left">🔋 <code>:battery:</code></td>
</tr>
<tr>
<td style="text-align:left">📲 <code>:calling:</code></td>
<td style="text-align:left">📧 <code>:email:</code></td>
<td style="text-align:left">📫 <code>:mailbox:</code></td>
</tr>
<tr>
<td style="text-align:left">📮 <code>:postbox:</code></td>
<td style="text-align:left">🛀 <code>:bath:</code></td>
<td style="text-align:left">🛁 <code>:bathtub:</code></td>
</tr>
<tr>
<td style="text-align:left">🚿 <code>:shower:</code></td>
<td style="text-align:left">🚽 <code>:toilet:</code></td>
<td style="text-align:left">🔧 <code>:wrench:</code></td>
</tr>
<tr>
<td style="text-align:left">🔩 <code>:nut_and_bolt:</code></td>
<td style="text-align:left">🔨 <code>:hammer:</code></td>
<td style="text-align:left">💺 <code>:seat:</code></td>
</tr>
<tr>
<td style="text-align:left">💰 <code>:moneybag:</code></td>
<td style="text-align:left">💴 <code>:yen:</code></td>
<td style="text-align:left">💵 <code>:dollar:</code></td>
</tr>
<tr>
<td style="text-align:left">💷 <code>:pound:</code></td>
<td style="text-align:left">💶 <code>:euro:</code></td>
<td style="text-align:left">💳 <code>:credit_card:</code></td>
</tr>
<tr>
<td style="text-align:left">💸 <code>:money_with_wings:</code></td>
<td style="text-align:left">📧 <code>:e-mail:</code></td>
<td style="text-align:left">📥 <code>:inbox_tray:</code></td>
</tr>
<tr>
<td style="text-align:left">📤 <code>:outbox_tray:</code></td>
<td style="text-align:left">✉️ <code>:envelope:</code></td>
<td style="text-align:left">📨 <code>:incoming_envelope:</code></td>
</tr>
<tr>
<td style="text-align:left">📯 <code>:postal_horn:</code></td>
<td style="text-align:left">📪 <code>:mailbox_closed:</code></td>
<td style="text-align:left">📬 <code>:mailbox_with_mail:</code></td>
</tr>
<tr>
<td style="text-align:left">📭 <code>:mailbox_with_no_mail:</code></td>
<td style="text-align:left">🚪 <code>:door:</code></td>
<td style="text-align:left">🚬 <code>:smoking:</code></td>
</tr>
<tr>
<td style="text-align:left">💣 <code>:bomb:</code></td>
<td style="text-align:left">🔫 <code>:gun:</code></td>
<td style="text-align:left">🔪 <code>:hocho:</code></td>
</tr>
<tr>
<td style="text-align:left">💊 <code>:pill:</code></td>
<td style="text-align:left">💉 <code>:syringe:</code></td>
<td style="text-align:left">📄 <code>:page_facing_up:</code></td>
</tr>
<tr>
<td style="text-align:left">📃 <code>:page_with_curl:</code></td>
<td style="text-align:left">📑 <code>:bookmark_tabs:</code></td>
<td style="text-align:left">📊 <code>:bar_chart:</code></td>
</tr>
<tr>
<td style="text-align:left">📈 <code>:chart_with_upwards_trend:</code></td>
<td style="text-align:left">📉 <code>:chart_with_downwards_trend:</code></td>
<td style="text-align:left">📜 <code>:scroll:</code></td>
</tr>
<tr>
<td style="text-align:left">📋 <code>:clipboard:</code></td>
<td style="text-align:left">📆 <code>:calendar:</code></td>
<td style="text-align:left">📅 <code>:date:</code></td>
</tr>
<tr>
<td style="text-align:left">📇 <code>:card_index:</code></td>
<td style="text-align:left">📁 <code>:file_folder:</code></td>
<td style="text-align:left">📂 <code>:open_file_folder:</code></td>
</tr>
<tr>
<td style="text-align:left">✂️ <code>:scissors:</code></td>
<td style="text-align:left">📌 <code>:pushpin:</code></td>
<td style="text-align:left">📎 <code>:paperclip:</code></td>
</tr>
<tr>
<td style="text-align:left">✒️ <code>:black_nib:</code></td>
<td style="text-align:left">✏️ <code>:pencil2:</code></td>
<td style="text-align:left">📏 <code>:straight_ruler:</code></td>
</tr>
<tr>
<td style="text-align:left">📐 <code>:triangular_ruler:</code></td>
<td style="text-align:left">📕 <code>:closed_book:</code></td>
<td style="text-align:left">📗 <code>:green_book:</code></td>
</tr>
<tr>
<td style="text-align:left">📘 <code>:blue_book:</code></td>
<td style="text-align:left">📙 <code>:orange_book:</code></td>
<td style="text-align:left">📓 <code>:notebook:</code></td>
</tr>
<tr>
<td style="text-align:left">📔 <code>:notebook_with_decorative_cover:</code></td>
<td style="text-align:left">📒 <code>:ledger:</code></td>
<td style="text-align:left">📚 <code>:books:</code></td>
</tr>
<tr>
<td style="text-align:left">🔖 <code>:bookmark:</code></td>
<td style="text-align:left">📛 <code>:name_badge:</code></td>
<td style="text-align:left">🔬 <code>:microscope:</code></td>
</tr>
<tr>
<td style="text-align:left">🔭 <code>:telescope:</code></td>
<td style="text-align:left">📰 <code>:newspaper:</code></td>
<td style="text-align:left">🏈 <code>:football:</code></td>
</tr>
<tr>
<td style="text-align:left">🏀 <code>:basketball:</code></td>
<td style="text-align:left">⚽ <code>:soccer:</code></td>
<td style="text-align:left">⚾ <code>:baseball:</code></td>
</tr>
<tr>
<td style="text-align:left">🎾 <code>:tennis:</code></td>
<td style="text-align:left">🎱 <code>:8ball:</code></td>
<td style="text-align:left">🏉 <code>:rugby_football:</code></td>
</tr>
<tr>
<td style="text-align:left">🎳 <code>:bowling:</code></td>
<td style="text-align:left">⛳ <code>:golf:</code></td>
<td style="text-align:left">🚵 <code>:mountain_bicyclist:</code></td>
</tr>
<tr>
<td style="text-align:left">🚴 <code>:bicyclist:</code></td>
<td style="text-align:left">🏇 <code>:horse_racing:</code></td>
<td style="text-align:left">🏂 <code>:snowboarder:</code></td>
</tr>
<tr>
<td style="text-align:left">🏊 <code>:swimmer:</code></td>
<td style="text-align:left">🏄 <code>:surfer:</code></td>
<td style="text-align:left">🎿 <code>:ski:</code></td>
</tr>
<tr>
<td style="text-align:left">♠️ <code>:spades:</code></td>
<td style="text-align:left">♥️ <code>:hearts:</code></td>
<td style="text-align:left">♣️ <code>:clubs:</code></td>
</tr>
<tr>
<td style="text-align:left">♦️ <code>:diamonds:</code></td>
<td style="text-align:left">💎 <code>:gem:</code></td>
<td style="text-align:left">💍 <code>:ring:</code></td>
</tr>
<tr>
<td style="text-align:left">🏆 <code>:trophy:</code></td>
<td style="text-align:left">🎼 <code>:musical_score:</code></td>
<td style="text-align:left">🎹 <code>:musical_keyboard:</code></td>
</tr>
<tr>
<td style="text-align:left">🎻 <code>:violin:</code></td>
<td style="text-align:left">👾 <code>:space_invader:</code></td>
<td style="text-align:left">🎮 <code>:video_game:</code></td>
</tr>
<tr>
<td style="text-align:left">🃏 <code>:black_joker:</code></td>
<td style="text-align:left">🎴 <code>:flower_playing_cards:</code></td>
<td style="text-align:left">🎲 <code>:game_die:</code></td>
</tr>
<tr>
<td style="text-align:left">🎯 <code>:dart:</code></td>
<td style="text-align:left">🀄 <code>:mahjong:</code></td>
<td style="text-align:left">🎬 <code>:clapper:</code></td>
</tr>
<tr>
<td style="text-align:left">📝 <code>:memo:</code></td>
<td style="text-align:left">📝 <code>:pencil:</code></td>
<td style="text-align:left">📖 <code>:book:</code></td>
</tr>
<tr>
<td style="text-align:left">🎨 <code>:art:</code></td>
<td style="text-align:left">🎤 <code>:microphone:</code></td>
<td style="text-align:left">🎧 <code>:headphones:</code></td>
</tr>
<tr>
<td style="text-align:left">🎺 <code>:trumpet:</code></td>
<td style="text-align:left">🎷 <code>:saxophone:</code></td>
<td style="text-align:left">🎸 <code>:guitar:</code></td>
</tr>
<tr>
<td style="text-align:left">👞 <code>:shoe:</code></td>
<td style="text-align:left">👡 <code>:sandal:</code></td>
<td style="text-align:left">👠 <code>:high_heel:</code></td>
</tr>
<tr>
<td style="text-align:left">💄 <code>:lipstick:</code></td>
<td style="text-align:left">👢 <code>:boot:</code></td>
<td style="text-align:left">👕 <code>:shirt:</code></td>
</tr>
<tr>
<td style="text-align:left">👕 <code>:tshirt:</code></td>
<td style="text-align:left">👔 <code>:necktie:</code></td>
<td style="text-align:left">👚 <code>:womans_clothes:</code></td>
</tr>
<tr>
<td style="text-align:left">👗 <code>:dress:</code></td>
<td style="text-align:left">🎽 <code>:running_shirt_with_sash:</code></td>
<td style="text-align:left">👖 <code>:jeans:</code></td>
</tr>
<tr>
<td style="text-align:left">👘 <code>:kimono:</code></td>
<td style="text-align:left">👙 <code>:bikini:</code></td>
<td style="text-align:left">🎀 <code>:ribbon:</code></td>
</tr>
<tr>
<td style="text-align:left">🎩 <code>:tophat:</code></td>
<td style="text-align:left">👑 <code>:crown:</code></td>
<td style="text-align:left">👒 <code>:womans_hat:</code></td>
</tr>
<tr>
<td style="text-align:left">👞 <code>:mans_shoe:</code></td>
<td style="text-align:left">🌂 <code>:closed_umbrella:</code></td>
<td style="text-align:left">💼 <code>:briefcase:</code></td>
</tr>
<tr>
<td style="text-align:left">👜 <code>:handbag:</code></td>
<td style="text-align:left">👝 <code>:pouch:</code></td>
<td style="text-align:left">👛 <code>:purse:</code></td>
</tr>
<tr>
<td style="text-align:left">👓 <code>:eyeglasses:</code></td>
<td style="text-align:left">🎣 <code>:fishing_pole_and_fish:</code></td>
<td style="text-align:left">☕ <code>:coffee:</code></td>
</tr>
<tr>
<td style="text-align:left">🍵 <code>:tea:</code></td>
<td style="text-align:left">🍶 <code>:sake:</code></td>
<td style="text-align:left">🍼 <code>:baby_bottle:</code></td>
</tr>
<tr>
<td style="text-align:left">🍺 <code>:beer:</code></td>
<td style="text-align:left">🍻 <code>:beers:</code></td>
<td style="text-align:left">🍸 <code>:cocktail:</code></td>
</tr>
<tr>
<td style="text-align:left">🍹 <code>:tropical_drink:</code></td>
<td style="text-align:left">🍷 <code>:wine_glass:</code></td>
<td style="text-align:left">🍴 <code>:fork_and_knife:</code></td>
</tr>
<tr>
<td style="text-align:left">🍕 <code>:pizza:</code></td>
<td style="text-align:left">🍔 <code>:hamburger:</code></td>
<td style="text-align:left">🍟 <code>:fries:</code></td>
</tr>
<tr>
<td style="text-align:left">🍗 <code>:poultry_leg:</code></td>
<td style="text-align:left">🍖 <code>:meat_on_bone:</code></td>
<td style="text-align:left">🍝 <code>:spaghetti:</code></td>
</tr>
<tr>
<td style="text-align:left">🍛 <code>:curry:</code></td>
<td style="text-align:left">🍤 <code>:fried_shrimp:</code></td>
<td style="text-align:left">🍱 <code>:bento:</code></td>
</tr>
<tr>
<td style="text-align:left">🍣 <code>:sushi:</code></td>
<td style="text-align:left">🍥 <code>:fish_cake:</code></td>
<td style="text-align:left">🍙 <code>:rice_ball:</code></td>
</tr>
<tr>
<td style="text-align:left">🍘 <code>:rice_cracker:</code></td>
<td style="text-align:left">🍚 <code>:rice:</code></td>
<td style="text-align:left">🍜 <code>:ramen:</code></td>
</tr>
<tr>
<td style="text-align:left">🍲 <code>:stew:</code></td>
<td style="text-align:left">🍢 <code>:oden:</code></td>
<td style="text-align:left">🍡 <code>:dango:</code></td>
</tr>
<tr>
<td style="text-align:left">🥚 <code>:egg:</code></td>
<td style="text-align:left">🍞 <code>:bread:</code></td>
<td style="text-align:left">🍩 <code>:doughnut:</code></td>
</tr>
<tr>
<td style="text-align:left">🍮 <code>:custard:</code></td>
<td style="text-align:left">🍦 <code>:icecream:</code></td>
<td style="text-align:left">🍨 <code>:ice_cream:</code></td>
</tr>
<tr>
<td style="text-align:left">🍧 <code>:shaved_ice:</code></td>
<td style="text-align:left">🎂 <code>:birthday:</code></td>
<td style="text-align:left">🍰 <code>:cake:</code></td>
</tr>
<tr>
<td style="text-align:left">🍪 <code>:cookie:</code></td>
<td style="text-align:left">🍫 <code>:chocolate_bar:</code></td>
<td style="text-align:left">🍬 <code>:candy:</code></td>
</tr>
<tr>
<td style="text-align:left">🍭 <code>:lollipop:</code></td>
<td style="text-align:left">🍯 <code>:honey_pot:</code></td>
<td style="text-align:left">🍎 <code>:apple:</code></td>
</tr>
<tr>
<td style="text-align:left">🍏 <code>:green_apple:</code></td>
<td style="text-align:left">🍊 <code>:tangerine:</code></td>
<td style="text-align:left">🍋 <code>:lemon:</code></td>
</tr>
<tr>
<td style="text-align:left">🍒 <code>:cherries:</code></td>
<td style="text-align:left">🍇 <code>:grapes:</code></td>
<td style="text-align:left">🍉 <code>:watermelon:</code></td>
</tr>
<tr>
<td style="text-align:left">🍓 <code>:strawberry:</code></td>
<td style="text-align:left">🍑 <code>:peach:</code></td>
<td style="text-align:left">🍈 <code>:melon:</code></td>
</tr>
<tr>
<td style="text-align:left">🍌 <code>:banana:</code></td>
<td style="text-align:left">🍐 <code>:pear:</code></td>
<td style="text-align:left">🍍 <code>:pineapple:</code></td>
</tr>
<tr>
<td style="text-align:left">🍠 <code>:sweet_potato:</code></td>
<td style="text-align:left">🍆 <code>:eggplant:</code></td>
<td style="text-align:left">🍅 <code>:tomato:</code></td>
</tr>
<tr>
<td style="text-align:left">🌽 <code>:corn:</code></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
</tbody>
</table>
<h2 id="地点"><a class="markdownIt-Anchor" href="#地点"></a> 地点</h2>
<table>
<thead>
<tr>
<th style="text-align:left">🏠 <code>:house:</code></th>
<th style="text-align:left">🏡 <code>:house_with_garden:</code></th>
<th style="text-align:left">🏫 <code>:school:</code></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">🏢 <code>:office:</code></td>
<td style="text-align:left">🏣 <code>:post_office:</code></td>
<td style="text-align:left">🏥 <code>:hospital:</code></td>
</tr>
<tr>
<td style="text-align:left">🏦 <code>:bank:</code></td>
<td style="text-align:left">🏪 <code>:convenience_store:</code></td>
<td style="text-align:left">🏩 <code>:love_hotel:</code></td>
</tr>
<tr>
<td style="text-align:left">🏨 <code>:hotel:</code></td>
<td style="text-align:left">💒 <code>:wedding:</code></td>
<td style="text-align:left">⛪ <code>:church:</code></td>
</tr>
<tr>
<td style="text-align:left">🏬 <code>:department_store:</code></td>
<td style="text-align:left">🏤 <code>:european_post_office:</code></td>
<td style="text-align:left">🌇 <code>:city_sunrise:</code></td>
</tr>
<tr>
<td style="text-align:left">🌆 <code>:city_sunset:</code></td>
<td style="text-align:left">🏯 <code>:japanese_castle:</code></td>
<td style="text-align:left">🏰 <code>:european_castle:</code></td>
</tr>
<tr>
<td style="text-align:left">⛺ <code>:tent:</code></td>
<td style="text-align:left">🏭 <code>:factory:</code></td>
<td style="text-align:left">🗼 <code>:tokyo_tower:</code></td>
</tr>
<tr>
<td style="text-align:left">🗾 <code>:japan:</code></td>
<td style="text-align:left">🗻 <code>:mount_fuji:</code></td>
<td style="text-align:left">🌄 <code>:sunrise_over_mountains:</code></td>
</tr>
<tr>
<td style="text-align:left">🌅 <code>:sunrise:</code></td>
<td style="text-align:left">🌠 <code>:stars:</code></td>
<td style="text-align:left">🗽 <code>:statue_of_liberty:</code></td>
</tr>
<tr>
<td style="text-align:left">🌉 <code>:bridge_at_night:</code></td>
<td style="text-align:left">🎠 <code>:carousel_horse:</code></td>
<td style="text-align:left">🌈 <code>:rainbow:</code></td>
</tr>
<tr>
<td style="text-align:left">🎡 <code>:ferris_wheel:</code></td>
<td style="text-align:left">⛲ <code>:fountain:</code></td>
<td style="text-align:left">🎢 <code>:roller_coaster:</code></td>
</tr>
<tr>
<td style="text-align:left">🚢 <code>:ship:</code></td>
<td style="text-align:left">🚤 <code>:speedboat:</code></td>
<td style="text-align:left">⛵ <code>:boat:</code></td>
</tr>
<tr>
<td style="text-align:left">⛵ <code>:sailboat:</code></td>
<td style="text-align:left">🚣 <code>:rowboat:</code></td>
<td style="text-align:left">⚓ <code>:anchor:</code></td>
</tr>
<tr>
<td style="text-align:left">🚀 <code>:rocket:</code></td>
<td style="text-align:left">✈️ <code>:airplane:</code></td>
<td style="text-align:left">🚁 <code>:helicopter:</code></td>
</tr>
<tr>
<td style="text-align:left">🚂 <code>:steam_locomotive:</code></td>
<td style="text-align:left">🚊 <code>:tram:</code></td>
<td style="text-align:left">🚞 <code>:mountain_railway:</code></td>
</tr>
<tr>
<td style="text-align:left">🚲 <code>:bike:</code></td>
<td style="text-align:left">🚡 <code>:aerial_tramway:</code></td>
<td style="text-align:left">🚟 <code>:suspension_railway:</code></td>
</tr>
<tr>
<td style="text-align:left">🚠 <code>:mountain_cableway:</code></td>
<td style="text-align:left">🚜 <code>:tractor:</code></td>
<td style="text-align:left">🚙 <code>:blue_car:</code></td>
</tr>
<tr>
<td style="text-align:left">🚘 <code>:oncoming_automobile:</code></td>
<td style="text-align:left">🚗 <code>:car:</code></td>
<td style="text-align:left">🚗 <code>:red_car:</code></td>
</tr>
<tr>
<td style="text-align:left">🚕 <code>:taxi:</code></td>
<td style="text-align:left">🚖 <code>:oncoming_taxi:</code></td>
<td style="text-align:left">🚛 <code>:articulated_lorry:</code></td>
</tr>
<tr>
<td style="text-align:left">🚌 <code>:bus:</code></td>
<td style="text-align:left">🚍 <code>:oncoming_bus:</code></td>
<td style="text-align:left">🚨 <code>:rotating_light:</code></td>
</tr>
<tr>
<td style="text-align:left">🚓 <code>:police_car:</code></td>
<td style="text-align:left">🚔 <code>:oncoming_police_car:</code></td>
<td style="text-align:left">🚒 <code>:fire_engine:</code></td>
</tr>
<tr>
<td style="text-align:left">🚑 <code>:ambulance:</code></td>
<td style="text-align:left">🚐 <code>:minibus:</code></td>
<td style="text-align:left">🚚 <code>:truck:</code></td>
</tr>
<tr>
<td style="text-align:left">🚋 <code>:train:</code></td>
<td style="text-align:left">🚉 <code>:station:</code></td>
<td style="text-align:left">🚆 <code>:train2:</code></td>
</tr>
<tr>
<td style="text-align:left">🚅 <code>:bullettrain_front:</code></td>
<td style="text-align:left">🚄 <code>:bullettrain_side:</code></td>
<td style="text-align:left">🚈 <code>:light_rail:</code></td>
</tr>
<tr>
<td style="text-align:left">🚝 <code>:monorail:</code></td>
<td style="text-align:left">🚃 <code>:railway_car:</code></td>
<td style="text-align:left">🚎 <code>:trolleybus:</code></td>
</tr>
<tr>
<td style="text-align:left">🎫 <code>:ticket:</code></td>
<td style="text-align:left">⛽ <code>:fuelpump:</code></td>
<td style="text-align:left">🚦 <code>:vertical_traffic_light:</code></td>
</tr>
<tr>
<td style="text-align:left">🚥 <code>:traffic_light:</code></td>
<td style="text-align:left">⚠️ <code>:warning:</code></td>
<td style="text-align:left">🚧 <code>:construction:</code></td>
</tr>
<tr>
<td style="text-align:left">🔰 <code>:beginner:</code></td>
<td style="text-align:left">🏧 <code>:atm:</code></td>
<td style="text-align:left">🎰 <code>:slot_machine:</code></td>
</tr>
<tr>
<td style="text-align:left">🚏 <code>:busstop:</code></td>
<td style="text-align:left">💈 <code>:barber:</code></td>
<td style="text-align:left">♨️ <code>:hotsprings:</code></td>
</tr>
<tr>
<td style="text-align:left">🏁 <code>:checkered_flag:</code></td>
<td style="text-align:left">🎌 <code>:crossed_flags:</code></td>
<td style="text-align:left">🏮 <code>:izakaya_lantern:</code></td>
</tr>
<tr>
<td style="text-align:left">🗿 <code>:moyai:</code></td>
<td style="text-align:left">🎪 <code>:circus_tent:</code></td>
<td style="text-align:left">🎭 <code>:performing_arts:</code></td>
</tr>
<tr>
<td style="text-align:left">📍 <code>:round_pushpin:</code></td>
<td style="text-align:left">🚩 <code>:triangular_flag_on_post:</code></td>
<td style="text-align:left">🇯🇵 <code>:jp:</code></td>
</tr>
<tr>
<td style="text-align:left">🇰🇷 <code>:kr:</code></td>
<td style="text-align:left">🇨🇳 <code>:cn:</code></td>
<td style="text-align:left">🇺🇸 <code>:us:</code></td>
</tr>
<tr>
<td style="text-align:left">🇫🇷 <code>:fr:</code></td>
<td style="text-align:left">🇪🇸 <code>:es:</code></td>
<td style="text-align:left">🇮🇹 <code>:it:</code></td>
</tr>
<tr>
<td style="text-align:left">🇷🇺 <code>:ru:</code></td>
<td style="text-align:left">🇬🇧 <code>:gb:</code></td>
<td style="text-align:left">🇬🇧 <code>:uk:</code></td>
</tr>
<tr>
<td style="text-align:left">🇩🇪 <code>:de:</code></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
</tbody>
</table>
<h2 id="符号"><a class="markdownIt-Anchor" href="#符号"></a> 符号</h2>
<table>
<thead>
<tr>
<th style="text-align:left">1️⃣ <code>:one:</code></th>
<th style="text-align:left">2️⃣ <code>:two:</code></th>
<th style="text-align:left">3️⃣ <code>:three:</code></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">4️⃣ <code>:four:</code></td>
<td style="text-align:left">5️⃣ <code>:five:</code></td>
<td style="text-align:left">6️⃣ <code>:six:</code></td>
</tr>
<tr>
<td style="text-align:left">7️⃣ <code>:seven:</code></td>
<td style="text-align:left">8️⃣ <code>:eight:</code></td>
<td style="text-align:left">9️⃣ <code>:nine:</code></td>
</tr>
<tr>
<td style="text-align:left">🔟 <code>:keycap_ten:</code></td>
<td style="text-align:left">🔢 <code>:1234:</code></td>
<td style="text-align:left">0️⃣ <code>:zero:</code></td>
</tr>
<tr>
<td style="text-align:left">#️⃣ <code>:hash:</code></td>
<td style="text-align:left">🔣 <code>:symbols:</code></td>
<td style="text-align:left">◀️ <code>:arrow_backward:</code></td>
</tr>
<tr>
<td style="text-align:left">⬇️ <code>:arrow_down:</code></td>
<td style="text-align:left">▶️ <code>:arrow_forward:</code></td>
<td style="text-align:left">⬅️ <code>:arrow_left:</code></td>
</tr>
<tr>
<td style="text-align:left">🔠 <code>:capital_abcd:</code></td>
<td style="text-align:left">🔡 <code>:abcd:</code></td>
<td style="text-align:left">🔤 <code>:abc:</code></td>
</tr>
<tr>
<td style="text-align:left">↙️ <code>:arrow_lower_left:</code></td>
<td style="text-align:left">↘️ <code>:arrow_lower_right:</code></td>
<td style="text-align:left">➡️ <code>:arrow_right:</code></td>
</tr>
<tr>
<td style="text-align:left">⬆️ <code>:arrow_up:</code></td>
<td style="text-align:left">↖️ <code>:arrow_upper_left:</code></td>
<td style="text-align:left">↗️ <code>:arrow_upper_right:</code></td>
</tr>
<tr>
<td style="text-align:left">⏬ <code>:arrow_double_down:</code></td>
<td style="text-align:left">⏫ <code>:arrow_double_up:</code></td>
<td style="text-align:left">🔽 <code>:arrow_down_small:</code></td>
</tr>
<tr>
<td style="text-align:left">⤵️ <code>:arrow_heading_down:</code></td>
<td style="text-align:left">⤴️ <code>:arrow_heading_up:</code></td>
<td style="text-align:left">↩️ <code>:leftwards_arrow_with_hook:</code></td>
</tr>
<tr>
<td style="text-align:left">↪️ <code>:arrow_right_hook:</code></td>
<td style="text-align:left">↔️ <code>:left_right_arrow:</code></td>
<td style="text-align:left">↕️ <code>:arrow_up_down:</code></td>
</tr>
<tr>
<td style="text-align:left">🔼 <code>:arrow_up_small:</code></td>
<td style="text-align:left">🔃 <code>:arrows_clockwise:</code></td>
<td style="text-align:left">🔄 <code>:arrows_counterclockwise:</code></td>
</tr>
<tr>
<td style="text-align:left">⏪ <code>:rewind:</code></td>
<td style="text-align:left">⏩ <code>:fast_forward:</code></td>
<td style="text-align:left">ℹ️ <code>:information_source:</code></td>
</tr>
<tr>
<td style="text-align:left">🆗 <code>:ok:</code></td>
<td style="text-align:left">🔀 <code>:twisted_rightwards_arrows:</code></td>
<td style="text-align:left">🔁 <code>:repeat:</code></td>
</tr>
<tr>
<td style="text-align:left">🔂 <code>:repeat_one:</code></td>
<td style="text-align:left">🆕 <code>:new:</code></td>
<td style="text-align:left">🔝 <code>:top:</code></td>
</tr>
<tr>
<td style="text-align:left">🆙 <code>:up:</code></td>
<td style="text-align:left">🆒 <code>:cool:</code></td>
<td style="text-align:left">🆓 <code>:free:</code></td>
</tr>
<tr>
<td style="text-align:left">🆖 <code>:ng:</code></td>
<td style="text-align:left">🎦 <code>:cinema:</code></td>
<td style="text-align:left">🈁 <code>:koko:</code></td>
</tr>
<tr>
<td style="text-align:left">📶 <code>:signal_strength:</code></td>
<td style="text-align:left">:u5272: <code>:u5272:</code></td>
<td style="text-align:left">:u5408: <code>:u5408:</code></td>
</tr>
<tr>
<td style="text-align:left">:u55b6: <code>:u55b6:</code></td>
<td style="text-align:left">:u6307: <code>:u6307:</code></td>
<td style="text-align:left">:u6708: <code>:u6708:</code></td>
</tr>
<tr>
<td style="text-align:left">:u6709: <code>:u6709:</code></td>
<td style="text-align:left">🈵 <code>:u6e80:</code></td>
<td style="text-align:left">:u7121: <code>:u7121:</code></td>
</tr>
<tr>
<td style="text-align:left">:u7533: <code>:u7533:</code></td>
<td style="text-align:left">:u7a7a: <code>:u7a7a:</code></td>
<td style="text-align:left">:u7981: <code>:u7981:</code></td>
</tr>
<tr>
<td style="text-align:left">🈂️ <code>:sa:</code></td>
<td style="text-align:left">🚻 <code>:restroom:</code></td>
<td style="text-align:left">🚹 <code>:mens:</code></td>
</tr>
<tr>
<td style="text-align:left">🚺 <code>:womens:</code></td>
<td style="text-align:left">🚼 <code>:baby_symbol:</code></td>
<td style="text-align:left">🚭 <code>:no_smoking:</code></td>
</tr>
<tr>
<td style="text-align:left">🅿️ <code>:parking:</code></td>
<td style="text-align:left">♿ <code>:wheelchair:</code></td>
<td style="text-align:left">🚇 <code>:metro:</code></td>
</tr>
<tr>
<td style="text-align:left">🛄 <code>:baggage_claim:</code></td>
<td style="text-align:left">🉑 <code>:accept:</code></td>
<td style="text-align:left">🚾 <code>:wc:</code></td>
</tr>
<tr>
<td style="text-align:left">🚰 <code>:potable_water:</code></td>
<td style="text-align:left">🚮 <code>:put_litter_in_its_place:</code></td>
<td style="text-align:left">㊙️ <code>:secret:</code></td>
</tr>
<tr>
<td style="text-align:left">㊗️ <code>:congratulations:</code></td>
<td style="text-align:left">Ⓜ️ <code>:m:</code></td>
<td style="text-align:left">🛂 <code>:passport_control:</code></td>
</tr>
<tr>
<td style="text-align:left">🛅 <code>:left_luggage:</code></td>
<td style="text-align:left">🛃 <code>:customs:</code></td>
<td style="text-align:left">🉐 <code>:ideograph_advantage:</code></td>
</tr>
<tr>
<td style="text-align:left">🆑 <code>:cl:</code></td>
<td style="text-align:left">🆘 <code>:sos:</code></td>
<td style="text-align:left">🆔 <code>:id:</code></td>
</tr>
<tr>
<td style="text-align:left">🚫 <code>:no_entry_sign:</code></td>
<td style="text-align:left">🔞 <code>:underage:</code></td>
<td style="text-align:left">📵 <code>:no_mobile_phones:</code></td>
</tr>
<tr>
<td style="text-align:left">🚯 <code>:do_not_litter:</code></td>
<td style="text-align:left">🚱 <code>:non-potable_water:</code></td>
<td style="text-align:left">🚳 <code>:no_bicycles:</code></td>
</tr>
<tr>
<td style="text-align:left">🚷 <code>:no_pedestrians:</code></td>
<td style="text-align:left">🚸 <code>:children_crossing:</code></td>
<td style="text-align:left">⛔ <code>:no_entry:</code></td>
</tr>
<tr>
<td style="text-align:left">✳️ <code>:eight_spoked_asterisk:</code></td>
<td style="text-align:left">✴️ <code>:eight_pointed_black_star:</code></td>
<td style="text-align:left">💟 <code>:heart_decoration:</code></td>
</tr>
<tr>
<td style="text-align:left">🆚 <code>:vs:</code></td>
<td style="text-align:left">📳 <code>:vibration_mode:</code></td>
<td style="text-align:left">📴 <code>:mobile_phone_off:</code></td>
</tr>
<tr>
<td style="text-align:left">💹 <code>:chart:</code></td>
<td style="text-align:left">💱 <code>:currency_exchange:</code></td>
<td style="text-align:left">♈ <code>:aries:</code></td>
</tr>
<tr>
<td style="text-align:left">♉ <code>:taurus:</code></td>
<td style="text-align:left">♊ <code>:gemini:</code></td>
<td style="text-align:left">♋ <code>:cancer:</code></td>
</tr>
<tr>
<td style="text-align:left">♌ <code>:leo:</code></td>
<td style="text-align:left">♍ <code>:virgo:</code></td>
<td style="text-align:left">♎ <code>:libra:</code></td>
</tr>
<tr>
<td style="text-align:left">♏ <code>:scorpius:</code></td>
<td style="text-align:left">♐ <code>:sagittarius:</code></td>
<td style="text-align:left">♑ <code>:capricorn:</code></td>
</tr>
<tr>
<td style="text-align:left">♒ <code>:aquarius:</code></td>
<td style="text-align:left">♓ <code>:pisces:</code></td>
<td style="text-align:left">⛎ <code>:ophiuchus:</code></td>
</tr>
<tr>
<td style="text-align:left">🔯 <code>:six_pointed_star:</code></td>
<td style="text-align:left">❎ <code>:negative_squared_cross_mark:</code></td>
<td style="text-align:left">🅰️ <code>:a:</code></td>
</tr>
<tr>
<td style="text-align:left">🅱️ <code>:b:</code></td>
<td style="text-align:left">🆎 <code>:ab:</code></td>
<td style="text-align:left">🅾️ <code>:o2:</code></td>
</tr>
<tr>
<td style="text-align:left">💠 <code>:diamond_shape_with_a_dot_inside:</code></td>
<td style="text-align:left">♻️ <code>:recycle:</code></td>
<td style="text-align:left">🔚 <code>:end:</code></td>
</tr>
<tr>
<td style="text-align:left">🔛 <code>:on:</code></td>
<td style="text-align:left">🔜 <code>:soon:</code></td>
<td style="text-align:left">🕐 <code>:clock1:</code></td>
</tr>
<tr>
<td style="text-align:left">🕜 <code>:clock130:</code></td>
<td style="text-align:left">🕙 <code>:clock10:</code></td>
<td style="text-align:left">🕥 <code>:clock1030:</code></td>
</tr>
<tr>
<td style="text-align:left">🕚 <code>:clock11:</code></td>
<td style="text-align:left">🕦 <code>:clock1130:</code></td>
<td style="text-align:left">🕛 <code>:clock12:</code></td>
</tr>
<tr>
<td style="text-align:left">🕧 <code>:clock1230:</code></td>
<td style="text-align:left">🕑 <code>:clock2:</code></td>
<td style="text-align:left">🕝 <code>:clock230:</code></td>
</tr>
<tr>
<td style="text-align:left">🕒 <code>:clock3:</code></td>
<td style="text-align:left">🕞 <code>:clock330:</code></td>
<td style="text-align:left">🕓 <code>:clock4:</code></td>
</tr>
<tr>
<td style="text-align:left">🕟 <code>:clock430:</code></td>
<td style="text-align:left">🕔 <code>:clock5:</code></td>
<td style="text-align:left">🕠 <code>:clock530:</code></td>
</tr>
<tr>
<td style="text-align:left">🕕 <code>:clock6:</code></td>
<td style="text-align:left">🕡 <code>:clock630:</code></td>
<td style="text-align:left">🕖 <code>:clock7:</code></td>
</tr>
<tr>
<td style="text-align:left">🕢 <code>:clock730:</code></td>
<td style="text-align:left">🕗 <code>:clock8:</code></td>
<td style="text-align:left">🕣 <code>:clock830:</code></td>
</tr>
<tr>
<td style="text-align:left">🕘 <code>:clock9:</code></td>
<td style="text-align:left">🕤 <code>:clock930:</code></td>
<td style="text-align:left">💲 <code>:heavy_dollar_sign:</code></td>
</tr>
<tr>
<td style="text-align:left">©️ <code>:copyright:</code></td>
<td style="text-align:left">®️ <code>:registered:</code></td>
<td style="text-align:left">™️ <code>:tm:</code></td>
</tr>
<tr>
<td style="text-align:left">❌ <code>:x:</code></td>
<td style="text-align:left">❗ <code>:heavy_exclamation_mark:</code></td>
<td style="text-align:left">‼️ <code>:bangbang:</code></td>
</tr>
<tr>
<td style="text-align:left">⁉️ <code>:interrobang:</code></td>
<td style="text-align:left">⭕ <code>:o:</code></td>
<td style="text-align:left">✖️ <code>:heavy_multiplication_x:</code></td>
</tr>
<tr>
<td style="text-align:left">➕ <code>:heavy_plus_sign:</code></td>
<td style="text-align:left">➖ <code>:heavy_minus_sign:</code></td>
<td style="text-align:left">➗ <code>:heavy_division_sign:</code></td>
</tr>
<tr>
<td style="text-align:left">💮 <code>:white_flower:</code></td>
<td style="text-align:left">💯 <code>:100:</code></td>
<td style="text-align:left">✔️ <code>:heavy_check_mark:</code></td>
</tr>
<tr>
<td style="text-align:left">☑️ <code>:ballot_box_with_check:</code></td>
<td style="text-align:left">🔘 <code>:radio_button:</code></td>
<td style="text-align:left">🔗 <code>:link:</code></td>
</tr>
<tr>
<td style="text-align:left">➰ <code>:curly_loop:</code></td>
<td style="text-align:left">〰️ <code>:wavy_dash:</code></td>
<td style="text-align:left">〽️ <code>:part_alternation_mark:</code></td>
</tr>
<tr>
<td style="text-align:left">🔱 <code>:trident:</code></td>
<td style="text-align:left">:black_square: <code>:black_square:</code></td>
<td style="text-align:left">:white_square: <code>:white_square:</code></td>
</tr>
<tr>
<td style="text-align:left">✅ <code>:white_check_mark:</code></td>
<td style="text-align:left">🔲 <code>:black_square_button:</code></td>
<td style="text-align:left">🔳 <code>:white_square_button:</code></td>
</tr>
<tr>
<td style="text-align:left">⚫ <code>:black_circle:</code></td>
<td style="text-align:left">⚪ <code>:white_circle:</code></td>
<td style="text-align:left">🔴 <code>:red_circle:</code></td>
</tr>
<tr>
<td style="text-align:left">🔵 <code>:large_blue_circle:</code></td>
<td style="text-align:left">🔷 <code>:large_blue_diamond:</code></td>
<td style="text-align:left">🔶 <code>:large_orange_diamond:</code></td>
</tr>
<tr>
<td style="text-align:left">🔹 <code>:small_blue_diamond:</code></td>
<td style="text-align:left">🔸 <code>:small_orange_diamond:</code></td>
<td style="text-align:left">🔺 <code>:small_red_triangle:</code></td>
</tr>
<tr>
<td style="text-align:left">🔻 <code>:small_red_triangle_down:</code></td>
<td style="text-align:left">:shipit: <code>:shipit:</code></td>
<td style="text-align:left"></td>
</tr>
</tbody>
</table>
]]></content>
      <tags>
        <tag>MarkDown</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL基础</title>
    <url>/2022/08/21/MySQL-Base/</url>
    <content><![CDATA[<h3 id="mysql基础"><a class="markdownIt-Anchor" href="#mysql基础"></a> MySQL基础</h3>
<hr />
<h4 id="span-idhead快速导航span"><a class="markdownIt-Anchor" href="#span-idhead快速导航span"></a> <span id="head">快速导航</span></h4>
<p>提示：本文中各个示例之间有一定数据关联性，建议先把预先准备的测试数据代码执行好。 <span id="more"></span></p>
<p><a href="#ddl">DDL</a></p>
<p><a href="#dml">DML</a></p>
<p><a href="#dql">DQL</a></p>
<p><a href="#ysf">条件查询</a></p>
<p><a href="#px">排序</a></p>
<p><a href="#juhe">聚合函数</a></p>
<p><a href="#fz"> 分组查询</a></p>
<h4 id="一-数据库管理系统"><a class="markdownIt-Anchor" href="#一-数据库管理系统"></a> 一、数据库管理系统</h4>
<ol>
<li>数据库管理系统：DataBaseManagement，简称DBMS。</li>
<li>数据库管理系统是专门用来管理数据库中的数据，数据库管理系统可以对数据库中的数据进行增删改查的操作。</li>
<li>常见的数据库管理系统：MySQL，Oracle，SqlServer，MS，DB2等。</li>
</ol>
<h4 id="二-sql"><a class="markdownIt-Anchor" href="#二-sql"></a> 二、SQL</h4>
<ol>
<li>SQL是一种结构化查询语言。</li>
<li>通过SQL可以实现对数据库中数据的操作。</li>
<li>SQL是一套标准，基本能在大部分数据库管理系统中使用。</li>
</ol>
<h4 id="三-工作流程"><a class="markdownIt-Anchor" href="#三-工作流程"></a> 三、工作流程</h4>
<p>​	数据库管理系统SQL→执行SQL→操作数据库</p>
<p>​	先安装数据库管理系统MySQL，然后编写SQL语句，之后DBMS对SQL语句	进行执行来完成对数据库的数据管理。</p>
<h4 id="四-准备工作"><a class="markdownIt-Anchor" href="#四-准备工作"></a> 四、准备工作</h4>
<ol>
<li>
<p>MySQL官网[下载]( <a class="link"   href="https://downloads.mysql.com/archives/installer/" >MySQL :: Download MySQL Installer (Archived Versions) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> )，Windows推荐下载<a class="link"   href="https://downloads.mysql.com/archives/get/p/25/file/mysql-installer-community-5.7.30.0.msi" >Mysql5.7社区版本 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，使用较多的版本。简易配置推荐Server only，也可以选择Custom自定义安装路径，后面填写好root用户的密码即可。其余默认下一步。MySQL环境变量配置可配可不配，需要命令行运行MySQL的相关命令可参考jdk的环境变量配置过程配置好。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 基本命令</span></span><br><span class="line">mysql -uroot -p  //登录MySQL,-p后面需要输入之前设置的密码</span><br><span class="line"><span class="comment"># 登录MySQL之后所有命令结尾必须要加英文分号;</span></span><br><span class="line">mysql&gt; <span class="built_in">exit</span>;   //退出MySQL</span><br><span class="line">mysql&gt; mysqladmin -uroot newpassword;  //root密码为空时,设置新密码</span><br><span class="line">mysql&gt; mysqladmin -uroot -pxxx password yyy; //xxx为旧密码,yyy为新密码</span><br><span class="line">mysql&gt; <span class="built_in">set</span> password <span class="keyword">for</span> 用户名@localhost = password(<span class="string">&#x27;新密码&#x27;</span>);  //修改密码的另一种方式,用户名一般是root</span><br><span class="line"></span><br><span class="line">mysql&gt; show databases; //查看全部的数据库</span><br><span class="line">mysql&gt; create database 数据库名; //创建数据库</span><br><span class="line">mysql&gt; use 数据库名; //指定需要操作的数据库</span><br><span class="line">mysql&gt; show tables; //展示指定数据库里面所有的数据表</span><br><span class="line"></span><br><span class="line"><span class="comment"># 后面的数据操作相关命令可以直接套用navicat中编写的SQL语句,记得结尾加分号;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li>
<p>数据库管理工具Navicat[下载]( <a class="link"   href="https://www.navicat.com/en/download/navicat-for-mysql" >Navicat | Download Navicat for MySQL 14-day trial versions for Windows, macOS and Linux <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> )，原生的MySQL数据库管理系统缺乏管理工具比较难以使用，通过第三方数据库管理工具可以更方便地管理数据库。</p>
</li>
<li>
<p>Navicat连接MySQL时需要确保MySQL服务开启，一般安装时默认开机自启动。<strong>以管理员身份运行</strong>命令提示符，输入命令。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">net start mysql57  //运行MySQL服务</span><br></pre></td></tr></table></figure></div>
<p>MySQL服务的端口号为3306，输入用户名和密码后，完成连接。</p>
</li>
</ol>
<h4 id="五-正式开始"><a class="markdownIt-Anchor" href="#五-正式开始"></a> 五、正式开始</h4>
<h5 id="1sql语句分类"><a class="markdownIt-Anchor" href="#1sql语句分类"></a> 1.SQL语句分类</h5>
<ul>
<li>DQL:数据查询语言，一般以<strong>select</strong>关键字开头，查询数据</li>
<li>DML:数据操作语言，<strong>insert</strong>、<strong>delete</strong>、<strong>update</strong>关键字，<strong>增删改数据表中的数据</strong></li>
<li>DDL:数据定义语言，<strong>create</strong>、<strong>drop</strong>、<strong>alter</strong>关键字，<strong>增删改数据表的结构</strong></li>
<li>TCL:事务控制语言，<strong>commit</strong>、<strong>rollback</strong>关键字，事务回滚和事务提交</li>
<li>DCL:数据控制语言，<strong>grant</strong>、<strong>revoke</strong>关键字，定义访问权限和安全级别及创建用户</li>
</ul>
<h5 id="2ddl数据定义语言的使用"><a class="markdownIt-Anchor" href="#2ddl数据定义语言的使用"></a> 2.DDL数据定义语言的使用</h5>
<ul>
<li>
<p>首先明确MySQL中的数据类型大致分为：**数值、日期/时间、字符串(字符)**三类。</p>
</li>
<li>
<p>数值类型</p>
<table>
<thead>
<tr>
<th style="text-align:center">类型</th>
<th style="text-align:center">大小</th>
<th style="text-align:center">范围（有符号）</th>
<th style="text-align:center">范围（无符号）</th>
<th style="text-align:center">用途</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">TINYINT</td>
<td style="text-align:center">1 Bytes</td>
<td style="text-align:center">(-128,127)</td>
<td style="text-align:center">(0,255)</td>
<td style="text-align:center">小整数值</td>
</tr>
<tr>
<td style="text-align:center">SMALLINT</td>
<td style="text-align:center">2 Bytes</td>
<td style="text-align:center">(-32768,32767)</td>
<td style="text-align:center">(0,65535)</td>
<td style="text-align:center">大整数值</td>
</tr>
<tr>
<td style="text-align:center">MEDIUMINT</td>
<td style="text-align:center">3 Bytes</td>
<td style="text-align:center">(-8388608,8388607)</td>
<td style="text-align:center">(0,16777215)</td>
<td style="text-align:center">大整数值</td>
</tr>
<tr>
<td style="text-align:center">INT或INTEGER</td>
<td style="text-align:center">4 Bytes</td>
<td style="text-align:center">(-2147483648,2147483647)</td>
<td style="text-align:center">(0,4294967295)</td>
<td style="text-align:center">大整数值</td>
</tr>
<tr>
<td style="text-align:center">BIGINT</td>
<td style="text-align:center">8 Bytes</td>
<td style="text-align:center">(-2<sup>63,2</sup>63-1)</td>
<td style="text-align:center">(0,2^64-1)</td>
<td style="text-align:center">极大整数值</td>
</tr>
<tr>
<td style="text-align:center">FLOAT</td>
<td style="text-align:center">4 Bytes</td>
<td style="text-align:center">(-3.402 823 466 E+38，-1.175 494 351 E-38)，0， (1.175 494 351 E-38，3.402 823 466 351 E+38)</td>
<td style="text-align:center">0，(1.175 494 351 E-38，3.402 823 466 E+38)</td>
<td style="text-align:center">单精度 浮点数值</td>
</tr>
<tr>
<td style="text-align:center">DOUBLE</td>
<td style="text-align:center">8 Bytes</td>
<td style="text-align:center">(-1.797 693 134 862 315 7 E+308，-2.225 073 858 507 201 4 E-308)，0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)</td>
<td style="text-align:center">0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)</td>
<td style="text-align:center">双精度 浮点数值</td>
</tr>
<tr>
<td style="text-align:center">DECIMAL</td>
<td style="text-align:center">对DECIMAL(M,D) ，如果M&gt;D，为M+2否则为D+2</td>
<td style="text-align:center">依赖于M和D的值</td>
<td style="text-align:center">依赖于M和D的值</td>
<td style="text-align:center">小数值</td>
</tr>
</tbody>
</table>
</li>
<li>
<p>日期和时间类型</p>
<p>TIMESTAMP类型有专有的自动更新特性，将在后面描述。</p>
<table>
<thead>
<tr>
<th style="text-align:center">类型</th>
<th style="text-align:center">大小 (Bytes)</th>
<th style="text-align:center">范围</th>
<th style="text-align:center">格式</th>
<th style="text-align:center">用途</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">DATE</td>
<td style="text-align:center">3</td>
<td style="text-align:center">1000-01-01/9999-12-31</td>
<td style="text-align:center">YYYY-MM-DD</td>
<td style="text-align:center">日期值</td>
</tr>
<tr>
<td style="text-align:center">TIME</td>
<td style="text-align:center">3</td>
<td style="text-align:center">‘-838:59:59’/‘838:59:59’</td>
<td style="text-align:center">HH:MM:SS</td>
<td style="text-align:center">时间值或持续时间</td>
</tr>
<tr>
<td style="text-align:center">YEAR</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1901/2155</td>
<td style="text-align:center">YYYY</td>
<td style="text-align:center">年份值</td>
</tr>
<tr>
<td style="text-align:center">DATETIME</td>
<td style="text-align:center">8</td>
<td style="text-align:center">1000-01-01 00:00:00/9999-12-31 23:59:59</td>
<td style="text-align:center">YYYY-MM-DD HH:MM:SS</td>
<td style="text-align:center">混合日期和时间值</td>
</tr>
<tr>
<td style="text-align:center">TIMESTAMP</td>
<td style="text-align:center">4</td>
<td style="text-align:center">1970-01-01 00:00:00/2038结束时间是第 <strong>2147483647</strong> 秒，北京时间 <strong>2038-1-19 11:14:07</strong>，格林尼治时间 2038年1月19日 凌晨 03:14:07</td>
<td style="text-align:center">YYYYMMDD HHMMSS</td>
<td style="text-align:center">混合日期和时间值，时间戳</td>
</tr>
</tbody>
</table>
</li>
<li>
<p>字符串类型</p>
<table>
<thead>
<tr>
<th style="text-align:left">类型</th>
<th style="text-align:left">大小</th>
<th style="text-align:left">用途</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">CHAR</td>
<td style="text-align:left">0-255 bytes</td>
<td style="text-align:left">定长字符串</td>
</tr>
<tr>
<td style="text-align:left">VARCHAR</td>
<td style="text-align:left">0-65535 bytes</td>
<td style="text-align:left">变长字符串</td>
</tr>
<tr>
<td style="text-align:left">TINYBLOB</td>
<td style="text-align:left">0-255 bytes</td>
<td style="text-align:left">不超过 255 个字符的二进制字符串</td>
</tr>
<tr>
<td style="text-align:left">TINYTEXT</td>
<td style="text-align:left">0-255 bytes</td>
<td style="text-align:left">短文本字符串</td>
</tr>
<tr>
<td style="text-align:left">BLOB</td>
<td style="text-align:left">0-65 535 bytes</td>
<td style="text-align:left">二进制形式的长文本数据</td>
</tr>
<tr>
<td style="text-align:left">TEXT</td>
<td style="text-align:left">0-65 535 bytes</td>
<td style="text-align:left">长文本数据</td>
</tr>
<tr>
<td style="text-align:left">MEDIUMBLOB</td>
<td style="text-align:left">0-16 777 215 bytes</td>
<td style="text-align:left">二进制形式的中等长度文本数据</td>
</tr>
<tr>
<td style="text-align:left">MEDIUMTEXT</td>
<td style="text-align:left">0-16 777 215 bytes</td>
<td style="text-align:left">中等长度文本数据</td>
</tr>
<tr>
<td style="text-align:left">LONGBLOB</td>
<td style="text-align:left">0-4 294 967 295 bytes</td>
<td style="text-align:left">二进制形式的极大文本数据</td>
</tr>
<tr>
<td style="text-align:left">LONGTEXT</td>
<td style="text-align:left">0-4 294 967 295 bytes</td>
<td style="text-align:left">极大文本数据</td>
</tr>
</tbody>
</table>
<p><span id="ddl"><a href="#head">返回快速导航</a></span></p>
</li>
<li>
<p>DDL语句示例一：对数据表的管理操作以及对字段的增删改操作（在Navicat中新建查询输入SQL语句或在命令行中输入SQL语句）</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">create database test;</span><br><span class="line">use test;</span><br><span class="line"># 创建一张拥有一个int类型的t1字段的test_int数据表</span><br><span class="line"># 默认为有符号</span><br><span class="line"># 多个字段用英文逗号,隔开</span><br><span class="line">create table test_int(</span><br><span class="line">	t1 int</span><br><span class="line">);</span><br><span class="line"># 这里的desc作用是查看数据表的结构信息</span><br><span class="line">desc test_int;</span><br><span class="line"># 增加一条t1字段值为-11111的记录</span><br><span class="line">insert into test_int values (-11111); # 默认有符号</span><br><span class="line"></span><br><span class="line"># 增加一个t2无符号字段</span><br><span class="line">alter table test_int add column t2 int unsigned;</span><br><span class="line"># 这时候增加一条t2字段值为负数的记录,就会出现out of range的错误</span><br><span class="line">insert into test_int (t2) value (-1111); # 报错</span><br><span class="line"># 修改t2字段类型</span><br><span class="line">alter table test_int modify column t2 int;</span><br><span class="line"># 删除t2字段</span><br><span class="line">alter table test_int drop column t2;</span><br><span class="line"></span><br><span class="line"># 删除test_int数据表</span><br><span class="line">drop table if exists test_int;</span><br><span class="line"></span><br><span class="line">create table test_int(</span><br><span class="line">	t1 int,</span><br><span class="line">    t2 int unsigned</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">select * from test_int;</span><br></pre></td></tr></table></figure></div>
</li>
<li>
<p>示例二：对数据库的管理操作</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">语法 create database [if not exists] 数据库名; #[]中的内容选填</span><br><span class="line">    drop database [if exists] 数据库名;</span><br><span class="line"># 创建数据库book</span><br><span class="line">create database book;</span><br><span class="line"># 更改数据库的字符集</span><br><span class="line">alter database book character set utf8;</span><br><span class="line"># 查看字符集</span><br><span class="line">show create database book;</span><br><span class="line"># 删除数据库(判断该数据库是否存在,存在则进行删除)</span><br><span class="line">drop database if exists book;</span><br></pre></td></tr></table></figure></div>
</li>
<li>
<p>示例三：对数据表结构的操作</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table books(</span><br><span class="line">	id int,</span><br><span class="line">    name varchar(20),</span><br><span class="line">    price double,</span><br><span class="line">    author varchar(20),</span><br><span class="line">    publish_date datetime</span><br><span class="line">);</span><br><span class="line">desc books;</span><br><span class="line"># 表的修改</span><br><span class="line"># alter table 数据表名 add/drop/modify/change column ...</span><br><span class="line"># 修改字段名publish_date为date</span><br><span class="line">alter table books change column publish_date date datetime;</span><br><span class="line"># 修改字段的类型或约束</span><br><span class="line">alter table books modify column date timestamp;</span><br><span class="line"></span><br><span class="line"># 关于alter中change和modify的使用区别</span><br><span class="line"># change的修改范围大于modify,change一般用于修改字段名</span><br><span class="line"># modify一般用于修改数据类型或约束,但modify不能修改字段名</span><br><span class="line"></span><br><span class="line"># 添加新的字段inventory,添加字段需要指明数据类型</span><br><span class="line">alter table books add column inventory int;</span><br><span class="line"># 删除字段inventory,删除字段只需要提供字段名</span><br><span class="line">alter table books drop column inventory;</span><br><span class="line"># 修改数据表名</span><br><span class="line">alter table books rename to works;</span><br><span class="line">desc works;</span><br></pre></td></tr></table></figure></div>
</li>
<li>
<p>示例四：复制数据表</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 增加记录</span><br><span class="line">insert into works values</span><br><span class="line">(1,&#x27;《java》&#x27;,132.9,&#x27;詹姆斯·高斯林&#x27;,&#x27;2001-12-01&#x27;),</span><br><span class="line">(2,&#x27;《linux》&#x27;,156.9,&#x27;linus&#x27;,&#x27;1999-01-01&#x27;);</span><br><span class="line"></span><br><span class="line"># 仅复制数据表的结构</span><br><span class="line">create table copy like works;</span><br><span class="line"># 复制结构和数据</span><br><span class="line">create table clone select * from works;</span><br><span class="line"># 复制部分结构</span><br><span class="line">create table remake select id,name from works;</span><br><span class="line"># 仅复制部分字段,利用where进行条件判断,恒为0则只保留字段</span><br><span class="line">create table redo select id,name from works where 0;</span><br></pre></td></tr></table></figure></div>
</li>
</ul>
<h5 id="3dml数据操作语言的使用"><a class="markdownIt-Anchor" href="#3dml数据操作语言的使用"></a> 3.DML数据操作语言的使用</h5>
<p><span id="dml"><a href="#head">返回快速导航</a></span></p>
<ul>
<li>
<p><strong>insert语句</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 语法</span><br><span class="line"># insert into 数据表名(字段名1,字段名2,...) values (字段值1,字段值2,...);</span><br><span class="line">create table product(</span><br><span class="line">	id int,</span><br><span class="line">	name varchar(20),</span><br><span class="line">	price double</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"># 在product表中增加一条记录</span><br><span class="line">insert into product(id,name,price) values (1,&#x27;phone&#x27;,500.0);</span><br><span class="line"># 在product表中指定的字段增加记录</span><br><span class="line">insert into product(id,price) values (2,399.9);</span><br><span class="line"></span><br><span class="line">select * from product;</span><br><span class="line"></span><br><span class="line"># 默认给全部字段增加记录</span><br><span class="line"># insert into 数据表名 values (字段值1,字段值2,...);</span><br><span class="line"></span><br><span class="line">insert into product values (3,&#x27;mac&#x27;,21499.9);</span><br><span class="line">select * from product;</span><br><span class="line"></span><br><span class="line"># 批量增加记录</span><br><span class="line"># insert into 数据表名 values (字段值1,字段值2,...),(字段值1,字段值2,...);</span><br><span class="line"></span><br><span class="line">insert into product values (4,&#x27;a&#x27;,1.1),(5,&#x27;b&#x27;,2.2),(6,&#x27;c&#x27;,3.3);</span><br><span class="line">select * from product;</span><br></pre></td></tr></table></figure></div>
<p>注意字段名和字段值的类型对应，以及日期时间、字符字符串类型数据需要加上引号（单双引号均可）</p>
</li>
<li>
<p><strong>update语句</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 语法</span><br><span class="line">#update 数据表名 set 字段1 = 值1,字段2 = 值2,...[where 条件];</span><br><span class="line"></span><br><span class="line"># 修改phone的price为9999</span><br><span class="line">update product set price = 9999 where name=&#x27;phone&#x27;;</span><br><span class="line">select * from product;</span><br><span class="line"></span><br><span class="line"># 修改mac的price为39999.9,id为0</span><br><span class="line">update product set price = 39999.9,id=0 where name=&#x27;mac&#x27;;</span><br><span class="line"></span><br><span class="line"># 修改id为2记录的name为switch</span><br><span class="line">update product set name = &#x27;switch&#x27; where id=2;</span><br></pre></td></tr></table></figure></div>
<p>注意一般情况下update语句中不能缺少条件，否则会修改所有数据。</p>
</li>
<li>
<p><strong>delete语句</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 语法</span><br><span class="line"># delete from 数据表名 [where 条件];</span><br><span class="line"></span><br><span class="line"># 删除product表中的switch数据</span><br><span class="line">delete from product where name=&#x27;switch&#x27;;</span><br><span class="line"></span><br><span class="line"># 删除product表中price为39999.9的数据</span><br><span class="line">delete from product where price=39999.9;</span><br><span class="line"></span><br><span class="line">select * from product;</span><br></pre></td></tr></table></figure></div>
<p>注意delete语句中必须加上条件限制，否则所有的数据将会被删除。</p>
<p>基本update和delete都要配合where来使用，否则和Linux系统中<code>rm -rf /</code>命令是差不多的后果。</p>
</li>
</ul>
<h5 id="4dql数据查询语言的使用"><a class="markdownIt-Anchor" href="#4dql数据查询语言的使用"></a> 4.DQL数据查询语言的使用</h5>
<p>​	<span id="dql"><a href="#head">返回快速导航</a></span></p>
<ul>
<li>
<p>示例</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 语法</span><br><span class="line"># select 字段名 from 数据表名;</span><br><span class="line"></span><br><span class="line"># 单独查询name字段</span><br><span class="line">select name from product;</span><br><span class="line"># 查询多个字段</span><br><span class="line">select id,name from product;</span><br><span class="line"># 查询所有字段</span><br><span class="line">select * from product;</span><br><span class="line"># 或者把*替换成数据表中所有的字段名</span><br><span class="line"></span><br><span class="line"># as关键字取别名,不改变原有数据,改变的是显示的内容,as关键字可省略</span><br><span class="line">select name as product_name from product;</span><br><span class="line"></span><br><span class="line"># 别名中有空格,使用单引号括住别名</span><br><span class="line">select name &#x27;product name&#x27; from product;</span><br></pre></td></tr></table></figure></div>
</li>
</ul>
<h5 id="5sql运算符及条件查询"><a class="markdownIt-Anchor" href="#5sql运算符及条件查询"></a> 5.SQL运算符及条件查询</h5>
<ol>
<li>
<p>算术运算符</p>
<table>
<thead>
<tr>
<th style="text-align:center">运算符</th>
<th style="text-align:center"><strong>说  明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><strong>+</strong></td>
<td style="text-align:center"><strong>加运算，求两个数或表达式相加的和，如6+8</strong></td>
</tr>
<tr>
<td style="text-align:center"><strong>-</strong></td>
<td style="text-align:center"><strong>减运算，求两个数或表达式相减的差</strong></td>
</tr>
<tr>
<td style="text-align:center">*****</td>
<td style="text-align:center"><strong>乘运算，求两个数或表达式相乘的积</strong></td>
</tr>
<tr>
<td style="text-align:center"><strong>/</strong></td>
<td style="text-align:center"><strong>除运算，求两个数或表达式相除的商，如5/3的值为1</strong></td>
</tr>
<tr>
<td style="text-align:center"><strong>%</strong></td>
<td style="text-align:center"><strong>取模运算，求两个数或表达式相除的余数，如：5%3的值为2</strong></td>
</tr>
</tbody>
</table>
<p>SQL语句也可以使用数学表达式，注意SQL没有java的自增自减等运算符。</p>
</li>
<li>
<p>where条件查询运算符</p>
<table>
<thead>
<tr>
<th style="text-align:center">运算符</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">=</td>
<td style="text-align:center">等于</td>
</tr>
<tr>
<td style="text-align:center">&lt;&gt;或!=</td>
<td style="text-align:center">不等于</td>
</tr>
<tr>
<td style="text-align:center">&lt;</td>
<td style="text-align:center">小于</td>
</tr>
<tr>
<td style="text-align:center">&lt;=</td>
<td style="text-align:center">小于等于</td>
</tr>
<tr>
<td style="text-align:center">&gt;</td>
<td style="text-align:center">大于</td>
</tr>
<tr>
<td style="text-align:center">&gt;=</td>
<td style="text-align:center">大于等于</td>
</tr>
<tr>
<td style="text-align:center">between…  and…</td>
<td style="text-align:center">两个值之间，等同于  &gt;=   and   &lt;=</td>
</tr>
<tr>
<td style="text-align:center">is  null</td>
<td style="text-align:center">为null  （is  not  null不为空）</td>
</tr>
<tr>
<td style="text-align:center">and</td>
<td style="text-align:center">并且</td>
</tr>
<tr>
<td style="text-align:center">or</td>
<td style="text-align:center">或者</td>
</tr>
<tr>
<td style="text-align:center">in</td>
<td style="text-align:center">包含，相当于多个or（not in不在这个范围中）</td>
</tr>
<tr>
<td style="text-align:center">not</td>
<td style="text-align:center">not可以取非，主要用在is  或  in中</td>
</tr>
<tr>
<td style="text-align:center">like</td>
<td style="text-align:center">like称为模糊查询，支持%或下划线匹配，%匹配任意多个字符，一个下划线值匹配一个字符</td>
</tr>
</tbody>
</table>
<p><span id="ysf"><a href="#head">返回快速导航</a></span></p>
</li>
<li>
<p>示例</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">create database if not exists task;</span><br><span class="line">use task;</span><br><span class="line">create table if not exists coder(</span><br><span class="line">	id int,</span><br><span class="line">    name varchar(20),</span><br><span class="line">    score int,</span><br><span class="line">    grade varchar(10),</span><br><span class="line">    project int</span><br><span class="line">);</span><br><span class="line">insert into coder values</span><br><span class="line">(1,&#x27;Mike&#x27;,100,&#x27;A&#x27;,1),</span><br><span class="line">(2,&#x27;Jhon&#x27;,96,&#x27;A&#x27;,2),</span><br><span class="line">(3,&#x27;Dram&#x27;,60,&#x27;D&#x27;,null),</span><br><span class="line">(4,&#x27;Lambda&#x27;,100,&#x27;A&#x27;,null),</span><br><span class="line">(5,&#x27;LuBen&#x27;,89,&#x27;B&#x27;,3),</span><br><span class="line">(6,&#x27;K&#x27;,75,&#x27;C&#x27;,null),</span><br><span class="line">(7,&#x27;Z&#x27;,88,&#x27;C&#x27;,null),</span><br><span class="line">(8,&#x27;L&#x27;,75,&#x27;B&#x27;,null);</span><br><span class="line">select * from coder;</span><br><span class="line"></span><br><span class="line"># 查询coder数据表中score等于100的name和id记录</span><br><span class="line">select name,id from coder where score=100;</span><br><span class="line"></span><br><span class="line"># 查询coder数据表中grade不等于A的name和id记录</span><br><span class="line">select name,id from coder where grade != &#x27;A&#x27;;</span><br><span class="line">select name,id from coder where grade &lt;&gt; &#x27;A&#x27;;</span><br><span class="line"></span><br><span class="line"># 查询coder数据表中score小于89的name和id记录</span><br><span class="line">select name,id from coder where score &lt; 89;</span><br><span class="line"></span><br><span class="line"># 查询coder数据表中score小于等于89的name和id记录</span><br><span class="line">select name,id from coder where score &lt;= 89;</span><br><span class="line"></span><br><span class="line"># 查询coder数据表中score大于75的name和id记录</span><br><span class="line">select name,id from coder where score &gt; 75;</span><br><span class="line"></span><br><span class="line"># 查询coder数据表中score大于等于75的name和id记录</span><br><span class="line">select name,id from coder where score &gt;= 75;</span><br><span class="line"></span><br><span class="line"># 查询coder数据表中score在75和90之间的name和id记录</span><br><span class="line">select name,id from coder where score&gt;=75 and score&lt;=90;</span><br><span class="line">select name,id from coder where score between 75 and 90;</span><br><span class="line"># between 较小值 and 较大值  闭区间</span><br><span class="line"></span><br><span class="line"># 查询coder数据表中project为null的记录</span><br><span class="line">select * from coder where project is null;</span><br><span class="line"> </span><br><span class="line"># 查询coder数据表中project不为null的记录</span><br><span class="line">select * from coder where project is not null;</span><br><span class="line"> </span><br><span class="line"># 查询coder数据表中grade为A且score为100的记录</span><br><span class="line">select * from coder where grade=&#x27;A&#x27; and score=100;</span><br><span class="line"> </span><br><span class="line"># 查询coder数据表中score为100或project为3的记录</span><br><span class="line">select * from coder where score=100 or project=3;</span><br><span class="line"> </span><br><span class="line"># and和or同时使用时,and优先级高于or,要使or先执行,则需用()括住or关联的条件</span><br><span class="line"># 查询coder数据表中grade为A且project为1 和 score大于74的记录</span><br><span class="line">select * from coder where grade=&#x27;A&#x27; and project=1 or score &gt; 74;</span><br><span class="line"># 查询coder数据表中project为1或score大于74 且grade为A的记录</span><br><span class="line">select * from coder where grade=&#x27;A&#x27; and (project=1 or score &gt; 74);</span><br><span class="line"></span><br><span class="line"># in关键字相当于多个or,但in无法关联数值范围的条件,只能关联一个具体的数值条件</span><br><span class="line"># 查询coder数据表中score为100或96的记录</span><br><span class="line">select * from coder where score=100 or score=96;</span><br><span class="line">select * from coder where score in(100,96); # 这里表示两个数值</span><br><span class="line"></span><br><span class="line"># 查询coder数据表中project不为1且不为3的记录</span><br><span class="line">select * from coder where project&lt;&gt;1 and project&lt;&gt;3;</span><br><span class="line">select * from coder where project not in(3,1);</span><br><span class="line"></span><br><span class="line"># 模糊查询</span><br><span class="line"># like关键字,匹配符%和_</span><br><span class="line"># %匹配任意多个字符,_匹配任意一个字符</span><br><span class="line"># 转义字符\,用于处理包含%和_这两个特殊符号的记录</span><br><span class="line"></span><br><span class="line"># 查询coder数据表中以e结尾的name记录</span><br><span class="line">select name from coder where name like &#x27;%e&#x27;;</span><br><span class="line"># 查询coder数据表中以L开头的name记录</span><br><span class="line">select name from coder where name like &#x27;L%&#x27;;</span><br><span class="line"># 查询coder数据表中包含u的name记录</span><br><span class="line">select name from coder where name like &#x27;%u%&#x27;;</span><br><span class="line"># 查询coder数据表中第二个字母为h的name记录</span><br><span class="line">select name from coder where name like &#x27;_h%&#x27;;</span><br></pre></td></tr></table></figure></div>
</li>
</ol>
<h5 id="6排序"><a class="markdownIt-Anchor" href="#6排序"></a> 6.排序</h5>
<table>
<thead>
<tr>
<th style="text-align:center">关键字</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">order by</td>
<td style="text-align:center">排序</td>
</tr>
<tr>
<td style="text-align:center">desc</td>
<td style="text-align:center">降序</td>
</tr>
<tr>
<td style="text-align:center">asc</td>
<td style="text-align:center">升序</td>
</tr>
</tbody>
</table>
<p><span id="px"><a href="#head">返回快速导航</a></span></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 对coder数据表中的score进行排序,默认升序</span><br><span class="line">select name,score from coder order by score;</span><br><span class="line"># 指定降序,这里的desc作用是指定降序排序</span><br><span class="line">select name,score from coder order by score desc;</span><br><span class="line"># 指定升序</span><br><span class="line">select name,score from coder order by score asc;</span><br><span class="line"></span><br><span class="line"># 多字段排序,第一字段相同时,根据第二字段排序</span><br><span class="line"># 根据score升序排序,score相同则根据name升序排序</span><br><span class="line">select name,score from coder order by score asc,name asc;</span><br><span class="line"></span><br><span class="line"># 不推荐写法</span><br><span class="line">select * from coder order by 1; # 这里的1表示第一个字段id</span><br><span class="line"># 这种写法很容易因为字段顺序的改变而出错</span><br></pre></td></tr></table></figure></div>
<h5 id="7聚合函数"><a class="markdownIt-Anchor" href="#7聚合函数"></a> 7.聚合函数</h5>
<p><span id="juhe"><a href="#head">返回快速导航</a></span></p>
<p><strong>多行数据经聚合函数处理之后的结果只有一行</strong></p>
<p><strong>聚合函数分类</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">函数名</th>
<th style="text-align:center">功能</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">count(字段名)</td>
<td style="text-align:center">统计数量(一般选用不为null的列)</td>
</tr>
<tr>
<td style="text-align:center">max(字段名)</td>
<td style="text-align:center">最大值</td>
</tr>
<tr>
<td style="text-align:center">min(字段名)</td>
<td style="text-align:center">最小值</td>
</tr>
<tr>
<td style="text-align:center">sum(字段名)</td>
<td style="text-align:center">求和</td>
</tr>
<tr>
<td style="text-align:center">avg(字段名)</td>
<td style="text-align:center">平均值</td>
</tr>
</tbody>
</table>
<p>注意：聚合函数需要配合分组来使用，先分组再用聚合函数处理。</p>
<p>如果不进行分组，则默认整张数据表为一组。</p>
<p>示例：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 找出coder数据表中score字段的最大值记录</span><br><span class="line">select max(score) from coder;</span><br><span class="line"># 找出coder数据表中score字段的最小值记录</span><br><span class="line">select min(score) from coder;</span><br><span class="line"># 计算score字段所有记录的总和</span><br><span class="line">select sum(score) from coder;</span><br><span class="line"># 计算score字段所有记录的平均值</span><br><span class="line">select avg(score) from coder;</span><br><span class="line"># 计算记录总条数,可以用任意非空字段做参数</span><br><span class="line">select count(name) from coder;</span><br></pre></td></tr></table></figure></div>
<p>注意：</p>
<ol>
<li>聚合函数会自动忽略指定字段值为null的记录</li>
<li>在count(*)情况下，每一行数据中只要有一个字段值不为null，则该数据就会被count函数统计进去</li>
<li>聚合函数也称分组函数，不能直接在<strong>where子句</strong>中使用</li>
<li>聚合函数之间可以相互组合使用</li>
</ol>
<h5 id="8分组查询"><a class="markdownIt-Anchor" href="#8分组查询"></a> 8.分组查询</h5>
<p><span id="fz"><a href="#head">返回快速导航</a></span></p>
<p><strong>group by关键字</strong></p>
<p>格式：select 字段 from 数据表 where 条件 group by 分组依据字段 order by 排序依据字段 排序方式</p>
<p>执行优先级：from→where→group by→select→order by</p>
<p>由于where的优先级高于group by，因此聚合函数无法在where子句中使用。</p>
<p>示例：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 计算coder数据表中grade各组的score总和</span><br><span class="line">select grade,sum(score) from coder group by grade;</span><br><span class="line"></span><br><span class="line"># 规范:使用了group by的语句,select后面的字段只能用作为分组依据的字段及聚合函数,不允许使用其他字段,否则即使不报错,数据结果也会存在问题</span><br><span class="line"></span><br><span class="line"># having关键字对group by之后的数据进行处理</span><br><span class="line"># 不同于where,having专门与group by一起使用,而不能单独使用</span><br><span class="line"></span><br><span class="line"># 找出coder数据表各grade组中score平均值大于80的记录</span><br><span class="line">select grade,avg(score) from coder group by grade having avg(score)&gt;80;</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>MySQL5</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL高级</title>
    <url>/2022/08/21/MySQL-Pro/</url>
    <content><![CDATA[<h3 id="mysql高级"><a class="markdownIt-Anchor" href="#mysql高级"></a> MySQL高级</h3>
<hr />
<h4 id="一-distinct关键字"><a class="markdownIt-Anchor" href="#一-distinct关键字"></a> 一、distinct关键字</h4>
<p>distinct能够去除查询结果中重复的记录</p>
<p>注意：数据表中的数据并没有被修改，实际上所有的DQL查询语句都不会修改原始数据，只是对查询结果进行处理 <span id="more"></span></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 准备工作</span><br><span class="line">create database if not exists task;</span><br><span class="line">use task;</span><br><span class="line">create table emp (</span><br><span class="line">	id int,</span><br><span class="line">    name varchar(20),</span><br><span class="line">    age int,</span><br><span class="line">    sex char(20),</span><br><span class="line">    salary double</span><br><span class="line">);</span><br><span class="line">alter table emp modify sex char(20) character set gbk;</span><br><span class="line">insert into emp values</span><br><span class="line">(1,&#x27;a&#x27;,19,&#x27;男&#x27;,3500),</span><br><span class="line">(2,&#x27;b&#x27;,22,&#x27;男&#x27;,5600),</span><br><span class="line">(3,&#x27;c&#x27;,34,&#x27;女&#x27;,7700),</span><br><span class="line">(4,&#x27;d&#x27;,16,&#x27;男&#x27;,4300),</span><br><span class="line">(5,&#x27;e&#x27;,51,&#x27;女&#x27;,4300),</span><br><span class="line">(6,&#x27;f&#x27;,23,&#x27;女&#x27;,4300);</span><br><span class="line"></span><br><span class="line"># 格式: select distinct 字段名 from 数据表名;</span><br><span class="line"># distinct关键字写在所有字段前面</span><br><span class="line"># 查询salary的值有哪几种情况,不重复列出相同的情况</span><br><span class="line">select distinct salary from emp;</span><br><span class="line"># 对于多个字段,则需要在多个字段的值均重复的条件下才会去重</span><br><span class="line"># 查询数据表中存在的不重复的sex和salary的组合有哪几种情况</span><br><span class="line">select distinct salary,sex from emp;</span><br></pre></td></tr></table></figure></div>
<h4 id="二-连接查询"><a class="markdownIt-Anchor" href="#二-连接查询"></a> 二、连接查询</h4>
<h5 id="连接查询的概念"><a class="markdownIt-Anchor" href="#连接查询的概念"></a> 连接查询的概念</h5>
<p>针对一张数据表进行查询，称为单表查询。<strong>join关键字</strong></p>
<p>将两张及以上的数据表联合起来进行查询，获取到多张数据表组合出来的数据，称为连接查询。</p>
<h5 id="连接查询的分类"><a class="markdownIt-Anchor" href="#连接查询的分类"></a> 连接查询的分类</h5>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">根据表连接的方式分类</span><br><span class="line">├── 内连接</span><br><span class="line">│   ├── 等值连接</span><br><span class="line">│   ├── 非等值连接</span><br><span class="line">│   └── 自连接</span><br><span class="line"><span class="string">|</span></span><br><span class="line">├── 外连接</span><br><span class="line">│   ├── 左外连接</span><br><span class="line">│   └── 右外连接</span><br></pre></td></tr></table></figure>
<h5 id="笛卡尔积现象"><a class="markdownIt-Anchor" href="#笛卡尔积现象"></a> 笛卡尔积现象</h5>
<p>一般是由于没有加任何限制条件直接联合多张表进行查询。查询结果的数量是多张表的乘积，但一般这样的查询没有太大意义，要避免这种情况需要设计好限制条件。</p>
<h5 id="内连接"><a class="markdownIt-Anchor" href="#内连接"></a> 内连接</h5>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 准备数据</span><br><span class="line">create database if not exists data;</span><br><span class="line">use data;</span><br><span class="line">create table employee(</span><br><span class="line">	id int,</span><br><span class="line">    name varchar(20),</span><br><span class="line">    salary double,</span><br><span class="line">    department_id int</span><br><span class="line">);</span><br><span class="line">insert into employee values</span><br><span class="line">(1,&#x27;apple&#x27;,5469,101),</span><br><span class="line">(2,&#x27;grape&#x27;,4465,101),</span><br><span class="line">(3,&#x27;orange&#x27;,6544,102),</span><br><span class="line">(4,&#x27;mango&#x27;,4987,102),</span><br><span class="line">(5,&#x27;banana&#x27;,5323,102),</span><br><span class="line">(6,&#x27;peach&#x27;,6743,103);</span><br><span class="line">create table department(</span><br><span class="line">	id int,</span><br><span class="line">    name varchar(20)</span><br><span class="line">);</span><br><span class="line">insert into department values</span><br><span class="line">(101,&#x27;develop&#x27;),</span><br><span class="line">(102,&#x27;operate&#x27;),</span><br><span class="line">(103,&#x27;loaf&#x27;);</span><br><span class="line">create table salary_level(</span><br><span class="line">	grade varchar(20),</span><br><span class="line">    min int,</span><br><span class="line">    max int</span><br><span class="line">);</span><br><span class="line">insert into salary_level values</span><br><span class="line">(&#x27;A&#x27;,5501,7000),</span><br><span class="line">(&#x27;B&#x27;,4001,5500),</span><br><span class="line">(&#x27;C&#x27;,2500,4000);</span><br><span class="line"># 等值连接,where后的条件是等值判断</span><br><span class="line"># 查询enployee表中每条记录所对应的department的name</span><br><span class="line"># join前加inner关键字能直接表明这是内连接,当然inner本身可以省略不写</span><br><span class="line"># on关键字类似于where,但on是表示多表的连接条件,而where是表示对连接结果进一步筛选的条件,where写在on的后面</span><br><span class="line">select e.name,d.name from employee e join department d on e.department_id=d.id;</span><br><span class="line"></span><br><span class="line"># 非等值连接,where后的条件一般是在某个范围内判断</span><br><span class="line"># 查询employee表中每条记录所对应的salary_level的grade</span><br><span class="line">select e.name,e.salary,s.grade from employee e inner join salary_level s on e.salary between s.min and s.max;</span><br><span class="line"></span><br><span class="line"># 自连接,本质上是一张表,但进行了重复使用</span><br><span class="line"># 新增数据</span><br><span class="line">insert into employee (id,name) values</span><br><span class="line">(101,&#x27;leader_jackson&#x27;),</span><br><span class="line">(102,&#x27;leader_vim&#x27;),</span><br><span class="line">(103,&#x27;leader_fish&#x27;);</span><br><span class="line"># 查询employee表中department_id对应leader_name和name记录</span><br><span class="line">select e1.name &#x27;emp&#x27;,e2.name &#x27;leader&#x27; from employee e1 join employee e2 on e1.department_id=e2.id;</span><br><span class="line"># 一般需要使用自连接查询的话,说明表的设计还能进一步优化</span><br></pre></td></tr></table></figure></div>
<h5 id="外连接"><a class="markdownIt-Anchor" href="#外连接"></a> 外连接</h5>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 内连接的多张表并没有主次关系,也就是说不需要考虑查询语句书写的先后顺序</span><br><span class="line"># 外连接分左外连接left join和右外连接right join,left或right关键字不可省略,表示将join关键字左右的数据表视为主表,当然也可以通过调整语句书写的先后顺序改变主次关系</span><br><span class="line"># 主表指定的数据会全部被查询,在此基础上再查询部分相关的次表的数据,也就是说指定查询的主表数据不会因为on的连接条件而有所缺失,但会受到where筛选条件的影响</span><br><span class="line"></span><br><span class="line"># 以employee为主表查询所有记录数</span><br><span class="line">select * from employee e left join department d on e.department_id=d.id;</span><br><span class="line"># 以department为主表查询所有记录数</span><br><span class="line">select * from employee e right join department d on e.department_id=d.id;</span><br><span class="line"></span><br><span class="line"># 通过对比相同的数据表在内外连接两种情况下的不同查询结果,可以找到主表中还未与次表建立逻辑关系的单独的数据</span><br></pre></td></tr></table></figure></div>
<h5 id="更多表连接三张表"><a class="markdownIt-Anchor" href="#更多表连接三张表"></a> 更多表连接（三张表）</h5>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 三张及以上数据表连接查询,多个连接条件一般都与第一张表相关联,内外连接可以混合使用</span><br><span class="line"># 查询employee、department、salary_level的联合数据</span><br><span class="line"># 查询employee中department_id对应的department表数据,salary对应的salary_level表数据</span><br><span class="line">select e.name,e.salary,d.name,s.grade from employee e join department d on e.department_id=d.id join salary_level s on e.salary between s.min and s.max;</span><br></pre></td></tr></table></figure></div>
<h4 id="三-子查询"><a class="markdownIt-Anchor" href="#三-子查询"></a> 三、子查询</h4>
<h5 id="子查询的概念"><a class="markdownIt-Anchor" href="#子查询的概念"></a> 子查询的概念</h5>
<p>DQL语句中嵌套DQL语句，被嵌套的DQL语句称为子查询。</p>
<h5 id="子查询的使用"><a class="markdownIt-Anchor" href="#子查询的使用"></a> 子查询的使用</h5>
<p>子查询可写在<strong>select</strong>、<strong>from</strong>、<strong>where</strong>关键字后面。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"># where子句中的子查询,一般子查询结果是某个值</span><br><span class="line"># 查询employee表中大于平均值的salary记录,先查询出avg(salary)的值</span><br><span class="line">select salary from employee where salary&gt;(select avg(salary) from employee);</span><br><span class="line"></span><br><span class="line"># from子句中的子查询,把子查询结果视为一张新的数据表</span><br><span class="line"># 查询employee表中每个department_id对应的avg(salary)的grade,先查询出每个department_id的avg(salary)</span><br><span class="line">select e.*,s.grade from (select department_id,avg(salary) avg from employee group by department_id) e join salary_level s on avg between s.min and s.max;</span><br><span class="line"></span><br><span class="line"># select后的子查询,一般不经常使用,了解即可</span><br><span class="line"># 该子查询只能返回一条记录</span><br><span class="line">select e.name,e.salary,(select avg(salary) from employee) avg from employee e;</span><br></pre></td></tr></table></figure></div>
<h4 id="四-union关键字"><a class="markdownIt-Anchor" href="#四-union关键字"></a> 四、union关键字</h4>
<p><strong>union关键字</strong>能合并结果集，将多表查询的结果直接拼接起来，但多张表必须保持字段数一致。字段值在没有特殊逻辑关系下也要对应起来。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"># union和join</span><br><span class="line"># 将employee中salary大于5000的结果集和department_id为101的结果集合并起来,会自动去重</span><br><span class="line">select name from employee where salary &gt; 5000 union select name from employee where department_id=101;</span><br><span class="line"></span><br><span class="line"># 关于union和or关键字的区别</span><br><span class="line"># union能够实现多表查询(前提多张表的字段能够对应),而or只能在一张表里使用</span><br><span class="line"># union会自动去重,or不会去重而是直接取查询结果的并集(实际大部分情况下两者结果区别不大)</span><br><span class="line"># union能够使用不同的索引查询,索引即where后面所用到的字段,而or因为是针对一张表所以只能使用一个索引,一个where后仅能有一个索引,有多个字段时取其一作为索引</span><br><span class="line"></span><br><span class="line"># 一般情况下,数据量较大时(包括单表的数据量和数据表的数量)推荐使用union,多个查询条件涉及到的是同一个字段时推荐使用or</span><br></pre></td></tr></table></figure></div>
<h4 id="五-limit关键字"><a class="markdownIt-Anchor" href="#五-limit关键字"></a> 五、limit关键字</h4>
<h5 id="limit的作用"><a class="markdownIt-Anchor" href="#limit的作用"></a> limit的作用</h5>
<p>将结果集的部分数据展示出来，常用于网页开发分页查询中</p>
<h5 id="关键字执行优先级"><a class="markdownIt-Anchor" href="#关键字执行优先级"></a> 关键字执行优先级</h5>
<p>执行优先级：from→where→group by→having→select→order by→<strong>limit</strong></p>
<h5 id="limit的使用"><a class="markdownIt-Anchor" href="#limit的使用"></a> limit的使用</h5>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 格式:limit 开始下标(缺省的话,默认从0开始),长度(即数据条数)</span><br><span class="line"># 查询employee表前2条数据</span><br><span class="line">select * from employee limit 2; # 简写,实际上是limit 0,2;</span><br><span class="line">select * from employee limit 0,2;</span><br><span class="line"># 查询employee表第2-4条数据,下标从1开始起的3条数据</span><br><span class="line">select * from employee limit 1,3;</span><br><span class="line"></span><br><span class="line"># limit在order by之后执行,所以order by的依据和排序方式会一定程度上影响limit的结果集</span><br><span class="line"># 查询以name升序排序之后的结果集的前2条数据</span><br><span class="line">select * from employee order by name asc limit 2;</span><br><span class="line"># 查询以salary降序排序之后的结果集的前2条数据</span><br><span class="line">select * from employee order by salary desc limit 2;</span><br><span class="line"></span><br><span class="line"># 分页查询的公式:limit (pageNum-1)*pageSize,pageSize</span><br></pre></td></tr></table></figure></div>
<h4 id="六-约束"><a class="markdownIt-Anchor" href="#六-约束"></a> 六、约束</h4>
<h5 id="约束的概念"><a class="markdownIt-Anchor" href="#约束的概念"></a> 约束的概念</h5>
<p>约束（constraint）是用于保证数据完整性、有效性的一种规则。</p>
<h5 id="多种约束规则"><a class="markdownIt-Anchor" href="#多种约束规则"></a> 多种约束规则</h5>
<p>非空：not null</p>
<p>唯一：unique</p>
<p>主键：primary key（PK）</p>
<p>外键：foreign key（FK）</p>
<p>检查：check（MySQL不支持，Oracle支持）</p>
<h5 id="约束的使用"><a class="markdownIt-Anchor" href="#约束的使用"></a> 约束的使用</h5>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 非空 not null</span><br><span class="line"># 非空约束的字段不能为null</span><br><span class="line">drop table if exists con;</span><br><span class="line">create table con(</span><br><span class="line">	id int,</span><br><span class="line">    name varchar(20) not null</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">insert into con(id,name) values (1,&#x27;a&#x27;);</span><br><span class="line">insert into con(id,name) values (2,null); # 出错,name不能为null</span><br><span class="line">insert into con(id) values (3); # 出错,name没有默认值</span><br><span class="line"></span><br><span class="line"># 唯一性 unique</span><br><span class="line"># 唯一性约束的字段不能重复</span><br><span class="line">drop table if exists con;</span><br><span class="line">create table con(</span><br><span class="line">	id int,</span><br><span class="line">    name varchar(20) unique</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">insert into con(id,name) values (1,&#x27;a&#x27;);</span><br><span class="line">insert into con(id,name) values (2,&#x27;a&#x27;); # name不能出现重复的值</span><br><span class="line">insert into con(id) values (3,null); # name可以为null,且null不属于值重复</span><br><span class="line"></span><br><span class="line"># 多字段各自唯一(列级约束,每个约束仅对单个字段有效)</span><br><span class="line"># name不能重复且email也不能重复</span><br><span class="line">drop table if exists con;</span><br><span class="line">create table con(</span><br><span class="line">	id int,</span><br><span class="line">    name varchar(20) unique,</span><br><span class="line">    email varchar(20) unique</span><br><span class="line">);</span><br><span class="line"># 测试数据可以直接用下面的</span><br><span class="line"></span><br><span class="line"># 多字段组合唯一(表级约束,每个约束对整张表有效,多用于给多个字段添加联合约束)</span><br><span class="line"># name和email的组合不能重复</span><br><span class="line">drop table if exists con;</span><br><span class="line">create table con(</span><br><span class="line">	id int,</span><br><span class="line">    name varchar(20),</span><br><span class="line">    email varchar(20),</span><br><span class="line">    unique(name,email)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">insert into con(id,name,email) values (1,&#x27;a&#x27;,&#x27;a@123.com&#x27;);</span><br><span class="line">insert into con(id,name,email) values (2,&#x27;a&#x27;,&#x27;a@456.com&#x27;);</span><br><span class="line">insert into con(id,name,email) values (3,&#x27;b&#x27;,&#x27;b@123.com&#x27;);</span><br><span class="line">insert into con(id,name,email) values (4,&#x27;a&#x27;,&#x27;a@456.com&#x27;);</span><br><span class="line"></span><br><span class="line"># not null和unique联合</span><br><span class="line">drop table if exists con;</span><br><span class="line">create table con(</span><br><span class="line">	id int,</span><br><span class="line">    name varchar(20) not null unique</span><br><span class="line">);</span><br><span class="line">desc con;</span><br><span class="line">insert into con(id,name) values (1,&#x27;abc&#x27;);</span><br><span class="line">insert into con(id,name) values (2,&#x27;abc&#x27;); # 出错,name不能重复</span><br><span class="line">insert into con(id,name) values (3,null); # 出错,name不能为null</span><br><span class="line"></span><br><span class="line"># 主键 primary key</span><br><span class="line"># 主键字段不能重复且不能为null,类似于unique联合not null但不完全相同</span><br><span class="line"># 根据设计规范,一张表应该存在且只能存在一个主键,主键通常是int、bigint、char等类型的字段,不建议使用varchar类型字段作为主键</span><br><span class="line"># 单一主键,列级约束,一般开发中经常使用</span><br><span class="line">drop table if exists con;</span><br><span class="line">create table con(</span><br><span class="line">	id int primary key,</span><br><span class="line">    name varchar(20)</span><br><span class="line">);</span><br><span class="line">desc con;</span><br><span class="line"># 测试数据可以直接用下面的</span><br><span class="line"></span><br><span class="line"># 复合主键,表级约束,由于复合主键涉及多字段,逻辑比较复杂,一般开发中不会使用</span><br><span class="line">drop table if exists con;</span><br><span class="line">create table con(</span><br><span class="line">	id int,</span><br><span class="line">    name varchar(20),</span><br><span class="line">    primary key(id,name)</span><br><span class="line">);</span><br><span class="line">desc con;</span><br><span class="line"></span><br><span class="line">insert into con(id,name) values (1,&#x27;a&#x27;);</span><br><span class="line">insert into con(id,name) values (1,&#x27;a&#x27;); </span><br><span class="line">insert into con(id,name) values (1,&#x27;b&#x27;); </span><br><span class="line">insert into con(id,name) values (2,&#x27;a&#x27;); </span><br><span class="line">insert into con(id,name) values (3,null);</span><br><span class="line">insert into con(name) values (null,&#x27;a&#x27;);</span><br><span class="line"></span><br><span class="line"># 主键自动递增,这里主键值默认从1开始,按1递增</span><br><span class="line"># 如果insert中途指定了主键值,则从该主键值开始按1递增,如果指定了较小的主键值,会自动升序排序</span><br><span class="line">drop table if exists con;</span><br><span class="line">create table con( </span><br><span class="line">	id int primary key auto_increment,</span><br><span class="line">    name varchar(20)</span><br><span class="line">);</span><br><span class="line">desc con;</span><br><span class="line">insert into con(name) values (&#x27;a&#x27;);</span><br><span class="line">insert into con(name) values (&#x27;b&#x27;);</span><br><span class="line">insert into con(name) values (&#x27;c&#x27;);</span><br><span class="line"># 此外,主键还能分为自然主键和业务主键,自然主键使用较多,业务主键较少</span><br><span class="line"></span><br><span class="line"># 外键 foreign key</span><br><span class="line"># 外键涉及到两张相互有逻辑关系的数据表,主要是为了保证两张表的逻辑关系有效</span><br><span class="line"># 外键关联的两张表有父表和子表之分</span><br><span class="line"># 删除数据时先子表后父表,新增数据时先父表后子表,删除表时先子表后父表,创建表时先父表后子表</span><br><span class="line">drop table if exists son;</span><br><span class="line">drop table if exists dad;</span><br><span class="line">create table dad(</span><br><span class="line">	no int primary key,</span><br><span class="line">    name varchar(20)</span><br><span class="line">);</span><br><span class="line">create table son(</span><br><span class="line">	id int primary key auto_increment,</span><br><span class="line">    name varchar(20),</span><br><span class="line">    dad_no int,</span><br><span class="line">    foreign key(dad_no) references dad(no)</span><br><span class="line">);</span><br><span class="line">insert into dad(no,name) values (001,&#x27;fruit&#x27;);</span><br><span class="line">insert into dad(no,name) values (002,&#x27;animal&#x27;);</span><br><span class="line"></span><br><span class="line">insert into son(name,dad_no) values (&#x27;apple&#x27;,001);</span><br><span class="line">insert into son(name,dad_no) values (&#x27;pear&#x27;,001);</span><br><span class="line">insert into son(name,dad_no) values (&#x27;cat&#x27;,002);</span><br><span class="line">insert into son(name,dad_no) values (&#x27;rabbit&#x27;,002);</span><br><span class="line"># 另外被子表references的父表字段不一定是主键,但至少具有unique的约束</span><br></pre></td></tr></table></figure></div>
<h4 id="七-存储引擎"><a class="markdownIt-Anchor" href="#七-存储引擎"></a> 七、存储引擎</h4>
<h5 id="存储引擎的概念"><a class="markdownIt-Anchor" href="#存储引擎的概念"></a> 存储引擎的概念</h5>
<p>存储引擎是MySQL中特有的术语，表示一个数据表存储、组织数据的方式。不同的存储引擎，数据表存储数据的方式不同。</p>
<h5 id="存储引擎的使用"><a class="markdownIt-Anchor" href="#存储引擎的使用"></a> 存储引擎的使用</h5>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 准备工作</span><br><span class="line">drop table if exists engine;</span><br><span class="line">create table if not exists engine(</span><br><span class="line">	id int primary key auto_increment,</span><br><span class="line">    name varchar(20)</span><br><span class="line">);</span><br><span class="line"># 查看存储引擎,MySQL默认存储引擎为InnoDB</span><br><span class="line">show create table engine;</span><br><span class="line"></span><br><span class="line"># 在创建表时指定存储引擎</span><br><span class="line">drop table if exists engine;</span><br><span class="line">create table engine(</span><br><span class="line">	id int primary key auto_increment,</span><br><span class="line">    name varchar(20)</span><br><span class="line">)engine=innodb default charset=gbk;</span><br><span class="line">show create table engine;</span><br><span class="line"></span><br><span class="line"># 查看MySQL版本</span><br><span class="line">select version();</span><br><span class="line"># 查看支持的存储引擎,不同的MySQL版本支持的存储引擎可能不一样</span><br><span class="line">show engines;</span><br></pre></td></tr></table></figure></div>
<h5 id="常用存储引擎介绍"><a class="markdownIt-Anchor" href="#常用存储引擎介绍"></a> 常用存储引擎介绍</h5>
<h6 id="myisam存储引擎"><a class="markdownIt-Anchor" href="#myisam存储引擎"></a> MyISAM存储引擎</h6>
<p>使用三种文件来表示每个数据表：</p>
<ul>
<li>格式文件(.frm)：存储表结构的定义</li>
<li>数据文件(.myd)：存储表行的内容</li>
<li>索引文件(.myi)：存储表上索引（主键或unique约束字段会自动创建索引）</li>
</ul>
<p>特点：可以被转换为压缩，只读表里节省空间，但不支持事务，安全性低</p>
<h6 id="innodb存储引擎"><a class="markdownIt-Anchor" href="#innodb存储引擎"></a> InnoDB存储引擎</h6>
<p><strong>一般开发中最优先考虑的存储引擎</strong>，重量级的存储引擎，管理的数据表有以下特征：</p>
<ul>
<li>每个数据表在数据库目录中以.frm格式的文件表示</li>
<li>提供一组用于记录事务性获得的日志文件</li>
<li>通过commit、savepoint和rollback支持事务处理</li>
<li>提供全ACID兼容</li>
<li>在MySQL服务器崩溃后能够自动恢复</li>
<li>多版本MVCC和行级锁定</li>
<li>支持外键级引用的完整性，包括级联删除和更新</li>
</ul>
<p>特点：支持事务，以保证数据的安全性，但效率不高，不能压缩不能转换为只读，比较占存储空间</p>
<h6 id="memory存储引擎"><a class="markdownIt-Anchor" href="#memory存储引擎"></a> MEMORY存储引擎</h6>
<p>MEMORY存储引擎以前称为heap存储引擎，管理数据库有以下特征：</p>
<ul>
<li>在数据库目录内，每个数据表均以.frm格式的文件表示</li>
<li>表的数据以及索引被存储在内存中（这显著提升了查询速度）</li>
<li>表级锁机制</li>
<li>不支持text和blob字段</li>
</ul>
<p>特点：字段长度固定，数据存储在内存，这使得它的数据处理效率非常高，但同时一旦MySQL服务重启，存储数据就会丢失，<strong>一般开发中只用于临时存储数据</strong>。</p>
<h4 id="八-事务-视图-数据库设计"><a class="markdownIt-Anchor" href="#八-事务-视图-数据库设计"></a> 八、事务、视图、数据库设计</h4>
<h5 id="事务transaction"><a class="markdownIt-Anchor" href="#事务transaction"></a> 事务(transaction)</h5>
<ol>
<li>
<p>事务的概念：一个事务就是一个完整的业务逻辑，是一个不可再分的最小的工作单元。例如，银行转账，A向B转账1000，A扣除1000，B增加1000。可以用两个update语句实现，但它们必须同时成功或者失败，而不能单独拆分，否则就不构成一个完整的业务逻辑，这就是一个最小的工作单元。</p>
</li>
<li>
<p>只有在使用DML语句时才会涉及到事务，因为只有DML语句会增加、删除、修改数据表的数据，这就离不开事务安全性的考虑。</p>
</li>
<li>
<p>简单理解事务：就是要使多条DML语句同时成功或失败的一种规则。</p>
</li>
<li>
<p>如何实现事务</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"># InnoDB存储引擎提供了一组用来记录事务性活动的日志文件</span><br><span class="line"># 在事务的执行过程中,每一条DML的操作都会记录到“事务性活动的日志文件”中</span><br><span class="line"># 在事务的执行过程通过提交事务或者回滚事务就能实现事务要求的规则</span><br><span class="line"></span><br><span class="line"># MySQL默认是自动提交事务,即每执行一条DML语句就提交一次,但这不符合开发习惯</span><br><span class="line"># 关闭自动提交机制 start transaction(仅对一次事务有效)</span><br><span class="line"># 或者直接设置开启或关闭自动提交(对所有事务有效)</span><br><span class="line">set autocommit=0; # 关闭自动提交</span><br><span class="line">set autocommit=1; # 开启自动提交</span><br><span class="line"># 提交事务commit,回滚事务rollback</span><br><span class="line"># 准备工作</span><br><span class="line">drop table if exists test;</span><br><span class="line">create table test(</span><br><span class="line">	id int primary key auto_increment,</span><br><span class="line">    name varchar(20)</span><br><span class="line">);</span><br><span class="line">select * from test;</span><br><span class="line"></span><br><span class="line">start transaction; # 关闭自动提交机制,commit之后需要重新执行</span><br><span class="line">insert into test(name) values (&#x27;a&#x27;);</span><br><span class="line">insert into test(name) values (&#x27;b&#x27;);</span><br><span class="line">insert into test(name) values (&#x27;c&#x27;);</span><br><span class="line">select * from test;</span><br><span class="line"></span><br><span class="line">rollback; # 回滚事务</span><br><span class="line">select * from test; # 未提交的事务消失</span><br><span class="line"></span><br><span class="line">insert into test(name) values (&#x27;d&#x27;);</span><br><span class="line">commit; # 提交事务</span><br><span class="line">select * from test;</span><br><span class="line"></span><br><span class="line">rollback;</span><br><span class="line">select * from test; # 已经提交的事务,无法回滚</span><br></pre></td></tr></table></figure></div>
</li>
<li>
<p>事务的4个特性（ACID）</p>
<p>A：原子性，事务是最小的工作单元，不可再分。</p>
<p>C：一致性，在同一个事务中，所有操作必须同时成功或者失败，保证数据的一致性。</p>
<p>I：隔离性，A事务与B事务之间存在一定的隔离，根据隔离性可分成4个隔离级别。</p>
<ul>
<li>
<p>读未提交：read uncommitted（隔离级别最低）</p>
<p>事务A能够读取事务B<strong>未提交的数据</strong>，这种隔离级别存在读取到脏数据的问题，即读取到并不需要的数据。一般开发中不会使用这个隔离级别。</p>
</li>
<li>
<p>读已提交：read committed</p>
<p>事务A只能读取事务B<strong>已提交的数据</strong>，这种隔离级别避免了脏读问题，但存在不可重复读取数据的问题，事务B再做任何提交操作之后，事务A读取的数据就会相应地发生改变。读取的数据是比较真实的数据，这是<strong>Oracle数据库默认的隔离级别</strong>。</p>
</li>
<li>
<p>可重复读：repeatable read</p>
<p>事务B开启后，每次从事务B读取的数据都是一致的，即使事务B的数据修改并提交，事务A所<strong>读取到的数据都是事务B刚开始事务时的数据</strong>。这种隔离级别避免了不可重复读的问题，但出现了幻影读的问题，即每次读取到的数据都不是当前的真实数据，这是<strong>MySQL默认的隔离级别</strong>。</p>
</li>
<li>
<p>序列化/串行化：serializable（最高隔离级别）</p>
<p>效率最低，但解决了上面存在的所有问题。这种隔离级别的事务需要排队，不能并发。synchronized线程同步（事务同步），每次读取到的数据都是最真实的，效率也是最低的。</p>
</li>
</ul>
<p>D：持久性，事务完成的保障，事务提交之后，数据就被持久地保存下来。</p>
</li>
<li>
<p>隔离级别验证</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 在同一个命令行或同一个查询下可能无法展示出隔离级别的效果,建议事务A和事务B各打开一个命令行或者在navicat下各新建一个查询</span><br><span class="line"># 建议每次重新设置隔离级别之后重启命令行或navicat刷新</span><br><span class="line"># 查看隔离级别</span><br><span class="line">select @@tx_isolation;</span><br><span class="line"></span><br><span class="line"># 准备工作</span><br><span class="line">create table isolation_level(</span><br><span class="line">	name varchar(20)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"># read uncommitted 读未提交</span><br><span class="line"># 设置全局隔离级别为read uncommitted</span><br><span class="line">set global transaction isolation level read uncommitted;</span><br><span class="line"># 事务A</span><br><span class="line">start transaction;</span><br><span class="line">select * from isolation_level;</span><br><span class="line"># 事务B</span><br><span class="line">start transaction;</span><br><span class="line">insert into isolation_level values (&#x27;hello&#x27;);</span><br><span class="line"># 事务A</span><br><span class="line">select * from isolation_level; # 读取到了未提交的数据</span><br><span class="line"></span><br><span class="line"># read committed 读已提交</span><br><span class="line"># 设置全局隔离级别为read committed</span><br><span class="line">set global transaction isolation level read committed;</span><br><span class="line"># 事务A</span><br><span class="line">start transaction;</span><br><span class="line">select * from isolation_level;</span><br><span class="line"># 事务B</span><br><span class="line">start transaction;</span><br><span class="line">insert into isolation_level values (&#x27;world&#x27;);</span><br><span class="line"># 事务A</span><br><span class="line">select * from isolation_level; # 未读取到事务B的数据</span><br><span class="line"># 事务B</span><br><span class="line">commit;</span><br><span class="line"># 事务A</span><br><span class="line">select * from isolation_level; # 读取到了事务B提交的数据</span><br><span class="line"></span><br><span class="line"># repeatable read 可重复读</span><br><span class="line"># 设置全局隔离级别为repeatable read</span><br><span class="line">set global transaction isolation level repeatable read;</span><br><span class="line"># 事务A</span><br><span class="line">start transaction;</span><br><span class="line">select * from isolation_level;</span><br><span class="line"># 事务B</span><br><span class="line">start transaction; # 第一次开启事务</span><br><span class="line">insert into isolation_level values (&#x27;read&#x27;);</span><br><span class="line"># 事务A</span><br><span class="line">select * from isolation_level;</span><br><span class="line"># 事务B</span><br><span class="line">insert into isolation_level values (&#x27;repeat&#x27;);</span><br><span class="line"># 事务A</span><br><span class="line">select * from isolation_level;</span><br><span class="line"># 事务B</span><br><span class="line">commit;</span><br><span class="line"># 事务A</span><br><span class="line">select * from isolation_level; # 事务A读取到的始终是事务B第一次开启事务时的数据</span><br><span class="line"># 事务A</span><br><span class="line">commit;</span><br><span class="line">select * from isolation_level; # 事务A也提交后再查询,就能获取事务B的最近一次事务提交的数据</span><br><span class="line"># 补充说明:事务B第一次开启事务这个概念是以事务A开启事务后事务B第一次执行start transaction为准,也就是当事务A提交之后再次开启事务,重新计算事务B第一次开启事务</span><br><span class="line"></span><br><span class="line"># serializable 序列化</span><br><span class="line"># 设置全局隔离级别为serializable</span><br><span class="line">set global transaction isolation level serializable;</span><br><span class="line"># 事务A</span><br><span class="line">start transaction;</span><br><span class="line">select * from isolation_level;</span><br><span class="line"># 事务B</span><br><span class="line">start transaction;</span><br><span class="line">insert into isolation_level values (&#x27;serializable&#x27;); # 卡住,因为事务A没有提交</span><br><span class="line"># 事务A</span><br><span class="line">commit; # 提交事务A后事务B新增数据完成</span><br><span class="line">start transaction; # 事务A重新开启事务</span><br><span class="line">select * from isolation_level; # 卡住或超时报错,因为事务B没有提交</span><br><span class="line"># 事务B</span><br><span class="line">commit; # 提交事务B后事务A查询完成视图</span><br></pre></td></tr></table></figure></div>
</li>
</ol>
<h5 id="视图view"><a class="markdownIt-Anchor" href="#视图view"></a> 视图(view)</h5>
<ol>
<li>
<p>视图的概念</p>
<p>从多个角度观察处理同一份数据，每一个角度就是一种视图。  例如，对同一份数据进行不同的处理，根据不同的需求展示出相应部分的数据或者根据不同的权限展示出每个权限被允许接触到的数据。</p>
</li>
<li>
<p>视图的使用</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 准备工作</span><br><span class="line">drop table if exists origin;</span><br><span class="line">create table origin(</span><br><span class="line">	id int primary key auto_increment,</span><br><span class="line">    name varchar(20),</span><br><span class="line">    age int,</span><br><span class="line">    department varchar(20)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">insert into origin(name,age,department) values</span><br><span class="line">(&#x27;apple&#x27;,13,&#x27;developer&#x27;),</span><br><span class="line">(&#x27;orange&#x27;,14,&#x27;operator&#x27;);</span><br><span class="line"># 先备份原表,复制原表</span><br><span class="line">create table origin_backup select * from origin;</span><br><span class="line"></span><br><span class="line"># 创建视图对象,需要as关键字,且只能通过DQL语句创建</span><br><span class="line">create view origin_view as select * from origin;</span><br><span class="line"># 删除视图对象</span><br><span class="line">drop view origin_view;</span><br><span class="line"></span><br><span class="line"># 对视图对象的增删改查会映射到原表的数据上</span><br><span class="line"># 查询视图</span><br><span class="line">select * from origin_view;</span><br><span class="line"># 新增视图数据</span><br><span class="line">insert into origin_view(name,age,department) values</span><br><span class="line">(&#x27;mango&#x27;,12,&#x27;manager&#x27;),</span><br><span class="line">(&#x27;banana&#x27;,16,&#x27;admin&#x27;);</span><br><span class="line"># 查询原表</span><br><span class="line">select * from origin;</span><br><span class="line"># 更新视图数据</span><br><span class="line">update origin_view set age=20 where name=&#x27;mango&#x27;;</span><br><span class="line">select * from origin;</span><br><span class="line"># 删除视图数据</span><br><span class="line">delete from origin_view;</span><br><span class="line">select * from origin;</span><br></pre></td></tr></table></figure></div>
</li>
<li>
<p>视图对象的实际开发用途</p>
<ul>
<li>视图的使用能够有效简化开发，方便维护，提高开发效率</li>
<li>单独的SQL语句只能针对一张数据表的数据进行修改，而视图的使用将多张表的数据集中到一个视图，通过对这个视图数据的修改，就能一次性实现对多张表数据的修改，而不需要每一张数据表重复写一条SQL语句去修改</li>
<li>另外对于后期大量数据表的维护，只需要重新修改视图对象所映射的DQL语句就能灵活地指定需要维护的数据表的数据</li>
</ul>
</li>
</ol>
<h5 id="数据库设计三大范式"><a class="markdownIt-Anchor" href="#数据库设计三大范式"></a> 数据库设计：三大范式</h5>
<h6 id="三大范式的概念"><a class="markdownIt-Anchor" href="#三大范式的概念"></a> 三大范式的概念</h6>
<p>范式是数据库数据表的设计依据，是一种规范和统一标准。设计数据库表时，按照以下3种范式进行，可以避免表中数据的冗余，空间的浪费。</p>
<h6 id="第一范式"><a class="markdownIt-Anchor" href="#第一范式"></a> 第一范式</h6>
<p>第一范式：要求任何一张表必须有主键，每一个字段原子性不可再分。</p>
<p>字段原子性是指字段数据不能再拆分，例如，联系方式字段下的数据同时出现手机号和邮箱两个联系方式，说明联系方式字段还能拆分未手机号和邮箱两个字段。</p>
<h6 id="第二范式"><a class="markdownIt-Anchor" href="#第二范式"></a> 第二范式</h6>
<p>第二范式：建立在第一范式的基础之上，要求所有非主键字段完全依赖主键，<br />
不要产生部分依赖。</p>
<p>部分依赖通常出现在多对多逻辑关系(例如多个学生对应多个教师)的数据表中，假设把学生编号和教师编号设置为复合主键，学生依赖学生编号，教师依赖教师编号，这就产生了部分依赖(<strong>部分依赖产生的根源就是复合主键的存在，因此设计中一般不建议使用复合主键</strong>)。从根本上解决这个问题，就需要将这一张数据表分成学生表，教师表以及关系表三张数据表，并在关系表中设置学生表和教师表两个外键。</p>
<h6 id="第三范式"><a class="markdownIt-Anchor" href="#第三范式"></a> 第三范式</h6>
<p>第三范式：建立在第二范式的基础之上，要求所有非主键字段直接依赖主键，<br />
不要产生传递依赖。</p>
<p>传递依赖通常出现在一对多逻辑关系(例如一个班级对应多个学生)的数据表中，假设学生编号为主键，班级名称依赖班级编号，而一个班级编号依赖多个学生编号，这就产生了传递依赖。为了解决这个问题，就需要将这一张数据表分成学生表和班级表，外键则设置在数据相对较多的数据表中。</p>
<h6 id="数据表设计总结"><a class="markdownIt-Anchor" href="#数据表设计总结"></a> 数据表设计总结</h6>
<ul>
<li>
<p>一对多，两张表，数据多的加外键</p>
</li>
<li>
<p>多对多，三张表，关系表两个外键</p>
</li>
<li>
<p>另外对于一对一逻辑关系的数据表，如果字段数过多也建议进行表的拆分。一般拆分成两张表，这时只需要在其中一张表中添加一个唯一性约束(一对一逻辑关系的数据表理论上不可能出现重复的外键字段值)的外键字段即可，外键字段通常链接的是另一张表的主键字段。</p>
</li>
</ul>
<p>最后，数据库设计三大范式也只是理想上的标准。实际开发中，结合实际需求，有必要牺牲一部分存储空间、规范等来换取更高的开发效率和更好的使用体验，这才是数据库数据表设计的最高目的。</p>
]]></content>
      <categories>
        <category>MySQL5</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>RSS订阅的使用以及优势</title>
    <url>/2022/09/04/RSS/</url>
    <content><![CDATA[<h3 id="rssreally-simple-syndication简易信息聚合"><a class="markdownIt-Anchor" href="#rssreally-simple-syndication简易信息聚合"></a> RSS(Really Simple Syndication)简易信息聚合</h3>
<h4 id="定义"><a class="markdownIt-Anchor" href="#定义"></a> 定义</h4>
<p>RSS本身是一种消息来源格式规范，主要用于聚合数据时效性很强的网站，例如个人博客文章、新闻，以及很多社交网站。RSS文件包含全文或者部分内容。<span id="more"></span></p>
<h4 id="特点"><a class="markdownIt-Anchor" href="#特点"></a> 特点</h4>
<ul>
<li>能够自主选择您感兴趣的内容和信息进行浏览</li>
<li>通过RSS，您可以把需要的信息从网站中筛选出来，排除掉那些不需要的信息，例如广告</li>
<li>通过RSS，您可以创建自己的新闻频道，并发布到互联网上供其他人以RSS订阅您的新闻频道</li>
<li>使用RSS的客户端，能够在不打开网站内容页面的情况下阅读支持RSS输出的网站内容</li>
</ul>
<h4 id="客户端"><a class="markdownIt-Anchor" href="#客户端"></a> 客户端</h4>
<p>windows平台这里推荐微软商店的Fluent Reader<a class="link"   href="https://apps.microsoft.com/store/detail/9P71FC94LRH8" >官网链接 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <tags>
        <tag>RSS</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis基础</title>
    <url>/2022/09/14/Redis-Base/</url>
    <content><![CDATA[<h3 id="redis基础"><a class="markdownIt-Anchor" href="#redis基础"></a> Redis基础</h3>
<h4 id="概念"><a class="markdownIt-Anchor" href="#概念"></a> 概念</h4>
<p>redis是一款高性能的NoSQL系列的非关系型数据库，全称Remote Dictionary Server远程字典服务器，是基于C语言开发的一个开源的高性能键值对数据库<span id="more"></span></p>
<p>NoSQL，全称Not-Only SQL，泛指非关系型的数据库，专门用于应对基于海量用户和海量数据下的数据处理问，不同于MySQL这类关系型数据库，NoSQL系列的非关系型数据库减少了磁盘读写次数、去除了数据间的关联性弥补关系型数据库在磁盘读写性能、复杂的数据关联性难于扩展的不足，专门用于应对大量用户<strong>高并发</strong>的问题</p>
<p>但非关系型数据库与关系型数据库在开发中一般会配合使用，非关系型数据库能实现大量数据的高效率访问，关系型数据库能实现复杂的数据查询以及保障安全性能的事务机制。单一的非关系数据库则无法实现复杂查询、安全保障，单一的关系型数据库也无法实现高效访问。因此联合使用非关系数据库和关系型数据库，相互弥补缺点，才能提供最好的用户体验。</p>
<h4 id="开始使用"><a class="markdownIt-Anchor" href="#开始使用"></a> 开始使用</h4>
<h5 id="下载安装"><a class="markdownIt-Anchor" href="#下载安装"></a> 下载安装</h5>
<p>redis<a class="link"   href="https://redis.io" >官网 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>以及<a class="link"   href="http://www.redis.net.cn/" >中文官网 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>主要提供的是Linux发行版下的redis版本，用于投入开发使用。本文章以windows系统下的redis版本做为学习使用，在GitHub上的<a class="link"   href="https://github.com/microsoftarchive/redis/releases" >Releases · microsoftarchive/redis <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>下载zip压缩包找到内部的release目录下含有redis主要的exe文件的压缩包后解压即可（这里是以2.8.9版本为例）</p>
<p>关于redis的图形化管理工具<a class="link"   href="https://github.com/uglide/RedisDesktopManager" >下载 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>(最新版本需要收费使用)</p>
<h5 id="重要文件"><a class="markdownIt-Anchor" href="#重要文件"></a> 重要文件</h5>
<p>redis压缩包解压后目录下的重要文件主要是以下文件：</p>
<ul>
<li>redis.windows.conf：配置文件</li>
<li>redis-cli.exe：redis客户端</li>
<li>redis-server.exe：redis服务器端</li>
</ul>
<h5 id="基本操作"><a class="markdownIt-Anchor" href="#基本操作"></a> 基本操作</h5>
<p><strong>请确保redis服务器端先启动，否则redis客户端在启动后将会无法连接至redis服务器端</strong></p>
<p>redis数据类型：string、hash、list、set、sorted_set/zset</p>
<p>注意：在未持久化redis中的数据时，关闭redis服务器端会导致在redis客户端存储的数据全部丢失，因此请在确保redis服务器端一直运行的前提下，测试下面的命令操作</p>
<ol>
<li>
<p>字符串类型：string</p>
<p>主要用于存储单个数据，是最简单也是最常用的数据存储类型</p>
<p>一个存储空间存储一个数据</p>
<p>存储的数据如果是整数类型，则可进行数字操作</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 存储命令</span></span><br><span class="line"><span class="comment"># 格式: set key value</span></span><br><span class="line"><span class="comment"># 存储一个键为name, 值为tom的字符串数据</span></span><br><span class="line"><span class="built_in">set</span> name tom</span><br><span class="line"><span class="comment"># 存储一个键为age, 值为26的字符串数据</span></span><br><span class="line"><span class="built_in">set</span> age 26</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取命令</span></span><br><span class="line"><span class="comment"># 格式: get key</span></span><br><span class="line"><span class="comment"># 获取name键对应的值</span></span><br><span class="line">get name</span><br><span class="line"><span class="comment"># 获取age键对应的值</span></span><br><span class="line">get age</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除命令</span></span><br><span class="line"><span class="comment"># 格式: del key</span></span><br><span class="line"><span class="comment"># 删除name键对应的值</span></span><br><span class="line">del name</span><br><span class="line"><span class="comment">#删除age键对应的值</span></span><br><span class="line">del age</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新获取值, 确认是否已经删除</span></span><br><span class="line">get name</span><br><span class="line">get age</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数字操作命令</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自增处理incr key, 当key不存在时会自动创建, 默认自增值1</span></span><br><span class="line">incr num <span class="comment">#num键若不存在, 则自动创建</span></span><br><span class="line"><span class="comment"># 自增指定数据incrby key increment</span></span><br><span class="line">incrby num 20 <span class="comment">#指定num键的值自增20</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自减处理decr key, 同样的若key不存在会自动创建, 默认自减值1</span></span><br><span class="line">decr num</span><br><span class="line"><span class="comment"># 自减指定数据decrby key decrement</span></span><br><span class="line">decrby num 30</span><br></pre></td></tr></table></figure></div>
</li>
<li>
<p>哈希类型：hash</p>
<p>主要用于分组存储有一定关联性的数据，比如java对象中的一系列成员变量数据</p>
<p>一个存储空间存储多个键值对数据</p>
<p>底层使用哈希表结构实现数据存储</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 存储命令</span></span><br><span class="line"><span class="comment"># 格式: hset key field value</span></span><br><span class="line"><span class="comment"># 在myhash键中存储一个name字段, 值为jerry的数据</span></span><br><span class="line">hset myhash name jerry</span><br><span class="line"><span class="comment"># 在myhash键中存储一个password字段, 值为pass的数据</span></span><br><span class="line">hset myhash password pass</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取命令</span></span><br><span class="line"><span class="comment"># 格式一: hget key field 获取指定的field所对应的值</span></span><br><span class="line"><span class="comment"># 获取myhash键中name字段的值</span></span><br><span class="line">hget myhash name</span><br><span class="line"><span class="comment"># 格式二: hgetall key 获取指定key下的所有field和value</span></span><br><span class="line"><span class="comment"># 获取myhash键下的所有键值对数据</span></span><br><span class="line">hgetall myhash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除命令</span></span><br><span class="line"><span class="comment"># 格式: hdel key field</span></span><br><span class="line"><span class="comment"># 删除myhash键下的name字段及其对应的值</span></span><br><span class="line">hdel myhash name</span><br></pre></td></tr></table></figure></div>
</li>
<li>
<p>列表类型：list</p>
<p>主要用于存储多个数据，并对数据先后进入存储空间的顺序进行区分</p>
<p>一个存储空间存储多个数据，且区分数据存储的先后顺序</p>
<p>底层使用双向链表结构实现数据存储</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 存储命令</span></span><br><span class="line"><span class="comment"># 格式一: lpush key value 在列表左边(头部)添加数据</span></span><br><span class="line"><span class="comment"># 格式二: rpush key value 在列表右边(尾部)添加数据</span></span><br><span class="line"><span class="comment"># 先任意添加一个测试的初始数据</span></span><br><span class="line">lpush mylist origin</span><br><span class="line"><span class="comment"># 在mylist键列表头部添加一个数据</span></span><br><span class="line">lpush mylist <span class="built_in">head</span></span><br><span class="line"><span class="comment"># 在mylist键列表尾部添加一个数据</span></span><br><span class="line">rpush mylist <span class="built_in">tail</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取命令</span></span><br><span class="line"><span class="comment"># lrange key start end 根据start和end的范围获取</span></span><br><span class="line"><span class="comment"># list数据下标从0开始, 若使用负数, 则表示从列表尾部倒数第几个数据</span></span><br><span class="line"><span class="comment"># 获取mylist下标0-2的数据</span></span><br><span class="line">lrange mylist 0 2</span><br><span class="line">lrange mylist 0 -1 <span class="comment">#-1表示列表倒数第一个数据, 即正数最后一个数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除命令</span></span><br><span class="line"><span class="comment"># 格式一: lpop key 删除列表最左边的数据</span></span><br><span class="line"><span class="comment"># 格式二: rpop key 删除列表最右边的数据</span></span><br><span class="line"><span class="comment"># 删除mylist键列表头部的一个数据</span></span><br><span class="line">lpop mylist</span><br><span class="line"><span class="comment"># 删除mylist键列表尾部的一个数据</span></span><br><span class="line">rpop mylist</span><br></pre></td></tr></table></figure></div>
</li>
<li>
<p>集合类型：set</p>
<p>主要用于存储大量的数据，提供更高的数据查询效率</p>
<p>一个存储空间能够存储大量数据，且具有高效的内部存储机制</p>
<p>底层与hash存储结构相同，并且不允许存储重复的值</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 存储命令</span></span><br><span class="line"><span class="comment"># 格式: sadd key value</span></span><br><span class="line"><span class="comment"># 在myset键存储一个值为a的数据</span></span><br><span class="line">sadd myset a <span class="comment">#第二次重复执行, 不会再新增数据</span></span><br><span class="line">sadd myset b</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取命令</span></span><br><span class="line"><span class="comment"># 格式: smembers key</span></span><br><span class="line"><span class="comment"># 获取myset键中的所有数据</span></span><br><span class="line">smembers myset</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除命令</span></span><br><span class="line"><span class="comment"># 格式: srem key value</span></span><br><span class="line"><span class="comment"># 删除myset键中值为a的数据</span></span><br><span class="line">srem myset a</span><br></pre></td></tr></table></figure></div>
</li>
<li>
<p>有序集合类型：sorted_set</p>
<p>不允许存储重复数据，并且存储的数据是有顺序的，每个数据会关联一个double类型的分数作为排序的依据</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 存储命令</span></span><br><span class="line"><span class="comment"># 格式: zadd key score value</span></span><br><span class="line"><span class="comment"># 在mysort键存储一个分数为3, 值为pascal的数据</span></span><br><span class="line">zadd mysort 3 pascal</span><br><span class="line"><span class="comment"># 在mysort键存储一个分数为1, 值为visual的数据</span></span><br><span class="line">zadd mysort 1 visual</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取命令</span></span><br><span class="line"><span class="comment"># 格式: zrange key start end 范围获取, 可参考list列表类型的获取命令来理解</span></span><br><span class="line"><span class="comment"># 获取mysort键下的所有数据</span></span><br><span class="line">zrange mysort 0 -1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除命令</span></span><br><span class="line"><span class="comment"># 格式: zrem key value</span></span><br><span class="line"><span class="comment"># 删除mysort键下值为visual的数据</span></span><br><span class="line">zrem mysort visual</span><br></pre></td></tr></table></figure></div>
<p><strong>通用命令操作</strong></p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查询所有的键</span></span><br><span class="line">keys *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取指定键对应的数据类型</span></span><br><span class="line"><span class="comment"># 获取mysort键对应的数据类型</span></span><br><span class="line"><span class="built_in">type</span> mysort</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除指定的键及其数据</span></span><br><span class="line"><span class="comment"># 删除myhash键下的所有键值对数据</span></span><br><span class="line">del myhash</span><br></pre></td></tr></table></figure></div>
</li>
</ol>
<h4 id="持久化"><a class="markdownIt-Anchor" href="#持久化"></a> 持久化</h4>
<h5 id="rdb方式"><a class="markdownIt-Anchor" href="#rdb方式"></a> RDB方式</h5>
<p>redis作为一个内存数据库，当redis服务器重启后，数据就会丢失。为了能够在redis服务器重启后能够快速恢复缓存的数据，就需要使用持久化技术</p>
<ul>
<li>
<p>redis持久化机制：每隔一定时间检测key的变化情况，根据配置决定是否进行持久化。持久化的数据就存储在dump.rdb文件中。</p>
</li>
<li>
<p>持久化配置过程：打开redis.windows.conf文件，找到<code># Save the DB on disk</code>所在的位置，在#注释的下方可以看到<code>save 900 1</code>的字样，这些原始的字样就是默认的持久化机制。通过修改这些字样就能设置持久化机制。</p>
</li>
<li>
<p>关于持久化配置的简单说明：</p>
<p><code>save 900 1</code></p>
<h6 id="after-900-sec-15-min-if-at-least-1-key-changed"><a class="markdownIt-Anchor" href="#after-900-sec-15-min-if-at-least-1-key-changed"></a> after 900 sec (15 min) if at least 1 key changed</h6>
<h6 id="经过15分钟如果至少有一个key发生变化那么就进行一次持久化"><a class="markdownIt-Anchor" href="#经过15分钟如果至少有一个key发生变化那么就进行一次持久化"></a> 经过15分钟，如果至少有一个key发生变化，那么就进行一次持久化</h6>
<p><code>save 300 10</code></p>
<h6 id="after-300-sec-5-min-if-at-least-10-keys-changed"><a class="markdownIt-Anchor" href="#after-300-sec-5-min-if-at-least-10-keys-changed"></a> after 300 sec (5 min) if at least 10 keys changed</h6>
<h6 id="经过5分钟如果至少有10个key发生变化那么就进行一次持久化"><a class="markdownIt-Anchor" href="#经过5分钟如果至少有10个key发生变化那么就进行一次持久化"></a> 经过5分钟，如果至少有10个key发生变化，那么就进行一次持久化</h6>
<p><code>save 60 10000</code></p>
<h6 id="after-60-sec-1-min-if-at-least-10000-keys-changed"><a class="markdownIt-Anchor" href="#after-60-sec-1-min-if-at-least-10000-keys-changed"></a> after 60 sec (1 min) if at least 10000 keys changed</h6>
<h6 id="经过1分钟如果至少有10000个key发生变化那么就进行一次持久化"><a class="markdownIt-Anchor" href="#经过1分钟如果至少有10000个key发生变化那么就进行一次持久化"></a> 经过1分钟，如果至少有10000个key发生变化，那么就进行一次持久化</h6>
</li>
<li>
<p>持久化机制测试：</p>
<blockquote>
<p>配置之前请先确保关闭redis服务器，以防配置无法生效</p>
<ol>
<li>
<p>修改配置文件在指定位置添加字样<code>save 10 5</code>，10秒后有5个key发生变化，则持久化</p>
</li>
<li>
<p>在redis根目录下打开cmd，通过<code>redis-server.exe  redis.windows.conf</code>命令启动redis服务器，否则持久化机制还是使用默认方式，如果觉得麻烦可以看<a href="#bc">补充</a></p>
</li>
<li>
<p>打开redis客户端</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 测试数据, 修改5个key</span></span><br><span class="line"><span class="built_in">set</span> name 1</span><br><span class="line"><span class="built_in">set</span> name 2</span><br><span class="line"><span class="built_in">set</span> name 3</span><br><span class="line"><span class="built_in">set</span> name 4</span><br><span class="line"><span class="built_in">set</span> name 5</span><br><span class="line"><span class="comment"># 之后根据save 10 5的配置, 会在redis的根目录下生成dump.rdb文件</span></span><br></pre></td></tr></table></figure></div>
</li>
<li>
<p>关闭redis服务器和客户端，再重启服务器和客户端重新查询数据，测试数据是否实现持久化</p>
</li>
</ol>
</blockquote>
</li>
</ul>
<h5 id="aof方式"><a class="markdownIt-Anchor" href="#aof方式"></a> AOF方式</h5>
<p>AOF是一种日志记录，用于记录redis每一条命令执行的历史操作，可在每一次命令操作后持久化数据</p>
<p>AOF配置过程：打开redis.windows.conf文件，找到<code>appendonly no</code>字样修改<code>no</code>为<code>yes</code>开启AOF支持。再找到<code>#appendfsync</code>开头的字样，去掉前面的<code>#</code>启动持久化机制</p>
<p>AOF持久化机制简单说明：<code>appendfsync always</code>每一次操作进行一次持久化，<code>appendfsync everysec</code>每隔一秒进行一次持久化，<code>appendfsync no</code>不进行持久化</p>
<p>注意：在redis根目录下用cmd执行<code>redis-server.exe  redis.windows.conf</code>命令启动服务器，否则配置可能不生效</p>
<h4 id="span-idbc补充span"><a class="markdownIt-Anchor" href="#span-idbc补充span"></a> <span id='bc'>补充</span></h4>
<h5 id="关于redis-serverexe启动时默认加载配置文件"><a class="markdownIt-Anchor" href="#关于redis-serverexe启动时默认加载配置文件"></a> 关于redis-server.exe启动时默认加载配置文件</h5>
<p>右击文件<strong>创建快捷方式</strong>，右击快捷方式<strong>设置属性</strong>，在<strong>目标</strong>的后面<strong>添加空格和配置文件名</strong>，配置完后的示例<code>D:\redis-2.8.9\redis-server.exe redis.windows.conf</code>，前面的exe文件路径根据本地实际情况配置，默认是已有的，然后<strong>点击应用</strong>。之后使用该快捷方式启动服务器就能自动加载配置文件</p>
<h5 id="关于redisqfork_8412dat文件"><a class="markdownIt-Anchor" href="#关于redisqfork_8412dat文件"></a> 关于RedisQFork_8412.dat文件</h5>
<p>这是redis的内存映射文件。当redis启动时会自动创建，redis关闭后会自动消失。不过这个文件会随数据量的增长而增长，没有限制能够增长到几十G的大小，如果硬盘空间无法容纳这几十G的大小，就无法启动redis服务。可以通过修改配置文件中的<code>maxheap</code>字样后的参数实现（单位B），如设置最大为4G，则填写4294967296（4GB换算成B）</p>
]]></content>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>算法概念性知识</title>
    <url>/2023/05/04/algorithm-concept/</url>
    <content><![CDATA[<p>本文主要介绍一些经典算法的概念性知识，以及对算法思想的一些理解，不涉及任何具体的代码实现。<span id="more"></span></p>
<h3 id="算法的相关概念"><a class="markdownIt-Anchor" href="#算法的相关概念"></a> 算法的相关概念</h3>
<p>算法的定义：它是若干指令的有穷序列。有以下性质</p>
<ul>
<li>输入：有外部提供的量作为算法的输入。</li>
<li>输出：算法至少产生一个量作为输出。</li>
<li>确定性：组成算法的每条指令是清晰的、无歧义的。</li>
<li>有限性：算法中的每条指令的执行次数是有限的，执行每条指令的时间也是有限的。</li>
</ul>
<p>程序的定义：它是算法用某种程序设计语言的具体实现，可以不用满足<strong>有限性</strong>的性质。</p>
<h3 id="算法复杂性"><a class="markdownIt-Anchor" href="#算法复杂性"></a> 算法复杂性</h3>
<p>5个渐进性分析记号<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi></mrow><annotation encoding="application/x-tex">O</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span></span></span></span>、<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">Ω</mi></mrow><annotation encoding="application/x-tex">\Omega</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">Ω</span></span></span></span>、<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>o</mi></mrow><annotation encoding="application/x-tex">o</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">o</span></span></span></span>、<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ω</mi></mrow><annotation encoding="application/x-tex">\omega</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span></span></span></span>、<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>θ</mi></mrow><annotation encoding="application/x-tex">\theta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span></span></span>，假设对所有的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo stretchy="false">(</mo><mi>n</mi><mo>&gt;</mo><mn>0</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">n(n&gt;0)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">n</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mclose">)</span></span></span></span>，都有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>≥</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">f(n)\geq0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>g</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>≥</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">g(n)\geq0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>。</p>
<p>渐进上界记号<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi></mrow><annotation encoding="application/x-tex">O</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span></span></span></span></p>
<p>定义：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>g</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">{</mo><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">O(g(n))=\{f(n)|</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mord">∣</span></span></span></span>存在正常数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi></mrow><annotation encoding="application/x-tex">c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">c</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">n_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>使得对所有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>≥</mo><msub><mi>n</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">n\geq n_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>有：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn><mo>≤</mo><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>≤</mo><mi>c</mi><mi>g</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">0 \leq f(n) \leq cg(n)\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">c</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mclose">}</span></span></span></span>，则称函数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>当<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span>充分大时有上界，且<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>g</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">g(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>是它的一个上界，记为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi>O</mi><mo stretchy="false">(</mo><mi>g</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(n)=O(g(n))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span>，又称为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>的阶不高于<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>g</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">g(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>的阶。</p>
<p>渐进下界记号<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">Ω</mi></mrow><annotation encoding="application/x-tex">\Omega</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">Ω</span></span></span></span></p>
<p>定义：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">Ω</mi><mo stretchy="false">(</mo><mi>g</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">{</mo><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">\Omega (g(n))=\{f(n)|</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Ω</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mord">∣</span></span></span></span>存在正常数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi></mrow><annotation encoding="application/x-tex">c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">c</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">n_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>使得对所有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>≥</mo><msub><mi>n</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">n\geq n_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>有：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn><mo>≤</mo><mi>c</mi><mi>g</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>≤</mo><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">0 \leq cg(n) \leq f(n)\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">c</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mclose">}</span></span></span></span>，则称函数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>当<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span>充分大时有下界，且<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>g</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">g(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>是它的一个下界，记为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi mathvariant="normal">Ω</mi><mo stretchy="false">(</mo><mi>g</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(n)=\Omega (g(n))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Ω</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span>，又称为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>的阶不低于<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>g</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">g(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>的阶。</p>
<h3 id="递归"><a class="markdownIt-Anchor" href="#递归"></a> 递归</h3>
<p>递归算法是直接或间接调用自身的算法。</p>
<p>递归函数不一定能用非递归的方式实现。</p>
<p>斐波那契数列既可以用递归实现，也可以用非递归实现。</p>
<p>递归算法容易定义，结构清晰，但运行效率较低，一般情况下，耗费的计算时间和存储空间都要比非递归算法多。</p>
<h3 id="分治"><a class="markdownIt-Anchor" href="#分治"></a> 分治</h3>
<p>分治法的基本思想是将规模较大的问题划分为规模较小的子问题来求解。</p>
<p>二分搜索算法的前提是<strong>数据有序</strong>。</p>
<p>用分治法求解大整数乘法和Strassen矩阵乘法的基本思想是通过合理的变换运算来减少乘法的次数。</p>
<p>合并排序和快速排序的平均时间复杂性均为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(nlogn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>。</p>
<h3 id="动态规划"><a class="markdownIt-Anchor" href="#动态规划"></a> 动态规划</h3>
<p>动态规划也是将规模较大的问题划分为规模较小的子问题来求解，但与分治法不同的是，动态规划所划分出来的子问题相互不独立。</p>
<p>动态规划算法适用于求解最优化问题，一般采用自底向上的方式来计算。</p>
<blockquote>
<p>自底向上和自顶向下的根本区别是：自底向上的分析，是从具体到抽象；自顶向下的分析，是从抽象到具体。</p>
<p>参考<a class="link"   href="https://www.cnblogs.com/Qsir/p/5838802.html" >https://www.cnblogs.com/Qsir/p/5838802.html <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</blockquote>
<p>动态规划求解的问题也可以用递归算法求解，但是可能会造成重复计算和不必要的资源耗费。</p>
<p>动态规划求解的问题具有最优子结构和重叠子问题性质。</p>
<p>利用动态规划求解矩阵连乘问题时，其渐进时间复杂度为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>3</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^3)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> (<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span>表示矩阵个数)。</p>
<p>使用动态规划求解最优二叉搜索树的时间复杂度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>3</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^3)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span>是序列元素数量。</p>
<p>动态规划求解0-1背包问题时，其时间复杂度是伪多项式。</p>
<blockquote>
<p>关于伪多项式时间算法可参考<a class="link"   href="https://stackoverflow.com/questions/19647658/what-is-pseudopolynomial-time-how-does-it-differ-from-polynomial-time" >algorithm - What is pseudopolynomial time? How does it differ from polynomial time? <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</blockquote>
<p>使用动态规划算法求解2个长度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span>的序列的最长公共子序列的时间复杂度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>。</p>
<h3 id="贪心"><a class="markdownIt-Anchor" href="#贪心"></a> 贪心</h3>
<p>贪心算法可能存在多个贪心策略，具有最优子结构的性质，常常使用堆结构存储数据。</p>
<p>求解<a class="link"   href="https://blog.csdn.net/qq_40452317/article/details/88875384" >活动安排问题 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>的贪心算法GreedySelector的时间复杂性为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(nlogn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>，对活动进行结束时间的非减排序后，再使用GreedySelector求解的时间复杂度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>。</p>
<p>哈夫曼编码是一种最优前缀码，其时间复杂度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(nlogn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>，其各字符的编码不一定唯一。</p>
<blockquote>
<p>当有多个权重相等的字符时，其在哈夫曼树中的位置不唯一，它可以是左子树也可以是右子树，即字符可能存在多种编码情况。</p>
<p>哈夫曼编码只是保证平均查找码长最小，但平均查找码长最小的编码组合不一定唯一。</p>
</blockquote>
<p>对于给定的一个带权有向图<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>G</mi><mo>=</mo><mo stretchy="false">(</mo><mi>V</mi><mo separator="true">,</mo><mi>E</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">G=(V,E)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">G</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mclose">)</span></span></span></span>，无法使用<code>Dijkstra</code>算法求解出其最短路径，因为<code>Dijkstra</code>无法处理带负权图。可以使用<code>Bellman-Ford</code>算法求解，不过<code>Bellman-Ford</code>是基于动态规划设计的。</p>
<blockquote>
<p><code>Dijkstra</code>算法无法处理有<strong>负边</strong>的问题，只适用于无负权图，参考<a class="link"   href="https://www.cnblogs.com/FengZeng666/p/11245243.html" >dijkstra算法为什么不能有负边？ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>这种“负边问题”也是贪心算法本身的缺陷。</p>
<p><code>Dijkstra</code>是以点为单位进行操作，<code>Bellman-Ford</code>是以边为单位进行操作。</p>
<p>关于<code>Bellman-Ford</code>算法可以参考<a class="link"   href="https://www.cnblogs.com/lfri/p/9521271.htmls" >Bellman-Ford与SPFA <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</blockquote>
<p>0-1背包问题不一定能用贪心算法得到最优解 ，背包问题(可散装)的贪心算法也就不适用于0-1背包问题，可能导致背包无法装满。</p>
<h3 id="时间复杂性表达式分析"><a class="markdownIt-Anchor" href="#时间复杂性表达式分析"></a> 时间复杂性表达式分析</h3>
<p>对于<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mn>2</mn><mi>T</mi><mo stretchy="false">(</mo><mi>n</mi><mi mathvariant="normal">/</mi><mn>2</mn><mo stretchy="false">)</mo><mo>+</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">T(n)=2T(n/2)+n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mord">/</span><span class="mord">2</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><mn>0</mn><mo stretchy="false">)</mo><mo>=</mo><mi>T</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">T(0)=T(1)=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord">0</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，(这种表达式正好就是快速排序的时间复杂性表达式)</p>
<p>以下说法是正确的，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T(n)=O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>、<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi>θ</mi><mo stretchy="false">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T(n)=\theta (nlogn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>、<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T(n)=O(nlogn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></p>
<p>以下说法是错误的，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi mathvariant="normal">Ω</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T(n)=\Omega (n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord">Ω</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，应为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi mathvariant="normal">Ω</mi><mo stretchy="false">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T(n)=\Omega(nlogn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Ω</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></p>
<blockquote>
<p>关于<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi></mrow><annotation encoding="application/x-tex">O</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span></span></span></span>、<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>θ</mi></mrow><annotation encoding="application/x-tex">\theta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span></span></span>、<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">Ω</mi></mrow><annotation encoding="application/x-tex">\Omega</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">Ω</span></span></span></span>可以类比为高阶、同阶、低阶。</p>
</blockquote>
<h3 id="np完全理论"><a class="markdownIt-Anchor" href="#np完全理论"></a> NP完全理论</h3>
<p>P类问题：所有可以在多项式时间内求解的判定问题。例如，冒泡排序、快速排序、最短路径等。</p>
<p>NP问题：无法确定具体的多项式时间，但是对于它的解可以在多项式时间内验证。例如，超大规模的数字计算，可能无法在短时间内求解，但是可以假设一个解并在短时间得到验证。</p>
<p>NPC问题：也称NP完备问题，这类NP完备问题如果能在多项式时间内解决，那么NP中的每一个问题都可以在多项式时间内解决，即所有NP类问题都可以在多项式时间内规约到某个NPC问题。</p>
<p>但是目前尚未得到一个NP完备问题的多项式时间算法。</p>
<blockquote>
<p>P类问题和NP问题，都可在多项式时间内求解，不同的是NP问题是非确定性的。</p>
<p>第一个NPC问题是SAT布尔可满足性问题，又由Cook提出。</p>
</blockquote>
<h3 id="排序相关"><a class="markdownIt-Anchor" href="#排序相关"></a> 排序相关</h3>
<p>对于有序数组再排序，比较次数最少的是插入排序。</p>
<h3 id="图相关"><a class="markdownIt-Anchor" href="#图相关"></a> 图相关</h3>
<p>对于任意无向连通图<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>G</mi><mo>=</mo><mo stretchy="false">(</mo><mi>V</mi><mo separator="true">,</mo><mi>E</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">G=(V,E)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">G</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mclose">)</span></span></span></span>，当<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>G</mi></mrow><annotation encoding="application/x-tex">G</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">G</span></span></span></span>采用邻接矩阵存储时，关于其最小生成树</p>
<ul>
<li>图<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>G</mi></mrow><annotation encoding="application/x-tex">G</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">G</span></span></span></span>的最小生成树是<strong>不唯一</strong>的</li>
<li>对于图<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>G</mi></mrow><annotation encoding="application/x-tex">G</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">G</span></span></span></span>可以采用<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mi>r</mi><mi>i</mi><mi>m</mi></mrow><annotation encoding="application/x-tex">Prim</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">i</span><span class="mord mathnormal">m</span></span></span></span>算法或<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>K</mi><mi>r</mi><mi>u</mi><mi>s</mi><mi>k</mi><mi>a</mi><mi>l</mi></mrow><annotation encoding="application/x-tex">Kruskal</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">u</span><span class="mord mathnormal">s</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span></span></span></span>算法来求解其最小生成树</li>
<li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mi>r</mi><mi>i</mi><mi>m</mi></mrow><annotation encoding="application/x-tex">Prim</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">i</span><span class="mord mathnormal">m</span></span></span></span>算法的复杂度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span>为图中顶点的数量</li>
<li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>K</mi><mi>r</mi><mi>u</mi><mi>s</mi><mi>k</mi><mi>a</mi><mi>l</mi></mrow><annotation encoding="application/x-tex">Kruskal</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">u</span><span class="mord mathnormal">s</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span></span></span></span>算法的复杂度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>e</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>e</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(eloge)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">e</span><span class="mclose">)</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>e</mi></mrow><annotation encoding="application/x-tex">e</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">e</span></span></span></span>为图中边的数量</li>
</ul>
<h3 id="线性时间选择"><a class="markdownIt-Anchor" href="#线性时间选择"></a> 线性时间选择</h3>
<p>线性时间查找最小的元素或者第<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span>小的元素最少也要<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>的时间复杂度，即遍历整个元素集合的时间复杂度。</p>
<p>使用线性时间选择Select算法求解，只有在元素已经有序的前提下，其时间复杂度才为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(logn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>。</p>
<p>当<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mo>≤</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">k\leq nlogn</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83041em;vertical-align:-0.13597em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">n</span></span></span></span>或<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mo>≥</mo><mi>n</mi><mo>−</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">k\geq n-nlogn</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83041em;vertical-align:-0.13597em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">n</span></span></span></span>时，使用堆排序可能在<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>的时间复杂度内求解。</p>
<h3 id="最优装载问题"><a class="markdownIt-Anchor" href="#最优装载问题"></a> 最优装载问题</h3>
<p>最优装载问题就是0-1背包问题的一个变形。</p>
<p>对于最优装载问题，一定存在一组可行解。</p>
<p>最优装载问题，使用贪心算法来求解，自然有最优子结构的性质。</p>
<p>最优装载问题的贪心策略是选择重量最轻的集装箱先装。</p>
<h3 id="散装背包问题"><a class="markdownIt-Anchor" href="#散装背包问题"></a> 散装背包问题</h3>
<p>散装背包问题使用贪心算法求解，其时间复杂度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(nlogn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>。</p>
<h3 id="硬币称重问题"><a class="markdownIt-Anchor" href="#硬币称重问题"></a> 硬币称重问题</h3>
<p>8个硬币中，已知其中一个硬币很重，使用最少的次数找出这枚硬币。</p>
<p>常见的错误思路：4,4 —&gt; 2,2—&gt;1,1</p>
<p>每次对半称，找重的一边，以此类推，共需要3次。</p>
<p>一种更好的思路：3,3…2 —&gt; 1,1…1 或 1,1</p>
<p>先取6枚硬币对半称，余下2枚硬币。分情况讨论</p>
<ul>
<li>
<p>3,3对称不平衡，硬币在重的一边的3枚硬币中。</p>
<p>在3枚硬币中，再取2枚硬币对称就可以直接求解。</p>
<ul>
<li>若不平衡，则硬币就是重的一边的硬币</li>
<li>若平衡，则硬币就是未称量的那一枚硬币</li>
</ul>
</li>
<li>
<p>3,3对称平衡，硬币在余下的2枚硬币中。</p>
<p>直接称量余下的2枚硬币，即可求解。</p>
</li>
</ul>
<p>以上两种情况所需的次数均为2次。</p>
<h3 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h3>
<p><a class="link"   href="https://www.bilibili.com/video/BV1Ga4y1G7Q8" >https://www.bilibili.com/video/BV1Ga4y1G7Q8 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>杂乱的记录</category>
      </categories>
      <tags>
        <tag>算法概念</tag>
        <tag>草稿笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>关于个人Hexo博客的搭建历史</title>
    <url>/2023/01/17/blog-by-https/</url>
    <content><![CDATA[<p>仅以此文回顾过去搭建Hexo博客的历程<span id="more"></span></p>
<h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2>
<p>在早期笔者一直是通过github pages服务来运行博客网站，从而省略了对<strong>域名解析</strong>、<strong>nginx反向代理</strong>以及<strong>SSL证书的申请与HTTPS服务的开启</strong>这些配置</p>
<p>于是后期，笔者租赁了一台纯净Ubutun20.04LTS系统的轻量应用服务器，从零开始基于命令行配置hexo博客以及HTTPS服务的开启</p>
<h2 id="hexo博客的搭建"><a class="markdownIt-Anchor" href="#hexo博客的搭建"></a> Hexo博客的搭建</h2>
<h3 id="本地环境搭建"><a class="markdownIt-Anchor" href="#本地环境搭建"></a> 本地环境搭建</h3>
<h4 id="git环境"><a class="markdownIt-Anchor" href="#git环境"></a> Git环境</h4>
<ol>
<li>
<p>访问git官网<a class="link"   href="https://git-scm.com/download" >Git - Downloads (git-scm.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>或寻找镜像站<a class="link"   href="https://mirrors.tuna.tsinghua.edu.cn/github-release/git-for-windows/git/" >清华大学开源软件镜像站 | git for windows <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>下载对应系统的版本</p>
</li>
<li>
<p>安装Git，除了安装路径可选择C盘或D盘，其它均可直接下一步</p>
</li>
<li>
<p>配置环境变量，在系统环境变量的<strong>Path变量下</strong>增加变量值</p>
<p>参考变量值：D:\Program Files\Git\cmd</p>
</li>
<li>
<p>win+r输入powershell打开查看git版本信息</p>
<div class="highlight-container" data-rel="Powershell"><figure class="iseeu highlight powershell"><table><tr><td class="code"><pre><span class="line">git <span class="literal">-v</span></span><br></pre></td></tr></table></figure></div>
<p>显示出了版本号，则说明git配置完成</p>
</li>
</ol>
<h4 id="nodejs环境"><a class="markdownIt-Anchor" href="#nodejs环境"></a> Nodejs环境</h4>
<ol>
<li>
<p>访问nodejs官网<a class="link"   href="https://nodejs.org/en/download/" >Download | Node.js (nodejs.org) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>下载对应系统的nodejs版本。（linux系统可直接使用命令行下载而不需要手动配置，使用其它方式则需要手动添加环境变量或者软链接）</p>
</li>
<li>
<p>windows下载完nodejs后需要配置环境变量（注意不要使用中文路径和带有空格的路径，默认路径中的<code>Program Files</code>中的空格会导致命令无法识别）</p>
<p>windows参考配置</p>
<ol>
<li>
<p>执行下载的nodejs的msi文件，选择安装路径<code>D:\nodejs</code></p>
</li>
<li>
<p>配置<strong>系统环境变量</strong>，在<strong>Path变量</strong>下添加 D:\nodejs\ （这一步nodejs可能会自动配置好）</p>
</li>
<li>
<p>应用配置，保存关闭。win+r输入powershell打开命令提示符，输入</p>
<div class="highlight-container" data-rel="Powershell"><figure class="iseeu highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看nodejs版本</span></span><br><span class="line">node <span class="literal">-v</span></span><br><span class="line"><span class="comment"># 查看包管理器npm的版本(npm是nodejs默认安装的包管理器)</span></span><br><span class="line">npm <span class="literal">-v</span></span><br></pre></td></tr></table></figure></div>
<p>以上命令检测到两个版本号后说明配置完成</p>
</li>
<li>
<p>完成以上步骤后基本就能够使用nodejs来搭建hexo。后续为<strong>非必须步骤</strong>，如果使用过程中存在一些问题可参考以下步骤解决</p>
</li>
<li>
<p>如果npm下载失败或下载速度缓慢，可能是由于默认服务器在海外的缘故，可指定国内镜像源下载或配置npm的国内镜像源</p>
<div class="highlight-container" data-rel="Powershell"><figure class="iseeu highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 指定镜像源下载,下载时加上--registry的参数,每次下载需要指定</span></span><br><span class="line">npm install <span class="literal">-g</span> 包名 <span class="literal">--registry</span>=https://registry.npm.taobao.org</span><br><span class="line"><span class="comment"># 设置镜像源,将npm的默认源更换为镜像源</span></span><br><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br><span class="line"><span class="comment"># 检测镜像站是否可用</span></span><br><span class="line">npm config get registry</span><br></pre></td></tr></table></figure></div>
</li>
<li>
<p>按以上步骤nodejs安装在了D盘，但下载的包仍在C盘，这里的配置是将包从C盘迁移到D盘以减少C盘的占用</p>
<p>在nodejs的根目录下，创建两个文件夹命名为node_global和node_cache，在文件夹的属性——安全里更改所有组或用户的权限为完全控制（防止权限不足而无法下载的问题）</p>
<div class="highlight-container" data-rel="Powershell"><figure class="iseeu highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置全局安装路径(路径根据实际情况填写)</span></span><br><span class="line">npm config <span class="built_in">set</span> prefix <span class="string">&quot;D:\nodejs\node_global&quot;</span></span><br><span class="line"><span class="comment"># 设置全局缓存路径(路径根据实际情况填写)</span></span><br><span class="line">npm config <span class="built_in">set</span> cache <span class="string">&quot;D:\nodejs\node_cache&quot;</span></span><br><span class="line"><span class="comment"># 以上命令会在C盘用户文件夹下产生一个.npmrc配置文件由于保存上面的配置信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加系统环境变量,在Path变量下新增变量值,变量值就是全局安装路径,否则新安装的命令工具无法执行</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检测全局安装路径</span></span><br><span class="line">npm root <span class="literal">-g</span></span><br><span class="line"><span class="comment"># 查看配置信息</span></span><br><span class="line">npm config list</span><br></pre></td></tr></table></figure></div>
<p>以上配置完成后，之后下载的包都会放到<strong>node_global/node_modules</strong>下</p>
</li>
</ol>
</li>
<li>
<p>nodejs环境搭建完成</p>
</li>
</ol>
<h4 id="hexo环境"><a class="markdownIt-Anchor" href="#hexo环境"></a> Hexo环境</h4>
<ol>
<li>
<p>在完成了搭建git和nodejs的环境的基础上，就能够快速使用Hexo</p>
</li>
<li>
<p>在powershell中执行以下命令</p>
<div class="highlight-container" data-rel="Powershell"><figure class="iseeu highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 全局安装Hexo命令行工具</span></span><br><span class="line">npm install <span class="literal">-g</span> hexo<span class="literal">-cli</span></span><br><span class="line"><span class="comment"># 查看Hexo版本信息</span></span><br><span class="line">hexo version</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择一个合适的文件夹作为Hexo框架的存放目录(这里假设使用一个demo的空文件夹)</span></span><br><span class="line"><span class="comment"># 执行以下3条命令就搭建好了基本的框架</span></span><br><span class="line">hexo init demo</span><br><span class="line"><span class="built_in">cd</span> demo</span><br><span class="line">npm install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在本地运行Hexo</span></span><br><span class="line">hexo server <span class="comment"># 或简写为hexo s</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 一些常用的Hexo命令</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一篇文章(文章内包含了Hexo的一些格式信息)</span></span><br><span class="line">hexo new <span class="string">&quot;first blog&quot;</span> <span class="comment"># 会在_posts目录下生成一个markdown初始文件,标题为first blog</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一篇草稿(草稿不会在网站上展示)</span></span><br><span class="line">hexo new draft <span class="string">&quot;my draft&quot;</span> <span class="comment"># 会在_drafts目录下生成相应的初始文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建导航页(导航页主要是展示文章分类、标签、作者简介、友情链接等信息)</span></span><br><span class="line">hexo new page <span class="literal">--path</span> about/me <span class="string">&quot;About me&quot;</span> <span class="comment"># 个人简介,这里是固定写法。默认情况下还需要修改配置文件才能生效</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成静态文件(一般是在新建文章并完成写作后使用或者在修改了文章的内容后使用)</span></span><br><span class="line">hexo generate <span class="comment"># 可简写为hexo g</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动服务器(用于预览网页效果)</span></span><br><span class="line">hexo server <span class="comment"># 可简写为hexo s</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署网站(需要配置远程服务器地址,部署之前需要先生成静态文件)</span></span><br><span class="line">hexo deploy <span class="comment"># 可简写为hexo d</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 清除缓存文件(一般是更换Hexo主题未生效时使用)</span></span><br><span class="line">hexo clean</span><br></pre></td></tr></table></figure></div>
<p>更详细的介绍请移步官网<a class="link"   href="https://hexo.io/zh-cn/" >Hexo <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</li>
</ol>
<h3 id="远程环境搭建"><a class="markdownIt-Anchor" href="#远程环境搭建"></a> 远程环境搭建</h3>
<h4 id="创建git仓库"><a class="markdownIt-Anchor" href="#创建git仓库"></a> 创建Git仓库</h4>
<p>先安装openssh，之后就可以通过ssh客户端远程连接服务器而不需要在浏览器上操作</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装SSH服务端</span></span><br><span class="line">sudo apt install openssh-server</span><br><span class="line"><span class="comment"># 查看SSH服务是否启动</span></span><br><span class="line">ps -e | grep ssh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个blog用户管理Hexo(默认的root用户权限过高,容易影响到系统)</span></span><br><span class="line">adduser blog</span><br><span class="line"><span class="comment"># 给予blog用户权限</span></span><br><span class="line">vim /etc/sudoers</span><br><span class="line"><span class="comment"># 找到User privilege specification这一段,在下面添加以下内容</span></span><br><span class="line">blog    ALL=(ALL:ALL) ALL</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到blog用户(密码可在网页服务器控制台那边重置密码获得)</span></span><br><span class="line">su blog</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装git</span></span><br><span class="line">sudo apt install git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入根目录,在/var/repo目录下创建一个名为hexo_static的裸仓库</span></span><br><span class="line"><span class="built_in">cd</span> /</span><br><span class="line">sudo <span class="built_in">mkdir</span> /var/repo/</span><br><span class="line">sudo <span class="built_in">chown</span> -R <span class="variable">$USER</span>:<span class="variable">$USER</span> /var/repo/</span><br><span class="line">sudo <span class="built_in">chmod</span> -R 755 /var/repo/</span><br><span class="line"><span class="built_in">cd</span> /var/repo/</span><br><span class="line"><span class="comment"># 创建裸仓库</span></span><br><span class="line">git init --bare hexo_static.git</span><br><span class="line"><span class="comment"># 裸仓库不同于普通仓库,裸仓库是专门的共享仓库,不会存储文件,只保存历史提交的版本信息</span></span><br><span class="line"><span class="comment"># 实际上裸仓库就相当于普通仓库中隐藏的.git文件夹</span></span><br></pre></td></tr></table></figure></div>
<h4 id="配置nginx反向代理"><a class="markdownIt-Anchor" href="#配置nginx反向代理"></a> 配置Nginx反向代理</h4>
<h5 id="安装nginx及可能遇到的问题"><a class="markdownIt-Anchor" href="#安装nginx及可能遇到的问题"></a> 安装Nginx及可能遇到的问题</h5>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装nginx</span></span><br><span class="line">sudo apt install nginx</span><br><span class="line"><span class="comment"># 查看版本信息,注意大小写</span></span><br><span class="line">nginx -V</span><br><span class="line"><span class="comment"># 注意这一步如果没有看到with-http_ssl_module字样的参数信息(如果有就跳过后续步骤),则需要从源码编译安装(已经安装了也没有关系,停止服务后替换配置文件即可)</span></span><br><span class="line"><span class="comment"># 如果想卸载也可以执行以下命令</span></span><br><span class="line">sudo apt --purge autoremove nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># Nginx 官网 https://nginx.org/en/download.html</span></span><br><span class="line"><span class="comment"># /usr/local/src目录通常用于存放用户手动编译程序的源码包</span></span><br><span class="line"><span class="built_in">cd</span> /usr/local/src/</span><br><span class="line"><span class="comment"># 这里使用wget下载nginx的源码包</span></span><br><span class="line"><span class="comment"># 如果已经安装并配置了nginx,又不想重新配置,使用nginx -v命令查看已安装的nginx版本并替换掉以下命令中的版本号</span></span><br><span class="line">wget https://nginx.org/download/nginx-1.22.1.tar.gz</span><br><span class="line"><span class="comment"># 解压提取包并进入解压目录</span></span><br><span class="line">tar -zxvf nginx-1.22.1.tar.gz</span><br><span class="line"><span class="built_in">cd</span> nginx-1.22.1</span><br><span class="line"><span class="comment"># 查看原有的nginx安装目录</span></span><br><span class="line"><span class="built_in">which</span> nginx</span><br><span class="line"><span class="comment"># 停止nginx的运行</span></span><br><span class="line">nginx -s stop</span><br><span class="line"><span class="comment"># 查看原有nginx的配置参数,注意大小写</span></span><br><span class="line">nginx -V</span><br><span class="line"><span class="comment"># 在原有参数的基础上附加--with-http_ssl_module的参数配置SSL模块(下面只给出了一部分参数,完整参数由nginx -V显示的参数拼接SSL模块的参数而成)</span></span><br><span class="line">sudo ./configure --prefix=/usr/local/nginx --with-http_ssl_module</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这一步可能会缺少一些库,使用以下命令下载到相关库后重新编译</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 缺少PCRE的相关库,如果不缺这个库就跳过</span></span><br><span class="line">sudo apt install libpcre3 libpcre3-dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># 缺少zlib的库,如果不缺这个库就跳过</span></span><br><span class="line"><span class="comment"># 访问zlib官网http://zlib.net/下载zlib,这里直接用wget下载到当前的src目录</span></span><br><span class="line">wget http://zlib.net/zlib-1.2.13.tar.gz</span><br><span class="line">./configure --prefix=/usr/local/zlib</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 缺少openssl的相关库,如果不缺这个库就跳过</span></span><br><span class="line">sudo apt install openssl libssl-dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新编译nginx</span></span><br><span class="line">sudo make</span><br><span class="line"><span class="comment"># 如果没有安装过nginx或者已经卸载了nginx则执行以下2条命令覆盖安装后即可跳过后续步骤</span></span><br><span class="line">sudo make install</span><br><span class="line"><span class="comment"># 配置软链接使得在任意目录下能通过nginx的名称直接运行nginx的命令</span></span><br><span class="line">sudo <span class="built_in">ln</span> -s /usr/local/nginx/sbin/nginx /usr/sbin/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换原有nginx的文件</span></span><br><span class="line"><span class="comment"># 备份原有nginx安装目录下的文件(这里以安装文件位于/usr/sbin/目录下为例)</span></span><br><span class="line"><span class="built_in">cp</span> /usr/sbin/nginx /usr/sbin/nginx.bak</span><br><span class="line"><span class="comment"># 将编译好的nginx文件覆盖掉原有的nginx</span></span><br><span class="line"><span class="built_in">cp</span> ./objs/nginx /usr/sbin/</span><br><span class="line"><span class="comment"># 重新查看nginx参数信息</span></span><br><span class="line">nginx -V</span><br><span class="line"><span class="comment"># 看到了--with-http_ssl_module的参数,SSL模块配置完成</span></span><br></pre></td></tr></table></figure></div>
<h5 id="配置nginx托管文件目录"><a class="markdownIt-Anchor" href="#配置nginx托管文件目录"></a> 配置Nginx托管文件目录</h5>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建/var/www/hexo目录用于存放Hexo生成的静态文件,修改目录所有权</span></span><br><span class="line">sudo <span class="built_in">mkdir</span> -p /var/www/hexo</span><br><span class="line">sudo <span class="built_in">chown</span> -R <span class="variable">$USER</span>:<span class="variable">$USER</span> /var/www/hexo</span><br><span class="line">sudo <span class="built_in">chmod</span> -R 755 /var/www/hexo</span><br><span class="line"><span class="comment"># 修改/etc/nginx/sites-enabled/default,使nginx的root目录指向hexo目录</span></span><br><span class="line"><span class="comment"># 在server里面添加以下配置</span></span><br><span class="line">root /var/www/hexo;</span><br><span class="line"><span class="comment"># 重启nginx服务</span></span><br><span class="line">sudo systemctl restart nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置git钩子,用于实现本地Hexo生成的静态文件推送到指定目录</span></span><br><span class="line">vim /var/repo/hexo_static.git/hooks/post-receive</span><br><span class="line"><span class="comment"># 添加以下配置内容并保存退出</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">git --work-tree=/var/www/hexo --git-dir=/var/repo/hexo_static.git checkout -f</span><br><span class="line"><span class="comment"># 给予可执行权限</span></span><br><span class="line"><span class="built_in">chmod</span> +x /var/repo/hexo_static.git/hooks/post-receive</span><br></pre></td></tr></table></figure></div>
<h3 id="ssh远程连接配置"><a class="markdownIt-Anchor" href="#ssh远程连接配置"></a> SSH远程连接配置</h3>
<p>在windows上搭建SSH客户端</p>
<ol>
<li>
<p>使用powershell运行以下命令在用户文件夹的.ssh文件夹下生成密钥</p>
<div class="highlight-container" data-rel="Powershell"><figure class="iseeu highlight powershell"><table><tr><td class="code"><pre><span class="line">ssh<span class="literal">-keygen</span> <span class="literal">-t</span> rsa</span><br></pre></td></tr></table></figure></div>
</li>
<li>
<p>将生成的公钥id_rsa.pub中的内容拷贝到服务器的/home/blog/.ssh/authorized_keys文件上</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">mkdir</span> .ssh</span><br><span class="line"><span class="built_in">cd</span> .ssh</span><br><span class="line">sudo <span class="built_in">touch</span> authorized_keys</span><br><span class="line">sudo vim .ssh/authorized_keys</span><br></pre></td></tr></table></figure></div>
</li>
</ol>
<h3 id="hexo部署到服务器"><a class="markdownIt-Anchor" href="#hexo部署到服务器"></a> Hexo部署到服务器</h3>
<ol>
<li>
<p>编辑hexo根目录中的config.yml文件，在deploy处配置参数</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">&#x27;git&#x27;</span></span><br><span class="line">  <span class="comment"># server_ip为服务器的公网ip</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">blog@server_ip:/var/repo/hexo_static.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure></div>
</li>
<li>
<p>执行以下命令部署Hexo</p>
<div class="highlight-container" data-rel="Powershell"><figure class="iseeu highlight powershell"><table><tr><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure></div>
</li>
<li>
<p>查看服务器的/var/www/hexo目录，能够看到上传的静态文件</p>
</li>
<li>
<p>访问服务器IP地址查看页面，如果访问失败则检查服务器内部是否开放了80端口并去浏览器控制台查看服务器厂商提供的安全组规则或外部防火墙是否开放了80端口。确认都开放之后重新访问</p>
</li>
</ol>
<h3 id="域名解析配置"><a class="markdownIt-Anchor" href="#域名解析配置"></a> 域名解析配置</h3>
<p>域名的购买很简单，到这里笔者已经提前购买好了一年期域名，重点就是配置域名解析。如果租赁域名的地方和租赁服务器的地方不是同一个地方，则域名解析需要在租赁域名的地方进行配置</p>
<p>参考配置</p>
<p>主机记录一般就是填<strong>www</strong>，记录类型为A，记录值为公网IP地址，其它的参数默认即可</p>
<p>之后就可以通过www.域名来访问页面，如果想直接通过一级域名访问，也可以再添加一条主机记录为@，记录类型为A，记录值为公网IP地址的解析</p>
<h3 id="ssl证书申请"><a class="markdownIt-Anchor" href="#ssl证书申请"></a> SSL证书申请</h3>
<p>这里笔者找了一个能申请90天免费SSL证书的网站<a class="link"   href="https://ourl.co/zerossl" >https://ourl.co/zerossl <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>。具体的操作参考<a class="link"   href="https://www.landiannews.com/archives/93605.html" >SSL证书申请 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="https服务开启"><a class="markdownIt-Anchor" href="#https服务开启"></a> HTTPS服务开启</h3>
<p><strong>Nginx配置SSL证书</strong></p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将下载到windows上的证书文件上传至服务器</span></span><br><span class="line"><span class="comment"># 指定一个目录用于存放证书文件(目录可自行选择,以下仅供参考)</span></span><br><span class="line">sudo <span class="built_in">mkdir</span> -p /ssh/cert &amp;&amp; <span class="built_in">cd</span> /ssh/cert</span><br><span class="line"><span class="comment"># 使用远程文件传输上传文件至服务器</span></span><br><span class="line"><span class="comment"># 将证书文件信息合并</span></span><br><span class="line"><span class="built_in">cat</span> ca_bundle.crt &gt;&gt; certificate.crt</span><br></pre></td></tr></table></figure></div>
<p><strong>Nginx配置参考</strong></p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name example.com;</span><br><span class="line">        rewrite ^/(.*) https://$server_name<span class="variable">$request_uri</span>? permanent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">        listen   443   ssl;</span><br><span class="line">        ssl_certificate /ssh/cert/certificate.crt;</span><br><span class="line">        ssl_certificate_key /ssh/cert/private.key;</span><br><span class="line">        server_name example.com; <span class="comment">#填写域名</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># ssl验证相关配置</span></span><br><span class="line">        ssl_session_timeout  5m;    <span class="comment">#缓存有效期</span></span><br><span class="line">        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;    <span class="comment">#加密算法</span></span><br><span class="line">        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;    <span class="comment">#安全链接可选的加密协议</span></span><br><span class="line">        ssl_prefer_server_ciphers on;   <span class="comment">#使用服务器端的首选算法</span></span><br><span class="line">        </span><br><span class="line">        root /var/www/hexo; <span class="comment">#Hexo项目目录</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Add index.php to the list if you are using PHP</span></span><br><span class="line">        index index.html index.htm index.nginx-debian.html;</span><br><span class="line">        location / &#123;</span><br><span class="line">                <span class="comment"># First attempt to serve request as file, then</span></span><br><span class="line">                <span class="comment"># as directory, then fall back to displaying a 404.</span></span><br><span class="line">                try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ =404;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>至此HTTPS服务配置完成，在访问笔者的页面时可以看到https开头的URL</p>
<h2 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h2>
<p><a class="link"   href="https://hexo.io/zh-cn/" >Hexo官网 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://cloud.tencent.com/developer/article/1945550" >Hexo部署至服务器 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://www.landiannews.com/archives/93605.html" >SSL证书申请 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://help.zerossl.com/hc/en-us/articles/360058295894" >在NGINX上安装SSL证书 - 零SSL和 (zerossl.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <tags>
        <tag>生活记录</tag>
      </tags>
  </entry>
  <entry>
    <title>使用certbot自动化管理免费ssl证书</title>
    <url>/2023/07/22/certbot-for-ssl/</url>
    <content><![CDATA[<p>ssl证书是用于验证身份和保护数据安全的一种数字证书。在缺少ssl证书的情况下，网络通信将不会被加密，所有数据将以明文传输，容易被拦截和窃听，这样的网站容易受到中间人攻击。<span id="more"></span>目前也推崇使用https代替传统的http，传统的http已经被证明存在了很多安全问题，且浏览器也会将此类传统http网站标记为不安全网站。但是ssl证书也并不都是免费的，一些企业级ssl证书价格非常昂贵，不是个人开发者所能够承担的，当然也没有必要去承担。在笔者之前文章中提到的证书网站如<a class="link"   href="https://zerossl.com/" >zerossl <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>中虽然有提供免费ssl证书但是目前有申请次数的限制(也正因为如此才有了这篇文章)。</p>
<p>以下，笔者将介绍使用<a class="link"   href="https://letsencrypt.org/zh-cn/" >Let’s Encrypt <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>的<a class="link"   href="https://certbot.eff.org/" >certbot <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>客户端申请免费的ssl证书。certbot可与apache、nginx等服务配合使用，本文以在<strong>Ubuntu20.04上为nginx服务配置ssl证书</strong>为例。</p>
<h3 id="lets-encrypt"><a class="markdownIt-Anchor" href="#lets-encrypt"></a> Let’s Encrypt</h3>
<p>Let’s Encrypt是一家全球性的证书颁发机构（CA），为世界各地的个人和团体提供获取、续期、管理SSL/TLS证书的服务。网站可以使用其证书来启用安全的HTTPS连接。Let’s Encrypt属于非营利组织，旨在推广HTTPS技术的应用，从而构建更加安全且尊重隐私的互联网环境。</p>
<h3 id="certbot"><a class="markdownIt-Anchor" href="#certbot"></a> certbot</h3>
<p>在早期，申请并配置Let’s Encrypt签发的安全证书比较麻烦，只能手动进行配置以及部署，需要一定的技术水平。直到后来推出了一些自动化工具才使得ssl证书的配置及部署变得非常方便。certbot就是其中的一款官方的客户端工具。</p>
<p>certbot是ISRG (Internet Security Research Group，互联网安全研究小组) 组织的发起者EFF(电子前哨基金会)为Let’s Encrypt项目所发布的一个官方的客户端，实现了完全自动化的获取、部署和更新安全证书。</p>
<h4 id="具体使用"><a class="markdownIt-Anchor" href="#具体使用"></a> 具体使用</h4>
<p>前提：Ubuntu20.04环境、使用nginx服务。</p>
<h5 id="1安装certbot客户端及插件"><a class="markdownIt-Anchor" href="#1安装certbot客户端及插件"></a> 1.安装certbot客户端及插件</h5>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install certbot python3-certbot-nginx</span><br></pre></td></tr></table></figure></div>
<h5 id="2生成证书"><a class="markdownIt-Anchor" href="#2生成证书"></a> 2.生成证书</h5>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo certbot --nginx</span><br></pre></td></tr></table></figure></div>
<p>使用以上命令生成证书的过程中，会要求提供邮箱地址以及需要配置证书的域名信息，以及选择是否需要重定向等。生成的ssl证书位于**/etc/letsencrypt/live**目录下。</p>
<h5 id="3更新证书"><a class="markdownIt-Anchor" href="#3更新证书"></a> 3.更新证书</h5>
<p>在大数情况下，certbot在安装时会自动配置一个cron job或systemd定时器来定期检查并更新证书。这意味着大部分时间里开发者不需要手动更新证书，certbot会自动进行更新。自动更新功能可通过以下命令进行测试</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo certbot renew --dry-run</span><br></pre></td></tr></table></figure></div>
<p><code>--dry-run</code>参数表示测试，而非真正执行更新。如果显示<code>&quot;Congratulations, all renewals succeeded.&quot;</code>的信息，则表示自动更新功能测试成功。</p>
<p>当然也可以通过以下命令手动更新证书</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo certbot renew</span><br></pre></td></tr></table></figure></div>
<p>这将检查所有已安装的证书，并更新即将过期的证书。</p>
<h3 id="补充"><a class="markdownIt-Anchor" href="#补充"></a> 补充</h3>
<p>除了Let’s Encrypt组织及其提供的certbot客户端以外，还有类似的<a class="link"   href="https://www.buypass.com/" >buypass <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>组织以及更轻量的自动化shell脚本<a class="link"   href="https://github.com/acmesh-official/acme.sh" >acme.sh <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>。</p>
<p>Let’s Encrypt和buypass所提供的证书有一些区别</p>
<ul>
<li>Let’s Encrypt的单次申请证书有效期为90天，而buypass的单次申请证书有效期则为180天。</li>
<li>Let’s Encrypt支持签发泛域名和多域名证书，buypass的证书不支持泛域名、支持多域名。</li>
</ul>
<h3 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h3>
<p><a class="link"   href="https://zhuanlan.zhihu.com/p/25538921" >HTTPS 简介及使用官方工具 Certbot 配置 Let’s Encrypt SSL 安全证书详细教程 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>ssl</tag>
        <tag>certbot</tag>
      </tags>
  </entry>
  <entry>
    <title>基于clang打造高效的开发环境</title>
    <url>/2023/04/01/clang-env-build/</url>
    <content><![CDATA[<p>在使用<code>vscode</code>进行C/C++开发过程中，一般就是直接使用<code>gcc</code>编译器（在windows中，它通常被称为<code>MinGW-w64</code>，一个<code>gcc</code>的移植版）、<code>gdb</code>调试器配合<code>C/C++</code>的插件来进行开发，也就是传统的<code>gnu</code>工具链中的组件。</p>
<p>但是<code>vscode</code>的<code>C/C++</code>的插件功能虽然齐全，响应速度却不够理想，于是本文介绍了使用<code>LLVM</code>工具链组件中的<code>clang</code>编译器来进行C/C++开发。<span id="more"></span></p>
<p>本文是在<code>Archlinux</code>的基础上搭建以<code>clang</code>作为编译器、<code>lldb</code>作为调试器的开发环境，<code>windows</code>可以通过额外配置<code>WSL</code>来搭建开发环境。</p>
<h2 id="基础环境搭建"><a class="markdownIt-Anchor" href="#基础环境搭建"></a> 基础环境搭建</h2>
<p><code>LLVM</code>工具链包括<code>clang</code>编译器、<code>lldb</code>调试器、<code>lld</code>链接器等。</p>
<h3 id="1安装vscode"><a class="markdownIt-Anchor" href="#1安装vscode"></a> 1.安装vscode</h3>
<p>这里使用的是<a class="link"   href="https://aur.archlinux.org/packages/visual-studio-code-bin" >visual-studio-code-bin <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><sup>EULA / aur</sup>。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">yay -S visual-studio-code-bin</span><br></pre></td></tr></table></figure></div>
<h3 id="2安装基础包"><a class="markdownIt-Anchor" href="#2安装基础包"></a> 2.安装基础包</h3>
<p>通过以下命令安装即可</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pacman -S llvm clang lldb lld</span><br></pre></td></tr></table></figure></div>
<h3 id="3安装vscode相关插件"><a class="markdownIt-Anchor" href="#3安装vscode相关插件"></a> 3.安装vscode相关插件</h3>
<p>打开vscode插件市场，搜索<code>clangd</code>、<code>CodeLLDB</code>下载安装（如果因为网络问题下载失败，请尝试手动下载安装.vsix文件）。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/04/01/clang-env-build/image-20230401142306155.png"
                      class="" title="image-20230401142306155"
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/04/01/clang-env-build/image-20230401142340526.png"
                      class="" title="image-20230401142340526"
                >
<h2 id="运行-调试配置"><a class="markdownIt-Anchor" href="#运行-调试配置"></a> 运行、调试配置</h2>
<h3 id="1创建配置文件"><a class="markdownIt-Anchor" href="#1创建配置文件"></a> 1.创建配置文件</h3>
<p>打开侧边框上的运行调试选项，点击<code>create a launch.json file</code>并选择<code>LLDB</code>，创建好<code>.vscode</code>文件夹下的<code>launch.json</code>配置文件</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/04/01/clang-env-build/image-20230401142113704.png"
                      class="" title="image-20230401142113704"
                >
<p><code>launch.json</code>的初始内容如下，相关参数变量配置说明可访问<a class="link"   href="https://code.visualstudio.com/docs/editor/variables-reference" >官方文档 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// Use IntelliSense to learn about possible attributes.</span></span><br><span class="line">    <span class="comment">// Hover to view descriptions of existing attributes.</span></span><br><span class="line">    <span class="comment">// For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;lldb&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Debug&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;program&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;/&lt;executable file&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div>
<p>这里笔者将所有编译好的二进制文件输出到提前手动创建好的<code>build</code>文件夹(与源文件是同级目录)，另外<code>launch.json</code>还需要配置<code>tasks.json</code>才能实现运行调试，<code>tasks.json</code>则是具体定义了编译的命令以及参数等。<code>tasks.json</code>可以手动在<code>.vscode</code>文件夹下创建。</p>
<p>最终配置如下</p>
<p><code>launch.json</code></p>
<div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;lldb&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Debug&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="comment">// 编译文件的输出目录</span></span><br><span class="line">            <span class="attr">&quot;program&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;fileDirname&#125;/build/$&#123;fileBasenameNoExtension&#125;.out&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;preLaunchTask&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Debug C++&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;internalConsoleOptions&quot;</span><span class="punctuation">:</span> <span class="string">&quot;neverOpen&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="comment">// 使用内置终端</span></span><br><span class="line">            <span class="attr">&quot;console&quot;</span><span class="punctuation">:</span> <span class="string">&quot;integratedTerminal&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div>
<p><code>tasks.json</code></p>
<div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;tasks&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;shell&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Debug C++&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;clang++&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;--std=c++20&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;-Wall&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;-g&quot;</span><span class="punctuation">,</span> <span class="comment">// 生成调试信息</span></span><br><span class="line">                <span class="string">&quot;$&#123;file&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;-o&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;$&#123;fileDirname&#125;/build/$&#123;fileBasenameNoExtension&#125;.out&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;options&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/usr/bin&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;group&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;kind&quot;</span><span class="punctuation">:</span> <span class="string">&quot;build&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;isDefault&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;detail&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Task generated by Debugger.&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div>
<p>使用快捷键<code>Ctrl</code>+<code>F5</code>运行代码，使用快捷键<code>F5</code>调试代码(需要先断点)。</p>
<p>到这里基本的运行、调试已经配置完成，但是这种方式需要提前在当前目录下手动创建好输出目录，否则无法成功执行任务。当然也可以直接选择将当前目录作为输出目录，但那样输出文件与源文件混杂在一起不方便处理。</p>
<p>基于这点，笔者这里提供了一种思路：使用<code>Code Runner</code>插件指定其编译命令，提供自动创建输出目录的功能(唯一的不便就是需要先执行<code>Code Runner</code>创建好目录之后，才能进行调试)。</p>
<p>因此下面介绍通过配置<code>Code Runner</code>插件，更改其默认的<code>g++</code>命令为<code>clang++</code>，并实现自动创建输出目录的功能。</p>
<h3 id="2code-runner配置"><a class="markdownIt-Anchor" href="#2code-runner配置"></a> 2.Code Runner配置</h3>
<p>首先下载安装好<code>Code Runner</code>的插件，在插件市场搜索<code>Code Runner</code>并安装</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/04/01/clang-env-build/image-20230401195536276.png"
                      class="" title="image-20230401195536276"
                >
<p>打开<code>Code Runner</code>的扩展配置，在搜索框中搜索<code>code-runner.executorMap</code>，点击<code>Edit in settings.json</code>打开<code>settings.json</code>配置文件。</p>
<p>在<code>settings.json</code>文件中修改对应的配置项中的<code>g++</code>为<code>clang++</code>，配置如下</p>
<div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;code-runner.executorMap&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;c&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cd $dir &amp;&amp; clang $fileName -o $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;cpp&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cd $dir &amp;&amp; clang++ $fileName -o $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt&quot;</span><span class="punctuation">,</span> </span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div>
<p>指定输出目录，例如输出到当前目录的<code>build</code>目录下(自动创建)，则修改为以下配置</p>
<div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;code-runner.executorMap&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;c&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cd $dir &amp;&amp; mkdir -p build &amp;&amp; clang $fileName -o build/$fileNameWithoutExt &amp;&amp; build/$fileNameWithoutExt&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;cpp&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cd $dir &amp;&amp; mkdir -p build &amp;&amp; clang++ $fileName -o build/$fileNameWithoutExt &amp;&amp; build/$fileNameWithoutExt&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div>
<p>更多参数配置说明可以参考<a class="link"   href="https://github.com/formulahendry/vscode-code-runner" >官方仓库 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>。</p>
<p>至此一个简单高效的、基于<code>LLVM</code>工具链中的<code>clang</code>编译器、<code>lldb</code>调试器的开发环境已经搭建完成。</p>
<p>补充：网上很多相关教程主要是通过<code>CMake</code>配合<code>clang</code>来构建项目，<code>CMake</code>的配置对于单文件编译运行调试来说相对繁琐，不太适合简单的小项目。在早期笔者参考相关教程配置时意识到了这个问题，另外鉴于<code>C/C++</code>插件在响应速度上实在不尽人意，于是有了这篇简易的文章。</p>
<h2 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h2>
<p><a class="link"   href="https://code.visualstudio.com/docs/editor/debugging" >Debugging | visual studio <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://code.visualstudio.com/docs/editor/variables-reference" >variables-reference | visual studio <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://github.com/formulahendry/vscode-code-runner" >Code Runner | github <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>工具链</category>
      </categories>
      <tags>
        <tag>vscode</tag>
        <tag>clang</tag>
        <tag>lldb</tag>
        <tag>llvm</tag>
        <tag>gcc</tag>
        <tag>gdb</tag>
        <tag>gnu</tag>
      </tags>
  </entry>
  <entry>
    <title>运算方法和运算器</title>
    <url>/2023/04/25/computer-organization-1/</url>
    <content><![CDATA[<p>计算机组成原理——运算方法和运算器知识梳理<span id="more"></span></p>
<p>参考《计算机组成原理》第六版白中英、戴志涛主编，本文是对<strong>第二章运算方法和运算器</strong>的整理摘要。</p>
<h3 id="11-数据与文字的表示"><a class="markdownIt-Anchor" href="#11-数据与文字的表示"></a> 1.1 数据与文字的表示</h3>
<h4 id="111-数据格式"><a class="markdownIt-Anchor" href="#111-数据格式"></a> 1.1.1 数据格式</h4>
<p>一是定点格式，二是浮点格式。</p>
<ol>
<li>
<p>定点数的表示方法</p>
<p>假设使用<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>位字来表示，则<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">x_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>表示符号，并用0表示正号，用1表示负号。</p>
<p>对于<strong>纯小数</strong>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn><mo>≤</mo><mi mathvariant="normal">∣</mi><mi>x</mi><mi mathvariant="normal">∣</mi><mo>≤</mo><mn>1</mn><mo>−</mo><msup><mn>2</mn><mrow><mo>−</mo><mi>n</mi></mrow></msup></mrow><annotation encoding="application/x-tex">0\leq|x|\leq1-2^{-n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathnormal">x</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.771331em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.771331em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span></span></span></span></p>
<p>对于<strong>纯整数</strong>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn><mo>≤</mo><mi mathvariant="normal">∣</mi><mi>x</mi><mi mathvariant="normal">∣</mi><mo>≤</mo><msup><mn>2</mn><mi>n</mi></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">0\leq|x|\leq2^n-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathnormal">x</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.747722em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></p>
</li>
<li>
<p>浮点数的表示方法</p>
<p>计算时使数值部分的绝对值小于1，小数点的位置随比例因子的不同而在一定范围内可以自由浮动。</p>
<p>任意一个十进制数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span></span>可以写成</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>N</mi><mo>=</mo><mn>1</mn><msup><mn>0</mn><mi>E</mi></msup><mi mathvariant="normal">.</mi><mi>M</mi></mrow><annotation encoding="application/x-tex">N=10^E.M
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8913309999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913309999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05764em;">E</span></span></span></span></span></span></span></span><span class="mord">.</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span></span></span></span></span></p>
<p>任意一个二进制数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span></span>可以写成</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>N</mi><mo>=</mo><msup><mn>2</mn><mi>e</mi></msup><mi mathvariant="normal">.</mi><mi>M</mi></mrow><annotation encoding="application/x-tex">N=2^e.M
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7143919999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">e</span></span></span></span></span></span></span></span><span class="mord">.</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span></span></span></span></span></p>
<p>其中，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi></mrow><annotation encoding="application/x-tex">M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span></span></span></span>称为浮点数的<strong>尾数</strong>，是一个纯小数。e是比例因子的指数，称为浮点数的<strong>指数</strong>，是一个整数。指数也称为<strong>阶码</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">阶符</th>
<th style="text-align:center">阶码</th>
<th style="text-align:center">数符</th>
<th style="text-align:center">尾数</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>E</mi><mi>s</mi></msub></mrow><annotation encoding="application/x-tex">E_s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">s</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></td>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>E</mi><mrow><mi>m</mi><mo>−</mo><mn>1</mn></mrow></msub><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>E</mi><mn>1</mn></msub><msub><mi>E</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">E_{m-1}...E_1E_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.891661em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></td>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>M</mi><mi>s</mi></msub></mrow><annotation encoding="application/x-tex">M_s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">s</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></td>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>M</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>M</mi><mn>1</mn></msub><msub><mi>M</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">M_{n-1}...M_1M_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.891661em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></td>
</tr>
</tbody>
</table>
</li>
<li>
<p>十进制数串的表示方法</p>
<p>（1）字符串形式，即1字节存放一个十进制的数位或符号位。</p>
<p>（2）压缩的十进制数串形式，即1字节存放两个十进制的数位。</p>
</li>
</ol>
<h4 id="112-数的机器码表示"><a class="markdownIt-Anchor" href="#112-数的机器码表示"></a> 1.1.2 数的机器码表示</h4>
<blockquote>
<p>正整数的原码、补码、反码是一致的，符号位固定是0</p>
<p>负整数的原码、补码、反码是不同的，符号位固定是1</p>
</blockquote>
<ol>
<li>
<p>原码表示法</p>
<p>例如，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>=</mo><mo>+</mo><mn>1001</mn></mrow><annotation encoding="application/x-tex">x=+1001</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">+</span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">1</span></span></span></span>，则<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mi>x</mi><msub><mo stretchy="false">]</mo><mtext>原</mtext></msub><mo>=</mo><mn>01001</mn></mrow><annotation encoding="application/x-tex">[x]_原=01001</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathnormal">x</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord cjk_fallback mtight">原</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">1</span></span></span></span></p>
<p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>=</mo><mo>−</mo><mn>1001</mn></mrow><annotation encoding="application/x-tex">x=-1001</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">1</span></span></span></span>，则<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mi>x</mi><msub><mo stretchy="false">]</mo><mtext>原</mtext></msub><mo>=</mo><mn>11001</mn></mrow><annotation encoding="application/x-tex">[x]_原=11001</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathnormal">x</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord cjk_fallback mtight">原</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">1</span></span></span></span></p>
<blockquote>
<p>实际上就是在真值的基础上增加了符号位</p>
</blockquote>
</li>
<li>
<p>补码表示法</p>
<p>正整数的补码和原码一致。</p>
<p>负整数先把符号位以外的位取反变为反码，再在反码的基础上加1得到补码。</p>
<p>例如，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>=</mo><mo>+</mo><mn>1001</mn></mrow><annotation encoding="application/x-tex">x=+1001</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">+</span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">1</span></span></span></span>，则<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mi>x</mi><msub><mo stretchy="false">]</mo><mtext>补</mtext></msub><mo>=</mo><mn>01001</mn></mrow><annotation encoding="application/x-tex">[x]_补=01001</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathnormal">x</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord cjk_fallback mtight">补</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">1</span></span></span></span></p>
<p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>=</mo><mo>−</mo><mn>1001</mn></mrow><annotation encoding="application/x-tex">x=-1001</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">1</span></span></span></span>，则<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mi>x</mi><msub><mo stretchy="false">]</mo><mtext>补</mtext></msub><mo>=</mo><mn>10111</mn></mrow><annotation encoding="application/x-tex">[x]_补=10111</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathnormal">x</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord cjk_fallback mtight">补</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span></span></span></span></p>
<p>通过补码计算真值</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>x</mi><mo>=</mo><mo>−</mo><msup><mn>2</mn><mi>n</mi></msup><msub><mi>x</mi><mi>n</mi></msub><mo>+</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></munderover><msup><mn>2</mn><mi>i</mi></msup><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">x=-2^nx_n+\sum_{i=0}^{n-1}2^ix_i
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8643919999999999em;vertical-align:-0.15em;"></span><span class="mord">−</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:3.0787820000000004em;vertical-align:-1.277669em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8011130000000004em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.300005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8746639999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p>
<blockquote>
<p>实际上就是将<strong>符号位以外</strong>的位按正常的二进制转十进制来计算累加，再计算符号位对应的十进制并取负号，相加得到结果。</p>
<p>因此，对于正整数来说，符号位为0，只需要正常计算即可。</p>
<p>对于负整数来说，符号位为1，需要将<strong>符号位以外部分</strong>的十进制结果<strong>减去</strong>符号位的十进制结果，得到真值。</p>
</blockquote>
<p>通过补码求原码，除<strong>符号位</strong>和<strong>最后一个1</strong>以外，将这个符号位和1<strong>中间的部分</strong>全部取反。</p>
</li>
<li>
<p>移码表示法</p>
<p>移码通常用于表示浮点数的阶码。阶码(<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span>位)的<strong>传统定义</strong>是</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo stretchy="false">[</mo><mi>e</mi><msub><mo stretchy="false">]</mo><mtext>移</mtext></msub><mo>=</mo><msup><mn>2</mn><mi>k</mi></msup><mo>+</mo><mi>e</mi><mo separator="true">,</mo><msup><mn>2</mn><mi>k</mi></msup><mo>&gt;</mo><mi>e</mi><mo>≥</mo><mo>−</mo><msup><mn>2</mn><mi>k</mi></msup></mrow><annotation encoding="application/x-tex">[e]_移=2^k+e,2^k&gt;e\geq-2^k
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathnormal">e</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord cjk_fallback mtight">移</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.9824379999999999em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.093548em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">e</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathnormal">e</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.9824379999999999em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span></span></span></span></span></p>
<p>式中，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mi>e</mi><msub><mo stretchy="false">]</mo><mtext>移</mtext></msub></mrow><annotation encoding="application/x-tex">[e]_移</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathnormal">e</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord cjk_fallback mtight">移</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>为机器数，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>e</mi></mrow><annotation encoding="application/x-tex">e</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">e</span></span></span></span>为真值，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>k</mi></msup></mrow><annotation encoding="application/x-tex">2^k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.849108em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span></span></span></span>是一个固定的偏移值常数。</p>
<p>移码中符号位<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>e</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">e_k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的表示的规律与原码、补码、反码相反，即正整数符号位移码表示为1，负整数符号位移码表示为0。</p>
</li>
<li>
<p>浮点数的机器表示</p>
<p>IEEE754标准</p>
<p>32位短浮点数</p>
<table>
<thead>
<tr>
<th style="text-align:center">S(31，符号位占1位)</th>
<th style="text-align:center">E(30-23，阶码占8位)</th>
<th style="text-align:center">M(22-0，尾数占23位)</th>
</tr>
</thead>
</table>
<p>S是符号位，0表示正数，1表示负数。小数点位置在尾数域最左有效位的右边。</p>
<p>阶符采用隐含方式，即采用移码方法来表示正负指数。采用这种方式时，将浮点数的指数真值<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>e</mi></mrow><annotation encoding="application/x-tex">e</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">e</span></span></span></span>变成阶码<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>E</mi></mrow><annotation encoding="application/x-tex">E</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span></span></span></span>时，应将指数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>e</mi></mrow><annotation encoding="application/x-tex">e</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">e</span></span></span></span>加上一个固定的偏置常数127，即<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>E</mi><mo>=</mo><mi>e</mi><mo>+</mo><mn>127</mn></mrow><annotation encoding="application/x-tex">E=e+127</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">e</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">2</span><span class="mord">7</span></span></span></span>。</p>
<p>为了提高数据的表示精度，当尾数的值不为0时，尾数域的最高有效位应为1，这称为<strong>浮点数的规格化表示</strong>。对于非规格化浮点数，一般 可以通过修改阶码同时右移动小数点位置的办法，使其变成规格化数的形式。</p>
<p>在IEEE754标准中，一个<strong>规格化的32位浮点数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">x</span></span></span></span>的真值表示为</strong></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>x</mi><mo>=</mo><mo stretchy="false">(</mo><mo>−</mo><mn>1</mn><msup><mo stretchy="false">)</mo><mi>S</mi></msup><mo>×</mo><mo stretchy="false">(</mo><mn>1.</mn><mi>M</mi><mo stretchy="false">)</mo><mo>×</mo><msup><mn>2</mn><mrow><mi>E</mi><mo>−</mo><mn>127</mn></mrow></msup><mo separator="true">,</mo><mi>e</mi><mo>=</mo><mi>E</mi><mo>−</mo><mn>127</mn></mrow><annotation encoding="application/x-tex">x=(-1)^S\times(1.M)\times2^{E-127},e=E-127
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.1413309999999999em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">−</span><span class="mord">1</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913309999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05764em;">S</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mord">.</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.085771em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.891331em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05764em;">E</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mord mtight">2</span><span class="mord mtight">7</span></span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">e</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">2</span><span class="mord">7</span></span></span></span></span></p>
<p>其中，尾数域所表示的值是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1.</mn><mi>M</mi></mrow><annotation encoding="application/x-tex">1.M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">.</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span></span></span></span>。由于规格化的浮点数的尾数域最左位(最高有效位)<strong>总是1</strong>，故这一位无需存储，而认为是隐藏在小数点的左边。因此，实际上可以<strong>将24位有效数用23位字段</strong>来存储。</p>
<p>对32位浮点数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span></span>，IEEE754定义：</p>
<p>（1）若<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>E</mi><mo>=</mo><mn>255</mn></mrow><annotation encoding="application/x-tex">E=255</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord">5</span><span class="mord">5</span></span></span></span>且<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mo mathvariant="normal">≠</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">M\neq0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mrel"><span class="mord vbox"><span class="thinbox"><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>，则<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi><mo>=</mo><mi>N</mi><mi>a</mi><mi>N</mi></mrow><annotation encoding="application/x-tex">N=NaN</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span></span>。</p>
<p>（2）若<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>E</mi><mo>=</mo><mn>255</mn></mrow><annotation encoding="application/x-tex">E=255</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord">5</span><span class="mord">5</span></span></span></span>且<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">M=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>，则<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi><mo>=</mo><mo stretchy="false">(</mo><mo>−</mo><mn>1</mn><msup><mo stretchy="false">)</mo><mi>S</mi></msup><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">N=(-1)^S\infty</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.0913309999999998em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">−</span><span class="mord">1</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05764em;">S</span></span></span></span></span></span></span></span><span class="mord">∞</span></span></span></span>。</p>
<p>（3）若<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>E</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">E=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>且<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">M=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>，则<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi><mo>=</mo><mo stretchy="false">(</mo><mo>−</mo><mn>1</mn><msup><mo stretchy="false">)</mo><mi>S</mi></msup><mn>0</mn></mrow><annotation encoding="application/x-tex">N=(-1)^S0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.0913309999999998em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">−</span><span class="mord">1</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05764em;">S</span></span></span></span></span></span></span></span><span class="mord">0</span></span></span></span>。</p>
<p>（4）若<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn><mo>&lt;</mo><mi>E</mi><mo>&lt;</mo><mn>255</mn></mrow><annotation encoding="application/x-tex">0&lt;E&lt;255</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68354em;vertical-align:-0.0391em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72243em;vertical-align:-0.0391em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord">5</span><span class="mord">5</span></span></span></span>，则<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi><mo>=</mo><mo stretchy="false">(</mo><mo>−</mo><mn>1</mn><msup><mo stretchy="false">)</mo><mi>S</mi></msup><mo>×</mo><mo stretchy="false">(</mo><mn>1.</mn><mi>M</mi><mo stretchy="false">)</mo><mo>×</mo><msup><mn>2</mn><mrow><mi>E</mi><mo>−</mo><mn>127</mn></mrow></msup></mrow><annotation encoding="application/x-tex">N=(-1)^S\times(1.M)\times2^{E-127}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.0913309999999998em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">−</span><span class="mord">1</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05764em;">S</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mord">.</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8413309999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05764em;">E</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mord mtight">2</span><span class="mord mtight">7</span></span></span></span></span></span></span></span></span></span></span></span>(规格化数)。</p>
<p>（5）若<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>E</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">E=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>且<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mo mathvariant="normal">≠</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">M\neq0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mrel"><span class="mord vbox"><span class="thinbox"><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>，则<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi><mo>=</mo><mo stretchy="false">(</mo><mo>−</mo><mn>1</mn><msup><mo stretchy="false">)</mo><mi>S</mi></msup><mo>×</mo><mo stretchy="false">(</mo><mn>0.</mn><mi>M</mi><mo stretchy="false">)</mo><mo>×</mo><msup><mn>2</mn><mo>−</mo></msup><mn>126</mn></mrow><annotation encoding="application/x-tex">N=(-1)^S\times(0.M)\times2^-126</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.0913309999999998em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">−</span><span class="mord">1</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05764em;">S</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">0</span><span class="mord">.</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.771331em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.771331em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">−</span></span></span></span></span></span></span></span><span class="mord">1</span><span class="mord">2</span><span class="mord">6</span></span></span></span>(非规格化数)。这是无法进行规格化表示的数据，可以用非规格化形式表示。</p>
<blockquote>
<p>对于64位长浮点数，64位浮点数中符号位1位，阶码域11位，尾数域52位，指数偏移值是1023。因此，规格化的64位浮点数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">x</span></span></span></span>的真值为</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>x</mi><mo>=</mo><mo stretchy="false">(</mo><mo>−</mo><mn>1</mn><msup><mo stretchy="false">)</mo><mi>S</mi></msup><mo>×</mo><mo stretchy="false">(</mo><mn>1.</mn><mi>M</mi><mo stretchy="false">)</mo><mo>×</mo><msup><mn>2</mn><mrow><mi>E</mi><mo>−</mo><mn>1023</mn></mrow></msup><mo separator="true">,</mo><mi>e</mi><mo>=</mo><mi>E</mi><mo>−</mo><mn>1023</mn></mrow><annotation encoding="application/x-tex">x=(-1)^S\times(1.M)\times2^{E-1023},e=E-1023
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.1413309999999999em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">−</span><span class="mord">1</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913309999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05764em;">S</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mord">.</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.085771em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.891331em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05764em;">E</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mord mtight">0</span><span class="mord mtight">2</span><span class="mord mtight">3</span></span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">e</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">2</span><span class="mord">3</span></span></span></span></span></p>
</blockquote>
</li>
</ol>
<h4 id="113-字符与字符串的表示方法"><a class="markdownIt-Anchor" href="#113-字符与字符串的表示方法"></a> 1.1.3 字符与字符串的表示方法</h4>
<p>符号数据：将字符信息用数据表示。</p>
<h4 id="114-汉字的表示方"><a class="markdownIt-Anchor" href="#114-汉字的表示方"></a> 1.1.4 汉字的表示方</h4>
<ol>
<li>
<p>汉字的输入编码</p>
<p>数字编码、拼音码、字形编码</p>
</li>
<li>
<p>汉字内码</p>
</li>
<li>
<p>汉字字模码</p>
</li>
</ol>
<h4 id="115-校验码"><a class="markdownIt-Anchor" href="#115-校验码"></a> 1.1.5 校验码</h4>
<p>最简单且应用广泛的检错码是采用一位校验位的<strong>奇校验</strong>或<strong>偶校验</strong>。</p>
<p>设<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi><mo>=</mo><mo stretchy="false">(</mo><msub><mi>x</mi><mn>0</mn></msub><msub><mi>x</mi><mn>1</mn></msub><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>x</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">X=(x_0x_1...x_{n-1})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>是一个n位字，则奇校验位<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>C</mi><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{C}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8833300000000001em;vertical-align:0em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span></span></span></span>定义为</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mover accent="true"><mi>C</mi><mo stretchy="true">‾</mo></mover><mo>=</mo><msub><mi>x</mi><mn>0</mn></msub><mo>⊕</mo><msub><mi>x</mi><mn>1</mn></msub><mo>⊕</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>⊕</mo><msub><mi>x</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">\overline{C}=x_0\oplus x_1\oplus...\oplus x_{n-1} 
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8833300000000001em;vertical-align:0em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.638891em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span></span></p>
<p>式中，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⊕</mo></mrow><annotation encoding="application/x-tex">\oplus</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">⊕</span></span></span></span>代表按位相加，表明只有当<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi></mrow><annotation encoding="application/x-tex">X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span></span>中包含<strong>奇数个1</strong>时，才能使<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>C</mi><mo stretchy="true">‾</mo></mover><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">\overline{C}=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8833300000000001em;vertical-align:0em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，即<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">C=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>。</p>
<p>同理，偶校验位<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi></mrow><annotation encoding="application/x-tex">C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span>定义为</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>C</mi><mo>=</mo><msub><mi>x</mi><mn>0</mn></msub><mo>⊕</mo><msub><mi>x</mi><mn>1</mn></msub><mo>⊕</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>⊕</mo><msub><mi>x</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">C=x_0\oplus x_1\oplus...\oplus x_{n-1}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.638891em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span></span></p>
<p>即<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi></mrow><annotation encoding="application/x-tex">X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span></span>中包含偶数个1时，才使<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">C=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>。</p>
<p>奇偶校验只能检测奇数个错误，无法检测偶数个错误，更无法识别错误信息的位置。</p>
<blockquote>
<p>在异或运算中，奇数个1计算出的结果为1，偶数个1计算出的结果为0。</p>
<p>从上面来看，当校验位结果为0时，表示信息正常，当校验位结果为1时，表示信息错误。</p>
<p>原始数据中有奇数个1，使用奇校验，当出现错误时，奇数个1变为偶数个1，检验位结果为0，由于奇校验位是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>C</mi><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8833300000000001em;vertical-align:0em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span></span></span></span>的形式，则最终校验结果<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi></mrow><annotation encoding="application/x-tex">C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span>为1，表示错误。</p>
<p>偶校验同理可得，当出现错误时，偶数个1变为奇数个，校验位结果直接为1，表示错误。</p>
</blockquote>
<p>其他校验码如海明检验码，可参考<a class="link"   href="https://www.cnblogs.com/godoforange/" >海明码一篇文章彻底搞懂 ｜🔥秃桔子的博客 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="12-定点加法-减法运算"><a class="markdownIt-Anchor" href="#12-定点加法-减法运算"></a> 1.2 定点加法、减法运算</h3>
<h4 id="121-补码加法"><a class="markdownIt-Anchor" href="#121-补码加法"></a> 1.2.1 补码加法</h4>
<p>基本公式</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo stretchy="false">[</mo><mi>x</mi><msub><mo stretchy="false">]</mo><mtext>补</mtext></msub><mo>+</mo><mo stretchy="false">[</mo><mi>y</mi><msub><mo stretchy="false">]</mo><mtext>补</mtext></msub><mo>=</mo><mo stretchy="false">[</mo><mi>x</mi><mo>+</mo><mi>y</mi><msub><mo stretchy="false">]</mo><mtext>补</mtext></msub><mspace width="2em"/><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><msup><mn>2</mn><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">[x]_补+[y]_补=[x+y]_补\qquad(mod\ 2^{n+1})
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathnormal">x</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord cjk_fallback mtight">补</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord cjk_fallback mtight">补</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1141079999999999em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord cjk_fallback mtight">补</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:2em;"></span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.864108em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p>
<p>考虑4种情况</p>
<p>（1）<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>≥</mo><mn>0</mn><mo separator="true">,</mo><mi>y</mi><mo>≥</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">x\geq0,y\geq0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>，则<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>+</mo><mi>y</mi><mo>≥</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">x+y\geq0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8304100000000001em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>。</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo stretchy="false">[</mo><mi>x</mi><msub><mo stretchy="false">]</mo><mtext>补</mtext></msub><mo>+</mo><mo stretchy="false">[</mo><mi>y</mi><msub><mo stretchy="false">]</mo><mtext>补</mtext></msub><mo>=</mo><mo stretchy="false">[</mo><mi>x</mi><mo>+</mo><mi>y</mi><msub><mo stretchy="false">]</mo><mtext>补</mtext></msub><mspace width="2em"/><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><msup><mn>2</mn><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">[x]_补+[y]_补=[x+y]_补\qquad(mod\ 2^{n+1})
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathnormal">x</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord cjk_fallback mtight">补</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord cjk_fallback mtight">补</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1141079999999999em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord cjk_fallback mtight">补</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:2em;"></span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.864108em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p>
<p>（2）<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>≥</mo><mn>0</mn><mo separator="true">,</mo><mi>y</mi><mo>&lt;</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">x\geq0,y&lt;0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>，则<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>+</mo><mi>y</mi><mo>≥</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">x+y\geq0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8304100000000001em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>或<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>+</mo><mi>y</mi><mo>&lt;</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">x+y&lt;0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.7335400000000001em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>，则由补码定义可得<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mi>x</mi><msub><mo stretchy="false">]</mo><mtext>补</mtext></msub><mo>=</mo><mi>x</mi><mo separator="true">,</mo><mo stretchy="false">[</mo><mi>y</mi><msub><mo stretchy="false">]</mo><mtext>补</mtext></msub><mo>=</mo><msup><mn>2</mn><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msup><mo>+</mo><mi>y</mi></mrow><annotation encoding="application/x-tex">[x]_补=x,[y]_补=2^{n+1}+y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathnormal">x</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord cjk_fallback mtight">补</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord cjk_fallback mtight">补</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span>。</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mspace width="1em"/><mo stretchy="false">[</mo><mi>x</mi><msub><mo stretchy="false">]</mo><mtext>补</mtext></msub><mo>+</mo><mo stretchy="false">[</mo><mi>y</mi><msub><mo stretchy="false">]</mo><mtext>补</mtext></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mi>x</mi><mo>+</mo><msup><mn>2</mn><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msup><mo>+</mo><mi>y</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><msup><mn>2</mn><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msup><mo>+</mo><mo stretchy="false">(</mo><mi>x</mi><mo>+</mo><mi>y</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mo stretchy="false">[</mo><mi>x</mi><mo>+</mo><mi>y</mi><msub><mo stretchy="false">]</mo><mtext>补</mtext></msub><mspace width="2em"/><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><msup><mn>2</mn><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msup><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}
&amp; \quad[x]_补+[y]_补\\
&amp; =x+2^{n+1}+y\\
&amp; = 2^{n+1}+(x+y)\\
&amp;=[x+y]_补\qquad(mod\ 2^{n+1}) \\
\end{aligned}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:6.072324em;vertical-align:-2.7861620000000005em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.286162em;"><span style="top:-5.31027em;"><span class="pstrut" style="height:2.864108em;"></span><span class="mord"></span></span><span style="top:-3.786161999999999em;"><span class="pstrut" style="height:2.864108em;"></span><span class="mord"></span></span><span style="top:-2.262053999999999em;"><span class="pstrut" style="height:2.864108em;"></span><span class="mord"></span></span><span style="top:-0.7379459999999995em;"><span class="pstrut" style="height:2.864108em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.7861620000000005em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.286162em;"><span style="top:-5.446162em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:1em;"></span><span class="mopen">[</span><span class="mord mathnormal">x</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord cjk_fallback mtight">补</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord cjk_fallback mtight">补</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.9220539999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.864108em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span><span style="top:-2.3979459999999992em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.864108em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span><span style="top:-0.8738379999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mopen">[</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord cjk_fallback mtight">补</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:2em;"></span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.864108em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.7861620000000005em;"><span></span></span></span></span></span></span></span></span></span></span></span></p>
<p>（3）<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>&lt;</mo><mn>0</mn><mo separator="true">,</mo><mi>y</mi><mo>≥</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">x&lt;0,y\geq0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>，和情况（2）同理。</p>
<p>（4）<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>&lt;</mo><mn>0</mn><mo separator="true">,</mo><mi>y</mi><mo>&lt;</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">x&lt;0,y&lt;0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>，则<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>+</mo><mi>y</mi><mo>&lt;</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">x+y&lt;0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.7335400000000001em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>，则由补码定义可得<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mi>x</mi><msub><mo stretchy="false">]</mo><mtext>补</mtext></msub><mo>=</mo><msup><mn>2</mn><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msup><mo>+</mo><mi>x</mi><mo separator="true">,</mo><mo stretchy="false">[</mo><mi>y</mi><msub><mo stretchy="false">]</mo><mtext>补</mtext></msub><mo>=</mo><msup><mn>2</mn><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msup><mo>+</mo><mi>y</mi></mrow><annotation encoding="application/x-tex">[x]_补=2^{n+1}+x,[y]_补=2^{n+1}+y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathnormal">x</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord cjk_fallback mtight">补</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord cjk_fallback mtight">补</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span>。</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mspace width="1em"/><mo stretchy="false">[</mo><mi>x</mi><msub><mo stretchy="false">]</mo><mtext>补</mtext></msub><mo>+</mo><mo stretchy="false">[</mo><mi>y</mi><msub><mo stretchy="false">]</mo><mtext>补</mtext></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><msup><mn>2</mn><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msup><mo>+</mo><mi>x</mi><mo>+</mo><msup><mn>2</mn><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msup><mo>+</mo><mi>y</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><msup><mn>2</mn><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msup><mo>+</mo><msup><mn>2</mn><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msup><mo>+</mo><mo stretchy="false">(</mo><mi>x</mi><mo>+</mo><mi>y</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mo stretchy="false">[</mo><mi>x</mi><mo>+</mo><mi>y</mi><msub><mo stretchy="false">]</mo><mtext>补</mtext></msub><mspace width="2em"/><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><msup><mn>2</mn><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msup><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}
&amp;\quad[x]_补+[y]_补\\
&amp;=2^{n+1}+x+2^{n+1}+y\\
&amp;=2^{n+1}+2^{n+1}+(x+y)\\
&amp;=[x+y]_补\qquad(mod\ 2^{n+1})
\end{aligned}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:6.072324em;vertical-align:-2.7861620000000005em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.286162em;"><span style="top:-5.31027em;"><span class="pstrut" style="height:2.864108em;"></span><span class="mord"></span></span><span style="top:-3.786161999999999em;"><span class="pstrut" style="height:2.864108em;"></span><span class="mord"></span></span><span style="top:-2.262053999999999em;"><span class="pstrut" style="height:2.864108em;"></span><span class="mord"></span></span><span style="top:-0.7379459999999995em;"><span class="pstrut" style="height:2.864108em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.7861620000000005em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.286162em;"><span style="top:-5.446162em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:1em;"></span><span class="mopen">[</span><span class="mord mathnormal">x</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord cjk_fallback mtight">补</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord cjk_fallback mtight">补</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.9220539999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.864108em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.864108em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span><span style="top:-2.3979459999999992em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.864108em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.864108em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span><span style="top:-0.8738379999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mopen">[</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord cjk_fallback mtight">补</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:2em;"></span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.864108em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.7861620000000005em;"><span></span></span></span></span></span></span></span></span></span></span></span></p>
<h4 id="122-补码减法"><a class="markdownIt-Anchor" href="#122-补码减法"></a> 1.2.2 补码减法</h4>
<p>基本公式</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo stretchy="false">[</mo><mi>x</mi><mo>−</mo><mi>y</mi><msub><mo stretchy="false">]</mo><mtext>补</mtext></msub><mo>=</mo><mo stretchy="false">[</mo><mi>x</mi><msub><mo stretchy="false">]</mo><mtext>补</mtext></msub><mo>−</mo><mo stretchy="false">[</mo><mi>y</mi><msub><mo stretchy="false">]</mo><mtext>补</mtext></msub><mo>=</mo><mo stretchy="false">[</mo><mi>x</mi><msub><mo stretchy="false">]</mo><mtext>补</mtext></msub><mo>+</mo><mo stretchy="false">[</mo><mo>−</mo><mi>y</mi><msub><mo stretchy="false">]</mo><mtext>补</mtext></msub></mrow><annotation encoding="application/x-tex">[x-y]_补=[x]_补-[y]_补=[x]_补+[-y]_补
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord cjk_fallback mtight">补</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathnormal">x</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord cjk_fallback mtight">补</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord cjk_fallback mtight">补</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathnormal">x</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord cjk_fallback mtight">补</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">−</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord cjk_fallback mtight">补</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p>
<p>从<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mi>y</mi><msub><mo stretchy="false">]</mo><mtext>补</mtext></msub></mrow><annotation encoding="application/x-tex">[y]_补</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord cjk_fallback mtight">补</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>求<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mo>−</mo><mi>y</mi><msub><mo stretchy="false">]</mo><mtext>补</mtext></msub></mrow><annotation encoding="application/x-tex">[-y]_补</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">−</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord cjk_fallback mtight">补</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的法则是：对<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mi>y</mi><msub><mo stretchy="false">]</mo><mtext>补</mtext></msub></mrow><annotation encoding="application/x-tex">[y]_补</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord cjk_fallback mtight">补</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>包括符号位“求反且最末位加1”，即可得到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mo>−</mo><mi>y</mi><msub><mo stretchy="false">]</mo><mtext>补</mtext></msub></mrow><annotation encoding="application/x-tex">[-y]_补</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">−</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord cjk_fallback mtight">补</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>。</p>
<h4 id="123-溢出概念与检测方法"><a class="markdownIt-Anchor" href="#123-溢出概念与检测方法"></a> 1.2.3 溢出概念与检测方法</h4>
<p>两个正数相加，结果过大导致符号位改变，结果为负数，正溢。</p>
<p>两个负数相加，结果过小导致符号位改变，结果为正数，负溢。</p>
<p>为了检测溢出，可采用两种检测方法。第一种方法就是双符号位法，也称为“<strong>变形补码</strong>”，使模<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">2^{n+1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span>补码所能表示的数的范围扩大一倍。</p>
<p>数的变形补码用同余式表示时</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo stretchy="false">[</mo><mi>x</mi><msub><mo stretchy="false">]</mo><mtext>补</mtext></msub><mo>=</mo><msup><mn>2</mn><mrow><mi>n</mi><mo>+</mo><mn>2</mn></mrow></msup><mo>+</mo><mi>x</mi><mspace width="2em"/><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><msup><mn>2</mn><mrow><mi>n</mi><mo>+</mo><mn>2</mn></mrow></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">[x]_补=2^{n+2}+x \qquad(mod\ 2^{n+2})
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathnormal">x</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord cjk_fallback mtight">补</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.947438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.864108em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1141079999999999em;vertical-align:-0.25em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:2em;"></span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.864108em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p>
<p>采用变形补码，正数的符号位为00，负数的符号位为11。当发生溢出时，符号位会出现01和10的情况，但是最高符号位永远表示结果的正确符号。</p>
<blockquote>
<p>01表示正溢，10表是负溢。</p>
</blockquote>
<h3 id="13-定点乘法运算"><a class="markdownIt-Anchor" href="#13-定点乘法运算"></a> 1.3 定点乘法运算</h3>
<p>用<strong>原码</strong>阵列乘法器，输入数据用<strong>原码</strong>表示</p>
<p>用<strong>补码</strong>阵列乘法器，输入数据用<strong>补码</strong>表示</p>
<blockquote>
<p>从实际计算过程来看，都是用<strong>真值绝对值的二进制形式</strong>计算得到结果。</p>
<p>如果给出的条件是十进制数，则直接取绝对值，如果是原码或补码，则经过一定的计算转换到真值的绝对值。</p>
</blockquote>
<p>符号位都是单独计算，符号使用异或运算，最后结果加上符号位。</p>
<blockquote>
<p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn><mo>⊕</mo><mn>1</mn><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">0\oplus1=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn><mo>⊕</mo><mn>0</mn><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">0\oplus0=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>⊕</mo><mn>1</mn><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">1\oplus1=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>。</p>
</blockquote>
<h3 id="14-定点除法运算"><a class="markdownIt-Anchor" href="#14-定点除法运算"></a> 1.4 定点除法运算</h3>
<p>由于机器计算无法提前判断结果，必须先计算出结果才能进行判断。那么关于除法运算中余数不够减的情况，提供了两种处理方法，<strong>恢复余数法</strong>和<strong>加减交替法</strong>。</p>
<p>恢复余数法，就是将当前的余数加上除数即可。但是由于恢复余数的步数不是固定的，难以控制，因此实际运算中更多使用不恢复的方法。</p>
<p>加减交替法，也就是不恢复余数法，能够在余数不够减的情况下，根据余数符号，继续往下运算，步数固定，控制简单。</p>
<blockquote>
<p>当i-1次求商的余数为正时，上商为1，余数左移1位并减去除数得到下一个余数，即<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>R</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub><mo>=</mo><mn>2</mn><msub><mi>R</mi><mi>i</mi></msub><mo>−</mo><mi>Y</mi></mrow><annotation encoding="application/x-tex">R_{i+1}=2R_i-Y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.891661em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord">2</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span></span></span></p>
<p>当i-1次求商的余数为负时，上商为0，余数左移1位并加上除数得到下一个余数，即<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>R</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub><mo>=</mo><mn>2</mn><mo stretchy="false">(</mo><msub><mi>R</mi><mi>i</mi></msub><mo>+</mo><mi>Y</mi><mo stretchy="false">)</mo><mo>−</mo><mi>Y</mi><mo>=</mo><mn>2</mn><msub><mi>R</mi><mi>i</mi></msub><mo>+</mo><mi>Y</mi></mrow><annotation encoding="application/x-tex">R_{i+1}=2(R_i+Y)-Y=2R_i+Y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.891661em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord">2</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span></span></span></p>
</blockquote>
<p><strong>虽然加减交替法被称为不恢复余数法，但是如果最后一次得到的余数为负数，那仍需要进行恢复余数。恢复余数只需要直接加上除数即可，不需要进行任何的移位，即<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>R</mi><mo>=</mo><msub><mi>R</mi><mi>i</mi></msub><mo>+</mo><mi>Y</mi></mrow><annotation encoding="application/x-tex">R=R_i+Y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span></span></span>。</strong></p>
<blockquote>
<p>另外，在计算过程中，通过左移计算的一般是手工实现版，通过右移计算的一般是算法实现版。</p>
</blockquote>
<h3 id="15-定点运算器的组成"><a class="markdownIt-Anchor" href="#15-定点运算器的组成"></a> 1.5 定点运算器的组成</h3>
<h4 id="151-逻辑运算"><a class="markdownIt-Anchor" href="#151-逻辑运算"></a> 1.5.1 逻辑运算</h4>
<p>四种基本逻辑运算：逻辑非(求反)、逻辑加(或)、逻辑乘(与)、逻辑异(按位加)。</p>
<h4 id="152-多功能算术逻辑运算单元"><a class="markdownIt-Anchor" href="#152-多功能算术逻辑运算单元"></a> 1.5.2 多功能算术/逻辑运算单元</h4>
<p>半加器</p>
<p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>H</mi><mi>i</mi></msub><mo>=</mo><msub><mi>A</mi><mi>i</mi></msub><mo>⊕</mo><msub><mi>B</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">H_i=A_i\oplus B_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，不考虑进位，很少使用。</p>
<p>全加器</p>
<p>考虑低位进位<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">C_{i-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.891661em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span>和向高位的进位<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">C_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，其逻辑表达式为</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>F</mi><mi>i</mi></msub><mo>=</mo><msub><mi>A</mi><mi>i</mi></msub><mo>⊕</mo><msub><mi>B</mi><mi>i</mi></msub><mo>⊕</mo><msub><mi>C</mi><mi>i</mi></msub><mspace linebreak="newline"></mspace><msub><mi>C</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub><mo>=</mo><msub><mi>A</mi><mi>i</mi></msub><msub><mi>B</mi><mi>i</mi></msub><mo>+</mo><msub><mi>B</mi><mi>i</mi></msub><msub><mi>C</mi><mi>i</mi></msub><mo>+</mo><msub><mi>C</mi><mi>i</mi></msub><msub><mi>A</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">F_i=A_i\oplus B_i\oplus C_i \\
C_{i+1}=A_iB_i+B_iC_i+C_iA_i
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.891661em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p>
<p>式中，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>F</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">F_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>是第<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathnormal">i</span></span></span></span>位的和数，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>A</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">A_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>、<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>B</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">B_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>是第<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathnormal">i</span></span></span></span>位的被加数和加数，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">C_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>是第<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathnormal">i</span></span></span></span>位的进位输入，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">C_{i+1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.891661em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span>为第<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathnormal">i</span></span></span></span>位的进位输出。</p>
<p>对全加器的功能进行拓展，将<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>A</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">A_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>B</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">B_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>先组合成由控制参数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">S_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>、<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">S_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>、<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">S_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>、<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mn>3</mn></msub></mrow><annotation encoding="application/x-tex">S_3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>控制的组合函数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>X</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">X_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>Y</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">Y_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，然后再将<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>X</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">X_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>Y</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">Y_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>和下一位进位数通过全加器进行全加。</p>
<blockquote>
<p>其中</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>X</mi><mi>i</mi></msub><mo>=</mo><mover accent="true"><mrow><msub><mi>S</mi><mn>3</mn></msub><msub><mi>A</mi><mi>i</mi></msub><msub><mi>B</mi><mi>i</mi></msub><mo>+</mo><msub><mi>S</mi><mn>2</mn></msub><msub><mi>A</mi><mi>i</mi></msub><mover accent="true"><msub><mi>B</mi><mi>i</mi></msub><mo stretchy="true">‾</mo></mover></mrow><mo stretchy="true">‾</mo></mover><mspace linebreak="newline"></mspace><msub><mi>Y</mi><mi>i</mi></msub><mo>=</mo><mover accent="true"><mrow><msub><mi>A</mi><mi>i</mi></msub><mo>+</mo><msub><mi>S</mi><mn>0</mn></msub><msub><mi>B</mi><mi>i</mi></msub><mo>+</mo><msub><mi>S</mi><mn>1</mn></msub><mover accent="true"><msub><mi>B</mi><mi>i</mi></msub><mo stretchy="true">‾</mo></mover></mrow><mo stretchy="true">‾</mo></mover><mspace linebreak="newline"></mspace><msub><mi>F</mi><mi>i</mi></msub><mo>=</mo><msub><mi>Y</mi><mi>i</mi></msub><mo>⊕</mo><msub><mi>X</mi><mi>i</mi></msub><mo>⊕</mo><msub><mi>C</mi><mrow><mi>n</mi><mo>+</mo><mi>i</mi></mrow></msub><mspace linebreak="newline"></mspace><msub><mi>C</mi><mrow><mi>n</mi><mo>+</mo><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub><mo>=</mo><msub><mi>Y</mi><mi>i</mi></msub><mo>+</mo><msub><mi>X</mi><mi>i</mi></msub><msub><mi>C</mi><mrow><mi>n</mi><mo>+</mo><mi>i</mi></mrow></msub></mrow><annotation encoding="application/x-tex">X_i=\overline{S_3A_iB_i+S_2A_i\overline{B_i}}\\
Y_i=\overline{A_i+S_0B_i+S_1\overline{B_i}}\\
F_i=Y_i\oplus X_i \oplus C_{n+i}\\
C_{n+i+1}=Y_i+X_iC_{n+i}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.23333em;vertical-align:-0.15em;"></span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span style="top:-4.00333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.23333em;vertical-align:-0.15em;"></span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span style="top:-4.00333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.891661em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">+</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.891661em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">+</span><span class="mord mathnormal mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.891661em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">+</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span></span></p>
<p>每一位的进位公式递推如下，</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>C</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msub><mo>=</mo><msub><mi>Y</mi><mn>0</mn></msub><mo>+</mo><msub><mi>X</mi><mn>0</mn></msub><msub><mi>C</mi><mi>n</mi></msub><mspace linebreak="newline"></mspace><msub><mi>C</mi><mrow><mi>n</mi><mo>+</mo><mn>2</mn></mrow></msub><mo>=</mo><msub><mi>Y</mi><mn>1</mn></msub><mo>+</mo><msub><mi>X</mi><mn>1</mn></msub><msub><mi>C</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msub><mspace linebreak="newline"></mspace><msub><mi>C</mi><mrow><mi>n</mi><mo>+</mo><mn>3</mn></mrow></msub><mo>=</mo><msub><mi>Y</mi><mn>2</mn></msub><mo>+</mo><msub><mi>X</mi><mn>2</mn></msub><msub><mi>C</mi><mrow><mi>n</mi><mo>+</mo><mn>2</mn></mrow></msub><mspace linebreak="newline"></mspace><msub><mi>C</mi><mrow><mi>n</mi><mo>+</mo><mn>4</mn></mrow></msub><mo>=</mo><msub><mi>Y</mi><mn>3</mn></msub><mo>+</mo><msub><mi>X</mi><mn>3</mn></msub><msub><mi>C</mi><mrow><mi>n</mi><mo>+</mo><mn>3</mn></mrow></msub></mrow><annotation encoding="application/x-tex">C_{n+1}=Y_0+X_0C_n\\
C_{n+2}=Y_1+X_1C_{n+1}\\
C_{n+3}=Y_2+X_2C_{n+2}\\
C_{n+4}=Y_3+X_3C_{n+3}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.891661em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.891661em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.891661em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.891661em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.891661em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.891661em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">4</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.891661em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span></span></p>
<p>设</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>G</mi><mo>=</mo><msub><mi>Y</mi><mn>3</mn></msub><mo>+</mo><msub><mi>Y</mi><mn>2</mn></msub><msub><mi>X</mi><mn>3</mn></msub><mo>+</mo><msub><mi>Y</mi><mn>1</mn></msub><msub><mi>X</mi><mn>2</mn></msub><msub><mi>X</mi><mn>3</mn></msub><mspace linebreak="newline"></mspace><mo>+</mo><msub><mi>Y</mi><mn>0</mn></msub><msub><mi>X</mi><mn>1</mn></msub><msub><mi>X</mi><mn>2</mn></msub><msub><mi>X</mi><mn>3</mn></msub><mspace linebreak="newline"></mspace><mi>P</mi><mo>=</mo><msub><mi>X</mi><mn>0</mn></msub><msub><mi>X</mi><mn>1</mn></msub><msub><mi>X</mi><mn>2</mn></msub><msub><mi>X</mi><mn>3</mn></msub></mrow><annotation encoding="application/x-tex">G=Y_3+Y_2X_3+Y_1X_2X_3\\
+Y_0X_1X_2X_3\\
P=X_0X_1X_2X_3
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">G</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord">+</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p>
<p>则</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>C</mi><mrow><mi>n</mi><mo>+</mo><mn>4</mn></mrow></msub><mo>=</mo><mi>G</mi><mo>+</mo><mi>P</mi><msub><mi>C</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">C_{n+4}=G+PC_n
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.891661em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">4</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">G</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p>
<p>其中，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>G</mi></mrow><annotation encoding="application/x-tex">G</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">G</span></span></span></span>称为进位发生输出，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi></mrow><annotation encoding="application/x-tex">P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span></span></span></span>称为进位传送输出。</p>
</blockquote>
<p><strong>并行进位</strong></p>
<p><strong>组内并行，组间串行</strong></p>
<p><strong>组内并行，组件并行</strong></p>
<h3 id="16-浮点运算与浮点运算器"><a class="markdownIt-Anchor" href="#16-浮点运算与浮点运算器"></a> 1.6 浮点运算与浮点运算器</h3>
<h4 id="移位操作"><a class="markdownIt-Anchor" href="#移位操作"></a> 移位操作</h4>
<p>逻辑移位，不保留原符号位，直接补0。</p>
<p>循环移位，不保留原符号位，空位补位的值与原符号位的值相同。</p>
<p><strong>原码</strong>算术移位，保留符号位，补0。</p>
<p><strong>补码算术左移</strong>，单符号位保留不变，双符号位只保留第一位，空位补0</p>
<p><strong>补码算术右移</strong>，单符号位保留不变，双符号位只保留第一位，空位补位的值与原符号位的值相同</p>
<h4 id="浮点加法-减法运算"><a class="markdownIt-Anchor" href="#浮点加法-减法运算"></a> 浮点加法、减法运算</h4>
<p>设有两个浮点数</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>x</mi><mo>=</mo><msup><mn>2</mn><msub><mi>E</mi><mi>x</mi></msub></msup><mo>⋅</mo><msub><mi>M</mi><mi>x</mi></msub><mspace linebreak="newline"></mspace><mi>y</mi><mo>=</mo><msup><mn>2</mn><msub><mi>E</mi><mi>y</mi></msub></msup><mo>⋅</mo><msub><mi>M</mi><mi>y</mi></msub></mrow><annotation encoding="application/x-tex">x=2^{E_x}\cdot M_x\\
y=2^{E_y}\cdot M_y
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8913309999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913309999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:-0.05764em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.891331em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.891331em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285716em;"><span style="top:-2.357em;margin-left:-0.05764em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2818857142857143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span></span></p>
<p>其中，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>E</mi><mi>x</mi></msub></mrow><annotation encoding="application/x-tex">E_x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>E</mi><mi>y</mi></msub></mrow><annotation encoding="application/x-tex">E_y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>分别为数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">x</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span>的阶码，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>M</mi><mi>x</mi></msub></mrow><annotation encoding="application/x-tex">M_x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>M</mi><mi>y</mi></msub></mrow><annotation encoding="application/x-tex">M_y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>分别为数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">x</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span>的尾数。</p>
<p>两浮点数进行加法和减法的运算规则是</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>z</mi><mo>=</mo><mi>x</mi><mo>±</mo><mi>y</mi><mo>=</mo><mo stretchy="false">(</mo><msub><mi>M</mi><mi>x</mi></msub><msup><mn>2</mn><mrow><msub><mi>E</mi><mi>x</mi></msub><mo>−</mo><msub><mi>E</mi><mi>y</mi></msub></mrow></msup><mo>±</mo><msub><mi>M</mi><mi>y</mi></msub><mo stretchy="false">)</mo><msup><mn>2</mn><msub><mi>E</mi><mi>y</mi></msub></msup><mspace linebreak="newline"></mspace><msub><mi>E</mi><mi>x</mi></msub><mo>≤</mo><msub><mi>E</mi><mi>y</mi></msub></mrow><annotation encoding="application/x-tex">z=x\pm y=(M_x2^{E_x-E_y}\pm M_y)2^{E_y}\\E_x\leq E_y
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">±</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.141331em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.891331em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:-0.05764em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mbin mtight">−</span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285716em;"><span style="top:-2.357em;margin-left:-0.05764em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2818857142857143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">±</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.177439em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.891331em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285716em;"><span style="top:-2.357em;margin-left:-0.05764em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2818857142857143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span></span></p>
<p>运算步骤</p>
<ol>
<li>
<p>0操作数检查</p>
<p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">x</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span>中有一个数为0，直接得出结果。</p>
</li>
<li>
<p>比较阶码大小并完成对阶</p>
<p>两浮点数加减，首先要看两数的阶码是否相同，即小数点的位置是否对齐。如果不同，则需要进行移位操作，使其阶码相同，这一过程就称为<strong>对阶</strong>。</p>
<p>要对阶，首先要求出阶差，即<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">Δ</mi><mi>E</mi><mo>=</mo><msub><mi>E</mi><mi>x</mi></msub><mo>−</mo><msub><mi>E</mi><mi>y</mi></msub></mrow><annotation encoding="application/x-tex">\Delta E=E_x-E_y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">Δ</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span></p>
<blockquote>
<p>一般使用<strong>尾数右移</strong>的方式来对阶，因为尾数右移造成的误差要远远小于尾数左移造成的误差。</p>
<p>因此，在对阶时，总是使<strong>小阶向大阶看齐</strong>，即小阶的尾数向右移位(相当于小数点左移)，每右移一位，其阶码加1，直到两数的阶码相等为止，右移的位数等于阶差<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">Δ</mi><mi>E</mi></mrow><annotation encoding="application/x-tex">\Delta E</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">Δ</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span></span></span></span>。</p>
<p>这里的移位都是指<strong>补码算术移位</strong>。</p>
</blockquote>
</li>
<li>
<p>尾数加减运算</p>
<p>注意浮点数都是用<strong>补码</strong>来计算的即可。</p>
</li>
<li>
<p>结果规格化</p>
<p>右规：尾数右移才能满足规格化条件。尾数右移1位，阶码加1。</p>
<p>左规：尾数左移才能满足规格化条件。尾数左移1位，阶码减1。</p>
<blockquote>
<p>形如00.0…01…和11.1…10这种结果，可以将其左规为00.1…和11.0…的形式。</p>
</blockquote>
</li>
<li>
<p>舍入处理</p>
<p>在尾数右移时需要对丢弃的低位部分进行舍入处理。</p>
<p>就近舍入：0舍1入，类似于4舍5入。丢弃的最高位为1则进1。</p>
<p>朝0舍入：就是简单的截尾。这种方法容易积累误差。</p>
<p>朝<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>+</mo><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">+\infty</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">+</span><span class="mord">∞</span></span></span></span>舍入：对于正数，只要多余位不全为0则进1；对于负数，就是截尾。</p>
<p>朝<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">-\infty</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord">∞</span></span></span></span>舍入：对于正数，就是截尾；对于负数，只要多余位不全为0则进1。</p>
</li>
<li>
<p>溢出判断和处理</p>
<p>分为对阶码的溢出处理和对尾数的溢出处理。</p>
<p>阶码上溢：一般将其认为是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>+</mo><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">+\infty</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">+</span><span class="mord">∞</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">-\infty</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord">∞</span></span></span></span>。</p>
<p>阶码下溢：一般将其认为是0。</p>
<p>尾数上溢：由于最高位进位导致的溢出，进行尾数尾数右移，阶码加1，重新对齐。</p>
<p>尾数下溢：在尾数右移时，进行舍入处理。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>杂乱的记录</category>
      </categories>
      <tags>
        <tag>计算机组成原理</tag>
        <tag>运算方法</tag>
      </tags>
  </entry>
  <entry>
    <title>现代密码学——DES</title>
    <url>/2023/11/18/cryptology-des/</url>
    <content><![CDATA[<p>本文整理了关于现代密码学入门之作——DES（数据加密标准）的一些相关资料。<span id="more"></span></p>
<h3 id="des的工作原理"><a class="markdownIt-Anchor" href="#des的工作原理"></a> DES的工作原理</h3>
<p>DES（数据加密标准）是一种对称密钥加密算法，它的工作原理如下：</p>
<ol>
<li><strong>DES的总体结构</strong>：DES使用 Feistel 网络结构，总共有 16 轮迭代。每轮迭代都包含了置换、代换和异或等操作。</li>
<li><strong>初始置换（IP）和逆初始置换（IP-1）</strong>：在DES加密的开始，64位的明文会经过一个初始置换IP，这个置换是固定的。然后在16轮迭代结束后，会进行逆初始置换IP-1，得到最终的密文。</li>
<li><strong>F函数</strong>：F函数是DES中最重要的部分，它包括扩展置换、S盒代换和P盒置换三个步骤。扩展置换将32位的输入扩展到48位，然后与子密钥进行异或操作。S盒代换将48位的输入转换为32位的输出，这个过程包含了非线性变换。最后，P盒置换是一个简单的线性置换。</li>
<li><strong>密钥调度算法</strong>：DES使用了一个56位的密钥，但是在每轮迭代中，都会生成一个48位的子密钥。这个过程被称为密钥调度。密钥调度包括了置换选择1（PC-1）、循环左移和置换选择2（PC-2）三个步骤。</li>
</ol>
<blockquote>
<p>DES算法中置换表的使用顺序如下：</p>
<ol>
<li><strong>PC-1置换</strong>：在密钥调度算法中，首先使用PC-1置换来选择56位的密钥材料。</li>
<li><strong>PC-2置换</strong>：在密钥调度算法中，每轮迭代都会使用PC-2置换来生成48位的子密钥。</li>
<li><strong>初始置换（IP）</strong>：在加密和解密过程的开始，使用初始置换来重新排列64位的输入。</li>
<li><strong>扩展置换（E）</strong>：在每轮迭代中，使用扩展置换将32位的输入扩展到48位。</li>
<li><strong>S盒</strong>：在每轮迭代中，使用S盒将48位的输入转换为32位的输出。</li>
<li><strong>P盒置换（P）</strong>：在每轮迭代中，使用P盒置换来重新排列32位的输出。</li>
<li><strong>逆初始置换（IP-1）</strong>：在加密和解密过程的结束，使用逆初始置换来得到最终的64位的输出。</li>
</ol>
</blockquote>
<h3 id="des中的数学基础"><a class="markdownIt-Anchor" href="#des中的数学基础"></a> DES中的数学基础</h3>
<p>DES（数据加密标准）的数学基础主要包括以下几个部分：</p>
<ol>
<li><strong>置换和代换的数学原理</strong>：在DES中，置换和代换是两种基本的操作。置换是将输入的位重新排列，而代换是将输入的位进行非线性变换。这两种操作的组合可以提供混淆和扩散，这是现代密码学的两个基本原则。</li>
<li><strong>S盒的设计和数学性质</strong>：S盒（Substitution-box）是DES中的核心部分，它提供了非线性变换。S盒的设计基于一些复杂的数学性质，例如在给定输入差分的情况下，输出差分的概率分布应该尽可能均匀。这可以防止差分密码分析等攻击。</li>
<li><strong>轮函数和Feistel网络的数学性质</strong>：DES使用了Feistel网络结构，这是一种特殊的轮函数结构。在Feistel网络中，每一轮的输出可以表示为输入和子密钥的某种函数。这种结构的一个重要性质是，解密过程和加密过程几乎相同，只是子密钥的顺序相反。</li>
</ol>
<h3 id="des的安全性分析"><a class="markdownIt-Anchor" href="#des的安全性分析"></a> DES的安全性分析</h3>
<p>DES（数据加密标准）的安全性分析主要包括以下几个部分：</p>
<ol>
<li><strong>差分密码分析</strong>：差分密码分析是一种针对对称密钥加密算法的攻击方法，它基于输入和输出之间的差分分布。在DES中，由于S盒的设计，差分密码分析的效率并不高。</li>
<li><strong>线性密码分析</strong>：线性密码分析是另一种针对对称密钥加密算法的攻击方法，它基于输入、输出和密钥之间的线性关系。在DES中，由于P盒和S盒的设计，线性密码分析的效率也并不高。</li>
<li><strong>对DES的常见攻击</strong>：除了差分密码分析和线性密码分析，还有一些其他的攻击方法可以用于攻击DES，例如穷举攻击（暴力破解）。由于DES的密钥长度只有56位，所以穷举攻击是可行的。这也是为什么现在很少使用单DES，而更倾向于使用三重DES或AES。</li>
</ol>
<h3 id="des的基本实现"><a class="markdownIt-Anchor" href="#des的基本实现"></a> DES的基本实现</h3>
<h4 id="des加密算法的伪代码"><a class="markdownIt-Anchor" href="#des加密算法的伪代码"></a> DES加密算法的伪代码</h4>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">function DES_Encrypt(plaintext, key):</span><br><span class="line">    // 初始置换</span><br><span class="line">    plaintext = initial_permutation(plaintext)</span><br><span class="line">    </span><br><span class="line">    // 密钥调度</span><br><span class="line">    subkeys = key_schedule(key)</span><br><span class="line">    </span><br><span class="line">    // 16轮迭代</span><br><span class="line">    for i from 1 to 16:</span><br><span class="line">        left, right = split(plaintext)</span><br><span class="line">        temp = right</span><br><span class="line">        right = left xor f_function(right, subkeys[i])</span><br><span class="line">        left = temp</span><br><span class="line">        plaintext = join(left, right)</span><br><span class="line">    </span><br><span class="line">    // 逆初始置换</span><br><span class="line">    ciphertext = inverse_initial_permutation(plaintext)</span><br><span class="line">    </span><br><span class="line">    return ciphertext</span><br></pre></td></tr></table></figure></div>
<h4 id="des解密算法的伪代码"><a class="markdownIt-Anchor" href="#des解密算法的伪代码"></a> DES解密算法的伪代码</h4>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">function DES_Decrypt(ciphertext, key):</span><br><span class="line">    // 初始置换</span><br><span class="line">    ciphertext = initial_permutation(ciphertext)</span><br><span class="line">    </span><br><span class="line">    // 密钥调度</span><br><span class="line">    subkeys = key_schedule(key)</span><br><span class="line">    </span><br><span class="line">    // 16轮迭代（注意子密钥的顺序相反）</span><br><span class="line">    for i from 16 down to 1:</span><br><span class="line">        left, right = split(ciphertext)</span><br><span class="line">        temp = right</span><br><span class="line">        right = left xor f_function(right, subkeys[i])</span><br><span class="line">        left = temp</span><br><span class="line">        ciphertext = join(left, right)</span><br><span class="line">    </span><br><span class="line">    // 逆初始置换</span><br><span class="line">    plaintext = inverse_initial_permutation(ciphertext)</span><br><span class="line">    </span><br><span class="line">    return plaintext</span><br></pre></td></tr></table></figure></div>
<h4 id="编程代码实现"><a class="markdownIt-Anchor" href="#编程代码实现"></a> 编程代码实现</h4>
<p>这里主要考虑在 ECB 工作模式下实现 DES 加解密算法。</p>
<p>Pyhton的版本可以直接使用<code>pycryptodome</code>第三方库快速实现DES加解密功能，这里的代码执行的结果也可用于验证下面 C++ 实现 DES 加解密的正确性。</p>
<blockquote>
<p>在使用 C++ 实现 DES 的过程中可能会出现加解密可以正常工作，但是中间生成的密文并不符合标准 DES 算法生成的密文的情况，这实际上只是满足了对称加解密的特点，并没有标准 DES 算法的安全性。因此，一般不推荐任何人去使用个人实现的加解密算法，而应该选择那些经过全世界验证的公开的加解密算法库。</p>
</blockquote>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> DES</span><br><span class="line"><span class="comment"># from Crypto.Util.Padding import pad, unpad</span></span><br><span class="line"><span class="keyword">from</span> binascii <span class="keyword">import</span> hexlify, unhexlify</span><br><span class="line"></span><br><span class="line">key = unhexlify(<span class="string">&#x27;0123456789ABCDEF&#x27;</span>)</span><br><span class="line">plaintext = unhexlify(<span class="string">&#x27;0123456789ABCDEF&#x27;</span>)</span><br><span class="line"></span><br><span class="line">cipher = DES.new(key, DES.MODE_ECB)</span><br><span class="line"><span class="comment"># ciphertext = cipher.encrypt(pad(plaintext, DES.block_size))</span></span><br><span class="line">ciphertext = cipher.encrypt(plaintext)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;密文: &quot;</span>, hexlify(ciphertext).decode())</span><br><span class="line"></span><br><span class="line">cipher = DES.new(key, DES.MODE_ECB)</span><br><span class="line"><span class="comment"># decrypted = unpad(cipher.decrypt(ciphertext), DES.block_size)</span></span><br><span class="line">decrypted = cipher.decrypt(ciphertext)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;明文: &quot;</span>, hexlify(decrypted).decode())</span><br></pre></td></tr></table></figure></div>
<p>C++版本的实现较为复杂，可以参考以下开源库</p>
<ul>
<li>
<p><a href="https://github.com/openssl/openssl"><strong>openssl</strong></a>: C语言实现，功能相当强大和全面，代码量比较庞大，不太适合初学者学习</p>
</li>
<li>
<p><a href="https://github.com/weidai11/cryptopp"><strong>cryptopp</strong></a>: C++实现，代码庞大且复杂</p>
</li>
<li>
<p><a href="https://github.com/libtom/libtomcrypt"><strong>libtomcrypt</strong></a>: C语言实现，适合初学密码学或期望对密码学有进一步了解的人。名气和使用广泛性不如 OpenSSL 和 Crypto++</p>
</li>
</ul>
<p>实现的思路如下，将代码分为以下几个文件逐步实现</p>
<ol>
<li><strong>des.h</strong>：这个头文件中定义了DES类和它的公有接口。这些接口包括构造函数（用于设置密钥），加密函数和解密函数。</li>
<li><strong>des.cpp</strong>：这个源文件中实现了DES类的公有接口。这包括构造函数（其中调用了密钥调度算法），加密函数和解密函数（其中调用了初始置换、F函数和逆初始置换）。</li>
<li><strong>utils.h</strong>：这个头文件中定义了一些工具函数，如置换函数和代换函数。</li>
<li><strong>utils.cpp</strong>：这个源文件中实现了工具函数。</li>
<li><strong>main.cpp</strong>：这个源文件中包含了主函数，用于测试DES类的功能。</li>
</ol>
<p>实现的过程参考如下，其中涉及的大量置换等统一封装到工具函数</p>
<ol>
<li>
<p>先考虑密钥调度算法实现，生成 16 轮迭代中轮函数<code>f_function</code>所需要的 16 把子密钥。</p>
<blockquote>
<p>密钥调度算法细节：</p>
<p>64 位主密钥 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo><mover><mo><mo>⟶</mo></mo><mrow><mi>P</mi><mi>C</mi><mo>−</mo><mn>1</mn></mrow></mover></mo></mrow><annotation encoding="application/x-tex">\stackrel{PC-1}\longrightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.3003310000000001em;vertical-align:-0.011em;"></span><span class="mrel"><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.2893310000000002em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop">⟶</span></span></span><span style="top:-3.711em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">P</span><span class="mord mathnormal mtight" style="margin-right:0.07153em;">C</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.011em;"><span></span></span></span></span></span></span></span></span></span> 56 位密钥 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo><mover><mo><mo>⟶</mo></mo><mtext>均分</mtext></mover></mo></mrow><annotation encoding="application/x-tex">\stackrel{均分}\longrightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.3003310000000001em;vertical-align:-0.011em;"></span><span class="mrel"><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.2893310000000002em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop">⟶</span></span></span><span style="top:-3.7110000000000003em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">均</span><span class="mord cjk_fallback mtight">分</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.011em;"><span></span></span></span></span></span></span></span></span></span> 两把 28 位密钥 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo><mover><mo><mo>⟶</mo></mo><mtext>循环左移</mtext></mover></mo></mrow><annotation encoding="application/x-tex">\stackrel{循环左移}\longrightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.3003310000000001em;vertical-align:-0.011em;"></span><span class="mrel"><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.2893310000000002em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop">⟶</span></span></span><span style="top:-3.7110000000000003em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">循</span><span class="mord cjk_fallback mtight">环</span><span class="mord cjk_fallback mtight">左</span><span class="mord cjk_fallback mtight">移</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.011em;"><span></span></span></span></span></span></span></span></span></span> 两把 28 位密钥  <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo><mover><mo><mo>⟶</mo></mo><mtext>合并</mtext></mover></mo></mrow><annotation encoding="application/x-tex">\stackrel{合并}\longrightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.3003310000000001em;vertical-align:-0.011em;"></span><span class="mrel"><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.2893310000000002em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop">⟶</span></span></span><span style="top:-3.7110000000000003em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">合</span><span class="mord cjk_fallback mtight">并</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.011em;"><span></span></span></span></span></span></span></span></span></span> 56 位密钥 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo><mover><mo><mo>⟶</mo></mo><mrow><mi>P</mi><mi>C</mi><mo>−</mo><mn>2</mn></mrow></mover></mo></mrow><annotation encoding="application/x-tex">\stackrel{PC-2}\longrightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.3003310000000001em;vertical-align:-0.011em;"></span><span class="mrel"><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.2893310000000002em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop">⟶</span></span></span><span style="top:-3.711em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">P</span><span class="mord mathnormal mtight" style="margin-right:0.07153em;">C</span><span class="mbin mtight">−</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.011em;"><span></span></span></span></span></span></span></span></span></span> 48 位子密钥</p>
<p>重复上述过程 16 次，只有第一次使用 64 位的主密钥初始化，其余都使用上一次合并后的 56 位密钥初始化，对两把 28 位的密钥法分别进行循环左移操作时，按照固定设计的位移规则进行。</p>
<p>轮函数细节：</p>
<p>32 位的密文 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo><mover><mo><mo>⟶</mo></mo><mtext>扩展置换</mtext></mover></mo></mrow><annotation encoding="application/x-tex">\stackrel{扩展置换}\longrightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.3003310000000001em;vertical-align:-0.011em;"></span><span class="mrel"><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.2893310000000002em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop">⟶</span></span></span><span style="top:-3.7110000000000003em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">扩</span><span class="mord cjk_fallback mtight">展</span><span class="mord cjk_fallback mtight">置</span><span class="mord cjk_fallback mtight">换</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.011em;"><span></span></span></span></span></span></span></span></span></span> 48 位的密文 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo><mover><mo><mo>⟶</mo></mo><mtext>与子密钥异或</mtext></mover></mo></mrow><annotation encoding="application/x-tex">\stackrel{与子密钥异或}\longrightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.3003310000000001em;vertical-align:-0.011em;"></span><span class="mrel"><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.2893310000000002em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop">⟶</span></span></span><span style="top:-3.7110000000000003em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">与</span><span class="mord cjk_fallback mtight">子</span><span class="mord cjk_fallback mtight">密</span><span class="mord cjk_fallback mtight">钥</span><span class="mord cjk_fallback mtight">异</span><span class="mord cjk_fallback mtight">或</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.011em;"><span></span></span></span></span></span></span></span></span></span> 48 位的密文 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo><mover><mo><mo>⟶</mo></mo><mrow><mi>S</mi><mtext>盒代换</mtext></mrow></mover></mo></mrow><annotation encoding="application/x-tex">\stackrel{S盒代换}\longrightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.3003310000000001em;vertical-align:-0.011em;"></span><span class="mrel"><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.2893310000000002em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop">⟶</span></span></span><span style="top:-3.7110000000000003em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05764em;">S</span><span class="mord cjk_fallback mtight">盒</span><span class="mord cjk_fallback mtight">代</span><span class="mord cjk_fallback mtight">换</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.011em;"><span></span></span></span></span></span></span></span></span></span> 32 位的密文 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo><mover><mo><mo>⟶</mo></mo><mrow><mi>P</mi><mtext>盒置换</mtext></mrow></mover></mo></mrow><annotation encoding="application/x-tex">\stackrel{P盒置换}\longrightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.3003310000000001em;vertical-align:-0.011em;"></span><span class="mrel"><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.2893310000000002em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop">⟶</span></span></span><span style="top:-3.7110000000000003em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">P</span><span class="mord cjk_fallback mtight">盒</span><span class="mord cjk_fallback mtight">置</span><span class="mord cjk_fallback mtight">换</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.011em;"><span></span></span></span></span></span></span></span></span></span> 32 位的密文</p>
<p>S 盒的实现细节：</p>
<p>48 位的密文均分为 8 组，每组 6 位，取最高位和最低位组合成 2 位二进制，计算得到十进制的行号；取剩余的 4 位二进制计算得到列号，根据行、列号找到 S 盒中对应的数字记录到密文中。重复 8 次，每次从不同的 S 盒寻找对应值。</p>
<p>这样从 8 个 S 盒中取出 8 个数字，每个数字占 4 位二进制，组成 32 位的密文。</p>
</blockquote>
</li>
<li>
<p>再考虑加解密算法实现，按照初始置换、16 轮迭代、逆初始置换的先后顺序执行即可。</p>
<blockquote>
<p>迭代的细节：</p>
<p>在每一轮迭代中，先把初始置换得到的密文均分为左右 2 段密文，缓存右半部分用于后面进行左右交换。右半部分由左半部分密文与轮函数的返回值（即 48 位子密钥）进行异或运算得到，左半部分则接收之前缓存的右半部分原始值，最后将左、右部分合并得到本轮迭代的 64 位密文，这样的过程重复 16 次。</p>
<p>注意：</p>
<p>16 轮迭代意味着有 16 次左右交换，但有的算法只进行了 15 次交换，在最后一轮迭代时将右、左部分合并，相当于没有进行交换。</p>
<p>实际上，按正常 16 次迭代之后，已经交换了 16 次，但是逆初始置换本身就具有左右交换的性质，那么逆初始置换之后，总共交换了 17 次，这并不是标准的 DES 实现。所以可能会出现以下两种实现：</p>
<ul>
<li>在 16 轮迭代之后，再加一次左右交换用于抵消逆初始置换造成的影响</li>
<li>在 16 轮迭代的最后一轮不进行左右交换，第 16 次交换就由逆初始置换去完成</li>
</ul>
<p>这两种实现都是可行的，笔者的参考代码使用的是后者。</p>
<p>由于对称密码体系的特点，解密的算法与加密基本一致，只需要以相反于加密算法的顺序依次使用 16 把子密钥即可解密。</p>
</blockquote>
</li>
</ol>
<p>完整的 C++ 实现代码存放在<a class="link"   href="https://github.com/s-chance/CryptoStudy" >github 仓库 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>中。</p>
<h4 id="补充"><a class="markdownIt-Anchor" href="#补充"></a> 补充</h4>
<p>在DES加密算法中，涉及到位数变化的置换主要有以下几种：</p>
<ol>
<li>PC-1置换：将64位的密钥减少到56位。这个置换丢弃了原始密钥中的每个字节的最后一位，这些位通常用作奇偶校验位。</li>
<li>PC-2置换：将56位的密钥减少到48位，用于生成子密钥。这个置换丢弃了8位，使得每个子密钥都有一个不同的48位的部分。</li>
<li>扩展置换（E）：在每个轮次的开始，将右半部分（32位）扩展到48位，以便与子密钥进行异或操作。这个置换通过复制一些位来实现扩展。</li>
</ol>
<h3 id="des的变体和替代方案"><a class="markdownIt-Anchor" href="#des的变体和替代方案"></a> DES的变体和替代方案</h3>
<p>**三重DES（3DES）<strong>和</strong>高级加密标准（AES）**是DES的两个主要替代方案：</p>
<ol>
<li><strong>三重DES（3DES）</strong>：由于DES的密钥长度只有56位，所以它容易受到穷举攻击。为了解决这个问题，人们提出了三重DES。三重DES是对DES加密算法的一个扩展，它使用了三个56位的密钥，所以总的密钥长度为168位。三重DES的工作方式是先用第一个密钥进行DES加密，然后用第二个密钥进行DES解密，最后用第三个密钥进行DES加密。这样，即使有一部分密钥被破解，攻击者也无法得到完整的明文。</li>
<li><strong>高级加密标准（AES）</strong>：AES是一种更先进的对称密钥加密算法，它取代了DES成为了新的加密标准。AES使用了128位、192位或256位的密钥，所以它的安全性更高。与DES不同，AES不是基于Feistel网络，而是基于置换-代换网络（SPN）。AES的设计更加简单和高效，所以现在它被广泛应用在各种场合。</li>
</ol>
<h3 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h3>
<p><a class="link"   href="https://www.bilibili.com/video/BV1qW4y1L7tN" >【计算机博物志】DES的生与死 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>信息安全</category>
      </categories>
      <tags>
        <tag>对称密钥算法</tag>
        <tag>入门之作</tag>
      </tags>
  </entry>
  <entry>
    <title>一封数字签名邮件</title>
    <url>/2022/11/10/digital-signature/</url>
    <content><![CDATA[<h3 id="使用outlook邮箱发送一封带有数字签名的邮件"><a class="markdownIt-Anchor" href="#使用outlook邮箱发送一封带有数字签名的邮件"></a> 使用outlook邮箱发送一封带有数字签名的邮件</h3>
<p>Digital Signature(数字签名)<strong>是</strong>Electronic Signature(电子签名)的一种特定类型, 是一种改进型的更加可信的电子方式签名。<span id="more"></span></p>
<p>数字签名是使用数字证书来验证签名者的身份, 并通过密码算法将签名者身份绑定到文档中来证明签名行为的不可否认, 已签名文档无需包含签名过程审计报告, 签名者的身份验证则由证书颁发机构(CA)或信任服务提供商(TSP)完成。</p>
<h4 id="1下载数字证书"><a class="markdownIt-Anchor" href="#1下载数字证书"></a> 1.下载数字证书</h4>
<p>数字证书需要先到网站上申请下载, 这里提供了一个申请90天免费证书的网站 <a class="link"   href="https://www.cersign.com/smime-email-certificates.html" >证签安全电子邮件证书 - CerSign <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>按照网站上提示完成申请以及邮箱验证即可。免费邮件证书大约几分钟后就会签发, 点击下载证书设置保护口令即可</p>
<h4 id="2在邮箱客户端中设置"><a class="markdownIt-Anchor" href="#2在邮箱客户端中设置"></a> 2.在邮箱客户端中设置</h4>
<p>outlook邮箱中导入数字证书: <strong>文件→选项→信任中心→电子邮件安全性</strong>, 然后设置加密以及数字签名。在默认设置中选择<strong>签名证书和加密证书</strong>(需要先找到之前下载好的证书文件双击运行并导入证书)</p>
<h4 id="3发送邮件进行测试"><a class="markdownIt-Anchor" href="#3发送邮件进行测试"></a> 3.发送邮件进行测试</h4>
<p>选择收件人(可以选择本地的另外一个邮箱)后输入邮件内容发送, 通过outlook客户端查看邮件内容会有一个额外的数字签名的图标, 点击该图标能够查看到发件人的数字证书信息。另外经过加密的邮件还会有一个🔒的图标, 在收件人拥有发件人的<strong>公钥</strong>时, 就能够进行解密获取正文内容。其他情况下, 则只有一个加密的smime.p7m文件(无法直接获取正文内容)</p>
<h4 id="4关于公钥和私钥的一些简单理解"><a class="markdownIt-Anchor" href="#4关于公钥和私钥的一些简单理解"></a> 4.关于公钥和私钥的一些简单理解</h4>
<p>公钥是一种<strong>非对称加密算法</strong>, 一般都是公布给对方用于加密解密</p>
<p>私钥是一种<strong>对称加密算法</strong>, 一般不对任何人公开, 同样可用于加密解密</p>
<p>公钥和私钥是<strong>成对出现</strong>的, 且<strong>唯一对应</strong></p>
<h5 id="思路1确保邮件只能由特定的收件人读取"><a class="markdownIt-Anchor" href="#思路1确保邮件只能由特定的收件人读取"></a> 思路1：确保邮件只能由特定的收件人读取</h5>
<p><strong>收件人的公钥</strong>提前就公布给所有发件人用于进行加密但不能进行解密, <strong>收件人的私钥</strong>则用于解密来自对应的公钥加密的邮件但不能进行加密(这也是一种非对称加密)</p>
<h5 id="思路2确认发件人的邮件未被篡改"><a class="markdownIt-Anchor" href="#思路2确认发件人的邮件未被篡改"></a> 思路2：确认发件人的邮件未被篡改</h5>
<p><strong>发件人的公钥</strong>提前就公布给所有收件人用于进行<strong>解密</strong>, <strong>发件人的私钥</strong>则用于<strong>加密</strong>邮件</p>
<p>具体流程：</p>
<p>发件人使用自己的私钥先对邮件加密<strong>一个hash值</strong>, 再用来自收件人的公钥对<strong>内容及hash值</strong>二次加密, 然后发送给收件人</p>
<p>收件人获取到了二次加密的邮件后, 先使用自己的私钥解密对应的公钥获取内容及<strong>加密的hash值</strong>, 再用来自收件人的公钥二次解密对应的私钥获取<strong>原始的hash值</strong>, 对内容进行hash计算, 如果计算的结果与之前hash值解密后的内容相同, 则说明内容未被篡改</p>
<p>需要注意的是：公钥和私钥的用法不是固定的, 在收件人和发件人两种情景下, 它们的用法恰恰是相反的</p>
]]></content>
      <tags>
        <tag>数字签名</tag>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>docker持久化存储</title>
    <url>/2023/10/07/docker-persistent-storage/</url>
    <content><![CDATA[<p>在使用docker提供的容器服务时，如果不小心删除了容器，那么默认情况下与容器关联的数据也会一并丢失，不过实际上docker提供了几种持久化存储的方式。<span id="more"></span></p>
<h3 id="docker数据存储的方式"><a class="markdownIt-Anchor" href="#docker数据存储的方式"></a> docker数据存储的方式</h3>
<h4 id="问题"><a class="markdownIt-Anchor" href="#问题"></a> 问题</h4>
<p>默认情况下，所有的数据文件都是在容器内创建并存储在可写入的存储层中。这意味着一旦容器被删除，那么数据也会丢失，而且这种方式不利于数据的迁移和共享，性能也会大大降低。</p>
<h4 id="解决方案"><a class="markdownIt-Anchor" href="#解决方案"></a> 解决方案</h4>
<p>针对上述问题，docker提供了两种方案实现持久化存储，分别是数据卷<code>volumes</code>和绑定挂载<code>bind mounts</code>。</p>
<p><code>volumes</code>是由docker管理的，可以在多个容器之间共享，并且在容器删除之后<code>volume</code>中的数据也会保留下来。<code>volumes</code>不需要关注宿主机的文件系统结构，可移植性强，易于管理和备份，可能是docker持久化存储的最佳方式。</p>
<p><code>bind mounts</code>允许你将宿主机的文件或目录挂载到容器中。与<code>volumes</code>不同，<code>bind mounts</code>依赖于宿主机的文件系统结构，这也表示它的可移植性不如<code>volumes</code>，但它可能是最简单易用的方式。</p>
<h4 id="补充"><a class="markdownIt-Anchor" href="#补充"></a> 补充</h4>
<p>对于不想持久化存储的数据，可以考虑使用<code>tmpfs mounts</code>。<code>tmpfs mounts</code>允许你在容器内存中创建一个临时文件系统，只需要重启或关闭容器就会删除数据。</p>
<p><code>tmpfs mounts</code>的使用参考<a class="link"   href="https://docs.docker.com/storage/tmpfs/" >docker官方文档 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="docker持久化存储实践"><a class="markdownIt-Anchor" href="#docker持久化存储实践"></a> docker持久化存储实践</h3>
<h4 id="使用volumes"><a class="markdownIt-Anchor" href="#使用volumes"></a> 使用volumes</h4>
<p>创建一个名为<code>vol</code>的空的<code>volume</code></p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">docker volume create vol</span><br></pre></td></tr></table></figure></div>
<p>查看已有的<code>volume</code></p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">docker volume <span class="built_in">ls</span></span><br></pre></td></tr></table></figure></div>
<p>可以通过<code>-v</code>或<code>--mount</code>参数指定<code>volume</code>数据卷挂载到容器的指定目录，在容器中所有针对该目录的写入操作都会保存到宿主机的<code>volume</code>中。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">--name=nginxtest \</span><br><span class="line">--mount <span class="built_in">source</span>=nginx-vol,target=/usr/share/nginx/html \</span><br><span class="line">nginx:latest</span><br><span class="line"><span class="comment"># 或使用以下命令</span></span><br><span class="line">docker run -d \</span><br><span class="line">--name=nginxtest \</span><br><span class="line">-v nginx-vol:/usr/share/nginx/html \</span><br><span class="line">nginx:latest</span><br></pre></td></tr></table></figure></div>
<p>在<code>docker-compose.yml</code>中</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">frontend:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">node:lts</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">myapp:/home/node/app</span></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">myapp:</span></span><br></pre></td></tr></table></figure></div>
<p>运行<code>docker-compose up</code>即可。</p>
<blockquote>
<p>如果创建时没有指定volume的名称，则会创建匿名卷。</p>
<p>匿名卷是为了防止用户忘记将关键数据挂载到宿主机目录。匿名卷通常是在<code>Dockerfile</code>中定义，在运行时如果用户没有进行挂载，则自动挂载<code>Dockerfile</code>中指定的匿名卷，如果用户指定了挂载项，则会覆盖匿名卷的挂载配置。</p>
</blockquote>
<p>删除一个名为<code>vol</code>的<code>volume</code></p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">docker volume <span class="built_in">rm</span> vol</span><br></pre></td></tr></table></figure></div>
<p>批量删除<code>volume</code></p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">docker volume prune <span class="comment"># 只删除未使用的匿名卷</span></span><br><span class="line">docker volume prune -a <span class="comment"># 删除所有未使用的卷</span></span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>补充</p>
<p>查看容器关联的volume可使用以下命令</p>
<p><code>docker inspect [container_id] | grep Mounts -A 50</code></p>
</blockquote>
<h4 id="使用bind-mounts"><a class="markdownIt-Anchor" href="#使用bind-mounts"></a> 使用bind mounts</h4>
<p><code>bind mounts</code>的使用和<code>volumes</code>类似，也是通过<code>-v</code>和<code>--mount</code>参数将宿主机文件挂载到容器中</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">--name=nginxtest \</span><br><span class="line">--mount <span class="built_in">type</span>=<span class="built_in">bind</span>,<span class="built_in">source</span>=/usr/local/web,target=/usr/share/nginx/html \</span><br><span class="line">nginx:latest</span><br><span class="line"><span class="comment"># 或使用以下命令</span></span><br><span class="line">docker run -d \</span><br><span class="line">--name=nginxtest \</span><br><span class="line">-v /usr/local/web:/usr/share/nginx/html \</span><br><span class="line">nginx:latest</span><br></pre></td></tr></table></figure></div>
<p>在<code>docker-compose.yml</code>中</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">frontend:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">node:lts</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">bind</span></span><br><span class="line">        <span class="attr">source:</span> <span class="string">./static</span></span><br><span class="line">        <span class="attr">target:</span> <span class="string">/opt/app/static</span></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">myapp:</span></span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>注意对比<code>volumes</code>和<code>bind mounts</code>在使用时的差异。</p>
</blockquote>
<p>其它的删除修改等操作可直接在宿主机下进行。</p>
<h4 id="存储方式的转换"><a class="markdownIt-Anchor" href="#存储方式的转换"></a> 存储方式的转换</h4>
<ul>
<li>
<p>从<code>volumes</code>转换到<code>bind mounts</code></p>
<p>首先创建一个新的<code>bind mounts</code>，然后将数据从<code>volume</code>复制到<code>bind mounts</code></p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建bind mounts</span></span><br><span class="line"><span class="built_in">mkdir</span> /path/to/bind/mounts</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个临时容器用于复制数据</span></span><br><span class="line">docker run --<span class="built_in">rm</span> --volumes-from my_container -v /path/to/bind/mount:/backup ubuntu tar cvf /backup/backup.tar /path/to/data</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在新容器中使用bind mounts</span></span><br><span class="line">docker run -d -v /path/to/bind/mount:/path/to/data/ my_image</span><br></pre></td></tr></table></figure></div>
<p>这里，<code>my_container</code>是原来使用<code>volume</code>的容器，<code>/path/to/data</code>是容器内的数据路径，<code>/path/to/bind/mount</code>是宿主机上的<code>bind mounts</code>路径，<code>my_image</code>是新容器的镜像。</p>
</li>
<li>
<p>从<code>bind mounts</code>转换到<code>volumes</code></p>
<p>首先创建一个新的<code>volume</code>，然后将数据从<code>bind mounts</code>复制到数据卷</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建volumes</span></span><br><span class="line">docker volume create my_volume</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个临时的容器来复制数据</span></span><br><span class="line">docker run --<span class="built_in">rm</span> -v /path/to/bind/mount:/backup -v my_volume:/path/to/data ubuntu tar xvf /backup/backup.tar /path/to/data</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在新容器中使用volumes</span></span><br><span class="line">docker run -d -v my_volume:/path/to/data my_image</span><br></pre></td></tr></table></figure></div>
</li>
</ul>
<h3 id="使用场景"><a class="markdownIt-Anchor" href="#使用场景"></a> 使用场景</h3>
<p><code>volumes</code>和<code>bind mounts</code>都是一种宿主机与容器之间的共享文件。但是它们的使用场景有所不同。以下是一些对比：</p>
<p><code>volume</code></p>
<ul>
<li>易于备份和迁移(可移植性高)</li>
<li>通过docker完全管理，数据安全性更好</li>
<li>易于数据共享</li>
<li>可以借助驱动实现远程挂载</li>
</ul>
<p><code>bind mounts</code></p>
<ul>
<li>具有更好的性能</li>
<li>使用起来更加简单</li>
<li>在宿主机下可以很方便地访问修改文件</li>
</ul>
<blockquote>
<p>关于<code>volumes</code>和<code>bind mounts</code>在挂载行为上的差异。空的<code>volumes</code>在挂载时，会自动将容器内指定目录的数据复制过来。而空的<code>bind mounts</code>在挂载时则会覆盖容器内的配置(原本的内容会被隐藏)。</p>
<p>因此使用<code>volume</code>更倾向于数据备份，使用<code>bind mounts</code>更倾向于文件修改。</p>
</blockquote>
<h3 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h3>
<p>docker的持久化存储方式有<code>volumes</code>数据卷存储和<code>bind mounts</code>绑定挂载存储。</p>
<p><code>volume</code>比较适合数据库持久化存储等需要易于备份和迁移的场景，而<code>bind mounts</code>比较适合修改文件并即时反映到容器的开发环境场景等。</p>
<p>在简单的场景下，这两种存储方式在使用上并没有什么明显差异。不过，如果要开发新的docker应用程序，则应该优先考虑使用<code>volume</code>。</p>
<p>持久化存储方式解决了容器的数据长期存储问题。不过容器存在一定的性能损耗，能否作为生产环境也是个问题。当然现在有很流行的<code>Kubernetes</code>项目，平常用户所购买的vps、云服务器等都借助了虚拟化技术，性能问题或许已经不是最主要的问题了。</p>
<p>从个人学习的角度上来看，docker也非常具有学习价值，并且可以通过docker来快速搭建各种环境，例如通过docker安装ubuntu来学习基础的linux命令，通过docker搭建各种web服务等。</p>
<h3 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h3>
<p><a class="link"   href="https://docs.docker.com/storage/" >storage | docker docs <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h4 id="相关推荐"><a class="markdownIt-Anchor" href="#相关推荐"></a> 相关推荐</h4>
<p><a class="link"   href="https://podman.io/" >另一个容器化工具 podman <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>前后端知识</title>
    <url>/2022/12/18/font-back-end/</url>
    <content><![CDATA[<h3 id="开发模式"><a class="markdownIt-Anchor" href="#开发模式"></a> 开发模式</h3>
<p><strong>前后端分离</strong>已成为web大型项目的标准开发方式, 主要解决了<strong>传统的前后端不分离</strong>所带来的一系列开发过程中的问题<span id="more"></span></p>
<h4 id="概念"><a class="markdownIt-Anchor" href="#概念"></a> 概念</h4>
<p><strong>前后端不分离</strong>: 前后端代码放在一个工程下或同一个目录下, 前端页面中含有后端的代码(如典型的jsp页面内嵌java代码)。前后端代码以及前后端工作开发<strong>耦合度极高</strong>, 前后端需要同时协作才能完成开发</p>
<p><strong>前后端分离</strong>: 前后端代码放在不同的工程下, 只需要<strong>提前约定好API数据规范</strong>, 前后端就可以各自独立开发。前端可以通过<strong>Mock技术模拟后端API服务</strong>来独立运行和测试; 后端也可以独立开发、运行、测试, 通过<strong>Swagger技术自动生成API文档</strong>提供给前端, 还能进行自动化接口测试API的可用性</p>
<h4 id="前后端分离涉及的技术"><a class="markdownIt-Anchor" href="#前后端分离涉及的技术"></a> 前后端分离涉及的技术</h4>
<p>1.Ajax、axios和json等基础交互技术</p>
<p>2.Http协议在同源策略下引发的跨域访问</p>
<p>3.Nodejs搭建中间层服务器以及前端Mock测试</p>
<h4 id="对比"><a class="markdownIt-Anchor" href="#对比"></a> 对比</h4>
<p><strong>以一个SpringBoot项目为例</strong></p>
<p>前后端不分离的情况下, <strong>直接使用SpringBoot启动即可</strong></p>
<ul>
<li>需要考虑静态资源所存放的相对路径(例如需要存放在某个指定的静态资源static目录下)</li>
<li>在测试过程中遇到问题难以快速定位到问题位于前端还是后端</li>
<li>运行时出现问题会直接导致SpringBoot项目无法启动或者运行时无法正确地进行前后端交互测试</li>
<li>对于**SEO(Search Engine Optimization, 搜索引擎优化)**的支持较好</li>
</ul>
<p>前后端分离的情况下, <strong>后端使用SpringBoot启动, 前端使用Nodejs启动</strong></p>
<ul>
<li>不再需要考虑相对路径的限制</li>
<li>可以使用特定的技术来模拟前后端进行数据交互测试, 从而准确定位问题</li>
<li>会有跨域访问的限制</li>
<li>由于前端与后端分离导致服务端无法去渲染前端页面, 即<strong>一般情况下不支持SSR(Server-Side-Rendering，服务器端渲染)</strong></li>
</ul>
<h3 id="渲染方式"><a class="markdownIt-Anchor" href="#渲染方式"></a> 渲染方式</h3>
<p>渲染方式可分为<strong>SSR服务端渲染</strong>和<strong>CSR客户端渲染</strong></p>
<p><strong>SSR服务端渲染</strong></p>
<ul>
<li>
<p>SSR拥有很好的SEO搜索引擎优化</p>
</li>
<li>
<p>SSR的首屏优化很好, 即首屏时间短</p>
</li>
<li>
<p>SSR加重了服务端的负载, 因为渲染需要在服务端完成</p>
</li>
<li>
<p>SSR的页面交互性较差</p>
</li>
<li>
<p>使用SSR基本说明了前后端不分离</p>
</li>
<li>
<p>SSR非常适合开发静态网站以及业务逻辑复杂的网站</p>
</li>
</ul>
<p><strong>CSR客户端渲染</strong></p>
<ul>
<li>
<p>CSR不支持SEO搜索引擎优化, 因为数据是异步获取的, 很难被SEO收录</p>
</li>
<li>
<p>CSR的首屏时间较长</p>
</li>
<li>
<p>CSR减轻了服务器的负载, 因为渲染是在客户端完成的</p>
</li>
<li>
<p>CSR的页面交互性非常好</p>
</li>
<li>
<p>使用CSR基本说明了前后端分离</p>
</li>
<li>
<p>CSR非常适合开发对即时交互性要求较高的Web应用程序以及app小程序</p>
</li>
</ul>
<p>基于不同的渲染方式又可以引出<strong>SPA</strong>和<strong>MPA</strong></p>
<h3 id="spa和mpa"><a class="markdownIt-Anchor" href="#spa和mpa"></a> SPA和MPA</h3>
<p><strong>SPA单页面应用模式</strong></p>
<ul>
<li>SPA模式只拥有一个主页面, 所有的静态资源都包含在主页面中, 只需要加载一次</li>
<li>所有的功能模块组件化, 通过刷新局部资源来实现功能</li>
<li>几乎不存在<strong>转发</strong>和<strong>重定向</strong>的概念</li>
<li>传统SPA通常都是CSR渲染, 也可以借助SSR渲染来优化SEO</li>
<li>SPA的实现核心是<strong>前端路由</strong>, 前端路由的核心: 改变视图的同时不会向后端发出请求</li>
<li>单个vue+vite的工程就是典型的SPA模式</li>
</ul>
<p><strong>MPA多页面应用模式</strong></p>
<ul>
<li>MPA模式拥有多个页面, 所有的静态资源都是公共资源, 每个页面都需要重新加载</li>
<li>所有的功能会划分到多个页面中, 通过转发和重定向页面来实现功能</li>
<li>MPA通常都是SSR渲染, 基本不会使用CSR渲染, 因为逻辑较为复杂</li>
<li>MPA中基本没有前端路由</li>
</ul>
<p>目前大型Web项目开发可能更多的是使用MPA+SPA的混合模式</p>
]]></content>
      <tags>
        <tag>前后端</tag>
      </tags>
  </entry>
  <entry>
    <title>Go语言基础</title>
    <url>/2023/01/26/golang-day1/</url>
    <content><![CDATA[<p>本文来源于第五届字节跳动青训营活动，已收录到<a class="link"   href="https://juejin.cn/post/7192662401240531004" >golang基础学习 | 青训营笔记 - 掘金 (juejin.cn) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，主要记录了对golang的初步学习<span id="more"></span></p>
<h2 id="11-什么是go语言"><a class="markdownIt-Anchor" href="#11-什么是go语言"></a> 1.1 什么是Go语言</h2>
<h3 id="1高性能-高并发"><a class="markdownIt-Anchor" href="#1高性能-高并发"></a> 1.高性能、高并发</h3>
<p>拥有和C++、Java媲美的性能，拥有对高并发的支持，不需要额外的第三方库，只需要使用标准库或者基于标准库的第三方库就能进行高并发开发</p>
<h3 id="2语法简单-学习曲线平缓"><a class="markdownIt-Anchor" href="#2语法简单-学习曲线平缓"></a> 2.语法简单、学习曲线平缓</h3>
<p>语法风格类似C语言，且在C语言的基础上进行了大幅度简化，例如去掉了不必要的表达式括号，循环只有for循环一种方式就能实现各种数值、键值遍历</p>
<p>一个基于Go的简单的Http服务器demo</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    http.Handle(<span class="string">&quot;/&quot;</span>, http.FileServer(http.Dir(<span class="string">&quot;.&quot;</span>)))</span><br><span class="line">    http.ListenAndServer(<span class="string">&quot;:8080&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="3丰富的标准库"><a class="markdownIt-Anchor" href="#3丰富的标准库"></a> 3.丰富的标准库</h3>
<p>拥有及其丰富、功能完善、质量可靠的标准库。在很多情况下，不需要借助第三方库就可以完成大部分基础功能的开发，大大降低了学习和使用成本。最关键的是，标准库具有很高的稳定性和兼容性保障，还能持续享受语言迭代所带来的性能优化。这是第三方库所不具备的</p>
<h3 id="4完善的工具链"><a class="markdownIt-Anchor" href="#4完善的工具链"></a> 4.完善的工具链</h3>
<p>拥有丰富的工具链，编译、代码格式化、错误检查、帮助文档、包管理以及代码补全提示。Go还内置了完整的单元测试框架，支持单元测试、性能测试、代码覆盖率、数据键增检测、性能优化，保障代码能够正确稳定运行</p>
<h3 id="5静态链接"><a class="markdownIt-Anchor" href="#5静态链接"></a> 5.静态链接</h3>
<p>在Go语言中所有的编译结构默认为静态链接，只需要编译后的唯一一个可执行文件不需要附加任何其它东西，即可部署运行。在线上的容器环境中运行，镜像体积可以控制得非常小，部署非常方便快捷。不同于C++，需要一堆动态链接库（linux下表现为.so文件，win下是.dll文件以及由.dll生成的.lib文件）才可以正确运行，文本不正确的话就会崩溃。Java则需要附加一个庞大的JRE才能运行</p>
<h3 id="6快速编译"><a class="markdownIt-Anchor" href="#6快速编译"></a> 6.快速编译</h3>
<p>Go语言拥有静态语言中几乎最快的编译速度，增量编译完成。这个速度对C++开发来说不可想象</p>
<h3 id="7跨平台"><a class="markdownIt-Anchor" href="#7跨平台"></a> 7.跨平台</h3>
<p>Go语言能在常见的linux、windows、macos，也能够开发android、ios软件，还能在一些硬件设备上运行，例如路由器、树莓派。Go还拥有很方便的交叉编译特性，能够轻松在笔记本上编译出二进制文件拷贝到路由器中运行，而无需配置交叉编译环境</p>
<h3 id="8垃圾回收"><a class="markdownIt-Anchor" href="#8垃圾回收"></a> 8.垃圾回收</h3>
<p>Go语言自带垃圾回收机制，和Java类似，在开发的时候无需考虑内存的分配和释放，可以专注于业务逻辑</p>
<h2 id="12-哪些公司在使用go语言"><a class="markdownIt-Anchor" href="#12-哪些公司在使用go语言"></a> 1.2 哪些公司在使用Go语言</h2>
<p>ByteDance字节跳动、Google谷歌、Tencent腾讯、facebook脸书、bilibili哔哩哔哩等</p>
<p>在云计算、微服务、大数据、区块链、物联网等领域广泛发展，尤其在云计算、微服务领域产出了大量的云原生组件</p>
<h2 id="13-为什么选择go语言"><a class="markdownIt-Anchor" href="#13-为什么选择go语言"></a> 1.3 为什么选择Go语言</h2>
<ol>
<li>随着业务体量的不断增长，Python对于Web业务存在性能瓶颈</li>
<li>C++的特性使其不太适合在线Web业务</li>
<li>Go的学习难度低于Java</li>
<li>Go的性能比较好</li>
<li>Go的部署简单，学习成本低（没有Python的依赖库版本问题）</li>
<li>基于Go研发的内部RPC框架和HTTP框架，推动了业务重构</li>
</ol>
<h2 id="21-开发环境"><a class="markdownIt-Anchor" href="#21-开发环境"></a> 2.1 开发环境</h2>
<h3 id="安装golang"><a class="markdownIt-Anchor" href="#安装golang"></a> 安装Golang</h3>
<p><a class="link"   href="https://go.dev/" >Golang官网 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://studygolang.com/dl" >Golang镜像 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://goproxy.cn/" >Golang第三方包代理加速下载 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="配置集成开发环境"><a class="markdownIt-Anchor" href="#配置集成开发环境"></a> 配置集成开发环境</h3>
<p>以下三种方案选其一即可</p>
<ol>
<li>
<p><a class="link"   href="https://code.visualstudio.com/" >Visual Studio Code <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</li>
<li>
<p><a class="link"   href="https://www.jetbrains.com.cn/go/promo" >Goland <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>关于Goland控制台输出#gosetup的多余信息，影响观察。快捷键Ctrl+Alt+shift+/，打开Registry，取消勾选go.run.processes.with.pty。之后#gosetup的信息会被折叠，方便直接观察程序输出结果</p>
</li>
<li>
<p><a class="link"   href="https://www.gitpod.io/" >云开发环境Gitpod <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</li>
</ol>
<h2 id="22-基础语法"><a class="markdownIt-Anchor" href="#22-基础语法"></a> 2.2 基础语法</h2>
<h3 id="1hello-world"><a class="markdownIt-Anchor" href="#1hello-world"></a> 1.Hello World</h3>
<p>main.go文件</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<ul>
<li>
<p>package main代表这个文件属于main包，main包是程序的入口包</p>
</li>
<li>
<p>fmt包是标准库里的包，主要用于输入输出字符串，格式化字符串</p>
</li>
<li>
<p>func main就是go语言main函数的声明，需要注意的是 <strong>花括号{</strong> 必须和func main写在同一行，否则会报错</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># command-line-arguments</span></span><br><span class="line">.\test.go:6:1: syntax error: unexpected semicolon or newline before &#123;</span><br></pre></td></tr></table></figure></div>
</li>
<li>
<p>在main函数里用fmt.Println调用了fmt包中的Println函数，需要注意的是import的包必须要在程序中使用到，不能只是import这个包而不去使用，会报错</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># command-line-arguments</span></span><br><span class="line">.\test.go:3:8: imported and not used: <span class="string">&quot;fmt&quot;</span></span><br></pre></td></tr></table></figure></div>
</li>
</ul>
<p>编译运行命令（在文件的同级目录下run或者build后执行）</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">go run main.go</span><br><span class="line"></span><br><span class="line">go build main.go</span><br><span class="line">./main</span><br></pre></td></tr></table></figure></div>
<ul>
<li>go run 直接运行go文件</li>
<li>go build会生成一个exe文件，运行exe文件得到结果</li>
</ul>
<h3 id="2变量"><a class="markdownIt-Anchor" href="#2变量"></a> 2.变量</h3>
<p>go语言是一门强类型语言，每个变量都有各自的变量类型。</p>
<p>常见的变量类型：字符串、整型、浮点型、布尔型等。</p>
<p>go语言的字符串是内置类型，可以直接通过+号拼接，也能够直接使用==去比较两个字符串（不同于Java需要使用equals方法去比较）。</p>
<p>go语言大部分运算符的使用和优先级和C/C++类似。</p>
<h4 id="变量声明"><a class="markdownIt-Anchor" href="#变量声明"></a> 变量声明</h4>
<p>在go语言中变量的声明方式有两种</p>
<p>一种是通过var name string = &quot;&quot;这种方式来声明变量，声明变量的时候一般会自动推导变量的类型，有需要也可以显式写明变量类型。</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name <span class="type">string</span> = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;hello&quot;</span>  <span class="comment">//自动推导变量类型</span></span><br><span class="line"><span class="keyword">var</span> t1,t2 <span class="type">int</span>  <span class="comment">//可以声明多个相同类型的变量</span></span><br></pre></td></tr></table></figure></div>
<p>另一种变量声明是短声明，使用 变量 := 值 的格式。</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line">name := <span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure></div>
<p>需要注意的是使用var声明过的变量名，不能用短声明重复声明。</p>
<p>go语言的常量，就是用const关键字替代var关键字声明。需要注意的是，go语言中的常量没有一个确定的类型，它会根据上下文来自动确定类型。</p>
<h3 id="3if-else"><a class="markdownIt-Anchor" href="#3if-else"></a> 3.if else</h3>
<p>go语言中的if else不同于其他语言</p>
<p>go语言中if后面没有小括号()</p>
<p>go语言中if后面必须要有大括号{}，没有C/C++那种缺省大括号写在同一行的写法</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// if-else</span></span><br><span class="line"><span class="keyword">if</span> <span class="number">7</span>%<span class="number">22</span>==<span class="number">0</span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;7 is even&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;7 is odd&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// if后可以加上短声明和判断</span></span><br><span class="line"><span class="keyword">if</span> num := <span class="number">9</span>; num &lt; <span class="number">0</span> &#123;</span><br><span class="line">    fmt.Println(num, <span class="string">&quot;is negative&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> num &lt; <span class="number">10</span> &#123;</span><br><span class="line">    fmt.Println(num, has <span class="number">1</span> digit)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    fmt.Println(num, <span class="string">&quot;has multiple digits&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="4循环"><a class="markdownIt-Anchor" href="#4循环"></a> 4.循环</h3>
<p>go语言中没有while循环、do while循环，只有唯一的一种for循环。</p>
<p>最简单的for循环就是只有for没有循环条件，代表死循环。</p>
<p>循环中途可以用break跳出，也可以使用经典的循环（初值，阈值，步长），这三段中的任何一段都可以省略。</p>
<p>在循环里面还可以用continue直接进入下一个循环（在满足循环条件的情况下）</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 无条件循环(死循环),使用break跳出循环</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;loop&quot;</span>)</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 经典循环写法</span></span><br><span class="line"><span class="keyword">for</span> j := <span class="number">7</span>; j &lt; <span class="number">9</span>; j++ &#123;</span><br><span class="line">    fmt.Println(j)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// continue跳过本轮循环,直接进入下一轮循环</span></span><br><span class="line"><span class="keyword">for</span> n := <span class="number">0</span>; n &lt; <span class="number">5</span>; n++ &#123;</span><br><span class="line">    <span class="keyword">if</span> n%<span class="number">2</span> == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(n)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 赋值、判断、增值分开写</span></span><br><span class="line">i := <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i &lt;= <span class="number">3</span> &#123;</span><br><span class="line">    fmt.Println(i)</span><br><span class="line">    i = i + <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="5switch"><a class="markdownIt-Anchor" href="#5switch"></a> 5.switch</h3>
<p>go语言中的switch分支结构，也类似于C/C++。同样地，go语言的switch后面不需要小括号。</p>
<p>但是和C/C<ins>的switch不同，在C</ins>里面，switch case后面如果不显式加break会继续执行后面的case；go语言则不需要break，如果要执行后面的case还需要显式加fallthrough关键字。</p>
<p>相比C/C++，go语言的switch功能更加强大，可以使用任意的变量类型，甚至可以取代任意的if else语句。不在switch后面加任何的变量，在case里面写条件分支，相比多个if else语句，代码逻辑更加清晰</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// switch</span></span><br><span class="line">a := <span class="number">2</span></span><br><span class="line"><span class="keyword">switch</span> a &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    fmt.Println(<span class="string">&quot;one&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    fmt.Println(<span class="string">&quot;two&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">    fmt.Println(<span class="string">&quot;three&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>,<span class="number">5</span>:</span><br><span class="line">    fmt.Println(<span class="string">&quot;four or five&quot;</span>)</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">    fmt.Println(<span class="string">&quot;default&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="6数组"><a class="markdownIt-Anchor" href="#6数组"></a> 6.数组</h3>
<p>数组是一个具有编号且长度固定的元素序列。</p>
<p>对于一个数组，可以很方便地取特定索引的值或者在特定索引存储值，但实际开发中，很少直接使用数组，因为其长度是固定的，使用更多的是切片。</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数组声明,未初始化默认值为0(对于int类型数组)</span></span><br><span class="line"><span class="keyword">var</span> a [<span class="number">5</span>]<span class="type">int</span></span><br><span class="line"><span class="comment">// 对索引为4的元素赋值</span></span><br><span class="line">a[<span class="number">4</span>] = <span class="number">100</span></span><br><span class="line">fmt.Println(<span class="string">&quot;get:&quot;</span>, a[<span class="number">2</span>]) <span class="comment">//a[2]未初始化,默认是0</span></span><br><span class="line">fmt.Println(<span class="string">&quot;len:&quot;</span>, <span class="built_in">len</span>(a)) <span class="comment">//获取数组a的长度5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 短声明,直接赋值</span></span><br><span class="line">b := [<span class="number">5</span>]<span class="type">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;</span><br><span class="line">fmt.Println(b)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 二维数组,可直接赋值,也可以用嵌套循环赋值</span></span><br><span class="line"><span class="keyword">var</span> twoD [<span class="number">2</span>][<span class="number">3</span>]<span class="type">int</span></span><br></pre></td></tr></table></figure></div>
<h3 id="7切片"><a class="markdownIt-Anchor" href="#7切片"></a> 7.切片</h3>
<p>切片slice不同于数组array，可以任意更改长度，拥有更多数组不具备的操作。可以使用make来创建切片，使用append来追加元素（注意append的用法，需要把结果返回给原数组）。</p>
<p>slice的原理是存储了一个长度和一个容量，以及一根指向一个数组的指针。</p>
<p>在执行append操作时，如果容量不够，就会扩容并返回新的slice。</p>
<p>slice拥有类似python的切片操作，但不支持负数索引。</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 短声明一个string类型的切片,初始化长度为3,容量默认和长度相等</span></span><br><span class="line">s := <span class="built_in">make</span>([]<span class="type">string</span>,<span class="number">3</span>)</span><br><span class="line">s[<span class="number">0</span>] = <span class="string">&quot;a&quot;</span></span><br><span class="line">s[<span class="number">1</span>] = <span class="string">&quot;b&quot;</span></span><br><span class="line">s[<span class="number">2</span>] = <span class="string">&quot;c&quot;</span></span><br><span class="line"><span class="comment">// append追加元素,需要把结果返回给原数组</span></span><br><span class="line"><span class="comment">// 如果容量不够的话,会进行扩容</span></span><br><span class="line">s = <span class="built_in">append</span>(s, <span class="string">&quot;d&quot;</span>)</span><br><span class="line">s = <span class="built_in">append</span>(s, <span class="string">&quot;e&quot;</span>, <span class="string">&quot;f&quot;</span>)</span><br><span class="line"><span class="comment">// 复制切片</span></span><br><span class="line">c := <span class="built_in">make</span>([]<span class="type">string</span>,<span class="built_in">len</span>(s))</span><br><span class="line"><span class="built_in">copy</span>(c,s) <span class="comment">//[a b c d e f]</span></span><br><span class="line"><span class="comment">// 切片索引操作</span></span><br><span class="line">fmt.Println(s[<span class="number">2</span>:<span class="number">5</span>]) <span class="comment">// [c d e]</span></span><br><span class="line">fmt.Println(s[:<span class="number">5</span>]) <span class="comment">// [a b c d e]</span></span><br><span class="line">fmt.Println(s[<span class="number">2</span>:]) <span class="comment">// [c d e f]</span></span><br><span class="line"><span class="comment">// 其他初始化方式</span></span><br><span class="line">str := []<span class="type">string</span>&#123;<span class="string">&quot;s&quot;</span>, <span class="string">&quot;t&quot;</span>, <span class="string">&quot;r&quot;</span>&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="8map"><a class="markdownIt-Anchor" href="#8map"></a> 8.map</h3>
<p>map在其他语言里又可能被称为哈希或者字典，是实际开发中使用最频繁的数据结构。</p>
<p>map也可以使用make来创建，创建时需要提供两个类型，key的类型和value的类型。</p>
<p>map可以存储键值对形式的数据，可以通过delete删除键值对。</p>
<p>go语言的map是完全无序的，遍历的时候是随机顺序。</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 短声明一个key为string类型,value为int类型的map</span></span><br><span class="line">m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>)</span><br><span class="line">m[<span class="string">&quot;a&quot;</span>] = <span class="number">1</span></span><br><span class="line">m[<span class="string">&quot;b&quot;</span>] = <span class="number">2</span></span><br><span class="line"><span class="comment">// 删除键值对</span></span><br><span class="line"><span class="built_in">delete</span>(m,<span class="string">&quot;a&quot;</span>)</span><br><span class="line"><span class="comment">// 其他初始化方式</span></span><br><span class="line">m2 := <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>&#123;<span class="string">&quot;a&quot;</span>: <span class="number">1</span>, <span class="string">&quot;b&quot;</span>: <span class="number">2</span>&#125;</span><br><span class="line"><span class="keyword">var</span> m3 = <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>&#123;<span class="string">&quot;a&quot;</span>: <span class="number">1</span>, <span class="string">&quot;b&quot;</span>: <span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="9range"><a class="markdownIt-Anchor" href="#9range"></a> 9.range</h3>
<p>range能够用于快速遍历slice和map，并且代码简洁。</p>
<p>range遍历数组时会返回两个字，第一个是索引，第二个是对应的值。如果不需要索引可以用下划线来忽略。</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line">nums := []<span class="type">int</span>&#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line"><span class="keyword">for</span> i, num := <span class="keyword">range</span> nums &#123;</span><br><span class="line">    <span class="keyword">if</span> num == <span class="number">2</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;index:&quot;</span>, i, <span class="string">&quot;num:&quot;</span>, num)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">m := <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>&#123;<span class="string">&quot;a&quot;</span>: <span class="string">&quot;A&quot;</span>, <span class="string">&quot;b&quot;</span>: <span class="string">&quot;B&quot;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> k, v := <span class="keyword">range</span> m &#123;</span><br><span class="line">    fmt.Println(k, v)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="10函数"><a class="markdownIt-Anchor" href="#10函数"></a> 10.函数</h3>
<p>go语言其他语言不同的是，go语言中函数的变量类型是后置的，且go函数原生支持多个返回值。实际开发中，几乎所有的函数都返回两个值，第一个是真正的返回结果，第二个是错误信息。</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 判断map的值是否存在,返回值和错误信息</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">exists</span><span class="params">(m <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>, k <span class="type">string</span>)</span></span> (v <span class="type">string</span>, ok <span class="type">bool</span>) &#123;</span><br><span class="line">    v, ok = m[k]</span><br><span class="line">    <span class="keyword">return</span> v, ok</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="11指针"><a class="markdownIt-Anchor" href="#11指针"></a> 11.指针</h3>
<p>go语言也支持指针，但指针操作相对于C/C++的指针比较局限。指针主要的用途就是对传入参数进行修改。</p>
<p>使用指针传参和不使用指针传参，主要区别就是有无拷贝的所带来开销以及能否直接修改数据。对于大型结构体来说，开销更大。</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span> <span class="params">(n *<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    *n += <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    n := <span class="number">5</span></span><br><span class="line">    add(&amp;n)</span><br><span class="line">    fmt.Println(n)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="12结构体"><a class="markdownIt-Anchor" href="#12结构体"></a> 12.结构体</h3>
<p>结构体是带类型的字段的集合。可以用结构体的名称作为结构体类型去初始化一个结构体变量，构造的时候需要传入每个字段的初始值。也可以用这种键值对的方式只对一部分字段进行初始化。</p>
<p>结构体也支持指针，并且使用指针修改结构体能避免结构体的拷贝开销。</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 结构体</span></span><br><span class="line"><span class="keyword">type</span> user <span class="keyword">struct</span> &#123;</span><br><span class="line">    name    <span class="type">string</span></span><br><span class="line">    passwd  <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 初始化结构体的几种方式</span></span><br><span class="line">    a := user&#123;name: <span class="string">&quot;a&quot;</span>, passwd: <span class="string">&quot;123&quot;</span>&#125;</span><br><span class="line">    b := user&#123;<span class="string">&quot;a&quot;</span>, <span class="string">&quot;123&quot;</span>&#125;</span><br><span class="line">    c := user&#123;name: <span class="string">&quot;a&quot;</span>&#125;</span><br><span class="line">    c.passwd = <span class="string">&quot;123&quot;</span></span><br><span class="line">    <span class="keyword">var</span> d user</span><br><span class="line">    d.name = <span class="string">&quot;a&quot;</span></span><br><span class="line">    d.passwd = <span class="string">&quot;123&quot;</span></span><br><span class="line">    fmt.Println(check(&amp;a, <span class="string">&quot;456&quot;</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">check</span><span class="params">(u *user, passwd <span class="type">string</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> u.passwd == passwd</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="13结构体方法"><a class="markdownIt-Anchor" href="#13结构体方法"></a> 13.结构体方法</h3>
<p>结构体方法类似于其他语言中的类成员函数。结构体方法可以选择带指针或不带指针，带指针的话，就是能够去修改结构体，不带指针的话，就是只能获取结构体数据不能修改数据。</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 对照上面12的user结构体和check函数</span></span><br><span class="line"><span class="comment">// 结构体方法不同于函数,在一开始就指明了结构体类型</span></span><br><span class="line"><span class="comment">// 不需要改动数据时,不带指针操作即可</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u user)</span></span> checkPasswd(passwd <span class="type">string</span>) <span class="type">bool</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> u.passwd == passwd</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 需要改动数据时,带指针操作</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *user)</span></span> reset(passwd <span class="type">string</span>) &#123;</span><br><span class="line">    u.passwd = passwd</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="14错误处理"><a class="markdownIt-Anchor" href="#14错误处理"></a> 14.错误处理</h3>
<p>错误处理在go语言中的语言习惯做法就是使用一个单独的返回值来传递错误信息。</p>
<p>不同于Java的异常处理，go语言的处理方式能够很清晰地知道哪个函数返回了错误，并且能用简单的if else来处理错误。</p>
<p>在函数的返回值类型里面加上error，就代表这个函数可能返回错误。在函数实现的时候，如果出错的话，就可以返回一个nil和error，如果没有出错，就返回原本的结果和nil。</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 以12的user结构体为例</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findUser</span><span class="params">(users []user, name <span class="type">string</span>)</span></span> (v *user, err <span class="type">error</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> _, u := <span class="keyword">range</span> users &#123;</span><br><span class="line">        <span class="keyword">if</span> u.name == name  &#123;</span><br><span class="line">            <span class="keyword">return</span> &amp;u, <span class="literal">nil</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>, errors.New(<span class="string">&quot;not found&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="15字符串操作"><a class="markdownIt-Anchor" href="#15字符串操作"></a> 15.字符串操作</h3>
<p>在标准库strings包里面有很多常用的字符串工具函数。</p>
<ul>
<li>contains：判断一个字符串里面是否包含另一个字符串</li>
<li>count：统计字符串中某个字符或字符子串出现的次数</li>
<li>index：查找某个字符串第一次出现的位置</li>
<li>join：连接多个字符串，将两个字符串用字符连接起来</li>
<li>repeat：重复多个字符串</li>
<li>replace：替换字符串</li>
</ul>
<h3 id="16字符串格式化"><a class="markdownIt-Anchor" href="#16字符串格式化"></a> 16.字符串格式化</h3>
<p>在标准库的fmt包里面有很多字符串格式相关的方法。</p>
<p>go语言的printf类似C语言的printf，不同的是，在go语言中，可以用%v占位符来打印任意类型的变量，而不需要区分数字、字符串，可以用%+v打印详细结果，也可以用%#v打印得更详细。</p>
<h3 id="17json处理"><a class="markdownIt-Anchor" href="#17json处理"></a> 17.JSON处理</h3>
<p>go语言的JSON操作非常简单，对于一个结构体，只要保证每个字段的首字母大写（公开字段，相当于Java中的public），那么这个结构体就能用JSON.marshal序列化成JSON字符串。</p>
<p>序列化之后的字符串也可以用JSON.unmarshal反序列化到一个空变量中。</p>
<p>默认序列化的字符串风格是大写字母开头，不是下划线，可以用json tag等语法来修改输出结果的字段名。</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> userInfo <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name   <span class="type">string</span></span><br><span class="line">    Age    <span class="type">int</span> <span class="string">`json:&quot;age&quot;`</span></span><br><span class="line">    Hobby  []<span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    a := userInfo&#123;Name: <span class="string">&quot;a&quot;</span>, Age: <span class="number">11</span>, Hobby: []<span class="type">string</span>&#123;<span class="string">&quot;Golang&quot;</span>, <span class="string">&quot;Typescript&quot;</span>&#125;&#125;</span><br><span class="line">    buf, err := json.Marshal(a) <span class="comment">// 序列化</span></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(<span class="type">string</span>(buf))</span><br><span class="line">    </span><br><span class="line">    buf, err = json.MarshalIndent(a, <span class="string">&quot;&quot;</span>, <span class="string">&quot;\t&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(<span class="type">string</span>(buf))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> b userInfo</span><br><span class="line">    err = json.Unmarshal(buf, &amp;b) <span class="comment">// 反序列化到空变量中</span></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%#v\n&quot;</span>, b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="18时间处理"><a class="markdownIt-Anchor" href="#18时间处理"></a> 18.时间处理</h3>
<p>go语言时间处理最常用的就是用time.now()来获取当前时间，也可以用time.date去构造一个带时区的时间。</p>
<p>使用sub对两个时间进行减法得到时间差，可以查看它们具体相差多少小时、多少分钟、多少秒。</p>
<p>在系统交互时，经常会使用到时间戳，可以使用UNIX方法生成时间戳。</p>
<p>需要注意的是使用format或者parse来处理时间时，都需要使用<code>2006-01-02 15:04:05</code>这个固定参数才能得到正确的时间。</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    now := time.Now()</span><br><span class="line">    t := time.Date(<span class="number">2023</span>, <span class="number">1</span>, <span class="number">20</span>, <span class="number">12</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="number">0</span>, time.UTC)</span><br><span class="line">    t2 := time.Date(<span class="number">2023</span>, <span class="number">1</span>, <span class="number">20</span>, <span class="number">13</span>, <span class="number">45</span>, <span class="number">30</span>, <span class="number">0</span>, time.UTC)</span><br><span class="line">    fmt.Println(t.Year(), t.Month(), t.Day(), t.Hour(), t.Minute())</span><br><span class="line">    fmt.Println(t.Format(<span class="string">&quot;2006-01-02 15:04:05&quot;</span>))</span><br><span class="line">    diff := t2.Sub(t)</span><br><span class="line">    fmt.Println(diff)</span><br><span class="line">    fmt.Println(diff.Minutes(), diff.Seconds())</span><br><span class="line">    t3, err := time.Parse(<span class="string">&quot;2006-01-02 15:04:05&quot;</span>, <span class="string">&quot;2023-01-20 12:30:30&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(now.Unix())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="19数字解析"><a class="markdownIt-Anchor" href="#19数字解析"></a> 19.数字解析</h3>
<p>在go语言中可以通过strconv这个包来进行字符串和数字类型之间的转换。</p>
<p>可以使用parseInt或parseFloat来解析一个数字字符串，使用atoi将一个十进制字符串转换为数字，使用itoa将数字转换为字符串。如果转换的数据不合法就会返回error。</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    f, _ := strconv.ParseFloat(<span class="string">&quot;1.234&quot;</span>, <span class="number">64</span>)</span><br><span class="line">    fmt.Println(f)</span><br><span class="line">    </span><br><span class="line">    n, _ := strconv.ParseInt(<span class="string">&quot;111&quot;</span>, <span class="number">10</span>, <span class="number">64</span>)</span><br><span class="line">    fmt.Println(n)</span><br><span class="line">    </span><br><span class="line">    n, _ = strconv.ParseInt(<span class="string">&quot;0x1000&quot;</span>, <span class="number">0</span>, <span class="number">64</span>)</span><br><span class="line">    fmt.Println(n)</span><br><span class="line">    </span><br><span class="line">    n2, _ := strconv.Atoi(<span class="string">&quot;123&quot;</span>)</span><br><span class="line">    fmt.Println(n2)</span><br><span class="line">    </span><br><span class="line">    n2, err := strconv.Atoi(<span class="string">&quot;AAA&quot;</span>)</span><br><span class="line">    fmt.Println(n2, err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="20进程信息"><a class="markdownIt-Anchor" href="#20进程信息"></a> 20.进程信息</h3>
<p>在go语言中能够通过os.args来获取程序执行时指定的命令行参数。可以用os.getenv获取环境变量。exec.command用于执行系统的命令。</p>
<p>以下部分代码在windows系统下可能会报错，需要在linux系统运行才能获取正确信息。</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(os.Args)</span><br><span class="line">    fmt.Println(os.Getenv(<span class="string">&quot;PATH&quot;</span>))</span><br><span class="line">    fmt.Println(os.Setenv(<span class="string">&quot;AA&quot;</span>, <span class="string">&quot;BB&quot;</span>))</span><br><span class="line">    </span><br><span class="line">    buf, err := exec.Command(<span class="string">&quot;grep&quot;</span>, <span class="string">&quot;127.0.0.1&quot;</span>, <span class="string">&quot;/etc/hosts&quot;</span>).CombineOutput()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(<span class="type">string</span>(buf))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>使用go run加参数运行，例如<code>go run main.go a b c d</code></p>
<h2 id="31-猜谜游戏"><a class="markdownIt-Anchor" href="#31-猜谜游戏"></a> 3.1 猜谜游戏</h2>
<h3 id="1生成随机数"><a class="markdownIt-Anchor" href="#1生成随机数"></a> 1.生成随机数</h3>
<p>需要math/rand包用于生成随机数</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line">maxNum := <span class="number">100</span> <span class="comment">//最大范围</span></span><br><span class="line">random := rand.Intn(maxNum) <span class="comment">//生成0-100之间的随机整数</span></span><br></pre></td></tr></table></figure></div>
<p>注意到以上代码多次生成的数都是同一个数。查看这个包的官方文档可得知使用之前需要设置随机数种子用于生成随机数序列，否则每次生成的随机数序列都是相同的。习惯上用时间戳来初始化随机数种子。</p>
<p>在生成随机数之前用时间戳初始化随机数种子即可</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line">rand.Seed(time.Now().UnixNano())</span><br></pre></td></tr></table></figure></div>
<h3 id="2读取用户输入"><a class="markdownIt-Anchor" href="#2读取用户输入"></a> 2.读取用户输入</h3>
<p>每个程序执行时都会打开几个文件，stdin、stdou、stderr等。stdin可通过os.Stdin获取，但直接操作文件很不方便。</p>
<p>go语言中的bufio包提供了读取用户输入的方法，newReader方法能够将一个文件转换成一个reader变量，reader变量上拥有很多流的操作。使用ReadString方法读取一行，返回结果中包含结尾的换行符。</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line">reader := bufio.NewReader(os.Stdin)</span><br><span class="line">input, err := reader.ReadString(<span class="string">&#x27;\n&#x27;</span>) <span class="comment">//读取</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;An error occured while reading input. Please try again&quot;</span>, err)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 去掉换行符</span></span><br><span class="line">input = strings.Trim(input, <span class="string">&quot;\n&quot;</span>) <span class="comment">//这里根据不同的操作系统可能需要换成\r\n或其他参数</span></span><br><span class="line"><span class="comment">// 转换为数字</span></span><br><span class="line">guess, err := strconv.Atoi(input)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;Invalid input. Please enter an integer value&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="3实现判断逻辑"><a class="markdownIt-Anchor" href="#3实现判断逻辑"></a> 3.实现判断逻辑</h3>
<p>正常情况下，只有三种结果，过大、过小以及相等。使用简单的if else即可。</p>
<h3 id="4实现游戏循环"><a class="markdownIt-Anchor" href="#4实现游戏循环"></a> 4.实现游戏循环</h3>
<p>由于无法确定固定的循环次数，使用for循环配合continue和break，在读取和转换字符串失败用continue继续循环，在猜中数字时用break退出循环即可。</p>
<h2 id="32-在线词典"><a class="markdownIt-Anchor" href="#32-在线词典"></a> 3.2 在线词典</h2>
<p>通过调用第三方API查询单词的翻译并打印出来。</p>
<p>学会如何使用go语言来发送HTTP请求，解析json数据以及学习如何使用代码生成来提高开发效率。</p>
<h3 id="1抓包"><a class="markdownIt-Anchor" href="#1抓包"></a> 1.抓包</h3>
<p>以彩云APIhttps://fanyi.caiyunapp.com/为例，在在线翻译页面打开浏览器的开发者工具。</p>
<p>使用一次翻译，同时捕获查询单词的post请求，在预览里面找到具体的查询结果。</p>
<h3 id="2代码生成"><a class="markdownIt-Anchor" href="#2代码生成"></a> 2.代码生成</h3>
<p>在go语言里构造一个请求用于请求API，由于请求比较复杂，用代码构造麻烦。可以直接在浏览器中复制为cURL（bash）在linux终端或复制为powershell在windows的powershell下测试，成功的话就会返回一大堆json字符串。</p>
<p>在一个在线代码生成网站<a class="link"   href="https://curlconverter.com/go/" >Convert curl to Go <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>里粘贴cURL，就可以看到生成的go语言代码。直接将代码粘贴到编辑器里即可。</p>
<p><strong>部分代码解读</strong></p>
<p>创建HTTP client，可以指定很多参数进行创建，如请求超时时间以及是否使用cookie等。</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line">client := &amp;http.Client&#123;&#125;</span><br></pre></td></tr></table></figure></div>
<p>创建请求，使用http包中的NewRequest方法创建一个post请求，第一个参数指定请求类型，第二个参数指定URL，第三个参数指定请求体。其中请求体可能很大，为了支持流式发送，使用strings.NewReader将字符串转换为一个只读流存放在data变量中。</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line">req, err := http.NewRequest(<span class="string">&quot;POST&quot;</span>, <span class="string">&quot;https://api.interpreter.caiyunai.com/v1/dict&quot;</span>, data)</span><br></pre></td></tr></table></figure></div>
<p>设置请求头，往往需要设置很多个参数</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line">req.Header.Set(<span class="string">&quot;key&quot;</span>, <span class="string">&quot;value&quot;</span>) <span class="comment">//填写请求体的各种参数</span></span><br></pre></td></tr></table></figure></div>
<p>发起请求，使用HTTP client发起请求，获取结果。如果请求失败便会打印错误信息并退出进程。</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line">resp, err := client.Do(req)</span><br></pre></td></tr></table></figure></div>
<p>读取响应，body同样是一个流，为了避免资源泄露，需要使用defer来手动关闭流，defer会在函数运行结束后执行。使用ioutil.ReadAll读取流，获取整个body的信息。</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">defer</span> resp.Body.Close()</span><br><span class="line">bodyText, err := ioutil.ReadAll(resp.Body)</span><br></pre></td></tr></table></figure></div>
<p>目前已经能够成功发送请求，但是上面生成的代码是固定输入的。需要使用JSON序列化来实现手动输入请求参数。</p>
<h3 id="3生成request-body"><a class="markdownIt-Anchor" href="#3生成request-body"></a> 3.生成request body</h3>
<p>在go语言中，要生成一段JSON，常用的方式就是先构造一个对应json结构的结构体。注意结构体字段首字母一定要大写，否则无法访问该字段。</p>
<p>结构体中的字段对应了请求负载中的字段</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> DictRequest <span class="keyword">struct</span> &#123;</span><br><span class="line">    TransType <span class="type">string</span> <span class="string">`json:&quot;trans_type&quot;`</span></span><br><span class="line">    Source    <span class="type">string</span> <span class="string">`json:&quot;source&quot;`</span></span><br><span class="line">    UserID    <span class="type">string</span> <span class="string">`json:&quot;user_id&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>json反序列化为字节数组，使用byte.NewReader来构造request body</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    request := DictRequest&#123;TransType: <span class="string">&quot;en2zh&quot;</span>, Source: <span class="string">&quot;good&quot;</span>&#125;</span><br><span class="line">    buf, err := json.Marshal(request)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatal(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> data = bytes.NewReader(buf)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>以此实现通过一个变量来发送HTTP请求。</p>
<h3 id="4解析response-body"><a class="markdownIt-Anchor" href="#4解析response-body"></a> 4.解析response body</h3>
<p>在js/python这些脚本语言中，body是一个字典或者map的结构，可以直接取值。但go语言是一个强类型语言，不适合这种直接取值的做法。常用的方式就是通过结构体，将json反序列化到结构体中。但是API返回的结构也比较复杂，可以借助代码生成工具<a class="link"   href="https://oktools.net/json2go" >JSON转Golang Struct - 在线工具 - OKTools <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>用于快速生成对应的代码，将响应的json数据通过代码生成工具生成对应的结构体。如果不需要对返回结果进行精细处理，转换为嵌套结构体即可。</p>
<p>得到response结构体后，使用json.Unmarshal把body反序列化到结构体中，再打印出来。</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> dictResponse DictResponse <span class="comment">//DictResponse是生成的结构体的名称</span></span><br><span class="line">err = json.Unmarshal(bodyText, &amp;dictResponse) <span class="comment">//bodyText存储了body原始信息,反序列化到空变量中</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%#v\n&quot;</span>, dictResponse)</span><br></pre></td></tr></table></figure></div>
<p>之后就是打印特定字段的信息。</p>
<h3 id="5打印结果"><a class="markdownIt-Anchor" href="#5打印结果"></a> 5.打印结果</h3>
<p>在以上的API响应例子中，需要用到的信息是在<code>Dictionary.explanations</code>里面。</p>
<p>可以使用for range迭代并打印信息</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> _, item := <span class="keyword">range</span> dictResponse.Dictionary.Explanations &#123;</span><br><span class="line">    fmt.Println(item)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="6完善代码"><a class="markdownIt-Anchor" href="#6完善代码"></a> 6.完善代码</h3>
<p>将代码主体改造成一个query函数，把需要查询的单词作为参数传递。</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(os.Args) != <span class="number">2</span> &#123;</span><br><span class="line">        fmt.Fprintf(os.Stderr, <span class="string">`usage: simpleDict WORD</span></span><br><span class="line"><span class="string">        example: simpleDict hello`</span>)</span><br><span class="line">        os.Exit(<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    word := os.Args[<span class="number">1</span>]</span><br><span class="line">    query(word)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>这里通过命令行输入参数运行，使用<code>go run main.go</code>接需要查询的单词即可。</p>
<h2 id="33-socks5代理"><a class="markdownIt-Anchor" href="#33-socks5代理"></a> 3.3 SOCKS5代理</h2>
<p>编写一个socks5代理服务器。socks5协议都是明文传输，这个协议历史久远，诞生于互联网早期。它的用途就是在防火墙保证数据安全性时提供socks5协议的端口给授权的用户以便访问内部资源。</p>
<h3 id="原理"><a class="markdownIt-Anchor" href="#原理"></a> 原理</h3>
<p>正常浏览器访问一个网站，如果不经过代理服务器，就是先和目标网站的服务器建立TCP连接，完成三次握手后发起HTTP请求，然后服务器返回HTTP响应。</p>
<p>如果设置了代理服务器，那么流程会变得复杂一些。首先是浏览器和sock5代理建立TCP连接，代理再和真正的服务器建立TCP连接。可以分成四个阶段，握手阶段、认证阶段、请求阶段、relay阶段。</p>
<p>第一个握手阶段，浏览器会向socks5代理发送请求，数据包的内容包括一个协议的版本号、支持认证的种类，socks5服务器会选择一个认证方式，返回给浏览器。如果返回的是00则代表不需要认证，返回其他结果则开始认证流程。</p>
<p>第二个认证阶段参考<a class="link"   href="https://wiyi.org/socks5-protocol-in-deep.html" >https://wiyi.org/socks5-protocol-in-deep.html <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>第三个请求阶段，认证通过之后浏览器会向socks5发起请求。主要信息包括版本号，请求的类型（一般是connection请求，表示代理服务器要和某个域名或者某个IP地址的某个端口建立TCP连接）。代理服务器收到响应后会真正和后端服务器建立连接，然后返回一个响应。</p>
<p>第四个relay阶段，此时浏览器会正常发送请求，然后代理服务器接收到请求之后直接转发给真正的服务器，真正的服务器返回的响应也经过代理服务器转发到浏览器这边。socks5代理服务器实际上并不关系流量的细节，可以是HTTP流量也可以是其他的TCP流量。</p>
<h3 id="1tcp-echo-server"><a class="markdownIt-Anchor" href="#1tcp-echo-server"></a> 1.TCP echo server</h3>
<p>在go语言中实现一个简单的TCP echo server。使用简单的逻辑，发送什么就返回什么，方便测试。</p>
<p>在main函数中使用net.listen监听一个端口，返回一个server。然后在一个死循环中反复accept请求，成功之后就会返回一个连接。接下来在一个process函数里处理这个连接。</p>
<p>process函数的实现，先添加一个defer connection.close防止资源泄露，接下来使用bufio.NewReader来创建一个带缓冲的只读流，带缓冲的流可以减少底层系统的调用次数，且具有更多的工具函数可以读取数据，可以使用readbyte来读取单个字节，再写进去连接。</p>
<p>main函数</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    server, err := net.Listen(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;127.0.0.1:1080&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        client, err := server.Accept()</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            log.Printf(<span class="string">&quot;Accept failed %v&quot;</span>, err)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">go</span> process(client) <span class="comment">//go关键字代表启动一个goroutine,这里的goroutine可暂时类比为一个子线程,但是开销比子线程小很多,能够轻松处理上万的并发</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>process函数</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">process</span><span class="params">(conn net.Conn)</span></span> &#123;</span><br><span class="line">    <span class="keyword">defer</span> conn.Close()</span><br><span class="line">    reader := bufio.NewReader(conn)</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        b, err := reader.ReadByte()</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">        _, err = conn.Write([]<span class="type">byte</span>&#123;b&#125;)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>执行nc命令测试服务器，nc是linux系统下的命令，windows系统需要额外安装。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">nc 127.0.0.1 1080</span><br></pre></td></tr></table></figure></div>
<p>输入什么服务器就会返回什么。</p>
<h3 id="2auth"><a class="markdownIt-Anchor" href="#2auth"></a> 2.auth</h3>
<p>认证阶段，这一部分会比较复杂。实现一个空的auth函数，在process函数里调用。</p>
<p>认证阶段的逻辑，第一步，浏览器会向代理服务器发送一个包。这个包有三个字段</p>
<p>第一个字段version，协议版本号，固定是5。</p>
<p>第二个字段methods，认证的方法数目。</p>
<p>第三个字段，每个method的编码，0表示不需要认证，2表示用户名密码认证。</p>
<p>使用readbyte读取版本号，不是socks5直接返回报错，再读取method size（同样是一个字节）。创建一个相应长度的slice，用io.ReadFull填充信息。</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> socks5Ver = <span class="number">0x05</span> <span class="comment">//socks5的版本号</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">auth</span><span class="params">(reader *bufio.Reader, conn net.Conn)</span></span> (err <span class="type">error</span>) &#123;</span><br><span class="line">    ver, err := reader.ReadByte()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;read ver failed:%w&quot;</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ver != socks5Ver &#123;</span><br><span class="line">        <span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;not supported ver:%v&quot;</span>, ver)</span><br><span class="line">    &#125;</span><br><span class="line">    methodSize, err := reader.ReadByte()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;read methodSize failed:%w&quot;</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line">    method := <span class="built_in">make</span>([]<span class="type">byte</span>, methodSize)</span><br><span class="line">    _, err = io.ReadFull(reader, method)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;read method failed:%w&quot;</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line">    log.Println(<span class="string">&quot;ver&quot;</span>, ver, <span class="string">&quot;method&quot;</span>, method)</span><br><span class="line">    _, err = conn.Write([]<span class="type">byte</span>&#123;socks5Ver, <span class="number">0x00</span>&#125;)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;write failed:%w&quot;</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>此时，代理服务器还需要返回一个response，返回包有两个字段，一个是version，一个是method，也就是鉴传方式。当前只考虑实现不需要鉴传的方式，即00。可以使用curl命令测试效果。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">curl --socks5 127.0.0.1:1080 -v http://www.baidu.com</span><br></pre></td></tr></table></figure></div>
<p>curl命令还不能成功，因为协议还没有完善。查看日志，version和method可以正常打印，说明目前协议实现正确。</p>
<h3 id="3请求阶段"><a class="markdownIt-Anchor" href="#3请求阶段"></a> 3.请求阶段</h3>
<p>请求阶段，读取携带URL或者IP地址+端口的包。实现一个和auth函数类似的connect函数，同样在process中调用。</p>
<p>请求阶段的逻辑，浏览器会发送一个包，包里有如下6个字段</p>
<p>version版本号，是5。command请求类型，这边只支持connection请求，也就是让代理服务器建立新的TCP连接。RSV保留字段，不需要理会。atype目标地址类型，可能是IPv4 IPv6或者域名。addr地址，这个地址的长度受atype的类型的影响会有不同。port端口号，两个字节，需要逐个读取。</p>
<p>前四个字段共四个字节，可以一次性读取，定义一个长度为4的buffer。读取完后，第0个就是version，判断是否为socks5，第1个就是cmd，判断是否为1（1表示connection请求），第3个就是atype，如果是IPv4，则再次读取到buffer，将buffer的字节逐个以IP地址的格式保存到addr变量中。如果是host，需要先读取长度，再创建一个相应长度的buf进行填充，转换成字符串保存到addr变量。IPv6目前不考虑支持。</p>
<p>最后的port有两个字节，读取后按协议规定的大端字节序转换成数字。前面的buffer不会再被其他变量使用，可以直接复用内存，创建一个临时slice，长度为2。接下来把IP地址和端口号打印出来。</p>
<p>收到浏览器的请求包之后，需要返回一个包。这个包里有很多字段，但大部分不会使用。</p>
<p>第一个是版本号socks5，第二个是返回类型，成功的话就返回0，第三个是保留字段，填0即可，第四个字段是atype地址类型，填1。第五、六个字段暂时用不到，都填0。一共是4+4+2个字节。</p>
<p>编写完connect函数后，使用curl重新测试，看到IP地址和端口信息被打印出来，说明当前协议实现正确。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">curl --socks5 127.0.0.1:1080 -v http://www.baidu.com</span><br></pre></td></tr></table></figure></div>
<p>最后一步就是和端口建立连接，实现双向转发数据。</p>
<h3 id="4relay阶段"><a class="markdownIt-Anchor" href="#4relay阶段"></a> 4.relay阶段</h3>
<p>直接使用net.dial建立一个TCP连接。建立连接之后，不要忘记使用defer来关闭连接。</p>
<p>实现浏览器和下游服务器的双向数据转发。标准库的io.copy可以实现一个单向数据转发，那么可以使用两个goroutine实现双向转发。</p>
<p>此时存在一个问题，connect函数会立即返回并关闭连接，需要等待任意一个方向copy出错后再返回connect函数。可以使用标准库的context机制，用contextWithCancel来创建一个context，在最后等待ctx.Done，只要cancel被调用，ctx.Done就会立即返回，然后在两个goroutine里各调用一次cancal即可。</p>
<p>在connect函数中添加</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line">dest, err := net.Dial(<span class="string">&quot;tcp&quot;</span>, fmt.Sprintf(<span class="string">&quot;%v:%v&quot;</span>, addr, port))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    fmt.Errorf(<span class="string">&quot;dial dst failed:%w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> dest.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在写入数据完成之后</span></span><br><span class="line">ctx, cancel := context.WithCancel(context.Backgrond())</span><br><span class="line"><span class="keyword">defer</span> cancel()</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    _, _ = io.Copy(dest, reader)</span><br><span class="line">    cancel()</span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    _, _ = io.Copy(conn, dest)</span><br><span class="line">    cancel()</span><br><span class="line">&#125;()</span><br><span class="line">&lt;-ctx.Done()</span><br></pre></td></tr></table></figure></div>
<p>执行curl测试，返回成功</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">curl --socks5 127.0.0.1:1080 -v http://www.baidu.com</span><br></pre></td></tr></table></figure></div>
<p>还可以在浏览器中测试代理，需要安装switchyomega插件。新建情景模式，代理服务器socks5，端口1080，保存并启用。访问网站，可以在代理服务器这边看到浏览器版本的域名和端口。</p>
<h2 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h2>
<p><a class="link"   href="https://github.com/wangkechun/go-by-example/" >源代码 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>青训营记录</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>系统设计</title>
    <url>/2023/02/06/golang-day10/</url>
    <content><![CDATA[<p>本文来源于第五届字节跳动青训营活动，已收录到<a class="link"   href="https://juejin.cn/post/7197022389850439735" >系统设计 | 青训营笔记 - 掘金 (juejin.cn) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，主要记录了对秒杀系统设计的学习<span id="more"></span></p>
<h2 id="系统设计之秒杀系统"><a class="markdownIt-Anchor" href="#系统设计之秒杀系统"></a> 系统设计之秒杀系统</h2>
<h3 id="1系统设计方法论"><a class="markdownIt-Anchor" href="#1系统设计方法论"></a> 1.系统设计方法论</h3>
<h4 id="系统设计的思考问题"><a class="markdownIt-Anchor" href="#系统设计的思考问题"></a> 系统设计的思考问题</h4>
<ul>
<li>为什么要做系统设计</li>
<li>系统设计的定义是什么</li>
<li>怎么做系统设计，如何落地一个系统</li>
<li>系统功能实现之后，如何分析瓶颈并优化</li>
<li>如何验证系统的可用性和稳定性</li>
</ul>
<h4 id="系统设计的目的"><a class="markdownIt-Anchor" href="#系统设计的目的"></a> 系统设计的目的</h4>
<p>对个人</p>
<ul>
<li>面试</li>
<li>个人能力提升</li>
<li>拓展技术视野</li>
</ul>
<p>对工作</p>
<ul>
<li>业务驱动</li>
<li>系统重构</li>
<li>突破和创新</li>
</ul>
<h4 id="系统评估角度"><a class="markdownIt-Anchor" href="#系统评估角度"></a> 系统评估角度</h4>
<p>可用性、易用性、可维护性、安全性、性能、扩展性、耦合性、伸缩性</p>
<h4 id="系统设计的定义"><a class="markdownIt-Anchor" href="#系统设计的定义"></a> 系统设计的定义</h4>
<p>系统</p>
<ul>
<li>关联的个体</li>
<li>规则运作</li>
<li>组成工作的整体</li>
</ul>
<p>设计</p>
<ul>
<li>设想和计划</li>
<li>目的</li>
<li>过程安排</li>
</ul>
<p>系统设计是为了达成某种目的，通过个体组成整体的过程</p>
<h4 id="系统设计的流程"><a class="markdownIt-Anchor" href="#系统设计的流程"></a> 系统设计的流程</h4>
<ul>
<li>场景：用什么系统，需要哪些功能，多大的并发量</li>
<li>存储：数据如何组织，SQL 存储，NoSQL 存储</li>
<li>服务：业务功能实现和逻辑整合</li>
<li>扩展：解决设计缺陷，提高鲁棒性、扩展性</li>
</ul>
<h4 id="系统瓶颈的发现"><a class="markdownIt-Anchor" href="#系统瓶颈的发现"></a> 系统瓶颈的发现</h4>
<p>方法角度</p>
<ul>
<li>火焰图分析</li>
<li>链路追踪</li>
<li>性能测试</li>
</ul>
<h4 id="如何保证系统的可用性和稳定性"><a class="markdownIt-Anchor" href="#如何保证系统的可用性和稳定性"></a> 如何保证系统的可用性和稳定性</h4>
<ul>
<li>链路梳理：核心链路、流量漏洞、强弱依赖</li>
<li>可观测性：链路追踪、核心监控、业务报警</li>
<li>全链路测试：压力测试、负载测试、容量测试</li>
<li>稳定性控制：系统限流、业务兜底、熔断降级</li>
<li>容灾演练：混沌工程、应急手册、容灾预案</li>
</ul>
<h3 id="2电商秒杀业务介绍"><a class="markdownIt-Anchor" href="#2电商秒杀业务介绍"></a> 2.电商秒杀业务介绍</h3>
<h4 id="电商介绍"><a class="markdownIt-Anchor" href="#电商介绍"></a> 电商介绍</h4>
<ul>
<li>供给侧：商品、商家、供应链</li>
<li>消费侧：消费者、用户、流量来源</li>
<li>交易环境：线下商城、线上电商</li>
</ul>
<p>进一步分析</p>
<ul>
<li>
<p>商品：具有交易价值和属性的信息载体。</p>
</li>
<li>
<p>关于电商涉及到两个概念：SPU 和 SKU</p>
<blockquote>
<p>SPU(Standard Product Unit)：标准化产品单元。是商品信息聚合的最小单位，是一组可复用、易检索的标准化信息的集合，该集合描述了一个产品的特性。通俗点讲，属性值、特性相同的商品就可以称为一个SPU</p>
<p>SKU(Stock Keeping Unit): 库存量单位。SKU即库存进出计量的单位， 可以是以件、盒、托盘等为单位</p>
</blockquote>
</li>
</ul>
<h4 id="秒杀业务的特点"><a class="markdownIt-Anchor" href="#秒杀业务的特点"></a> 秒杀业务的特点</h4>
<ul>
<li>瞬时流量高</li>
<li>读多写少</li>
<li>实时性要求高</li>
</ul>
<h4 id="秒杀业务的难点"><a class="markdownIt-Anchor" href="#秒杀业务的难点"></a> 秒杀业务的难点</h4>
<p>高性能、资源成本、扩展性、防止超卖、反欺诈、鲁棒性、流量管控</p>
<h4 id="设计秒杀系统"><a class="markdownIt-Anchor" href="#设计秒杀系统"></a> 设计秒杀系统</h4>
<h5 id="场景scenario"><a class="markdownIt-Anchor" href="#场景scenario"></a> 场景（Scenario）</h5>
<ul>
<li>功能：秒杀活动发布、秒杀商品详情、秒杀下单</li>
<li>并发：万人参与秒杀、QPS 1w+、TPS 1k+</li>
</ul>
<h5 id="存储storage"><a class="markdownIt-Anchor" href="#存储storage"></a> 存储（Storage）</h5>
<p>MySQL —&gt; Redis —&gt; Localcache</p>
<h5 id="服务service"><a class="markdownIt-Anchor" href="#服务service"></a> 服务（Service）</h5>
<ul>
<li>
<p>子服务：用户服务、风控服务、活动服务、订单服务</p>
</li>
<li>
<p>基础组件：ID 生成器、缓存组件、MQ 组件、限流组件</p>
</li>
</ul>
<h5 id="扩展scale"><a class="markdownIt-Anchor" href="#扩展scale"></a> 扩展（Scale）</h5>
<ul>
<li>流量隔离、CDN、缓存优化、流量管控（例如基于速率或信号控制、限流、拦截、过滤以及设置机房流量配比等）</li>
<li>数据库扩展、服务·水平扩展、MQ 扩展、Redis 扩展、服务垂直扩展</li>
</ul>
<h4 id="系统架构"><a class="markdownIt-Anchor" href="#系统架构"></a> 系统架构</h4>
<ul>
<li>用户层：WEB、IOS、Android</li>
<li>接入层：Nginx</li>
<li>应用层：发布活动、秒杀详情、秒杀下单、ID 生成器、限流组件、MQ 组件、Cache 组件</li>
<li>基础层：Redis、RocketMQ、MySQL</li>
</ul>
<h3 id="3实践"><a class="markdownIt-Anchor" href="#3实践"></a> 3.实践</h3>
<p>流程图</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/02/06/golang-day10/golang-day10.png"
                      class="" title="golang-day10"
                >
<h3 id="4总结"><a class="markdownIt-Anchor" href="#4总结"></a> 4.总结</h3>
<ul>
<li>
<p>服务无状态</p>
</li>
<li>
<p>批量写入</p>
</li>
<li>
<p>最终一致性</p>
</li>
</ul>
<h3 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h3>
<p><a class="link"   href="https://zhuanlan.zhihu.com/p/523479439" >鲁棒性的含义以及如何提高模型的鲁棒性 - 知乎 (zhihu.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://zhuanlan.zhihu.com/p/150101068" >浅谈电商中的spu和sku - 知乎 (zhihu.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>青训营记录</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>黑灰产监控与防御</title>
    <url>/2023/02/07/golang-day11/</url>
    <content><![CDATA[<p>本文来源于第五届字节跳动青训营活动，已收录到<a class="link"   href="https://juejin.cn/post/7197404867802038330" >黑灰产监控与防御 | 青训营笔记 - 掘金 (juejin.cn) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，主要记录了对黑灰产监控与防御的学习<span id="more"></span></p>
<h2 id="黑灰产监控与防御"><a class="markdownIt-Anchor" href="#黑灰产监控与防御"></a> 黑灰产监控与防御</h2>
<h3 id="1黑产介绍"><a class="markdownIt-Anchor" href="#1黑产介绍"></a> 1.黑产介绍</h3>
<h4 id="一些常见的黑产"><a class="markdownIt-Anchor" href="#一些常见的黑产"></a> 一些常见的黑产</h4>
<p>诈骗、木马、薅羊毛、钓鱼、黄牛、病毒、博彩、拖库、引流、盗号、跑分、勒索软件</p>
<h4 id="黑色产业规模"><a class="markdownIt-Anchor" href="#黑色产业规模"></a> 黑色产业规模</h4>
<ul>
<li>
<p>中国“网络黑产”从业人员已超过 150 万，市场规模已经达到千亿级别 - 中国法院网 2017 年</p>
</li>
<li>
<p>截止 2022 年 12 曰，haveibeenpwned 已收录了约 120 亿条账号密码数据</p>
<p>可访问 <a class="link"   href="https://haveibeenpwned.com/" >https://haveibeenpwned.com/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 查看一下自己的账号密码是否在其中</p>
</li>
<li>
<p>某互联网风控公司统计，2018 年各类黑产攻击（业务层）总数超过 300 亿次</p>
</li>
<li>
<p>据不完全统计，2019 年全网约有 5000 万左右的非实名手机卡被频繁用于各种欺诈活动</p>
</li>
<li>
<p>据不完全统计，仅中国境内每天约有 350-400 万个代理 IP 被用于各类欺诈活动</p>
</li>
<li>
<p>…</p>
</li>
</ul>
<h4 id="黑产发展趋势"><a class="markdownIt-Anchor" href="#黑产发展趋势"></a> 黑产发展趋势</h4>
<ul>
<li>规模化：借助脚本软件实现自动化、批量化攻击</li>
<li>组织化：以工作室甚至公司的形式运作，分工明确、合作紧密</li>
<li>平台化：
<ul>
<li>出现很多平台级的爬虫、群控、钓鱼木马等，难以追查</li>
<li>通过各类平台将黑产手中零散的资源进行整合</li>
</ul>
</li>
</ul>
<h3 id="2常见的黑产技术分析"><a class="markdownIt-Anchor" href="#2常见的黑产技术分析"></a> 2.常见的黑产技术分析</h3>
<h4 id="开户流程"><a class="markdownIt-Anchor" href="#开户流程"></a> 开户流程</h4>
<p>实名认证 —&gt; 绑定银行卡 —&gt; 审核开户</p>
<h4 id="对抗攻击手段"><a class="markdownIt-Anchor" href="#对抗攻击手段"></a> 对抗攻击手段</h4>
<ul>
<li>人脸识别对抗
<ul>
<li>伪造人脸数据</li>
</ul>
</li>
<li>地理位置对抗
<ul>
<li>定位打卡</li>
<li>摇一摇、附近的人</li>
<li>出租车抢单</li>
<li>某些线下优惠</li>
<li>…</li>
</ul>
</li>
</ul>
<h3 id="3安全防护体系的建设"><a class="markdownIt-Anchor" href="#3安全防护体系的建设"></a> 3.安全防护体系的建设</h3>
<h4 id="事前"><a class="markdownIt-Anchor" href="#事前"></a> 事前</h4>
<ul>
<li>情报监控
<ul>
<li>暗网</li>
<li>贴吧</li>
<li>TG</li>
<li>破解论坛</li>
</ul>
</li>
<li>SDLC：软件开发生命周期的阶段和模型</li>
<li>漏洞扫描</li>
</ul>
<h4 id="事中"><a class="markdownIt-Anchor" href="#事中"></a> 事中</h4>
<ul>
<li>渗透测试</li>
<li>威胁感知
<ul>
<li>用户行为异常</li>
<li>接口数据异常</li>
<li>恶意流量检测</li>
</ul>
</li>
<li>风控/安全策略</li>
</ul>
<h4 id="事后"><a class="markdownIt-Anchor" href="#事后"></a> 事后</h4>
<ul>
<li>威胁建模</li>
<li>攻击溯源</li>
</ul>
<h4 id="关键要素"><a class="markdownIt-Anchor" href="#关键要素"></a> 关键要素</h4>
<p>验证码、安全 SDK、代理检测、人脸识别、黑产名单、…</p>
<p>WAF（WEB应用程序防火墙）、IDS（入侵检测系统）、DLP、终端安全防护、行为审计、…</p>
<h3 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h3>
<p><a class="link"   href="https://zhuanlan.zhihu.com/p/450678659" >对抗攻击-人脸识别 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://zhuanlan.zhihu.com/p/575438524" >解密地理位置模拟攻防之道 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://www.jianshu.com/p/8e570d9049e0" >SDLC：软件开发生命周期的阶段和模型 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://juejin.cn/post/7196959046603227195" >黑灰产监控与防御 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>青训营记录</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式定时任务</title>
    <url>/2023/02/08/golang-day12/</url>
    <content><![CDATA[<p>本文来源于第五届字节跳动青训营活动，已收录到<a class="link"   href="https://juejin.cn/post/7197711583131697189" >分布式定时任务 | 青训营笔记 - 掘金 (juejin.cn) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，主要记录了对分布式定时任务的学习<span id="more"></span></p>
<h2 id="分布式定时任务"><a class="markdownIt-Anchor" href="#分布式定时任务"></a> 分布式定时任务</h2>
<h3 id="目标"><a class="markdownIt-Anchor" href="#目标"></a> 目标</h3>
<ul>
<li>知识面扩充
<ul>
<li>对分布式定时任务建立起宏观的认知，并深入了解其实现原理</li>
<li>了解关联的单机定时任务、大数据处理引擎，通过了解不同实现方案的优劣来拓展知识面</li>
</ul>
</li>
<li>项目实践能力加强
<ul>
<li>了解在哪些实际业务场景中使用分布式定时任务</li>
<li>对于实际业务场景中的中间件选型、技术方案做到胸有成竹</li>
</ul>
</li>
</ul>
<h3 id="1前言"><a class="markdownIt-Anchor" href="#1前言"></a> 1.前言</h3>
<p>作为后端开发者，面对亿级用户规模、亿级资金规模、百万级读写 QPS，如何设计一个最终开奖环节技术方案？</p>
<p>分布式定时任务 = 自动化 + 定时执行 + 海量数据 + 高效稳定</p>
<h3 id="2发展历程"><a class="markdownIt-Anchor" href="#2发展历程"></a> 2.发展历程</h3>
<h4 id="21-windows-批处理"><a class="markdownIt-Anchor" href="#21-windows-批处理"></a> 2.1 Windows 批处理</h4>
<ul>
<li>Case 1：10 分钟后 Windows 电脑自动关机
<ol>
<li>桌面空白处右键单击-新建-文本文档</li>
<li>更改文件名和后缀名为“自动关机.bat”</li>
<li>修改文件内容为“shutdown -s -t 600”，表示 10 发展后自动关机</li>
<li>双击运行该批处理文件，电脑将在会在 10 分钟之后自动关机</li>
</ol>
</li>
</ul>
<h4 id="22-windows-任务计划程序"><a class="markdownIt-Anchor" href="#22-windows-任务计划程序"></a> 2.2 Windows 任务计划程序</h4>
<ul>
<li>Case 2：每天 12:00 自动疫情打卡</li>
<li>具体设置方法参考相关资料</li>
</ul>
<h4 id="23-linux-任务计划-cronjob"><a class="markdownIt-Anchor" href="#23-linux-任务计划-cronjob"></a> 2.3 Linux 任务计划-CronJob</h4>
<ul>
<li>Case 3：每天 02:30 定时清理机器日志</li>
<li>Linux 系统命令，使用简单，稳定可靠</li>
<li>但只能控制单机，且不适用于其他操作系统</li>
<li>参考<a class="link"   href="https://www.cnblogs.com/love-snow/articles/7364888.html" >linux CronJob 教程 定时任务 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
<h4 id="24-单机定时任务"><a class="markdownIt-Anchor" href="#24-单机定时任务"></a> 2.4 单机定时任务</h4>
<h5 id="timer-ticker"><a class="markdownIt-Anchor" href="#timer-ticker"></a> Timer、Ticker</h5>
<ul>
<li>
<p>Case 4：每隔 5 分钟定时刷新本地缓存数据</p>
</li>
<li>
<p>通过代码实现</p>
<p>Java</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ParseException &#123;</span><br><span class="line">    <span class="type">Timer</span> <span class="variable">timer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Timer</span>();</span><br><span class="line">    timer.schedule(<span class="keyword">new</span> <span class="title class_">TimerTask</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            SyncLocalCache();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="number">5000</span>, <span class="number">5</span> * <span class="number">60</span> * <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>Go</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    ticker := time.NewTicker(<span class="number">5</span> * time.Minute)</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        <span class="keyword">select</span> &#123;</span><br><span class="line">            <span class="keyword">case</span> &lt;- ticker.C:</span><br><span class="line">            SyncLocalCache()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li>
<p>跨平台可用</p>
</li>
<li>
<p>仅单机可用</p>
</li>
</ul>
<h5 id="scheduledexecutorservice"><a class="markdownIt-Anchor" href="#scheduledexecutorservice"></a> ScheduledExecutorService</h5>
<ul>
<li>
<p>Case 5：每隔 5 分钟定时执行多个任务</p>
<p>Java</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> ScheduledExecutorService scheduler;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ParseException &#123;</span><br><span class="line">    scheduler = Executors.newScheduledThreadPool(<span class="number">5</span>);</span><br><span class="line">    scheduler.scheduleAtFixedRate(</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                DoSomething();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">0</span>, <span class="number">300</span>, TimeUnit.SECONDS);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li>
<p>拥有线程池功能</p>
</li>
<li>
<p>仅单机可用</p>
</li>
</ul>
<h4 id="25-任务调度-quartz"><a class="markdownIt-Anchor" href="#25-任务调度-quartz"></a> 2.5 任务调度-Quartz</h4>
<ul>
<li>单任务极致控制</li>
<li>没有负载均衡机制</li>
<li>参考<a class="link"   href="https://zhuanlan.zhihu.com/p/306591082" >Quartz 是什么？一文带你入坑 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
<h4 id="26-分布式定时任务"><a class="markdownIt-Anchor" href="#26-分布式定时任务"></a> 2.6 分布式定时任务</h4>
<ul>
<li>平台化部署</li>
<li>分布式部署</li>
<li>支持海量数据</li>
</ul>
<h5 id="概念"><a class="markdownIt-Anchor" href="#概念"></a> 概念</h5>
<p>定时任务是指系统为了自动完成特定任务，实时、延时、周期性完成任务调度的过程。解决了自动化和准时化这两个问题。</p>
<p>分布式定时任务是把分散的、可靠性差的定时任务纳入统一的平台，并实现集群管理调度和分布式部署的一种定时任务的管理方式。解决了高性能、可靠性、分布式部署等问题。</p>
<p>按触发时机分类</p>
<ul>
<li>定时任务：特定时间触发，例如今天 16:00 执行</li>
<li>延时任务：延时触发，例如 10 分钟后执行</li>
<li>周期任务：固定周期时间或固定频率周期调度触发，例如每隔 5秒 或者每天 12:00 执行</li>
</ul>
<h5 id="特点"><a class="markdownIt-Anchor" href="#特点"></a> 特点</h5>
<ul>
<li>自动化：全自动完成定时任务的调度和执行</li>
<li>平台化：基于平台化的思维管控一系列的分布式定时任务</li>
<li>分布式：在分布式系统环境下运行任务调度，突破单机定时任务的性能瓶颈</li>
<li>伸缩性：采用集群方式部署，可以随时按需扩缩容</li>
<li>高可用：单点故障不影响最终任务结果，可以实现故障转移</li>
</ul>
<h5 id="执行方式"><a class="markdownIt-Anchor" href="#执行方式"></a> 执行方式</h5>
<ul>
<li>单机任务：随机触发一台机器执行任务，适用于计算量小、并发度低的任务</li>
<li>广播任务：广播到所有机器上执行同一个任务，例如所有机器一起清理日志</li>
<li>Map 任务：一个任务可以分出多个子任务，每个子任务负责一部分的计算。适用于计算量大，单机无法满足要求的任务</li>
<li>MapReduce 任务：在 Map 任务的基础上，对所有子任务的结果做汇总计算，适用于计算量大，并且需要对子任务结果做汇总的任务</li>
</ul>
<h4 id="27-业内定时任务框架"><a class="markdownIt-Anchor" href="#27-业内定时任务框架"></a> 2.7 业内定时任务框架</h4>
<table>
<thead>
<tr>
<th style="text-align:center">框架</th>
<th style="text-align:center">来源</th>
<th style="text-align:center">是否开源</th>
<th style="text-align:center">任务编排</th>
<th style="text-align:center">任务分片</th>
<th style="text-align:center">高可用</th>
<th style="text-align:center">故障转移</th>
<th style="text-align:center">可视化运维</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Xxl-job</td>
<td style="text-align:center">美团点评</td>
<td style="text-align:center">是</td>
<td style="text-align:center">子任务依赖</td>
<td style="text-align:center">支持</td>
<td style="text-align:center">支持</td>
<td style="text-align:center">支持</td>
<td style="text-align:center">支持</td>
</tr>
<tr>
<td style="text-align:center">SchedulerX</td>
<td style="text-align:center">阿里巴巴</td>
<td style="text-align:center">否</td>
<td style="text-align:center">支持</td>
<td style="text-align:center">支持</td>
<td style="text-align:center">支持</td>
<td style="text-align:center">支持</td>
<td style="text-align:center">支持</td>
</tr>
<tr>
<td style="text-align:center">TCT</td>
<td style="text-align:center">腾讯</td>
<td style="text-align:center">否</td>
<td style="text-align:center">支持</td>
<td style="text-align:center">支持</td>
<td style="text-align:center">支持</td>
<td style="text-align:center">支持</td>
<td style="text-align:center">支持</td>
</tr>
<tr>
<td style="text-align:center">Elastic-job</td>
<td style="text-align:center">当当网</td>
<td style="text-align:center">是</td>
<td style="text-align:center">不支持</td>
<td style="text-align:center">支持</td>
<td style="text-align:center">支持</td>
<td style="text-align:center">支持</td>
<td style="text-align:center">支持</td>
</tr>
<tr>
<td style="text-align:center">Saturn</td>
<td style="text-align:center">唯品会</td>
<td style="text-align:center">是</td>
<td style="text-align:center">不支持</td>
<td style="text-align:center">支持</td>
<td style="text-align:center">支持</td>
<td style="text-align:center">支持</td>
<td style="text-align:center">支持</td>
</tr>
</tbody>
</table>
<h5 id="xxl-job"><a class="markdownIt-Anchor" href="#xxl-job"></a> Xxl-job</h5>
<p>Xxl-job 是一个轻量级分布式任务调度框架，其核心设计目标是开发迅速、学习简单、轻量级、易扩展。Xxl-job 支持分片，简单支持任务依赖，支持子任务依赖，不是跨平台的。</p>
<p>Xxl-job 很大的一个优势在于开源且免费，并且轻量级，开箱即用，操作简单，上手快，企业维护成本不高，因而在中小型公司使用非常广泛。</p>
<h5 id="schedulerx"><a class="markdownIt-Anchor" href="#schedulerx"></a> SchedulerX</h5>
<p>分布式任务调度 ScheduleX 2.0 是阿里巴巴基于 Akka 架构自研的新一代分布式任务调度平台，提供定时调度、调度任务编排和分布式批量处理等功能。</p>
<p>SchedulerX 可在阿里云付费使用。它的功能非常强大，在阿里巴巴内部广泛使用并久经考验。</p>
<h5 id="tct"><a class="markdownIt-Anchor" href="#tct"></a> TCT</h5>
<p>分布式任务调度服务 Tencent Cloud Task 是腾讯自主研发的一款高性能、高可靠通用的分布式任务调度中间件，通过指定时间规则严格触发调度任务，保障任务的可靠有序执行。该服务支持国际通用的时间表达式、调度任务执行生命周期管理，解决传统定时调度任务单点及并发性能问题。同时，支持任务分片、流程编排复杂调度任务处理能力，覆盖广泛的任务调度应用场景。</p>
<p>TCT 仅在腾讯内部使用，未开源、未商用。</p>
<h4 id="28-知识面扩充"><a class="markdownIt-Anchor" href="#28-知识面扩充"></a> 2.8 知识面扩充</h4>
<h5 id="分布式定时任务和单机定时任务"><a class="markdownIt-Anchor" href="#分布式定时任务和单机定时任务"></a> 分布式定时任务和单机定时任务</h5>
<p>共同点</p>
<ul>
<li>都可以实现自动化的定时、延时、周期任务调度</li>
</ul>
<p>差异</p>
<ul>
<li>分布式定时任务可支撑更大的业务体量</li>
<li>分布式定时任务的性能、伸缩性、稳定性更高</li>
</ul>
<h5 id="分布式定时任务和大数据处理引擎"><a class="markdownIt-Anchor" href="#分布式定时任务和大数据处理引擎"></a> 分布式定时任务和大数据处理引擎</h5>
<p>共同点</p>
<ul>
<li>都可以对海量数据做处理</li>
<li>性能、伸缩性、稳定性都很高</li>
</ul>
<p>差异</p>
<ul>
<li>定时并不是大数据处理引擎要解决的核心问题</li>
<li>大数据引擎往往致力于将源数据处理成结果数据，分布式定时任务除了做这个之外，还能调用 HTTP 和 RPC 服务</li>
</ul>
<h4 id="29-小结"><a class="markdownIt-Anchor" href="#29-小结"></a> 2.9 小结</h4>
<ul>
<li>生活用途
<ul>
<li>Windows 批处理</li>
<li>Windows 任务计划程序</li>
</ul>
</li>
<li>工作用途
<ul>
<li>Linux 任务计划 — cronjob</li>
<li>单机定时任务 — Timer、Ticker</li>
<li>单机定时任务 — ScheduledExecutorService</li>
<li>任务调度 — Quartz</li>
<li>分布式定时任务</li>
</ul>
</li>
<li>分布式定时任务
<ul>
<li>触发时机：定时、延时、周期</li>
<li>执行方式：单机、广播、Map、MapReduce</li>
<li>业内流行框架：Xxl-job、SchedulerX、TCT</li>
<li>关联技术：单机定时任务、大数据处理引擎</li>
</ul>
</li>
</ul>
<h3 id="3实现原理"><a class="markdownIt-Anchor" href="#3实现原理"></a> 3.实现原理</h3>
<h4 id="31-核心架构"><a class="markdownIt-Anchor" href="#31-核心架构"></a> 3.1 核心架构</h4>
<p>分布式定时任务核心要解决触发、调度、执行三个关键问题</p>
<ul>
<li>
<p>触发器：Trigger,解析任务，生成触发事件</p>
</li>
<li>
<p>调度器：Scheduler，获取执行任务单元，管理任务生命周期</p>
</li>
<li>
<p>执行器：Executor，获取执行任务单元，执行任务逻辑</p>
</li>
</ul>
<p>除此之外，还需要提供一个控制台（Admin），提供任务管理和干预的功能。</p>
<h5 id="数据流"><a class="markdownIt-Anchor" href="#数据流"></a> 数据流</h5>
<p>任务创建：用户 —&gt; 任务基础信息、触发规则、任务代码 —&gt; 控制台（Admin）—&gt; 任务 DB</p>
<p>任务执行：控制台（Admin）—&gt; 触发器 Trigger —&gt; 调度器 Scheduler —&gt; 执行器 Executor</p>
<h5 id="功能架构"><a class="markdownIt-Anchor" href="#功能架构"></a> 功能架构</h5>
<p>Admin：元数据存储、元数据状态流转、任务分片、任务依赖、规则引擎、任务暂停/恢复、日志管理、监控报警、指标统计、…</p>
<p>Trigger：解析引擎、Scanner、可靠投递、状态流转、补偿策略</p>
<p>Scheduler：调度、负载均衡、幂等控制、容错、故障转移、限流、计费、平滑启停、状态管控、…</p>
<p>Executor：注册、任务获取、任务执行、状态上报、日志处理、本地幂等、任务回调、…</p>
<h4 id="32-控制台"><a class="markdownIt-Anchor" href="#32-控制台"></a> 3.2 控制台</h4>
<h5 id="基本概念"><a class="markdownIt-Anchor" href="#基本概念"></a> 基本概念</h5>
<ul>
<li>任务：Job，任务元数据</li>
<li>任务实例：JobInstance，周期任务会生成多个任务实例</li>
<li>任务结果：JobResult，任务实例运行的结果</li>
<li>任务历史：JobHistory，用户可以修改任务信息，任务实例对应的任务元数据可以不同，因而使用任务历史存储</li>
</ul>
<h5 id="任务元数据"><a class="markdownIt-Anchor" href="#任务元数据"></a> 任务元数据</h5>
<p>任务元数据（Job）是用户对任务属性的定义，包括任务类型调度时机、执行行为等。</p>
<h5 id="任务实例"><a class="markdownIt-Anchor" href="#任务实例"></a> 任务实例</h5>
<p>任务实例（JobInstance）是一个确定的 Job 的一次运行实例。</p>
<h4 id="33-触发器"><a class="markdownIt-Anchor" href="#33-触发器"></a> 3.3 触发器</h4>
<h5 id="核心职责"><a class="markdownIt-Anchor" href="#核心职责"></a> 核心职责</h5>
<p>给定一系列任务，解析它们的触发规则，在规定的时间点触发任务的调度</p>
<h5 id="设计约束"><a class="markdownIt-Anchor" href="#设计约束"></a> 设计约束</h5>
<ul>
<li>需支持大量任务</li>
<li>需支持秒级的调度</li>
<li>周期任务需要多次执行</li>
<li>需保证秒级扫描的高性能，并避免资源浪费</li>
</ul>
<h5 id="方案-1"><a class="markdownIt-Anchor" href="#方案-1"></a> 方案 1</h5>
<p>定期扫描 + 延时消息</p>
<p>定时扫描的机器集群部署，通过分布式锁保证只有一台机器在调度。</p>
<h5 id="方案-2"><a class="markdownIt-Anchor" href="#方案-2"></a> 方案 2</h5>
<p>时间轮（Quartz 方案）</p>
<p>时间轮是一种高效利用线程资源进行批量化调度的一种调度模型。时间轮是一个存储环形队列，底层采用数组实现，数组中的每个元素可以存放一个定时任务列表。</p>
<p>目标：遍历任务列表，从中找出当前时间点需触发的任务列表</p>
<p>几种存储方式的比较</p>
<ol>
<li>
<p>使用链表存储任务，每个元素代表一个任务。查询复杂度 O(n)，修改复杂度 O(1)</p>
</li>
<li>
<p>使用最小堆存储任务，按执行时间排序，每个节点存储同执行时间任务列表。查询复杂度 O(1)，修改复杂度 O(log n)</p>
</li>
<li>
<p>使用时间轮存储任务，每个节点存储同执行时间任务列表。查询复杂度 O(1)，修改复杂度 O(1)</p>
<p>存在刻度容量问题。</p>
</li>
<li>
<p>使用多时间轮存储任务，上一级时间轮转过对应刻度后把任务塞入下级时间轮中。</p>
</li>
</ol>
<h5 id="高可用"><a class="markdownIt-Anchor" href="#高可用"></a> 高可用</h5>
<p>核心问题</p>
<ul>
<li>不同业务之间，任务的调度会相互影响</li>
<li>负责扫描和触发的机器出现故障</li>
</ul>
<p>解法思路</p>
<ul>
<li>存储上，不同级别、业务做资源隔离</li>
<li>运行时，不同级别、业务分开执行</li>
<li>部署时，采用多机房集群化部署，避免单点故障，通过数据库锁或分布式锁保证任务只能被触发一次</li>
</ul>
<p>问题</p>
<ul>
<li>单 Trigger 模式：会有单点故障，机器故障时平台崩溃。</li>
<li>Trigger 集群模式：可避免单点故障，但需要避免同一任务被多次触发，导致业务紊乱。</li>
</ul>
<h5 id="数据库行锁模式"><a class="markdownIt-Anchor" href="#数据库行锁模式"></a> 数据库行锁模式</h5>
<p>在触发调度之前，更新数据库中 JobInstance 的状态，成功抢锁的才会触发调度。但是多台机器频繁竞争数据库锁，节点越多性能越差。</p>
<h5 id="分布式锁模式"><a class="markdownIt-Anchor" href="#分布式锁模式"></a> 分布式锁模式</h5>
<p>在触发调度之前，尝试抢占分布式锁，可使用 Redis 锁或 Zookeeper 锁。性能较高，是比较广泛使用的方案。</p>
<h4 id="34-调度器"><a class="markdownIt-Anchor" href="#34-调度器"></a> 3.4 调度器</h4>
<h5 id="资源来源"><a class="markdownIt-Anchor" href="#资源来源"></a> 资源来源</h5>
<p>业务系统提供机器资源</p>
<p>优点</p>
<ul>
<li>任务执行逻辑与业务系统共用同一份资源，利用率更高</li>
</ul>
<p>缺点</p>
<ul>
<li>更容易发生定时任务脚本影响在线服务的事故</li>
<li>不能由定时任务平台控制扩缩容</li>
</ul>
<p>定时任务平台提供机器资源</p>
<p>优点</p>
<ul>
<li>任务执行逻辑与业务系统提供的在线服务隔离，避免相互影响</li>
<li>可以支持优雅地扩缩容</li>
</ul>
<p>缺点</p>
<ul>
<li>消耗更多的机器资源</li>
<li>需要额外为定时任务平台申请接口调用权限，而不能直接继承业务系统的权限</li>
</ul>
<h5 id="节点选择"><a class="markdownIt-Anchor" href="#节点选择"></a> 节点选择</h5>
<ul>
<li>
<p>随机节点执行：选择集群中一个可用的节点执行调度任务。</p>
<p>适用场景：定时对账。</p>
</li>
<li>
<p>广播执行：在集群中所有的执行节点分发调度任务并执行。</p>
<p>适用场景：批量运维。</p>
</li>
<li>
<p>分片执行：按照用户自定义分片逻辑进行拆分，分发到集群中不同节点并行执行，提升资源利用效率。</p>
<p>适用场景：海量日志统计。</p>
</li>
</ul>
<h5 id="任务分片"><a class="markdownIt-Anchor" href="#任务分片"></a> 任务分片</h5>
<p>通过任务分片来提高任务执行的效率和资源的利用率。N 个执行器 Executor，M 个业务数据区域段，最好 M &gt;= N，且 M 是 N 的整数倍。</p>
<h5 id="任务编排"><a class="markdownIt-Anchor" href="#任务编排"></a> 任务编排</h5>
<p>使用有向无环图 DAG（Directed Acyclic Graph）进行可视化任务编排。</p>
<h5 id="高级特性-故障转移"><a class="markdownIt-Anchor" href="#高级特性-故障转移"></a> 高级特性 - 故障转移</h5>
<p>故障转移：确保部分执行单元任务失败时，任务最终成功。</p>
<p>分片任务基于一致性 hash 策略分发任务，当某 Executor 异常时，调度器会将任务分发到其他 Executor。</p>
<h5 id="高可用-2"><a class="markdownIt-Anchor" href="#高可用-2"></a> 高可用</h5>
<p>调度器可以集群部署，做到完全的无状态，靠消息队列的重试机制保障任务一定会被调度。</p>
<h4 id="35-执行器"><a class="markdownIt-Anchor" href="#35-执行器"></a> 3.5 执行器</h4>
<p>基于注册中心，可以做到执行器的弹性扩缩容。</p>
<h4 id="36-小结"><a class="markdownIt-Anchor" href="#36-小结"></a> 3.6 小结</h4>
<ul>
<li>核心架构
<ul>
<li>控制台 Admin、触发器 Trigger、调度器 Scheduler、执行器 Executor</li>
</ul>
</li>
<li>业务模型
<ul>
<li>任务元数据 Job、任务实例 JobInstance、任务结果 JobResult、任务历史 JobHistory</li>
</ul>
</li>
<li>触发器
<ul>
<li>定时扫描 + 延时消息</li>
<li>时间轮
<ul>
<li>链表、最小堆、时间轮、多级时间轮</li>
</ul>
</li>
</ul>
</li>
<li>调度器
<ul>
<li>资源来源</li>
<li>资源调度：节点选择、任务分片、任务编排、故障转移</li>
</ul>
</li>
<li>执行器
<ul>
<li>注册、调度、回调、心跳检测</li>
</ul>
</li>
</ul>
<h3 id="4业务应用"><a class="markdownIt-Anchor" href="#4业务应用"></a> 4.业务应用</h3>
<p>所有需要定时、延时、周期性执行任务的业务场景，都可以考虑使用分布式定时任务。</p>
<p>电商</p>
<ul>
<li>订单 30 分钟未付款自动关闭订单</li>
<li>定时给商家、达人发送消息，给用户发放优惠券等</li>
</ul>
<p>互动</p>
<ul>
<li>支付宝集五福</li>
<li>集卡瓜分红包</li>
</ul>
<p>游戏</p>
<ul>
<li>活动结束后批量补发用户未领取的奖励</li>
<li>定期更新游戏内榜单</li>
</ul>
<h5 id="其他解决方案"><a class="markdownIt-Anchor" href="#其他解决方案"></a> 其他解决方案</h5>
<p>发货后超过 10 天未收货时系统自动确认收货</p>
<ul>
<li>使用分布式定时任务的延时任务</li>
<li>使用消息队列的延时消息或者定时消息</li>
</ul>
<p>春节集卡活动统计完成集卡的用户个数和总翻倍数</p>
<ul>
<li>使用分布式定时任务的 MapReduce 任务</li>
<li>使用大数据离线处理引擎 Hive 离线做统计</li>
<li>使用大数据实时处理引擎 Flink 实时做统计</li>
</ul>
<h5 id="对比"><a class="markdownIt-Anchor" href="#对比"></a> 对比</h5>
<table>
<thead>
<tr>
<th style="text-align:center">解决方案</th>
<th style="text-align:center">时效性</th>
<th style="text-align:center">可控性</th>
<th style="text-align:center">简洁性</th>
<th style="text-align:center">主要缺点</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">分布式定时任务</td>
<td style="text-align:center">秒级</td>
<td style="text-align:center">高</td>
<td style="text-align:center">高</td>
<td style="text-align:center">-</td>
</tr>
<tr>
<td style="text-align:center">单机定时任务</td>
<td style="text-align:center">秒级</td>
<td style="text-align:center">高</td>
<td style="text-align:center">高</td>
<td style="text-align:center">无法支撑很大业务体量</td>
</tr>
<tr>
<td style="text-align:center">延时消息</td>
<td style="text-align:center">实时</td>
<td style="text-align:center">低</td>
<td style="text-align:center">中</td>
<td style="text-align:center">在任务有变化时，已发送的延时消息不便于做变动</td>
</tr>
<tr>
<td style="text-align:center">离线计算</td>
<td style="text-align:center">小时级</td>
<td style="text-align:center">中</td>
<td style="text-align:center">高</td>
<td style="text-align:center">时延至少小时级</td>
</tr>
<tr>
<td style="text-align:center">实时计算</td>
<td style="text-align:center">秒级</td>
<td style="text-align:center">高</td>
<td style="text-align:center">中</td>
<td style="text-align:center">只能做数据处理，无法调用 HTTP/RPC 请求完成业务逻辑处理</td>
</tr>
</tbody>
</table>
<h3 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h3>
<p><a class="link"   href="https://blog.51cto.com/xiaoyuanzheng/5662986" >Windows 任务计划程序（task scheduler）介绍 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://www.cnblogs.com/love-snow/articles/7364888.html" >linux CronJob 教程 定时任务 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://zhuanlan.zhihu.com/p/306591082" >Quartz 是什么？一文带你入坑 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://zhuanlan.zhihu.com/p/36627346" >美团点评许雪里：分布式任务调度平台 XXL-JOB <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://xie.infoq.cn/article/5dfcab3b430d549f006882635" >时间轮原理及其在框架中的应用 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>青训营记录</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>消息队列原理与实战</title>
    <url>/2023/02/10/golang-day13/</url>
    <content><![CDATA[<p>本文来源于第五届字节跳动青训营活动，已收录到<a class="link"   href="https://juejin.cn/post/7198168315080065083" >消息队列原理与实战 | 青训营笔记 - 掘金 (juejin.cn) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，主要记录了消息队列的学习<span id="more"></span></p>
<h2 id="消息队列原理与实战"><a class="markdownIt-Anchor" href="#消息队列原理与实战"></a> 消息队列原理与实战</h2>
<h3 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h3>
<p>场景</p>
<ul>
<li>
<p>系统崩溃</p>
</li>
<li>
<p>服务能力有限</p>
</li>
<li>
<p>链路耗时长尾</p>
</li>
<li>
<p>日志存储</p>
</li>
</ul>
<p>解决方案</p>
<ul>
<li>针对存储行为服务崩溃时，使用消息队列进行解耦</li>
<li>针对高并发服务时，使用消息队列进行削峰</li>
<li>针对链路耗时，使用消息队列进行异步</li>
<li>针对日志存储，使用消息队列进行日志处理</li>
</ul>
<p>什么是消息队列</p>
<p>消息队列（MQ） ，指保存消息的一个容器，本质是个队列。但这个队列需要支持高吞吐，高并发，高可用。</p>
<h3 id="1前世今生"><a class="markdownIt-Anchor" href="#1前世今生"></a> 1.前世今生</h3>
<blockquote>
<p>消息中间件其实诞生的很早，早在1983年互联网应用还是一片荒芜的年代，有个在美国的印度小哥Vivek就设想了一种通用软件总线，世界上第一个现代消息队列软件The Information Bus(TIB)， TIB受到了企业的欢迎，这家公司的业务发展引起了当时最牛气的IT公司IBM的注意，于是他们一开始研发了自己消息队列软件，于是才有了后来的wesphere mq，再后来微软也加入了战团。接近2000年的时候，互联网时代已经初见曙光，全球的应用程序得到了极大地丰富，对于程序之间互联互通的需求越来越强烈，但是各大IT公司之间还是牢牢建立着各种技术壁垒，以此来保证自己的商业利益，所以消息中间件在那个时候是大型企业才能够用的起的高级玩意。 但是时代的洪流不可逆转，有壁垒就有打破壁垒的后来者，2001年sun发布了jms技术，试图在各大厂商的层面上再包装一层统一的java规范。java程序只需要针对jms api编程就可以了，不需要再关注使用了什么样的消息中间件，但是jms仅仅适用于java。2004年AMQP（高级消息队列协议）诞生了，才是真正促进了消息队列的繁荣发展，任何人都可以针对AMQP的标准进行编码。有好的协议指导，再加上互联网分布式应用的迅猛发展成为了消息中间件一飞冲天的最大动力，程序应用的互联互通，发布订阅，最大契合了消息中间件的最初的设计初衷。除了刚才介绍过的收费中间件，后来开源消息中间件开始层出不穷，常见比较流行的有ActiveMQ、RabbitMQ 、Kafak、阿里的RocketMQ，以及目前存算分离的Pulsar，在目前互联网应用中消息队列中间件基本上成为标配。</p>
</blockquote>
<h4 id="业界内消息队列对比"><a class="markdownIt-Anchor" href="#业界内消息队列对比"></a> 业界内消息队列对比</h4>
<p>目前比较流行的MQ</p>
<ul>
<li>Kafka：分布式的、分区的、多副本的日志提交服务，在高吞吐场景下发挥较为出色。</li>
<li>RocketMQ：低延迟、强一致、高性能、高可靠、万亿级容量和灵活的可扩展性，在一些实时场景中运用较广泛。</li>
<li>Pulsar：是下一代云原生分布式消息流平台，集消息、存储、轻量化函数式计算为一体、采用存算分离的架构设计。</li>
<li>BMQ：和 Pulsar 架构类似，存算分离，初期定位是承接高吞吐的离线业务场景，逐步替换掉对应的 Kafka 集群。</li>
</ul>
<h3 id="2消息队列-kafka"><a class="markdownIt-Anchor" href="#2消息队列-kafka"></a> 2.消息队列 - Kafka</h3>
<h4 id="21-使用场景"><a class="markdownIt-Anchor" href="#21-使用场景"></a> 2.1 使用场景</h4>
<ul>
<li>
<p>日志信息</p>
</li>
<li>
<p>Metrics 数据：搜索服务、直播服务、订单服务、支付服务</p>
</li>
<li>
<p>用户行为：搜索、点赞、评论、收藏</p>
</li>
</ul>
<h4 id="22-如何使用-kafka"><a class="markdownIt-Anchor" href="#22-如何使用-kafka"></a> 2.2 如何使用 Kafka</h4>
<ul>
<li>第一步：创建一个 Kafka 集群</li>
<li>第二步：在这个集群中创建一个 Topic，并且设置好分片数量</li>
<li>第三步：引入对应语言的 SDK 编写生产者逻辑，配置好集群和 Topic 等参数，初始化一个生产者，调用 Send 方法，将信息发送出去</li>
<li>第四步：引入对应语言的 SDK 编写消费者逻辑，配置好集群和 Topic 等参数，初始化一个消费者，调用 Poll 方法，接受发送的信息</li>
</ul>
<h4 id="23-基本概念"><a class="markdownIt-Anchor" href="#23-基本概念"></a> 2.3 基本概念</h4>
<ul>
<li>Topic：Kafka 中的逻辑队列，可以理解为每一个不同的业务场景就是一个不同的 Topic，对于这个业务来说，所有的数据都存储在这个 Topic 中。</li>
<li>Cluster：Kafka 的物理集群，每个集群中可以新建多个不同的 Topic。</li>
<li>Producer：消息的生产者，负责将业务消息发送到 Topic 当中。</li>
<li>Consumer：消息的消费者，负责消费已经发送到 Topic 中的消息。</li>
<li>Consumer Group：消费者组，不同组 Consumer 消费进度互不干涉。</li>
<li>Partition：分区，通常 Topic 会有多个分片，不同分片直接消息是可以并发处理的，能够提高单个 Topic 的吞吐。</li>
</ul>
<p>Offset：对每一个 partition 来说，每一条消息都有一个唯一的 Offset，消息在 partition 内的相对位置信息，可以理解为唯一 ID，在 partition 内部严格递增。</p>
<p>Replica：分片的副本，分布在不同的机器上，可用来容灾，Leader 对外服务，Follower 异步去拉取 Leader 的数据进行同步，如果 Leader 挂掉了，可以将 Follower 提升成 Leader 再对外进行服务。</p>
<p>ISR：In-Sync Replicas。意思是同步中的副本，对于 Follower 来说，始终和 Leader 是有一定差距的，但是当这个 差距比较小的时候，就可以将这个 Follower 副本加入到 ISR 中，不在 ISR 中的副本是不允许提升成 Leader 的。</p>
<p>每个分片有多个 Replica、Leader，Replica 将会从 ISR 中选出。</p>
<h4 id="24-数据复制"><a class="markdownIt-Anchor" href="#24-数据复制"></a> 2.4 数据复制</h4>
<p>Broker 代表每一个 Kafka 的节点，所有的 Broker 节点最终组成了一个集群。多个 Broker 中有一个 Broker 同时扮演了 Controller 的角色，Controller 是整个集群的大脑，负责对副本和 Broker 进行分配。</p>
<h4 id="25-kafka-架构"><a class="markdownIt-Anchor" href="#25-kafka-架构"></a> 2.5 Kafka 架构</h4>
<p>在集群的基础上，还有一个模块是 ZooKeeper。这个模块存储了集群的元数据信息，比如副本或分区的分配信息等，Controller 计算好的方案都会存放到这个地方。</p>
<h4 id="26-一条消息的自述"><a class="markdownIt-Anchor" href="#26-一条消息的自述"></a> 2.6 一条消息的自述</h4>
<p>从一条消息的视角来看完整的处理流程，了解 Kafka 为什么能够支持如此高的吞吐。</p>
<p>思考：如果发送一条消息，等到其成功后再发一条会有什么问题？</p>
<h4 id="27-producer"><a class="markdownIt-Anchor" href="#27-producer"></a> 2.7 Producer</h4>
<h5 id="批量发送"><a class="markdownIt-Anchor" href="#批量发送"></a> 批量发送</h5>
<p>批量发送可以减少 IO 次数，从而加强发送能力。</p>
<p>思考：如果消息量很大，网络带宽不够用，如何解决？</p>
<h5 id="数据压缩"><a class="markdownIt-Anchor" href="#数据压缩"></a> 数据压缩</h5>
<p>通过压缩减小消息大小，目前支持 Snappy、Gzip、LZ4、ZSTD 压缩算法。</p>
<h4 id="28-broker"><a class="markdownIt-Anchor" href="#28-broker"></a> 2.8 Broker</h4>
<ul>
<li>
<p>数据的存储</p>
<p>了解数据的存储，可以先从消息文件结构入手，再了解磁盘结构的工作原理。</p>
</li>
<li>
<p>消息文件结构</p>
<p>在每一个 Broker 中都分布这不同 Topic 的不同分片。</p>
</li>
<li>
<p>磁盘结构</p>
<p>移动磁头找到对应磁道，磁盘转动，找到对应扇区，最后写入。寻道成本比较高，因此顺序写可以减少寻道所带来的时间成本。</p>
<p>在一个盘面里寻道，磁头 —&gt; 磁道 —&gt; 扇区。</p>
</li>
<li>
<p>顺序写</p>
<p>采用顺序写的方式进入写入，可以提高写入效率。</p>
</li>
<li>
<p>如何找到消息？</p>
<p>Consumer 通过发送 Fetch Request 请求消息数据，Broker 会指定 Offset 处的消息，按照时间窗口和消息大小窗口发送给 Consumer</p>
<p>思考：寻找数据这个细节是如何实现的？</p>
</li>
<li>
<p>偏移量索引文件，文件名是文件中第一条消息的 Offset</p>
<p>通过二分找到小于目标文件 Offset 的最大索引位置，再遍历找到目标 Offset。</p>
</li>
<li>
<p>时间戳索引文件</p>
<p>通过二分找到小于目标时间戳最大的索引位置，在通过寻找 Offset 的方式找到最终数据。和 Offset 相比只是多加了时间戳以及，即通过二分找到时间戳对应的 Offset，再找到相应的文件数据。</p>
</li>
<li>
<p>传统数据拷贝</p>
<p>从磁盘空间到内核空间，内核空间到应用空间，再从应用空间到内核空间，进入消费者进程。</p>
</li>
<li>
<p>零拷贝</p>
<p>从磁盘空间到内核空间，然后进入消费者进程。</p>
<blockquote>
<p>Consumer从Broker中读取数据，通过sendfile的方式，将磁盘读到os内核缓冲区后，直接转到socket buffer进行网络发送 Producer生产的数据持久化到broker，采用mmap文件映射，实现顺序的快速写入</p>
</blockquote>
</li>
</ul>
<h4 id="29-consumer"><a class="markdownIt-Anchor" href="#29-consumer"></a> 2.9 Consumer</h4>
<h5 id="消息的接收端"><a class="markdownIt-Anchor" href="#消息的接收端"></a> 消息的接收端</h5>
<p>如何解决 Partition 在 Consumer Group 中的分配问题？</p>
<blockquote>
<p>对于一个Consumer Group来说，多个分片可以并发消费，这样可以大大提高消费的效率，但需要解决 Consumer 和 Partition 的分配问题，也就是对于每一个 Partition 来讲，该由哪一个 Consumer 来消费的问题。对于这个问题，我们一般有两种解决方法，手动分配和自动分配</p>
</blockquote>
<h5 id="low-level"><a class="markdownIt-Anchor" href="#low-level"></a> Low Level</h5>
<p>通过手动分配，哪一个 Consumer 消费哪一个 Partition 完全由业务来决定</p>
<blockquote>
<p>第一，手动分配，也就是Kafka中所说的 Low Level 消费方式进行消费，这种分配方式的一个好处就是启动比较快，因为对于每一个 Consumer 来说，启动的时候就已经知道了自己应该去消费哪个消费方式。这些 Consumer 再启动的时候就已经知道分配方案了</p>
<p>但这样这种方式存在缺点，想象一下，如果某一个 Consumer 挂掉了可能会停止一部分分片的消费，或者新增了一台Consumer，那又需要停掉整个集群，重新修改配置再上线，保证新增的 Consumer 也可以消费数据，其实上面两个问题，有时候对于线上业务来说是致命的。</p>
<p>因此 Kafka 也提供了另外一种方式。</p>
</blockquote>
<h5 id="high-level"><a class="markdownIt-Anchor" href="#high-level"></a> High Level</h5>
<blockquote>
<p>Kafka 提供了自动分配的方式，这里也叫做 High Level 的消费方式，简单的来说，就是在 Broker 集群中，对于不同的 Consumer Group 来讲，都会选取一台 Broker 当做 Coordinator，而 Coordinator 的作用就是帮助 Consumer Group 进行分片的分配，也叫做分片的 Rebalance</p>
<p>使用这种方式，如果 Consumer Group 中有发生宕机，或者有新的 Consumer 加入，整个 partition 和 Consumer 都会重新进行分配来达到一个稳定的消费状态</p>
</blockquote>
<h4 id="210-consumer-rebalance"><a class="markdownIt-Anchor" href="#210-consumer-rebalance"></a> 2.10 Consumer Rebalance</h4>
<p>相关参考<a class="link"   href="https://www.cnblogs.com/listenfwind/p/12662968.html" >https://www.cnblogs.com/listenfwind/p/12662968.html <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h4 id="小结-提高-kafka-吞吐或者稳定性的功能"><a class="markdownIt-Anchor" href="#小结-提高-kafka-吞吐或者稳定性的功能"></a> 小结 - 提高 Kafka 吞吐或者稳定性的功能</h4>
<ul>
<li>Producer：批量发送、数据压缩</li>
<li>Broker：顺序写，消息索引，零拷贝</li>
<li>Consumer：Rebalance</li>
</ul>
<h4 id="211-kafka-数据复制问题"><a class="markdownIt-Anchor" href="#211-kafka-数据复制问题"></a> 2.11 Kafka - 数据复制问题</h4>
<p>对于 Kafka 来说，每一个 Broker 上都有不同 Topic 分区的不同副本，而每一个副本，会将其数据存储到该 Kafka 节点上面，对于不同的节点之间，通过副本直接的数据复制，来保证数据的最终一致性与集群的高可用。</p>
<h4 id="212-kafka-重启操作"><a class="markdownIt-Anchor" href="#212-kafka-重启操作"></a> 2.12 Kafka - 重启操作</h4>
<p>对一个机器进行重启</p>
<ul>
<li>
<p>首先会关闭一个 Broker，此时如果该 Broker 上存在副本的 Leader，那么该副本将发生 Leader 切换，切换到其他节点上并且在 ISR 中的 Follower 副本</p>
</li>
<li>
<p>而此时，因为数据在不断的写入，对于刚刚关闭重启的 Broker 来说，和新 Leader 之间一定会存在数据的滞后，此时这个 Broker 会追赶数据，重新加入到 ISR 当中</p>
</li>
<li>
<p>当数据追赶完成之后，需要回切 Leader，这一步叫做 prefer leader，目的是为了避免在一个集群长期运行后，所有的 Leader 都分布在少数节点上导致数据的不均衡</p>
</li>
<li>
<p>通过上面的一个流程分析，可以发现对于一个 Broker 的重启来说，需要进行数据复制，所以时间成本会比较大</p>
<blockquote>
<p>比如一个节点重启需要10分钟，一个集群有1000个节点，如果该集群需要重启升级，则需要10000分钟，那差不多就是一个星期，这样的时间成本是非常大的。 可能会问，能不能并发多台重启，答案是不能。因为在一个两副本的集群中，重启了两台机器，对某一分片来讲，可能两个分片都在这台机器上面，则会导致该集群处于不可用的状态。这是更不能接受的。</p>
</blockquote>
</li>
</ul>
<h4 id="213-kafka-替换-扩容-缩容"><a class="markdownIt-Anchor" href="#213-kafka-替换-扩容-缩容"></a> 2.13 Kafka - 替换、扩容、缩容</h4>
<ul>
<li>替换，本质上来讲就是一个需要追更多数据的重启操作，因为正常重启只需要追一小部分，而替换，则是需要复制整个leader的数据，时间会更长</li>
<li>扩容，当分片分配到新的机器上以后，也是相当于要从0开始复制一些新的副本</li>
<li>缩容，缩容节点上面的分片也会分片到集群中剩余节点上面，分配过去的副本也会从0开始去复制数据</li>
</ul>
<p>以上三个操作均有数据复制所带来的时间成本问题，所以对于 Kafka 来说，运维操作所带来的时间成本是不容忽视的</p>
<h4 id="214-kafka-负载不均衡"><a class="markdownIt-Anchor" href="#214-kafka-负载不均衡"></a> 2.14 Kafka - 负载不均衡</h4>
<p>场景：同一个 Topic 有4个分片，两副本，对于分片1来说，数据量明显比其他分片要大，当机器 IO 达到瓶颈的时候，可能就需要把第一台 Broker上面的其他的 Partition 迁移到其他负载小的 Broker上面</p>
<p>但数据复制又会引起 Broker 的 IO 升高，所以问题就变成了为了去解决 IO 升高，但解决问题的过程又会带来更高的IO。所以就需要权衡 IO 设计出一个极其复杂的负载均衡策略。</p>
<h4 id="kafka-问题总结"><a class="markdownIt-Anchor" href="#kafka-问题总结"></a> Kafka - 问题总结</h4>
<ol>
<li>运维成本高</li>
<li>对于负载不均衡的场景，解决方案复杂</li>
<li>没有自己的缓存，完全依赖 Page Cache</li>
<li>Controller 和 Coordinator 和 Broker 在同一进程中，大量 IO 会造成其性能下降</li>
</ol>
<h3 id="3消息队列-bmq"><a class="markdownIt-Anchor" href="#3消息队列-bmq"></a> 3.消息队列 - BMQ</h3>
<p>ByteMQ，简称 BMQ，由字节跳动团队自主研发。</p>
<h4 id="31-bmq-简介"><a class="markdownIt-Anchor" href="#31-bmq-简介"></a> 3.1 BMQ 简介</h4>
<p>BMQ 兼容 Kafka 协议，存算分离，云原生消息队列，初期定位是承接高吞吐的离线业务场景，逐步替换掉对应的 Kafka 集群。</p>
<p>Producer —&gt; Consumer —&gt; Proxy —&gt; Broker —&gt; HDFS —&gt; Controller —&gt; Coordinator —&gt; Meta</p>
<p>这里着重强调 Proxy 和 Broker 无状态，为与下面的运维进行比较，简单说明存算分离，适配 Kafka 协议以及不选择 Pulsar 的原因</p>
<h4 id="32-运维操作对比"><a class="markdownIt-Anchor" href="#32-运维操作对比"></a> 3.2 运维操作对比</h4>
<table>
<thead>
<tr>
<th style="text-align:center">具体操作</th>
<th style="text-align:center">Kafka</th>
<th style="text-align:center">BMQ</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">重启</td>
<td style="text-align:center">需要数据复制，分钟级重启</td>
<td style="text-align:center">重启后可直接对外服务，秒级完成</td>
</tr>
<tr>
<td style="text-align:center">替换</td>
<td style="text-align:center">需要数据复制，分钟级替换，甚至天级别</td>
<td style="text-align:center">替换后可直接对外服务，秒级完成</td>
</tr>
<tr>
<td style="text-align:center">扩容</td>
<td style="text-align:center">需要数据复制，分钟级扩容，甚至天级别</td>
<td style="text-align:center">扩容后可直接对外服务，秒级完成</td>
</tr>
<tr>
<td style="text-align:center">缩容</td>
<td style="text-align:center">需要数据复制，分钟级缩容，甚至天级别</td>
<td style="text-align:center">缩容后可直接对外服务，秒级完成</td>
</tr>
</tbody>
</table>
<p>实际上对于所有节点变更的操作，都仅仅只是集群元数据的变化，通常情况下都能秒级完成，而真正的数据已经移到下层分布式文件存储去了，所以运维操作不需要额外关心数据复制所带来的时间成本</p>
<h4 id="33-hdfs-写文件流程"><a class="markdownIt-Anchor" href="#33-hdfs-写文件流程"></a> 3.3 HDFS 写文件流程</h4>
<p>同一个副本是由多个 segment 组成，BMQ 对于单个文件写入的机制，首先客户端写入前会选择一定数量的 DataNode，这个数量是副本数，然后将一个文件写入到三个节点上，切换到下一个 segment 之后，又会重新选择三个节点进行写入。这样一来，对于单个副本的所有 segment 来讲，会随机地分配到分布式文件系统的整个集群中。</p>
<h4 id="34-bmq-文件结构"><a class="markdownIt-Anchor" href="#34-bmq-文件结构"></a> 3.4 BMQ 文件结构</h4>
<p>对于 Kafka 分片数据的写入，是先在 Leader 上面写好文件，然后同步到 Follower 上，所以同一个副本的所有 Segment 都在同一台机器上面。会存在之前说到的单分片过大导致负载不均衡的问题，但在 BMQ 集群中，因为对于单个副本来讲，是随机分配到不同的节点上面的，因此不会存在 Kafka 的负载不均问题。</p>
<h4 id="35-broker"><a class="markdownIt-Anchor" href="#35-broker"></a> 3.5 Broker</h4>
<h5 id="partition-状态机"><a class="markdownIt-Anchor" href="#partition-状态机"></a> Partition 状态机</h5>
<p>其实对于写入的逻辑来说，还有一个状态机的机制，用来保证不会出现同一个分片在两个 Broker 上同时启动的情况，另外也能够保证一个分片的正常运行。</p>
<p>首先 Controller 做好分片的分配之后，如果在该 Broker 分配到了 Broker，首先会 start 这个分片，然后进入 Recover 状态，这个状态主要有两个目的</p>
<ul>
<li>
<p>第一个目的是获取分片写入权利，即对于 hdfs 来讲，只会允许一个分片进行写入，只有拿到这个权利的分片才能写入。</p>
</li>
<li>
<p>第二个目的是如果上次分片是异常中断的，没有进行 save checkpoint，这里会重新进行一次 save checkpoint，然后就进入了正常的写流程状态，创建文件，写入数据，到一定大小之后又开始建立新的文件进行写入。</p>
</li>
</ul>
<h5 id="写文件流程"><a class="markdownIt-Anchor" href="#写文件流程"></a> 写文件流程</h5>
<ul>
<li>
<p>数据校验：CRC , 参数是否合法</p>
</li>
<li>
<p>校验完成后，会把数据放入Buffer中，通过一个异步的Write Thread线程将数据最终写入到底层的存储系统当中</p>
<blockquote>
<p>这里有一个地方需要注意一下，就是对于业务的写入来说，可以配置返回方式，可以在写完缓存之后直接返回，另外也可以数据真正写入存储系统后再返回，对于这两个来说前者损失了数据的可靠性，带来了吞吐性能的优势，因为只写入内存是比较快的，但如果在下一次 flush 前发生宕机了，这个时候数据就有可能丢失，后者的话，因为数据已经写入了存储系统，这个时候也不需要担心数据丢失，相应的来说吞吐就会小一些</p>
</blockquote>
</li>
</ul>
<p>Thread 的具体逻辑</p>
<ul>
<li>
<p>首先会将 Buffer 中的数据取出来，调用底层写入逻辑，在一定的时间周期上去 flush， flush 完成后开始建立 Index，也就是 offset 和 timestamp 对应消息具体位置的映射关系</p>
</li>
<li>
<p>Index建立好以后，会 save 一次 checkpoint，即表示 checkpoint 后的数据是可以被消费的，试想一下，如果没有 checkpoint 的情况下会发生什么问题，如果 flush 完成之后宕机，index 还没有建立，这个数据是不应该被消费的</p>
</li>
<li>
<p>最后当文件到达一定大小之后，需要建立一个新的 segment 文件来写入</p>
</li>
</ul>
<h5 id="写文件-failover"><a class="markdownIt-Anchor" href="#写文件-failover"></a> 写文件 Failover</h5>
<p>建立一个新的文件，会随机挑选与副本数量相当的数据节点进行写入，但如果此时挑选节点中有一个出现了问题，导致不能正常写入了，应该怎么处理？</p>
<p>可以重新找正常的节点创建新的文件进行写入，这样也就保证了写入的可用性。</p>
<h4 id="36-proxy"><a class="markdownIt-Anchor" href="#36-proxy"></a> 3.6 Proxy</h4>
<ul>
<li>
<p>首先 Consumer 发送一个 Fetch Request，然后会有一个 Wait 流程，那么他的作用是什么？</p>
<p>想象一个 Topic，如果一直没有数据写入，那么此时 consumer 就会一直发送 Fetch Request，如果 Consumer 数量过多，BMQ 的 server端 是扛不住这个请求的。</p>
<p>因此设置了一个等待机制，如果没有 fetch 到指定大小的数据，那么 proxy 会等待一定的时间，再返回给用户侧，这样也就降低了 fetch 请求的 IO 次数，经过 wait 流程后，会到 Cache 里面去寻找是否有存在想要的数据，如果有直接返回，如果没有，再开始去存储系统当中寻找，首先会 Open 这个文件，然后通过 Index 找到数据所在的具体位置，从这个位置开始读取数据</p>
</li>
</ul>
<h4 id="37-多机房部署"><a class="markdownIt-Anchor" href="#37-多机房部署"></a> 3.7 多机房部署</h4>
<p>为什么需要多机房部署？</p>
<p>其实对于一个高可用的服务，除了要防止单机故障所带来的的影响意外，也要防止机房级故障所带来的影响，比如机房断点，机房之间网络故障等等。</p>
<p>BMQ 的多机房部署：Proxy —&gt; Broker —&gt; Meta —&gt; HDFS</p>
<h4 id="38-bmq-高级特性"><a class="markdownIt-Anchor" href="#38-bmq-高级特性"></a> 3.8 BMQ - 高级特性</h4>
<p>泳道 —&gt; Databus —&gt; Mirror —&gt; Index —&gt; Parquet</p>
<h4 id="39-泳道消息"><a class="markdownIt-Anchor" href="#39-泳道消息"></a> 3.9 泳道消息</h4>
<p>开发流程：开发 —&gt; BOE —&gt; PPE —&gt; Prod</p>
<p>BOE：Bytedance Offline Environment，是一套完全独立的线下机房环境</p>
<p>PPE：Product Preview Environment，即产品预览环境</p>
<p>BOE 测试：多个人同时测试，需要等待上一个人测试完成。每多一个测试人员，都需要重新搭建一个相同配置的 Topic，造成人力和资源的浪费。</p>
<p>PPE 验证：对于 PPE 的消费者来说，资源没有生产环境多，所以无法承受生产环境的流量。解决主干泳道流量隔离问题以及泳道资源重复创建问题。</p>
<h4 id="310-databus"><a class="markdownIt-Anchor" href="#310-databus"></a> 3.10 Databus</h4>
<p>直接使用原生 SDK 的问题</p>
<ol>
<li>客户端配置较为复杂</li>
<li>不支持动态配置，更改配置需要停掉服务</li>
<li>对于 latency 不是很敏感的业务，batch 效果不佳</li>
</ol>
<p>使用Databus 的优点</p>
<ol>
<li>简化消息队列客户端复杂度</li>
<li>解耦业务与 Topic</li>
<li>缓解集群压力，提高吞吐</li>
</ol>
<h4 id="311-mirror"><a class="markdownIt-Anchor" href="#311-mirror"></a> 3.11 Mirror</h4>
<p>思考：是否可以通过多机房部署的方式，解决跨 Region 读写的问题？</p>
<p>使用 Mirror 通过最终一致的方式，解决跨 Region 读写问题。</p>
<h4 id="312-index"><a class="markdownIt-Anchor" href="#312-index"></a> 3.12 Index</h4>
<p>思考：如何通过写入的 LogId、UserId 或者其他的业务字段进行消息的查询？</p>
<p>直接在 BMQ 中将数据结构化，配置索引 DDL，异步构建索引后，通过 Index Query 服务读出数据。</p>
<h4 id="313-parquet"><a class="markdownIt-Anchor" href="#313-parquet"></a> 3.13 Parquet</h4>
<p>Apache Parquet 是 Hadoop 生态圈中一种新型列式存储格式，它可以兼容 Hadoop 生态圈中大多数计算框架（Hadoop、Spark等），被多种查询引擎支持（Hive、Impala、Drill 等）。</p>
<ul>
<li>
<p>有行式存储和列式存储</p>
</li>
<li>
<p>直接在 BMQ 中将数据结构化，通过 Parquet Engine，可以使用不同的方式构建 Parquet 格式文件</p>
</li>
</ul>
<h4 id="小结"><a class="markdownIt-Anchor" href="#小结"></a> 小结</h4>
<ol>
<li>BMQ 的框架模型（解决Kafka 存在的问题）</li>
<li>BMQ 的读写流程（Failover 机制，写入状态机）</li>
<li>BMQ 高级特性（泳道、Databus、Mirror、Index、Parquet）</li>
</ol>
<h3 id="4消息队列-rocketmq"><a class="markdownIt-Anchor" href="#4消息队列-rocketmq"></a> 4.消息队列 - RocketMQ</h3>
<p>使用场景：针对电商业务线，其业务涉及广泛，如注册、订单、库存、物流等；同时，也会涉及许多业务峰值时刻，如秒杀活动、周年庆、定期优惠等。</p>
<h4 id="41-rocketmq-基本概念"><a class="markdownIt-Anchor" href="#41-rocketmq-基本概念"></a> 4.1 RocketMQ 基本概念</h4>
<table>
<thead>
<tr>
<th style="text-align:center">名称</th>
<th style="text-align:center">Kafka</th>
<th style="text-align:center">RocketMQ</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">逻辑队列</td>
<td style="text-align:center">Topic</td>
<td style="text-align:center">Topic</td>
</tr>
<tr>
<td style="text-align:center">消息体</td>
<td style="text-align:center">Message</td>
<td style="text-align:center">Message</td>
</tr>
<tr>
<td style="text-align:center">标签</td>
<td style="text-align:center">无</td>
<td style="text-align:center">Tag</td>
</tr>
<tr>
<td style="text-align:center">分区</td>
<td style="text-align:center">Partition</td>
<td style="text-align:center">Consumer Queue</td>
</tr>
<tr>
<td style="text-align:center">生产者</td>
<td style="text-align:center">Producer</td>
<td style="text-align:center">Producer</td>
</tr>
<tr>
<td style="text-align:center">生产者集群</td>
<td style="text-align:center">无</td>
<td style="text-align:center">Producer Group</td>
</tr>
<tr>
<td style="text-align:center">消费者</td>
<td style="text-align:center">Consumer</td>
<td style="text-align:center">Consumer</td>
</tr>
<tr>
<td style="text-align:center">消费者集群</td>
<td style="text-align:center">Consumer Group</td>
<td style="text-align:center">Consumer Group</td>
</tr>
<tr>
<td style="text-align:center">集群控制器</td>
<td style="text-align:center">Controller</td>
<td style="text-align:center">Nameserver</td>
</tr>
</tbody>
</table>
<p>Producer，Consumer，Broker这三个部分，Kafka 和 RocketMQ 是一样的，而 Kafka 中的 Partition 概念在这里叫做 Consumer Queue。</p>
<h4 id="42-rocketmq-架构"><a class="markdownIt-Anchor" href="#42-rocketmq-架构"></a> 4.2 RocketMQ 架构</h4>
<ul>
<li>
<p>数据流也是通过 Producer 发送给 Broker 集群，再由 Consumer 进行消费</p>
</li>
<li>
<p>Broker 节点有 Master 和 Slave 的概念</p>
</li>
<li>
<p>NameServer 为集群提供轻量级服务发现和路由</p>
</li>
</ul>
<h4 id="43-存储模型"><a class="markdownIt-Anchor" href="#43-存储模型"></a> 4.3 存储模型</h4>
<p>对于一个 Broker 来说所有的消息的会 append 到一个 CommitLog 上面，然后按照不同的 Queue，重新 Dispatch 到不同的 Consumer 中，这样 Consumer 就可以按照 Queue 进行拉取消费</p>
<p>但需要注意的是，这里的 Consumer Queue 所存储的并不是真实的数据，真实的数据其实只存在 CommitLog 中，这里存的仅仅是这个 Queue 所有消息在 CommitLog 上面的位置，相当于是这个 Queue 的一个密集索引</p>
<h4 id="44-rocketmq-高级特性"><a class="markdownIt-Anchor" href="#44-rocketmq-高级特性"></a> 4.4 RocketMQ - 高级特性</h4>
<p>事务场景：事务消息</p>
<p>延迟发送：延迟消息</p>
<p>处理失败：消费重试和死信队列</p>
<p>具体参考<a class="link"   href="https://rocketmq.apache.org/zh/" >RocketMQ 中文官网 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h4 id="小结-2"><a class="markdownIt-Anchor" href="#小结-2"></a> 小结</h4>
<ol>
<li>RocketMQ 的基本概念（Queue、Tag）</li>
<li>RocketMQ 的底层原理（架构模型、存储模型）</li>
<li>RocketMQ 的高级特性（事务消息、重试和死信队列，延迟队列）</li>
</ol>
<h3 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h3>
<ul>
<li>前世今生：消息队列的发展历程</li>
<li>Kafka：基本概念、架构设计、底层原理、架构缺点</li>
<li>BMQ：架构设计、底层原理、与 Kafka 比较、高级特性</li>
<li>RocketMQ：架构设计、底层原理、高级特性</li>
</ul>
<h3 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h3>
<p><a class="link"   href="https://zhuanlan.zhihu.com/p/68052232" >再过半小时，你就能明白kafka的工作原理了 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://www.cnblogs.com/listenfwind/p/12662968.html" >详细解析kafka之 kafka消费者组与重平衡机制 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://rocketmq.apache.org/zh/" >RocketMQ 中文官网 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>青训营记录</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>深入浅出 RPC 框架</title>
    <url>/2023/02/10/golang-day14/</url>
    <content><![CDATA[<p>本文来源于第五届字节跳动青训营活动，已收录到<a class="link"   href="https://juejin.cn/post/7198526201221660729" >深入浅出 RPC 框架 | 青训营笔记 - 掘金 (juejin.cn) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，主要记录了对 RPC 框架的学习<span id="more"></span></p>
<h2 id="深入浅出-rpc-框架"><a class="markdownIt-Anchor" href="#深入浅出-rpc-框架"></a> 深入浅出 RPC 框架</h2>
<h3 id="1基本概念"><a class="markdownIt-Anchor" href="#1基本概念"></a> 1.基本概念</h3>
<h4 id="11-本地函数调用"><a class="markdownIt-Anchor" href="#11-本地函数调用"></a> 1.1 本地函数调用</h4>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">2</span></span><br><span class="line">    <span class="keyword">var</span> b = <span class="number">3</span></span><br><span class="line">    result := calculate(a, b)</span><br><span class="line">    fmt.Println(result)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">calculate</span><span class="params">(x, y <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    z := x * y</span><br><span class="line">    <span class="keyword">return</span> z</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<ol>
<li>将 a 和 b 压栈</li>
<li>通过函数指针找到 calculate 函数，进入函数取出栈中的值 2 和 3，将其赋予 x 和 y</li>
<li>计算 x * y，并将结果存在 z 中</li>
<li>将 z 的值压栈，然后从 calculate 返回</li>
<li>从栈中取出 z 返回值，并赋值给 result</li>
</ol>
<p>以上步骤只是为了说明原理。事实上编译器经常会做优化，对于参数和返回值少的情况会直接将其存放在寄存器，而不需要压栈弹栈的过程，甚至都不需要调用call，而直接做inline操作。</p>
<h4 id="12-远程函数调用rpc-remote-procedure-calls"><a class="markdownIt-Anchor" href="#12-远程函数调用rpc-remote-procedure-calls"></a> 1.2 远程函数调用（RPC — Remote Procedure Calls）</h4>
<p>RPC 需要解决的问题</p>
<ol>
<li>函数映射</li>
<li>数据转换成字节流</li>
<li>网络传输</li>
</ol>
<p>在本地调用中，函数体是直接通过函数指针来指定的，我们调用哪个方法，编译器会自动帮我们调用它相应的函数指针。但是在远程调用中，函数指针是不行的，因为两个进程的地址空间是完全不一样的。所有函数都有自己的一个ID，在做 RPC 时需要附上这个 ID，还需要一个 ID 和函数的对照关系表，通过 ID 找到对应的函数并执行。</p>
<h4 id="13-rpc-概念模型"><a class="markdownIt-Anchor" href="#13-rpc-概念模型"></a> 1.3 RPC 概念模型</h4>
<p>1984 年 Nelson  发表的论文《Implementing Remote Procedure Calls》中提出了 RPC 的过程由 5 个模型组成，User、User-Stub、RPC-Runtime、Server-Stub、Server。</p>
<h4 id="14-一次rpc-的完整过程"><a class="markdownIt-Anchor" href="#14-一次rpc-的完整过程"></a> 1.4 一次RPC 的完整过程</h4>
<h5 id="idlinterface-description-language文件"><a class="markdownIt-Anchor" href="#idlinterface-description-language文件"></a> IDL（Interface description language）文件</h5>
<p>IDL 通过一种中立的方式来描述接口，使得在不同平台上运行的对象和用不同语言编写的程序可以相互通信。</p>
<h5 id="生成代码"><a class="markdownIt-Anchor" href="#生成代码"></a> 生成代码</h5>
<p>通过编译器工具把 IDL 文件转换成语言对应的静态库。</p>
<h5 id="编解码"><a class="markdownIt-Anchor" href="#编解码"></a> 编解码</h5>
<p>从内存中表示到字节序列的转换称为编码，反之称为解码，也常叫做序列化和反序列化。</p>
<h5 id="通信协议"><a class="markdownIt-Anchor" href="#通信协议"></a> 通信协议</h5>
<p>规范了数据在网络中的传输内容和格式。除必须的请求/响应数据外，通常还会包含额外的元数据</p>
<h5 id="网络传输"><a class="markdownIt-Anchor" href="#网络传输"></a> 网络传输</h5>
<p>通常是基于成熟的网络库走 TCP/UDP 传输。</p>
<h4 id="15-rpc-的优势"><a class="markdownIt-Anchor" href="#15-rpc-的优势"></a> 1.5 RPC 的优势</h4>
<ol>
<li>单一职责，有利于分工协作和运维开发。开发（采用不同的语言）、部署以及运维（上线独立）都是独立的。</li>
<li>可扩展性强，资源使用率更高。例如压力过大时可以独立扩充资源，底层基础服务可以复用，节省资源。</li>
<li>故障隔离，服务的整体可靠性更高。某个模块发生故障，不会影响整体的可靠性。</li>
</ol>
<h4 id="16-rpc-带来的问题"><a class="markdownIt-Anchor" href="#16-rpc-带来的问题"></a> 1.6 RPC 带来的问题</h4>
<ol>
<li>服务宕机，如何处理</li>
<li>在调用过程中发生网络异常，如何保证消息的可达性</li>
<li>请求量突增导致服务无法及时处理，有哪些应对措施</li>
</ol>
<h4 id="小结"><a class="markdownIt-Anchor" href="#小结"></a> 小结</h4>
<ol>
<li>本地函数调用和 RPC 调用的区别：函数映射、数据转换成字节流、网络传输</li>
<li>RPC 的概念模型：User、User-Stub、RPC-Runtime、Server-Stub、Server</li>
<li>一次 RPC 的完整过程，RPC 的基本概念定义</li>
<li>RPC 带来好处的同时也带来了不少新的问题，这些问题由 RPC 框架来解决</li>
</ol>
<h3 id="2分层设计以-apache-thrift-为例"><a class="markdownIt-Anchor" href="#2分层设计以-apache-thrift-为例"></a> 2.分层设计（以 Apache Thrift 为例）</h3>
<h4 id="21-apache-thrift"><a class="markdownIt-Anchor" href="#21-apache-thrift"></a> 2.1 Apache Thrift</h4>
<p>分为服务端 Server 和 客户端 Client</p>
<ul>
<li>Code：开发者自己编写的业务逻辑代码</li>
</ul>
<h4 id="22-编解码层"><a class="markdownIt-Anchor" href="#22-编解码层"></a> 2.2 编解码层</h4>
<ul>
<li>Service.Processor 和 read/write：通过代码生成工具把 IDL 文件 转换成不同语言对应的 lib 代码，里面封装了编解码逻辑</li>
<li>TProtocal：框架的编码层</li>
</ul>
<h4 id="23-编解码层-生成代码"><a class="markdownIt-Anchor" href="#23-编解码层-生成代码"></a> 2.3 编解码层 — 生成代码</h4>
<p>Client 和 Server 依赖同一份 IDL 文件，生成不同语言的 CodeGen。</p>
<h4 id="24-编解码层-数据格式"><a class="markdownIt-Anchor" href="#24-编解码层-数据格式"></a> 2.4 编解码层 — 数据格式</h4>
<ul>
<li>
<p>语言特定的编码格式</p>
<p>许多编程语言都内建了将内存对象编码为字节序列的支持，例如 Java 有 <code>java.io.Serializable</code>。</p>
<p>这种编码形式好处是非常方便，可以用很少的额外代码实现内存对象的保存与恢复，这类编码通常与特定的编程语言深度绑定，其他语言很难读取这种数据。如果以这类编码存储或传输数据，那就和这门语言绑定在一起。安全和兼容性也是问题。</p>
</li>
<li>
<p>文本格式</p>
<p>JSON、XML、CSV 等文本格式，具有人类可读性。</p>
<p>数字的编码多有歧义之处，比如 XML 和 CSV 不能区分数字和字符串。</p>
<p>JSON 虽然区分字符串和数字，但是不区分整数和浮点数，而且不能指定精度，处理大量数据时，这个问题更加严重；没有强制模型约束，实际操作中往往只能采用文档方式来进行约定，这可能会给调试带来一些不便。 由于JSON在一些语言中的序列化和反序列化需要采用反射机制，所以在性能方面比较差。</p>
</li>
<li>
<p>二进制编码</p>
<p>具备跨语言和高性能等优点，常见的有 Thrift 的 BinaryProtocol，Protobuf 等，实现可以有很多种，TLV 编码和 Varint 编码等。</p>
</li>
</ul>
<h4 id="25-编解码层-二进制编码"><a class="markdownIt-Anchor" href="#25-编解码层-二进制编码"></a> 2.5 编解码层 — 二进制编码</h4>
<p>TLV 编码</p>
<ul>
<li>Tag：标签，可以理解为类型</li>
<li>Length：长度</li>
<li>Value：值，Value 也可以是个 TLV 嵌套结构</li>
</ul>
<p>IDL 源代码</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">struct Person &#123;</span><br><span class="line">    1: required string		 userName,</span><br><span class="line">    2: optional i64	         favoriteNumber,</span><br><span class="line">    3: optional list&lt;string&gt; interests </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>转换成编码，以 Thrift BinaryProtocol 为例，下面的二进制编码转换为十六进制表示，方便观察</p>
<p><strong>第一个字段 userName 对应的编码</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">type 11(string)</th>
<th style="text-align:center">field tag(1)</th>
<th style="text-align:center">length(6)</th>
<th style="text-align:center">value(Martin)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">0b</td>
<td style="text-align:center">00 01</td>
<td style="text-align:center">00 00 00 06</td>
<td style="text-align:center">4d 61 72 69 6e</td>
</tr>
</tbody>
</table>
<p><strong>第二个字段 favoriteNumber 对应的编码</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">type 10(i64)</th>
<th style="text-align:center">field tag(2)</th>
<th style="text-align:center">value(1337)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">0a</td>
<td style="text-align:center">00 02</td>
<td style="text-align:center">00 00 00 00 00 00 05 39</td>
</tr>
</tbody>
</table>
<p><strong>第三个字段 interests 对应的编码</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">type 15(list)</th>
<th style="text-align:center">field tag(3)</th>
<th style="text-align:center">item type11(string)</th>
<th style="text-align:center">list items(2)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">0f</td>
<td style="text-align:center">00 03</td>
<td style="text-align:center">0b</td>
<td style="text-align:center">00 00 00 02</td>
</tr>
</tbody>
</table>
<p>假设其中有两个值 daydreaming 和 hacking，其对应的编码如下</p>
<table>
<thead>
<tr>
<th style="text-align:center">length</th>
<th style="text-align:center">value</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">00 00 00 0b</td>
<td style="text-align:center">64 61 79 64 72 65 61 6d 69 6e 67</td>
</tr>
<tr>
<td style="text-align:center">00 00 00 07</td>
<td style="text-align:center">68 61 63 6b 69 6e 67</td>
</tr>
</tbody>
</table>
<p>最后再用 <code>00</code> 编码作为结尾。这里打包后压缩共 59 个字节。</p>
<p>TLV 编码结构清晰简单，并且扩展性较好，但是由于增加了 Type 和 Length 两个冗余信息，有额外的内存开销，特别是在大部分字段都是基本类型的情况下有不小的空间浪费。</p>
<h4 id="26-编解码层-选型"><a class="markdownIt-Anchor" href="#26-编解码层-选型"></a> 2.6 编解码层 — 选型</h4>
<ul>
<li>
<p>兼容性：支持自动增加新的字段，而不会影响老的服务，这将提高系统的灵活度。</p>
<blockquote>
<p>兼容性：</p>
<p>移动互联时代，业务系统需求的更新周期变得更快，新的需求不断涌现，而老的系统还是需要继续维护。如果序列化协议具有良好的可扩展性，支持自动增加新的业务字段，而不影响老的服务，这将大大提供系统的灵活度。</p>
</blockquote>
</li>
<li>
<p>通用性：支持跨平台、跨语言。</p>
<blockquote>
<p>通用性有两个层面的意义：</p>
<p>第一、技术层面，序列化协议是否支持跨平台、跨语言。如果不支持，在技术层面上的通用性就大大降低了。</p>
<p>第二、流行程度，序列化和反序列化需要多方参与，很少人使用的协议往往意味着昂贵的学习成本；另一方面，流行度低的协议，往往缺乏稳定而成熟的跨语言、跨平台的公共包。</p>
</blockquote>
</li>
<li>
<p>性能：从空间和时间两个维度来考虑，即编码后数据大小和编码耗费时长。</p>
<blockquote>
<p>性能：</p>
<p>第一、空间开销（Verbosity）， 序列化需要在原有的数据上加上描述字段，以为反序列化解析之用。如果序列化过程引入的额外开销过高，可能会导致过大的网络，磁盘等各方面的压力。对于海量分布式存储系统，数据量往往以TB为单位，巨大的的额外空间开销意味着高昂的成本。</p>
<p>第二、时间开销（Complexity），复杂的序列化协议会导致较长的解析时间，这可能会使得序列化和反序列化阶段成为整个系统的瓶颈。</p>
</blockquote>
</li>
</ul>
<h4 id="27-协议层"><a class="markdownIt-Anchor" href="#27-协议层"></a> 2.7 协议层</h4>
<ul>
<li>TTransport：框架的协议层</li>
</ul>
<h4 id="28-协议层-概念"><a class="markdownIt-Anchor" href="#28-协议层-概念"></a> 2.8 协议层 — 概念</h4>
<p>协议是双方确定的交流语义。比如，设计一个字符串传输的协议，它允许客户端发送一个字符串，服务端接收到对应的字符串。这个协议很简单，首先发送一个4字节的消息总长度，然后再发送1字节的字符集 charset 长度，接下来就是消息的 payload，字符集名称和字符串正文。</p>
<ul>
<li>
<p>特殊结束符：一个特殊字符作为每个协议单元结束的标识。</p>
<blockquote>
<p>对于一个协议单元必须要全部读入才能够进行处理，除此之外必须要防止用户传输的数据不能同结束符相同，否则就会出现紊乱</p>
<p>HTTP 协议头就是以回车(CR)加换行(LF)符号序列结尾</p>
</blockquote>
</li>
<li>
<p>变长协议：以定长加不定长的部分组成，其中定长的部分需要描述不定长的内容长度。</p>
<blockquote>
<p>一般都是自定义协议，有 header 和 payload 组成，由定长加不定长的部分组成，其中定长的部分需要描述不定长的内容长度，使用比较广泛</p>
</blockquote>
</li>
</ul>
<h4 id="29-协议层-协议构造"><a class="markdownIt-Anchor" href="#29-协议层-协议构造"></a> 2.9 协议层 — 协议构造</h4>
<ul>
<li>
<p>Length：32bits，包括数据包剩余部分的字节大小，不包含自身长度数据包的大小</p>
</li>
<li>
<p>Header Magic：16bits，值为 0x1000，用于标识版本信息，协议解析时快速校验</p>
</li>
<li>
<p>Flags：16bits，为预留字段，暂未使用，默认值为 0x0000</p>
</li>
<li>
<p>Sequence Number：32bits，表示数据包的 seqID，可用于多路复用，最好确保单个连接内递增</p>
</li>
<li>
<p>Header Size：16bits，等于头部长度字节数/4，头部长度计算从第14个字节开始计算，一直到 PAYLOAD 前（备注：header 的最大长度为 64K）</p>
</li>
<li>
<p>Protocol ID：uint8 编码，编解码方式有 Binary 和 Compact 两种。</p>
<blockquote>
<p>uint8 编码，取值有：</p>
<p>Protocol ID Binary = 0</p>
<p>Protocol ID Compact = 2</p>
</blockquote>
</li>
<li>
<p>Number Transforms：uint8 编码，表示 Transform 个数。</p>
</li>
<li>
<p>Transform ID：uint8 编码，表示压缩方式，如 zlib 和 snappy</p>
</li>
<li>
<p>Info ID：uint8 编码，用于传递一些定制的 meta 信息</p>
</li>
<li>
<p>Payload：消息体</p>
</li>
</ul>
<h4 id="210-协议层-协议解析"><a class="markdownIt-Anchor" href="#210-协议层-协议解析"></a> 2.10 协议层 — 协议解析</h4>
<p>— Peek —&gt; Magic Number — Peek —&gt; Playload Codec — Decode —&gt; Payload</p>
<h4 id="211-网络通信层"><a class="markdownIt-Anchor" href="#211-网络通信层"></a> 2.11 网络通信层</h4>
<ul>
<li>Network IO：框架的网络通信层</li>
</ul>
<h4 id="212-网络通信层-sockets-api"><a class="markdownIt-Anchor" href="#212-网络通信层-sockets-api"></a> 2.12 网络通信层 — Sockets API</h4>
<ul>
<li>
<p>套接字（Socket）编程<strong>是一种编程模式</strong>。在这种模式中，使用和操作套接字来创建软件之间的连接。 套接字用于连接不同计算机之间或同一台计算机内的软件，以便程序可以共享数据。 套接字编程可用于即时消息、Internet浏览器，文件共享程序，以及强制计算机连接到系统的任何程序。</p>
</li>
<li>
<p>套接字编程中的客户端必须知道两个信息：服务器的 IP 地址，以及端口号。</p>
</li>
<li>
<p>socket 函数创建一个套接字，bind 将一个套接字绑定到一个地址上。listen 监听进来的连接。</p>
</li>
<li>
<p>backlog 的含义有点复杂，这里先简单的描述：指定挂起的连接队列的长度，当客户端连接的时候，服务器可能正在处理其他逻辑而未调用accept 接受连接，此时会导致这个连接被挂起，内核维护挂起的连接队列，backlog 则指定这个队列的长度。accept 函数从队列中取出连接请求并接收它，然后这个连接就从挂起队列移除。如果队列未满，客户端调用 connect 马上成功，如果满了可能会阻塞等待队列未满（实际上在Linux中测试并不是这样的结果）。Linux 的 backlog 默认是128，通常情况下，我们也指定为 128 即可。</p>
</li>
<li>
<p>connect 客户端向服务器发起连接，accept 接收一个连接请求，如果没有连接则会一直阻塞直到有连接进来。得到客户端的 fd 之后，就可以调用 read，write 函数和客户端通讯，读写方式和其他 I/O 类似。</p>
</li>
<li>
<p>read 从 fd 读数据，socket 默认是阻塞模式的，如果对方没有写数据，read 会一直阻塞着。</p>
</li>
<li>
<p>write 在 fd 写数据，socket 默认是阻塞模式的，如果对方没有写数据，write 会一直阻塞着。</p>
</li>
<li>
<p>socket 关闭套接字，当另一端 socket 关闭后，这一端读写的情况：</p>
<ul>
<li>尝试去读会得到一个 EOF，并返回 0。</li>
<li>尝试去写会触发一个SIGPIPE信号，并返回 -1 和 errno=EPIPE，SIGPIPE 的默认行为是终止程序，所以通常我们应该忽略这个信号，避免程序终止。 如果这一端不去读写，我们可能没有办法知道对端的 socket 是否关闭。</li>
</ul>
</li>
</ul>
<h4 id="213-网络通信层-网络库"><a class="markdownIt-Anchor" href="#213-网络通信层-网络库"></a> 2.13 网络通信层 — 网络库</h4>
<ul>
<li>提供易用 API
<ul>
<li>封装底层 Socket API</li>
<li>连接管理和事件分发</li>
</ul>
</li>
<li>功能
<ul>
<li>协议支持：tcp、udp 和 uds 等</li>
<li>优雅退出、异常处理等</li>
</ul>
</li>
<li>性能
<ul>
<li>应用层 buffer 减少 copy</li>
<li>高性能定时器、对象池等</li>
</ul>
</li>
</ul>
<h4 id="小结-2"><a class="markdownIt-Anchor" href="#小结-2"></a> 小结</h4>
<ol>
<li>RPC 框架主要核心有三层：编解码层、协议层和网络通信层</li>
<li>二进制编解码的实现原理和选型要点</li>
<li>协议的一般构造，以及框架协议解析的基本流程</li>
<li>Socket API 的调用流程，以及选型网络库时要考虑的核心指标</li>
</ol>
<h3 id="3关键指标"><a class="markdownIt-Anchor" href="#3关键指标"></a> 3.关键指标</h3>
<h4 id="31-稳定性-保障策略"><a class="markdownIt-Anchor" href="#31-稳定性-保障策略"></a> 3.1 稳定性 — 保障策略</h4>
<ul>
<li>
<p>熔断：保护调用方，防止被调用的服务出现问题而影响到整个链路</p>
<blockquote>
<p>一个服务 A 调用服务 B 时，服务 B 的业务逻辑又调用了服务 C，而这时服务 C 响应超时了，由于服务 B 依赖服务 C，C 超时直接导致 B 的业务逻辑一直等待，而这个时候服务 A 继续频繁地调用服务 B，服务 B 就可能会因为堆积大量的请求而导致服务宕机，由此就导致了服务雪崩的问题</p>
</blockquote>
</li>
<li>
<p>限流：保护被调用方，防止大流量把服务压垮</p>
<blockquote>
<p>当调用端发送请求过来时，服务端在执行业务逻辑之前先执行检查限流逻辑，如果发现访问量过大并且超出了限流条件，就让服务端直接降级处理或者返回给调用方一个限流异常</p>
</blockquote>
</li>
<li>
<p>超时控制：避免资源浪费在不可用节点上</p>
<blockquote>
<p>当下游的服务因为某种原因响应过慢，下游服务主动停掉一些不太重要的业务，释放出服务器资源，避免浪费资源</p>
</blockquote>
</li>
</ul>
<p>从某种程度上讲超时、限流和熔断也是一种服务降级的手段</p>
<h4 id="32-稳定性-请求成功率"><a class="markdownIt-Anchor" href="#32-稳定性-请求成功率"></a> 3.2 稳定性 — 请求成功率</h4>
<ul>
<li>负载均衡</li>
<li>重试</li>
</ul>
<blockquote>
<p>注意，重试有放大故障的风险，重试会直接加大下游的负载。</p>
<p>假设 A 服务调用 B 服务，重试次数设置为 r（包括首次请求），当 B 高负载时很可能调用不成功，这时 A 调用失败重试 B ，B 服务的被调用量快速增大，最坏情况下可能放大到 r 倍，不仅不能请求成功，还可能导致 B 的负载继续升高，甚至直接打挂。</p>
<p>为了防止重试风暴，需要限制单点重试和限制链路重试</p>
</blockquote>
<h4 id="33-稳定性-长尾请求"><a class="markdownIt-Anchor" href="#33-稳定性-长尾请求"></a> 3.3 稳定性 — 长尾请求</h4>
<p>长尾请求一般是指明显高于均值的那部分占比较小的请求。</p>
<blockquote>
<p>业界关于延迟有一个常用的P99标准， P99 单个请求响应耗时从小到大排列，顺序处于99%位置的值即为P99 值，那后面这 1%就可以认为是长尾请求。</p>
</blockquote>
<p>在较复杂的系统中，长尾延时总是会存在。造成这个的原因非常多，常见的有网络抖动，GC，系统调度。可以使用 Backup Request 的机制来减少延时。</p>
<blockquote>
<p>我们预先设定一个阈值 t3（比超时时间小，通常建议是 RPC 请求延时的 pct99 ），当 Req1 发出去后超过 t3 时间都没有返回，那我们直接发起重试请求 Req2 ，这样相当于同时有两个请求运行。然后等待请求返回，只要 Resp1 或者 Resp2 任意一个返回成功的结果，就可以立即结束这次请求，这样整体的耗时就是 t4 ，它表示从第一个请求发出到第一个成功结果返回之间的时间，相比于等待超时后再发出请求，这种机制能大大减少整体延时。</p>
</blockquote>
<h4 id="34-稳定性-注册中间件"><a class="markdownIt-Anchor" href="#34-稳定性-注册中间件"></a> 3.4 稳定性 — 注册中间件</h4>
<p>Kitex 框架中的 Client 和 Server 创建接口均采用 Option 模式，提供了极大的灵活性，很方便就能注入这些稳定性策略。</p>
<h4 id="35-易用性"><a class="markdownIt-Anchor" href="#35-易用性"></a> 3.5 易用性</h4>
<ul>
<li>开箱即用：合理的默认参数选项、丰富的文档。</li>
<li>周边工具：生成代码工具、脚手架工具</li>
<li>简单易用的命令行工具
<ul>
<li>生成服务代码脚手架</li>
<li>支持 protobuf 和 thrift</li>
<li>内置功能丰富的选项</li>
<li>支持自定义的生成代码插件</li>
</ul>
</li>
</ul>
<p>Kitex 使用 Suite 来打包自定义的功能，提供 ”一键配置基础依赖“ 的优势。</p>
<h4 id="36-扩展性"><a class="markdownIt-Anchor" href="#36-扩展性"></a> 3.6 扩展性</h4>
<ul>
<li>Middleware</li>
<li>Option</li>
<li>编解码层</li>
<li>协议层</li>
<li>网络传输层</li>
<li>代码生成工具插件扩展</li>
</ul>
<blockquote>
<p>一次请求发起首先会经过治理层面，治理相关的逻辑被封装在 middleware 中，这些 middleware 会被构造成一个有序调用链，逐个执行，比如服务发现、路由、负载均衡、超时控制等，mw 执行后就会进入到 remote 模块，完成与远端的通信</p>
</blockquote>
<h4 id="37-观测性"><a class="markdownIt-Anchor" href="#37-观测性"></a> 3.7 观测性</h4>
<ul>
<li>Log 日志、Metrics 指标、Trace 链路</li>
<li>内置观测性服务</li>
</ul>
<blockquote>
<p>除了传统的 Log、Metric、Trace 三件套之外，对于框架来说可能还不够，还有些框架自身状态需要暴露出来，例如当前的环境变量、配置、Client/Server初始化参数、缓存信息等</p>
</blockquote>
<h4 id="38-高性能"><a class="markdownIt-Anchor" href="#38-高性能"></a> 3.8 高性能</h4>
<p>场景</p>
<ul>
<li>单机、集群</li>
<li>单连接、多连接</li>
<li>单/多 client、单/多 server</li>
<li>不同大小的请求包</li>
<li>不同请求类型，例如 pingpong、streaming 等，参考<a class="link"   href="https://www.cloudwego.io/zh/docs/kitex/tutorials/basic-feature/message_type/" >消息类型 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
<p>目标</p>
<ul>
<li>高吞吐</li>
<li>低延迟</li>
</ul>
<blockquote>
<p>这里分两个维度，高性能意味着高吞吐和低延迟，两者都很重要，甚至大部分场景下低延迟更重要。</p>
</blockquote>
<p>手段</p>
<ul>
<li>连接池</li>
<li>多路复用</li>
<li>高性能编解码协议</li>
<li>高性能网络库</li>
</ul>
<p>多路复用可以大大减少了连接带来的资源消耗，并且提升了服务端性能。</p>
<blockquote>
<p>连接多路复用和非连接多路复用</p>
<p>调用端向服务端的一个节点发送请求，并发场景下，如果是非连接多路复用，每个请求都会持有一个连接，直到请求结束连接才会被关闭或者放入连接池复用，并发量与连接数是对等的关系。 而使用连接多路复用，所有请求都可以在一个连接上完成，可以明显看到连接资源利用上的差异</p>
</blockquote>
<h4 id="小结-3"><a class="markdownIt-Anchor" href="#小结-3"></a> 小结</h4>
<ol>
<li>框架通过中间件来注入各种服务治理策略，保障服务的稳定性</li>
<li>通过合理的默认配置和方便的命令行工具可以提升框架的易用性</li>
<li>框架应当提供丰富的扩展点，例如核心的传输层和协议层</li>
<li>观测性除了传统的 Log、Metrics 和 Trace 之外，内置状态暴露服务也很有必要</li>
<li>性能可以从多个层面去优化，例如选择高性能的编解码协议和网络库</li>
</ol>
<p><font color='red'>以下是内部开发者的分享，也整理在了青训营活动学习笔记中，如有侵权请联系笔者删除</font></p>
<h3 id="4企业实践"><a class="markdownIt-Anchor" href="#4企业实践"></a> 4.企业实践</h3>
<h4 id="41-整体架构-kitex"><a class="markdownIt-Anchor" href="#41-整体架构-kitex"></a> 4.1 整体架构 — Kitex</h4>
<ul>
<li>
<p>Kitex Core：核心组件</p>
<blockquote>
<p>core 是 Kitex的的主干逻辑，定义了框架的层次结构、接口，还有接口的默认实现，client 和 server 是对用户暴露的，client/server option 的配置都是在这两个package中提供的。还有client/server 的初始化，在 kitex_gen 生成代码时，用到的 client.go 和 server.go，在初始化 client 时调用的是 kitex_gen 中的方法，其实观察 kitex_gen 下 service package 的代码就知道这是对  client/server 的封装。</p>
<p>client/server 下的是框架治理层面的功能模块和交互元信息，remote 是与对端交互的模块，包括编解码和网络通信。</p>
</blockquote>
</li>
<li>
<p>Kitex Byted：与企业内部基础设施基础</p>
<blockquote>
<p>byted 是对字节内部的扩展，集成了内部的二方库还有与字节相关的非通用的实现，byted 部分是在生成代码中初始化 client 和 server 时通过 suite 集成进来的，这样实现的好处是与字节的内部特性解耦，方便后续开源拆分。</p>
</blockquote>
</li>
<li>
<p>Kitex Tool：代码生成工具</p>
<blockquote>
<p>tool 则是与生成代码相关的实现，生成代码工具就是编译这个包得到的，里面包括 idl 解析、校验、代码生成、插件支持、自更新等，未来生成代码逻辑还会做一些拆分，便于给用户提供更友好的扩展</p>
</blockquote>
</li>
<li>
<p>Kitex 官方仓库<a class="link"   href="https://github.com/cloudwego/kitex" >https://github.com/cloudwego/kitex <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</li>
</ul>
<h4 id="42-自研网络库-背景"><a class="markdownIt-Anchor" href="#42-自研网络库-背景"></a> 4.2 自研网络库 — 背景</h4>
<ul>
<li>
<p>原生库无法感知连接状态</p>
<p>在使用连接池时，池中存在失效连接，影响连接池的复用。</p>
</li>
<li>
<p>原生库存在 goroutine 暴涨的风险</p>
<p>一个连接一个 goroutine 的模式，由于连接利用率低下，存在大量 goroutine 占用调度开销，影响性能。</p>
<blockquote>
<ol>
<li>Go Net 使用 Epoll ET ，Netpoll 使用 LT。</li>
<li>Netpoll 在大包场景下会占用更多的内存。</li>
<li>Go Net 只有一个 Epoll 事件循环（因为 ET 模式被唤醒的少，且事件循环内无需负责读写，所以干的活少），而 Netpoll 允许有多个事件循环（循环内需要负责读写，干的活多，读写越重，越需要开更多 Loops）。</li>
<li>Go Net 一个连接一个 Goroutine，Netpoll 连接数和 Goroutine 数量没有关系，和请求数有一定关系，但是有 Gopool 重用。</li>
<li>Go Net 不支持 Zero Copy，甚至于如果用户想要实现 BufferdConnection 这类缓存读取，还会产生二次拷贝。Netpoll 支持管理一个 Buffer 池直接交给用户，且上层用户可以不使用 Read(p []byte) 接口而使用特定零拷贝读取接口对 Buffer 进行管理，实现零拷贝能力的传递。</li>
</ol>
</blockquote>
</li>
</ul>
<h4 id="43-自研网络库-netpoll"><a class="markdownIt-Anchor" href="#43-自研网络库-netpoll"></a> 4.3 自研网络库 — Netpoll</h4>
<ol>
<li>
<p>go net 无法检测连接对端关闭（无法感知连接状态）</p>
<ol>
<li>在使用长连接池时，池中存在失效连接，严重影响了连接池的使用和效率。</li>
<li>希望通过引入 epoll 主动监听机制，感知连接状态。</li>
</ol>
<p>解决无法感知连接问题</p>
</li>
<li>
<p>go net 缺乏对协程数量的管理</p>
<ol>
<li>
<p>Kitex 采取一个连接一个 goroutine 模式，由于连接利用率低，服务存在较多无用的 goroutine，占用调度开销，影响性能。</p>
</li>
<li>
<p>希望建立协程池，提升性能。</p>
<p>netpoll 基于 epoll，同时采用 Reactor 模型，对于服务端则是主从 Reactor 模型，服务端的 主reactor 用于接受调用端的连接，然后将建立好的连接注册到某个 从Reactor 上， 从Reactor 负责监听连接上的读写事件，然后将读写事件分发到协程池里进行处理。</p>
</li>
</ol>
<p>解决 goroutine 暴涨的风险</p>
</li>
<li>
<p>提升性能</p>
<p>为了提升性能，引入了 Nocopy Buffer，向上层提供 NoCopy 的调用接口，编解码层面零拷贝</p>
</li>
</ol>
<h4 id="44-扩展性设计"><a class="markdownIt-Anchor" href="#44-扩展性设计"></a> 4.4 扩展性设计</h4>
<p>支持多协议，也支持灵活的自定义协议扩展</p>
<blockquote>
<p>kitex 支持多协议的并且也是可扩展的，交互方式上前面已经说过支持ping-pong、streaming、oneway</p>
<p>编解码支持 thrift、Protobuf 应用层协议支持 TTHeader、Http2、也支持裸的 thrift 协议</p>
<p>传输层目前支持 TCP，未来考虑支持 UDP、kernel-bypass 的 RDMA</p>
<p>框架内部不强依赖任何协议和网络模块，可以基于接口扩展，在传输层上则可以集成其他库进行扩展。</p>
<p>目前集成的有自研的 Netpoll，基于 netpoll 实现的 http2 库，用于 mesh 场景通过共享内存高效通信的 shm-ipc，以后也可以增加对 RDMA 支持的扩展</p>
</blockquote>
<h4 id="45-性能优化-网络库优化"><a class="markdownIt-Anchor" href="#45-性能优化-网络库优化"></a> 4.5 性能优化 — 网络库优化</h4>
<ul>
<li>调度优化
<ul>
<li>epoll_wait 在调度上的控制</li>
<li>gopool 重用 gorutine 降低同时运行协程数</li>
</ul>
</li>
<li>LinkBuffer
<ul>
<li>读写并行无锁，支持 nocopy 的流式读写</li>
<li>高效扩缩容</li>
<li>Nocopy Buffer 池化，减少 GC</li>
</ul>
</li>
<li>Pool
<ul>
<li>引入内存池和对象池，减少 GC 开销</li>
</ul>
</li>
</ul>
<h4 id="46-性能优化-编解码优化"><a class="markdownIt-Anchor" href="#46-性能优化-编解码优化"></a> 4.6 性能优化 — 编解码优化</h4>
<ul>
<li>Codegen
<ul>
<li>预计算并预分配内存，减少内存操作次数，包括内存分配和拷贝</li>
<li>Inline 内联减少函数调用次数和避免不必要的反射操作等</li>
<li>自研 Go 语言实现的 Thrift IDL 解析和代码生成器，支持完善的 Thrift IDL 语法和语义检查，并支持插件机制 - Thriftgo</li>
<li>Thriftgo 官方仓库<a class="link"   href="https://github.com/cloudwego/thriftgo" >https://github.com/cloudwego/thriftgo <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
</li>
<li>JIT
<ul>
<li>使用 JIT 编译技术改善用户体验的同时带来更强的编解码性能，减轻用户维护生成代码的负担</li>
<li>基于 JIT 编译技术的高性能动态 Thrift 编解码器 - Frugal</li>
<li>Frugal 官方仓库<a class="link"   href="https://github.com/cloudwego/frugal" >https://github.com/cloudwego/frugal <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
</li>
</ul>
<blockquote>
<p>序列化和反序列的性能优化从大的方面来看可以从时间和空间两个维度进行优化。从兼容已有的 Binary 协议来看，空间上的优化似乎不太可行，只能从时间维度进行优化，包括下面的几点：</p>
<p>代码生成 code-gen 的优点是库开发者实现起来相对简单，缺点是增加业务代码的维护成本和局限性。</p>
<p>JIT编译（just-in-time compilation）狭义来说是当某段代码即将第一次被执行时进行编译，因而叫“即时编译”。</p>
<p>即时编译 JIT 则将编译过程移到了程序的加载（或首次解析）阶段，可以一次性编译生成对应的 codec 并高效执行，目前内部开发人员正在尝试，压测数据表明性能收益还是挺不错的，目的是不损失性能的前提下，减轻用户的维护负担生成代码的负担。</p>
</blockquote>
<h4 id="47-合并部署"><a class="markdownIt-Anchor" href="#47-合并部署"></a> 4.7 合并部署</h4>
<p>微服务过微，传输和序列化开销越来越大。可以将亲和性强的服务实例尽可能调度到同一个物理机，远程 RPC 调用优化为本地 IPC 调用。</p>
<ul>
<li>中心化的部署调度和流量控制</li>
<li>基于共享内存的通信协议</li>
<li>定制化的服务发现和连接池实现</li>
<li>定制化的服务启动和监听逻辑</li>
</ul>
<h4 id="小结-4"><a class="markdownIt-Anchor" href="#小结-4"></a> 小结</h4>
<ol>
<li>介绍了 Kitex 的整体架构</li>
<li>介绍了自研网络库 Netpoll 的背景和优势</li>
<li>从扩展性和性能优化两个方面分享相关实践</li>
<li>介绍了企业内部正在尝试的新的微服务形态：合并部署</li>
</ol>
<h3 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h3>
<ol>
<li>从本地函数调用引出 RPC 的基本概念</li>
<li>重点说明了 RPC 框架核心的三层，编解码层、协议层和网络层</li>
<li>围绕 RPC 框架的核心指标，例如稳定性、可扩展性和高性能等，展开说明相关的知识</li>
<li>分享了字节跳动高性能 RPC 框架 Kitex 的相关实践</li>
</ol>
<h3 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h3>
<p><a class="link"   href="https://juejin.cn/post/6844903622380093447" >Apache Thrift系列详解(一) - 概述与入门 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://zhuanlan.zhihu.com/p/84250836" >详解varint编码原理 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://zhuanlan.zhihu.com/p/566312289" >几款主流的压缩算法对比Zlib,snappy,lz4 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://blog.csdn.net/DataFlux/article/details/125259244" >可观测性的三大支柱：Metrics、Trace、Log <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://www.cloudwego.io/zh/docs/kitex/tutorials/basic-feature/message_type/" >消息类型 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>青训营记录</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>存储的本质 - 状态</title>
    <url>/2023/02/22/golang-day15/</url>
    <content><![CDATA[<p>本文来源于第五届字节跳动青训营活动，已收录到<a class="link"   href="https://juejin.cn/post/7199279293755146297" >存储的本质 - 状态 | 青训营笔记 - 掘金 (juejin.cn) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，主要记录了对存储的学习<span id="more"></span></p>
<h2 id="存储的本质-状态"><a class="markdownIt-Anchor" href="#存储的本质-状态"></a> 存储的本质 - 状态</h2>
<h3 id="1经典案例"><a class="markdownIt-Anchor" href="#1经典案例"></a> 1.经典案例</h3>
<ul>
<li>数据的产生：注册账号等</li>
<li>数据的流动：从客户端到后端服务器，后端服务器到数据库，再到其他系统</li>
<li>数据的持久化：校验数据的合法性，修改内存，写入存储介质</li>
<li>潜在的问题
<ul>
<li>数据库如何保证数据不丢失</li>
<li>数据库如何支持多人同时修改</li>
<li>其他的存储系统</li>
<li>如何处理除结构化数据以外的数据</li>
<li>操作数据库的方式，使用什么编程语言</li>
</ul>
</li>
</ul>
<h3 id="2存储和数据库简介"><a class="markdownIt-Anchor" href="#2存储和数据库简介"></a> 2.存储和数据库简介</h3>
<h4 id="21-存储系统"><a class="markdownIt-Anchor" href="#21-存储系统"></a> 2.1 存储系统</h4>
<h5 id="系统概览"><a class="markdownIt-Anchor" href="#系统概览"></a> 系统概览</h5>
<p>什么是存储系统？</p>
<p>一个提供了读写、控制类接口，能够安全有效地把数据持久化的软件，就可以称为存储系统。</p>
<p>存储系统的特征</p>
<ul>
<li>作为后端软件的底座，性能敏感</li>
<li>存储系统软件架构，容易受硬件影响</li>
<li>存储系统代码，既“简单”又“复杂”</li>
</ul>
<h5 id="存储器层级结构"><a class="markdownIt-Anchor" href="#存储器层级结构"></a> 存储器层级结构</h5>
<p>参考<a class="link"   href="https://www.cnblogs.com/RadiumGalaxy/p/17122372.html" >https://www.cnblogs.com/RadiumGalaxy/p/17122372.html <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h5 id="数据从应用到存储介质"><a class="markdownIt-Anchor" href="#数据从应用到存储介质"></a> 数据从应用到存储介质</h5>
<ul>
<li>缓存：很重要，贯穿整个存储体系</li>
<li>拷贝：很昂贵，应该尽量减少</li>
<li>硬件设备多种多样，需要有抽象统一的接入层</li>
</ul>
<h5 id="raid-技术"><a class="markdownIt-Anchor" href="#raid-技术"></a> RAID 技术</h5>
<p>单机存储系统如何做到高性能、高性价比、高可靠性？</p>
<p><strong>R</strong>edundant <strong>A</strong>rray of <strong>I</strong>nexpensive <strong>D</strong>isks</p>
<p>RAID 出现的背景</p>
<ul>
<li>单块大容量磁盘的价格 &gt; 多块小容量磁盘</li>
<li>单块磁盘的写入性能 &lt; 多块磁盘的并发写入性能</li>
<li>单块磁盘的容错能力有限，不够安全</li>
</ul>
<p>RAID 0</p>
<ul>
<li>多块磁盘简单组合</li>
<li>数据条带化存储，提高磁盘带宽</li>
<li>没有额外的容错设计</li>
</ul>
<p>RAID 1</p>
<ul>
<li>一块磁盘对应一块额外镜像盘</li>
<li>真实空间利用率仅 50%</li>
<li>容错能力强</li>
</ul>
<p>RAID 0 + 1</p>
<ul>
<li>结合了 RAID 0 和 RAID 1</li>
<li>真实空间利用率仅 50%</li>
<li>容错能力强，写入带宽好</li>
</ul>
<h4 id="22-数据库"><a class="markdownIt-Anchor" href="#22-数据库"></a> 2.2 数据库</h4>
<p>关系型数据库和非关系型数据库</p>
<h5 id="概览"><a class="markdownIt-Anchor" href="#概览"></a> 概览</h5>
<p>关系（Relation）</p>
<ul>
<li>Edgar.F.Codd 于1970 年提出“关系模型”</li>
<li>关系 = 集合 = 任意元素组成的若干有序偶对，反映了事物之间的关系</li>
<li>关系代数 = 对关系作运算的抽象查询语言，如交、并、笛卡儿积等</li>
<li>SQL = 一种 DSL = 方便人类阅读的关系代数表达形式</li>
</ul>
<h5 id="关系型数据库特点"><a class="markdownIt-Anchor" href="#关系型数据库特点"></a> 关系型数据库特点</h5>
<p>关系型数据库是存储系统，但是在存储系统之外，又发展出其他功能</p>
<ul>
<li>结构化数据友好</li>
<li>支持事务（ACID）</li>
<li>支持复杂查询语句</li>
</ul>
<h5 id="非关系型数据库特点"><a class="markdownIt-Anchor" href="#非关系型数据库特点"></a> 非关系型数据库特点</h5>
<p>非关系型数据库也是存储系统，但是一般不要求严格的结构化</p>
<ul>
<li>半结构化数据友好</li>
<li>可能支持事务（ACID）</li>
<li>可能支持复杂查询语句</li>
</ul>
<h4 id="23-数据库-vs-经典存储"><a class="markdownIt-Anchor" href="#23-数据库-vs-经典存储"></a> 2.3 数据库 vs 经典存储</h4>
<h5 id="结构化数据管理"><a class="markdownIt-Anchor" href="#结构化数据管理"></a> 结构化数据管理</h5>
<ul>
<li>写入关系型数据库，以表形式管理</li>
<li>写入文件，自行定义管理结构</li>
</ul>
<h5 id="事务能力"><a class="markdownIt-Anchor" href="#事务能力"></a> 事务能力</h5>
<p>数据库具有支持事务的优越性，事务具有</p>
<ul>
<li>Atomicity： 事务内的操作要么全部执行，要么全部不执行</li>
<li>Consistency：事务执行前后，数据状态是一致的</li>
<li>Isolation：可以隔离多个并发事务，避免影响</li>
<li>Durability：事务一旦提交成功，数据保证持久性</li>
</ul>
<h5 id="复杂查询能力"><a class="markdownIt-Anchor" href="#复杂查询能力"></a> 复杂查询能力</h5>
<p>写入数据后进行很复杂的查询</p>
<ul>
<li>数据库查询灵活、简洁</li>
<li>文件查询僵化、复杂</li>
</ul>
<h4 id="24-数据库使用方式"><a class="markdownIt-Anchor" href="#24-数据库使用方式"></a> 2.4 数据库使用方式</h4>
<p>Everything is Domain Specific Language，maybe SQL</p>
<p>SQL 操作数据：Insert、Update、Select、Delete、Where子句、Group by、Order by</p>
<p>SQL 定义数据：Create、Alter …</p>
<h3 id="主流产品剖析"><a class="markdownIt-Anchor" href="#主流产品剖析"></a> 主流产品剖析</h3>
<h4 id="31-单机存储"><a class="markdownIt-Anchor" href="#31-单机存储"></a> 3.1 单机存储</h4>
<h5 id="概览-2"><a class="markdownIt-Anchor" href="#概览-2"></a> 概览</h5>
<p>单机存储 = 单个计算机节点上的存储软件系统，一般不涉及网络交互</p>
<p>有本地文件系统和 key-value 存储</p>
<h5 id="本地文件系统"><a class="markdownIt-Anchor" href="#本地文件系统"></a> 本地文件系统</h5>
<p>Linux 经典哲学：一切皆文件</p>
<p>文件系统的管理单元：文件</p>
<p>文件系统接口：文件系统繁多，如 ext2/3/4，sysfs，rootfs 等，但都遵循 VFS 的统一抽象接口</p>
<p>Linux 文件系统的两大数据结构：Index Node 和 Directory Entry</p>
<ul>
<li>
<p>Index Node</p>
<p>记录文件元数据，如 id、大小、权限、硬盘位置等。</p>
<p>inode 是文件的唯一标识，会被存储到磁盘上。</p>
<p>inode 的总数在格式化文件系统时就固定了。</p>
</li>
<li>
<p>Directory Entry</p>
<p>记录文件名、inode 指针、层级关系（parent）等。</p>
<p>dentry 是内存结构，与 inode 的关系是 N：1（hardlink 的实现）</p>
</li>
</ul>
<h5 id="key-value-存储"><a class="markdownIt-Anchor" href="#key-value-存储"></a> key-value 存储</h5>
<p>常见使用方式：put(k, v) 和 get(k)</p>
<p>常见数据结构：LSM-Tree，某种程度上牺牲读写性能，追求写入性能</p>
<p>典型产品：RocksDB ，更多信息参考<a class="link"   href="http://rocksdb.org.cn/" >RocksDB 中文官网 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h4 id="32-分布式存储"><a class="markdownIt-Anchor" href="#32-分布式存储"></a> 3.2 分布式存储</h4>
<h5 id="概览-3"><a class="markdownIt-Anchor" href="#概览-3"></a> 概览</h5>
<p>分布式存储 = 在单机存储基础上实现了分布式协议，涉及大量网络交互</p>
<p>有分布式文件系统和分布式对象存储</p>
<h5 id="hdfs"><a class="markdownIt-Anchor" href="#hdfs"></a> HDFS</h5>
<p>HDFS：大数据时代的基石</p>
<p>时代背景：专用的高级硬件很贵，同时数据存储量很大，要求超高吞吐</p>
<p>HDFS 核心特点</p>
<ul>
<li>支持海量数据存储</li>
<li>高容错性</li>
<li>弱 POSIX 语义</li>
<li>使用普通 x86 服务器，性价比高</li>
</ul>
<h5 id="ceph"><a class="markdownIt-Anchor" href="#ceph"></a> Ceph</h5>
<p>Ceph 核心特点</p>
<ul>
<li>一套系统支持对象接口、块接口、文件接口，但是一切皆对象</li>
<li>数据写入采用主备复制模型</li>
<li>数据分布模型采用 CRUSH 算法（HASH + 权重 + 随机抽签）</li>
</ul>
<h4 id="33-单机数据库"><a class="markdownIt-Anchor" href="#33-单机数据库"></a> 3.3 单机数据库</h4>
<h5 id="概览-4"><a class="markdownIt-Anchor" href="#概览-4"></a> 概览</h5>
<p>单机数据库 = 单个计算机节点上的数据库系统</p>
<p>事务在单机内执行，也可能通过网络交互实现分布式事务</p>
<p>有关系型数据库和非关系型数据库</p>
<h5 id="关系型数据库"><a class="markdownIt-Anchor" href="#关系型数据库"></a> 关系型数据库</h5>
<p>商业产品 Oracle 最为广泛使用，开源产品 MySQL 和 PostgreSQL 最受欢迎。</p>
<p>关系型数据库的通用组件</p>
<ul>
<li>Query Engine：负责解析 query，生成查询计划</li>
<li>Txn Manager：负责事务并发管理</li>
<li>Lock Manager：负责锁相关的策略</li>
<li>Storage Engine：负责组织内存/磁盘数据结构</li>
<li>Replication：负责主备同步</li>
</ul>
<p>关键内存数据结构：B-Tree、B±Tree、LRUList 等</p>
<p>关键磁盘数据结构：WriteAheadLog（RedoLog）、Page</p>
<h5 id="非关系型数据库"><a class="markdownIt-Anchor" href="#非关系型数据库"></a> 非关系型数据库</h5>
<p>最主流的是 MongoDB、Redis、Elasticsearch 这三个。</p>
<ul>
<li>关系型数据库一般直接使用 SQL 交互，而非关系型数据库交互方式各不相同。</li>
<li>非关系型数据库的数据结构多种多样，没有关系约束，schema 相对灵活。</li>
<li>无论是关系型数据库还是非关系型数据库，目前都在尝试支持 SQL(子集)和“事务”。</li>
</ul>
<h5 id="elasticsearch"><a class="markdownIt-Anchor" href="#elasticsearch"></a> Elasticsearch</h5>
<ul>
<li>面向文档存储</li>
<li>文档可序列化成 JSON，支持嵌套</li>
<li>存在 index，index = 文档的集合</li>
<li>存储和构建索引能力依赖 Lucene 引擎</li>
<li>实现了大量搜索数据结构和算法</li>
<li>支持 RESTFUL API，也支持弱 SQL 交互</li>
</ul>
<p>更多信息参考<a class="link"   href="https://elasticsearch.bookhub.tech/getting_started/" >Elasticsearch 中文文档 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h5 id="mongodb"><a class="markdownIt-Anchor" href="#mongodb"></a> MongoDB</h5>
<ul>
<li>面向文档存储</li>
<li>文档可序列化成 JSON/BSON，支持嵌套</li>
<li>存在 collection，collection = 文档的集合</li>
<li>存储和构建索引能力依赖 wiredTiger 引擎</li>
<li>4.0 后开始支持事务（多文档、跨分片多文档等）</li>
<li>常用 client/SDK 交互，可通过插件转译支持弱 SQL</li>
</ul>
<p>更多信息参考<a class="link"   href="https://docs.mongoing.com/" >MongoDB 中文文档 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h5 id="redis"><a class="markdownIt-Anchor" href="#redis"></a> Redis</h5>
<ul>
<li>数据结构丰富（hash 表、set、zset、list）</li>
<li>C 语言实现，超高性能</li>
<li>主要基于内存，但支持 AOF/RDB 持久化</li>
<li>常用 redies-cli/多语言 SDK 交互</li>
</ul>
<p>特别的，Elasticsearch 相比 RDBMS，ES 天然支持模糊搜索，还能自动算出关联程度。</p>
<h4 id="34-分布式数据库"><a class="markdownIt-Anchor" href="#34-分布式数据库"></a> 3.4 分布式数据库</h4>
<p>从单机数据库到分布式数据库，单机数据库所面对的问题和挑战，以及分布式架构的解决方案。</p>
<h5 id="解决容量问题"><a class="markdownIt-Anchor" href="#解决容量问题"></a> 解决容量问题</h5>
<ul>
<li>单点容量有限，受硬件条件限制</li>
<li>存储节点池化，动态扩缩容</li>
</ul>
<h5 id="解决弹性问题"><a class="markdownIt-Anchor" href="#解决弹性问题"></a> 解决弹性问题</h5>
<ul>
<li>
<p>单机扩容搬迁全量数据，耗时大，缩容 Disk 问题难以解决</p>
</li>
<li>
<p>通过分布式灵活扩缩容解决 CPU 资源紧张问题</p>
</li>
</ul>
<h5 id="解决性价比问题"><a class="markdownIt-Anchor" href="#解决性价比问题"></a> 解决性价比问题</h5>
<ul>
<li>单机写数据，容量不够，但 CPU 利用率低下</li>
<li>扩容到高规格单机，满足了容量需求，但 CPU 浪费更严重</li>
<li>通过分布式使用共享存储池，不需要扩容 CPU</li>
</ul>
<h5 id="more-to-do"><a class="markdownIt-Anchor" href="#more-to-do"></a> More to Do</h5>
<ul>
<li>单写 vs 多写</li>
<li>从磁盘弹性到内存弹性</li>
<li>分布式事务化</li>
</ul>
<h3 id="4新技术演进"><a class="markdownIt-Anchor" href="#4新技术演进"></a> 4.新技术演进</h3>
<h4 id="41-概览"><a class="markdownIt-Anchor" href="#41-概览"></a> 4.1 概览</h4>
<ul>
<li>
<p>软件架构变更</p>
<p>Bypass OS kernel</p>
</li>
<li>
<p>AI 增强</p>
<p>智能存储格式转换</p>
</li>
<li>
<p>新硬件革命</p>
<ul>
<li>存储介质变更</li>
<li>计算单元变更</li>
<li>网络硬件变更</li>
</ul>
</li>
</ul>
<h4 id="42-spdk"><a class="markdownIt-Anchor" href="#42-spdk"></a> 4.2 SPDK</h4>
<p>Bypass OS kernel 已经成为一种趋势</p>
<p>SPDK：Storage Performance Development Kit</p>
<p>Kernel Space —&gt; User Space</p>
<ul>
<li>避免 syscall 带来的性能损耗，直接从用户态访问磁盘</li>
</ul>
<p>中断 —&gt; 轮询</p>
<ul>
<li>磁盘性能提高后，中断次数随之上升，不利于 IO 性能</li>
<li>SPDK poller 可以绑定特定的 CPU 核不断轮询，减少 CS，提高性能</li>
</ul>
<p>无锁数据结构</p>
<ul>
<li>使用 Lock-free queue，降低并发时的同步开销</li>
</ul>
<h4 id="43-ai-和-storage"><a class="markdownIt-Anchor" href="#43-ai-和-storage"></a> 4.3 AI 和 Storage</h4>
<p>AI 领域相关技术，如 Machine Learning 在很多领域，如推荐、风控、视觉领域证明了有效性。</p>
<h4 id="44-高性能硬件"><a class="markdownIt-Anchor" href="#44-高性能硬件"></a> 4.4 高性能硬件</h4>
<h5 id="rdma-网络"><a class="markdownIt-Anchor" href="#rdma-网络"></a> RDMA 网络</h5>
<ul>
<li>传统的网络协议栈，需要基于多层网络协议处理数据包，存在用户态和内核态的切换，足够通用但性能不是最佳</li>
<li>RDMA 是 kernel bypass 的流派，不经过传统的网络协议栈，可以把用户态虚拟内存映射给网卡，减少拷贝开销，减少 CPU 开销</li>
</ul>
<h5 id="persistent-memory"><a class="markdownIt-Anchor" href="#persistent-memory"></a> Persistent Memory</h5>
<p>在 NVMe SSD 和 Main Memory 间有一种全新的存储产品：Persistent Memory</p>
<ul>
<li>IO 时延介于 SSD 和 Memory 之间，约百纳秒量级</li>
<li>可以用作易失性内存（memory mode），也可以用作持久化介质（app-direct）</li>
</ul>
<h5 id="可编程交换机"><a class="markdownIt-Anchor" href="#可编程交换机"></a> 可编程交换机</h5>
<p>P4 Switch，配有编译器、计算单元、DRAM，可以在交换机层对网络包做计算逻辑。在数据库场景下，可以实现缓存一致性协议等</p>
<h5 id="cpugpudpu"><a class="markdownIt-Anchor" href="#cpugpudpu"></a> CPU/GPU/DPU</h5>
<ul>
<li>CPU：从 multi-core 走向 many-core</li>
<li>GPU：强大的算力和越来越大的显存空间</li>
<li>DPU：异构计算，减轻 CPU 的workload</li>
</ul>
<h3 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h3>
<h4 id="存储系统"><a class="markdownIt-Anchor" href="#存储系统"></a> 存储系统</h4>
<ul>
<li>块存储：存储软件栈里的底层系统，接口过于朴素</li>
<li>文件存储：日常使用最广泛的存储系统，接口十分友好，实现形式多种多样</li>
<li>对象存储：公有云上的主流产品，immutable 语义加持</li>
<li>key-value 存储：形式最灵活，存在大量的开源/黑盒产品</li>
</ul>
<h4 id="数据库系统"><a class="markdownIt-Anchor" href="#数据库系统"></a> 数据库系统</h4>
<ul>
<li>关系型数据库：基于关系和关系代数构建的，一般支持事务和 SQL 访问，使用体验友好的存储产品</li>
<li>非关系型数据库：结构灵活，访问方式灵活，针对不同场景有不同的针对性产品</li>
</ul>
<h4 id="分布式架构"><a class="markdownIt-Anchor" href="#分布式架构"></a> 分布式架构</h4>
<ul>
<li>数据分布策略：决定了数据如何分布到集群里的多个物理节点，是否均匀，是否能实现高性能</li>
<li>数据复制协议：影响 IO 路径的性能、机器故障场景的处理方式</li>
<li>分布式事务算法：多个数据库节点协同保障一个事务的 ACID 特性的算法，通常基于 2pc 的思想设计</li>
</ul>
<p>在存储和数据库领域，硬件反推软件变革十分常见</p>
<h3 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h3>
<p><a class="link"   href="https://blog.51cto.com/quantfabric/2594168" >Kernel Bypass <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="http://rocksdb.org.cn/" >RocksDB 中文官网 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://elasticsearch.bookhub.tech/getting_started/" >Elasticsearch 中文文档 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://docs.mongoing.com/" >MongoDB 中文文档 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>青训营记录</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>深入理解 RDBMS</title>
    <url>/2023/02/22/golang-day16/</url>
    <content><![CDATA[<p>本文来源于第五届字节跳动青训营活动，已收录到<a class="link"   href="https://juejin.cn/post/7202607329400291385" >深入理解 RDBMS | 青训营笔记 - 掘金 (juejin.cn) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，主要记录了对 RDBMS 的学习<span id="more"></span></p>
<h2 id="深入理解-rdbms"><a class="markdownIt-Anchor" href="#深入理解-rdbms"></a> 深入理解 RDBMS</h2>
<h3 id="1经典案例"><a class="markdownIt-Anchor" href="#1经典案例"></a> 1.经典案例</h3>
<h4 id="11-红包雨"><a class="markdownIt-Anchor" href="#11-红包雨"></a> 1.1 红包雨</h4>
<p>红包的发送与接收</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> account_table <span class="keyword">set</span> balance <span class="operator">=</span> balance <span class="operator">-</span> <span class="string">&#x27;红包&#x27;</span> <span class="keyword">where</span> name<span class="operator">=</span><span class="string">&#x27;活动主办方&#x27;</span>;</span><br><span class="line"><span class="keyword">update</span> account_table <span class="keyword">set</span> balance <span class="operator">=</span> balance <span class="operator">+</span> <span class="string">&#x27;红包&#x27;</span> <span class="keyword">where</span> name<span class="operator">=</span><span class="string">&#x27;活动用户&#x27;</span>;</span><br></pre></td></tr></table></figure></div>
<h4 id="12-rdbms-事务-acid"><a class="markdownIt-Anchor" href="#12-rdbms-事务-acid"></a> 1.2 RDBMS 事务 ACID</h4>
<ul>
<li>
<p>事务（Transaction）：是由一组 SQL 语句组成的一个程序执行单元（Unit），它需要满足 ACID 特性。</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">update</span> account_table <span class="keyword">set</span> balance <span class="operator">=</span> balance <span class="operator">-</span> <span class="string">&#x27;红包&#x27;</span> <span class="keyword">where</span> name<span class="operator">=</span><span class="string">&#x27;活动主办方&#x27;</span>;</span><br><span class="line"><span class="keyword">update</span> account_table <span class="keyword">set</span> balance <span class="operator">=</span> balance <span class="operator">+</span> <span class="string">&#x27;红包&#x27;</span> <span class="keyword">where</span> name<span class="operator">=</span><span class="string">&#x27;活动用户&#x27;</span>;</span><br><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>两条更新操作不再是独立的，而是形成了一个整体，这个整体称为一个事务。</p>
</blockquote>
</li>
</ul>
<h4 id="13-acid"><a class="markdownIt-Anchor" href="#13-acid"></a> 1.3 ACID</h4>
<ul>
<li>原子性（Atomicity）：事务是一个不可再分割的工作单元，事务中的操作要么都发生，要么都不发生。</li>
<li>一致性（Consistency）：数据库事务不能破坏关系数据的完整性以及业务逻辑上的一致性。</li>
<li>隔离性（Isolation）：多个事务并发访问时，事务之间是隔离的，一个事务不应该影响其它事务运行效果。</li>
<li>持久性（Durability）：在事务完成以后，该事务对数据库所作的更改便持久的保存在数据库之中，无法被回滚。</li>
</ul>
<h4 id="14-红包雨-与-acid"><a class="markdownIt-Anchor" href="#14-红包雨-与-acid"></a> 1.4 红包雨 与 ACID</h4>
<ul>
<li>
<p>Case 1：活动主办方扣款发送红包，但是服务器挂了，活动用户未能收到红包…</p>
<p>原子性 Atomicity：两个操作要么同时成功，要么同时失败，不存在中间状态。</p>
</li>
<li>
<p>Case 2：活动主办方账户只有 0.5 个亿，但是扣减 1 个亿的操作成功了…</p>
<p>一致性Consistency：每个操作都必须是合法的，账户信息应该从一个有效的状态变为另一个有效的状态。</p>
</li>
<li>
<p>Case 3：用户参加了多个红包活动各自获得了一个亿，两个转账同时进行，假设都是从零开始更新用户的账户余额，最终用户只得到了一个亿…</p>
<p>隔离性Isolation：两个操作在对同一个账户并发进行操作时，应该是相互不影响的，表现为串行操作。</p>
</li>
<li>
<p>Case 4：红包收发成功后，但是还没写到磁盘上，服务器就挂了…</p>
<p>持久性Durability：操作更新成功之后，更新的结果应该是永久性的保留下来，不会因为宕机等问题而丢失。</p>
</li>
</ul>
<h4 id="15-红包雨-与-高并发"><a class="markdownIt-Anchor" href="#15-红包雨-与-高并发"></a> 1.5 红包雨 与 高并发</h4>
<ul>
<li>
<p>Case 5：假设10亿人同时开始抢红包，每秒处理一个请求，可能需要几十年时间才能完成…</p>
<p>高并发 Concurrency：如果每秒能够处理1000万个请求，那么只需要几分钟。</p>
</li>
</ul>
<h4 id="16-红包雨-与-高可靠"><a class="markdownIt-Anchor" href="#16-红包雨-与-高可靠"></a> 1.6 红包雨 与 高可靠</h4>
<ul>
<li>
<p>Case 6：在用户群体最活跃的时间段，服务器挂了，花费了大量时间修复，等修复好了用户都走了，口碑变差…</p>
<p>高可靠、高可用 High Reliability/Availability</p>
</li>
</ul>
<h3 id="2发展历史"><a class="markdownIt-Anchor" href="#2发展历史"></a> 2.发展历史</h3>
<h4 id="21-前-dbms-时代-人工管理"><a class="markdownIt-Anchor" href="#21-前-dbms-时代-人工管理"></a> 2.1 前 DBMS 时代 — 人工管理</h4>
<p>在现代计算机发明出来以前，通过人工的方式进行数据记录和管理</p>
<ul>
<li>结绳记事、清代钱庄账本、1890年人口普查的霍列瑞斯式打孔机</li>
<li>效率太低</li>
</ul>
<h4 id="22-前-dbms-时代-文件系统"><a class="markdownIt-Anchor" href="#22-前-dbms-时代-文件系统"></a> 2.2 前 DBMS 时代 — 文件系统</h4>
<p>1950年，现代计算机的雏形基本出现。1956年 IBM 发布了第一个磁盘驱动器 —— Model 305 RAMAC，从此数据存储进入了磁盘时代。在这个阶段，数据管理直接通过文件系统来实现。</p>
<blockquote>
<p>从写到纸上变成了写到文件里，换了个马甲。</p>
</blockquote>
<h4 id="23-dbms-时代"><a class="markdownIt-Anchor" href="#23-dbms-时代"></a> 2.3 DBMS 时代</h4>
<p>1960年，传统的文件系统已经不能满足人们的需要，数据库管理系统（DBMS）应运而生。</p>
<p>DBMS：按照某种数据模型来组织、存储和管理数据的仓库。</p>
<p>通常按照数据模型的特点将传统数据库系统分为网状数据库、层次数据库和关系数据库三类。</p>
<blockquote>
<p>传统的文件系统难以应对数据增长的挑战,也无法满足多用户共享数据和快速检索数据的需求。</p>
<p>层次型、网状型和关系型数据库划分的原则是数据之间的联系方式。</p>
<p>层次数据库是按记录来存取数据的；</p>
<p>网状数据库是采用网状原理和方法来存储数据；</p>
<p>关系型数据库是以行和列的形式存储数据。</p>
</blockquote>
<h5 id="231-dbms-数据模型-网状模型"><a class="markdownIt-Anchor" href="#231-dbms-数据模型-网状模型"></a> 2.3.1 DBMS 数据模型 — 网状模型</h5>
<p>网状数据库所基于的网状数据模型建立的数据之间的联系，能反映现实世界中信息的关系，是许多空间对象的自然表达形式。</p>
<p>1964年，世界上第一个数据库系统——集成数据存储（Integrated Data Storage，IDS）诞生于通用电气公司。IDS是世界上第一个网状数据库，奠定了数据库发展的基础，在当时得到了广泛的应用。</p>
<p>在1970年，网状数据库系统十分流行，在数据库系统产品中占据主导地位。</p>
<blockquote>
<p>网状数据模型是以记录类型为结点的网络结构，即一个结点可以有一个或多个下级结点，也可以有一个或多个上级结点，两个结点之间甚至可以有多种联系，例如“教师”与“课程”两个记录类型，可以有“任课”和“辅导”两种联系，称之为复合链。</p>
<p>两个记录类型之间的值可以是多对多的联系，例如一门课程被多个学生修读，一个学生选修多门课程。</p>
</blockquote>
<h5 id="232-dbms-数据模型-层次模型"><a class="markdownIt-Anchor" href="#232-dbms-数据模型-层次模型"></a> 2.3.2 DBMS 数据模型 — 层次模型</h5>
<p>1968年，世界上第一个层次数据库——信息管理系统（Information Management System，IMS）诞生于 IBM 公司，这也是世界上第一个大型商用的数据库系统。层次数据模型，即使用树形结构来描述实体及其相互关系的数据模型。</p>
<blockquote>
<p>层次数据库就是树结构。每棵树都有且仅有一个根节点，其余的节点都是非根节点。每个节点表示一个记录类型对应与实体的概念，记录类型的各个字段对应实体的各个属性。各个记录类型及其字段都必须记录。</p>
</blockquote>
<h5 id="233-dbms-数据模型-关系模型"><a class="markdownIt-Anchor" href="#233-dbms-数据模型-关系模型"></a> 2.3.3 DBMS 数据模型 — 关系模型</h5>
<p>1970年，IBM 的研究员 E.F.Codd 博士发表了一篇名为 “<a class="link"   href="https://www.seas.upenn.edu/~zives/03f/cis550/codd.pdf" >A Relational Model of Data for  Large Shared Data Banks <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>” 的论文，提出了关系模型的概念，奠定了关系模型的理论基础。1970年 Oracle 首次将关系型数据库商业化，后续 DB2，SAP Sysbase ASE，and Informix 等知名数据库产品也纷纷面世。</p>
<blockquote>
<p>使用表格表示实体和实体之间关系的数据模型称之为关系数据模型。</p>
<p>关系数据模型中，无论是是实体、还是实体之间的联系都被映射成统一的关系，一张二维表。</p>
<p>在关系模型中，操作的对象和结果都是一张二维表，它由行和列组成； 关系型数据库可用于表示实体之间的多对多的关系，只是此时要借助第三个关系—表，来实现多对多的关系。</p>
</blockquote>
<h4 id="24-dbms-数据模型"><a class="markdownIt-Anchor" href="#24-dbms-数据模型"></a> 2.4 DBMS 数据模型</h4>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">网状模型</th>
<th style="text-align:center">层次模型</th>
<th style="text-align:center">关系模型</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">优势</td>
<td style="text-align:center">能直接描述现实世界，存取效率高</td>
<td style="text-align:center">结构简单，查询效率高，可以提供较好的完整性支持</td>
<td style="text-align:center">实体及实体间的联系都通过二维结构表示，可以很方便地表示 M:N 关系，数据访问路径对用户透明</td>
</tr>
<tr>
<td style="text-align:center">劣势</td>
<td style="text-align:center">结构复杂，用户不易使用，访问程序设计复杂</td>
<td style="text-align:center">无法表示 M:N 的关系，插入、删除限制多，遍历子节点必须经过父节点，访问程序设计复杂</td>
<td style="text-align:center">关联查询效率不够高，关系必须规范化</td>
</tr>
</tbody>
</table>
<blockquote>
<p>1974年ACM牵头组织了一次研讨会，会上开展了一场分别以Codd和Bachman为首的支持和反对关系数据库两派之间的辩论。这次著名的辩论推动了关系数据库的发展，使其最终成为现代数据库产品的主流。</p>
</blockquote>
<h4 id="25-sql-语言"><a class="markdownIt-Anchor" href="#25-sql-语言"></a> 2.5 SQL 语言</h4>
<p>1974年 IBM 的 Ray Boyce 和 Don Chamberlin 将 Codd 关系数据库的12条准则的数学定义以简单的关键字语法表现出来，里程碑式地提出了 SQL（Structured Query Language）语言。</p>
<ul>
<li>语法风格接近自然语言</li>
<li>高度非过程化</li>
<li>面向集合的操作方式</li>
<li>语言简洁，易学易用</li>
</ul>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> account_table <span class="keyword">set</span> balance <span class="operator">=</span> balance <span class="operator">-</span> <span class="string">&#x27;红包&#x27;</span> <span class="keyword">where</span> name<span class="operator">=</span><span class="string">&#x27;活动主办方&#x27;</span>;</span><br></pre></td></tr></table></figure></div>
<p>上面这条 SQL 语句执行的流程</p>
<ol>
<li>Find account_table</li>
<li>Search accunt_tabke and compare name to ‘活动主办方’</li>
<li>Calculate balance - ‘红包’</li>
<li>Write new balance to account_table</li>
</ol>
<blockquote>
<p>高度非过程化</p>
<p>非关系数据模型的数据操纵语言是面向过程的语言，用其完成用户请求时，必须指定存取路径。而用SQL进行数据操作，用户只需提出“做什么”，而不必指明“怎么做”，因此用户无须了解存取路径，存取路径的选择以及SQL语句的操作过程由系统自动完成。这不但大大减轻了用户负担，而且有利于提高数据独立性。</p>
<p>面向集合的操作方式</p>
<p>SQL采用集合操作方式，不仅查找结果可以是元组的集合，而且一次插入、删除、更新操作的对象也可以是元组的集合。</p>
<p>语言简洁，易学易用</p>
<p>SQL功能极强，但由于设计巧妙，语言十分简洁，完成数据定义、数据操纵、数据控制的核心功能只用了9个动词: CREATE、 ALTER、DROP、 SELECT、 INSERT、 UPDATE、 DELETE、GRANT、 REVOKE。且SQL语言语法简单，接近英语口语，因此容易学习，也容易使用。</p>
</blockquote>
<h3 id="3关键技术"><a class="markdownIt-Anchor" href="#3关键技术"></a> 3.关键技术</h3>
<h4 id="31-一条-sql-的一生"><a class="markdownIt-Anchor" href="#31-一条-sql-的一生"></a> 3.1 一条 SQL 的一生</h4>
<ul>
<li>SQL引擎
<ul>
<li>查询解析：SQL 语言接近自然语言，入门容易。但是各种关键字、操作符组合起来，可以表达丰富的语意。因此想要处理SQL命令，首先将文本解析成结构化数据，也就是抽象语法树 （AST）。</li>
<li>查询优化：SQL 是一门表意的语言，只是说『要做什么』，而不说『怎么做』。所以需要一些复杂的逻辑选择『如何拿数据』，也就是选择一个好的查询计划。优化器的作用根据AST优化产生最优执行计划（Plan Tree）。</li>
<li>查询执行：根据查询计划，完成数据读取、处理、写入等操作。</li>
</ul>
</li>
<li>事务引擎：处理事务一致性、并发、读写隔离等</li>
<li>存储引擎：内存中的数据缓存区、数据文件、日志文件</li>
</ul>
<h4 id="32-sql-引擎"><a class="markdownIt-Anchor" href="#32-sql-引擎"></a> 3.2 SQL 引擎</h4>
<h5 id="解析器-parser"><a class="markdownIt-Anchor" href="#解析器-parser"></a> 解析器 Parser</h5>
<p>解析器（Parser）一般分为词法分析（Lexical analysis）、语法分析（Syntax analysis）、语义分析（Semantic analyzer）等步骤。</p>
<blockquote>
<p>所有的代码在执行之前，都存在一个解析编译的过程，差异点无非在于是静态解析编译还是动态的。</p>
<p>SQL语言也类似，在SQL查询执行前的第一步就是查询解析。</p>
<p>词法分析：将一条SQL语句对应的字符串分割为一个个token，这些token可以简单分类。</p>
<p>语法分析：把词法分析的结果转为语法树。根据tocken序列匹配不同的语法规则，比如这里匹配的是update语法规则，类似的还有insert、delete、select、create、drop等等语法规则。根据语法规则匹配SQL语句中的关键字，最终输出一个结构化的数据结构。</p>
<p>语义分析：对语法树中的信息进行合法性校验。</p>
</blockquote>
<h5 id="优化器-optimizer"><a class="markdownIt-Anchor" href="#优化器-optimizer"></a> 优化器 Optimizer</h5>
<p><strong>基于规则的优化（RBO Rule Optimizer）</strong></p>
<blockquote>
<p>比如导航地图哪条路线红绿灯最少就选择哪条。</p>
</blockquote>
<ul>
<li>
<p>条件化简</p>
<p>例如</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line">a<span class="operator">=</span><span class="number">5</span> <span class="keyword">and</span> b<span class="operator">&gt;</span>a</span><br><span class="line">a<span class="operator">&gt;</span><span class="number">5</span> <span class="keyword">and</span> a <span class="operator">&lt;</span> b <span class="keyword">and</span> b<span class="operator">=</span><span class="number">1</span></span><br></pre></td></tr></table></figure></div>
<p>可分别化简为</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line">a<span class="operator">=</span><span class="number">5</span> <span class="keyword">and</span> b<span class="operator">&gt;</span><span class="number">5</span></span><br><span class="line"><span class="literal">false</span></span><br></pre></td></tr></table></figure></div>
</li>
<li>
<p>表连接优化：总是小表先进行连接</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> A,B,C <span class="keyword">where</span> A.a1 <span class="operator">=</span> B.b1 <span class="keyword">and</span> A.a1 <span class="operator">=</span> C.b1</span><br></pre></td></tr></table></figure></div>
</li>
<li>
<p>Scan 优化</p>
<ul>
<li>唯一索引</li>
<li>普通索引</li>
<li>全表扫描</li>
</ul>
</li>
</ul>
<p>数据库索引：是数据库中辅助数据结构，以协助快速查询、更新数据库表中数据。目前数据库中最常用的索引是通过 B+树 实现的。</p>
<p><strong>基于代价的优化（CBO Cost Base Optimizer）</strong></p>
<p>一个查询有多种执行方案，CBO 会选择其中代价最低的方案去真正的执行。</p>
<blockquote>
<p>什么是代价？</p>
<p>到达一个目的地，有不同的路线，选择不同的路线有不同的代价。这里的代价可能是时间，也可能是路程。比如赶时间的时候，就会选择时间最短的。如果时间没那么赶，那么我们可能选择路程最短的。</p>
<p>对于数据库也是这样，一个查询有不同的执行方案。</p>
<p>那对于数据库而言，什么是一条SQL执行的代价呢？</p>
<p>其实，对于用户只能感知到查询时间这个代价，底层用了多少资源他是不在乎的。但是在并发的情况下，就得考虑资源消耗了，这个用户的查询占用的资源多了，其他用户的资源就少了。所以资源也是必须考虑的一点。</p>
<p>对于 InnoDB 存储引擎来说，全表扫描的意思就是把聚簇索引中的记录都依次和给定的搜索条件做一下比较，把符合搜索条件的记录加入到结果集，所以需要将聚簇索引对应的页面加载到内存中，然后再检测记录是否符合搜索条件。</p>
<p>对于使用二级索引 + 回表方式的查询，涉及 MySQL 的大数计算这种查询的成本依赖两个方面的数据：范围区间数量，需要回表数据量</p>
</blockquote>
<h5 id="执行器-executor"><a class="markdownIt-Anchor" href="#执行器-executor"></a> 执行器 Executor</h5>
<p><strong>火山模型</strong></p>
<ul>
<li>
<p>每个 Operator 调用 Next 操作，访问下层 Operator，获得下层 Operator 返回的一行数据，经过计算之后，将这行数据返回给上层。</p>
</li>
<li>
<p>优点：每个算子之间独立抽象实现，相互之间没有耦合，逻辑结构简单。</p>
</li>
<li>
<p>缺点：每计算一条数据有多次函数调用开销，导致 CPU 效率不高。</p>
</li>
<li>
<p>以 Plan Tree 为基础，调用关系是由根到叶，数据流是从叶到根。</p>
</li>
</ul>
<p><strong>向量化</strong></p>
<ul>
<li>每个 Operator 每次操作计算的不再是一行数据，而是一批数据（Batch N行数据），计算完成后向上层算子返回一个 Batch。</li>
<li>优点
<ul>
<li>函数调用次数降低为 1/N</li>
<li>CPU cache 命中率更高</li>
<li>可以利用 CPU 提供的 SIMD（Single Instruction Multi Data）机制</li>
</ul>
</li>
<li>向量化执行更适合于大批量数据处理，对于很多单行数据处理并没有优势。而且往往搭配列式存储使用。</li>
</ul>
<p><strong>编译执行</strong></p>
<ul>
<li>
<p>将所以的操作封装到一个函数里面，函数的调用的代价也能大幅度降低。</p>
</li>
<li>
<p>一个问题：用户编写的 SQL 各式各样，如何对每一条 SQL 语句封装？</p>
<p>使用 LLVM 动态编译执行技术</p>
<blockquote>
<p>代码生成之后数据库运行时仍然是一个 for 循环，只不过这个循环内部的代码从简单的一个虚函数调用plan.next()展开成了一系列具体的运算逻辑，这样数据就不用在各个 operator 之间进行传递，而且有些数据还可以直接被存放在寄存器中，进一步提升系统性能。整个操作有点像inline 函数，把所有的操作inline到一个函数中去。</p>
<p>LLVM动态编译执行技术，根据优化器产生的计划，动态的生成执行代码。</p>
</blockquote>
</li>
</ul>
<h4 id="33-存储引擎"><a class="markdownIt-Anchor" href="#33-存储引擎"></a> 3.3 存储引擎</h4>
<h5 id="innodb"><a class="markdownIt-Anchor" href="#innodb"></a> InnoDB</h5>
<p>In-Memory</p>
<ul>
<li>Buffer Pool</li>
<li>Change Buffer</li>
<li>Adaptive Hash Index</li>
<li>Log Buffer</li>
</ul>
<p>On-Disk</p>
<ul>
<li>System Tablespace(ibdata1)</li>
<li>General Tablespaces(xxx.ibd)</li>
<li>Undo Tablespaces(xxx.ibu)</li>
<li>Temporary Tablespaces(xxx.ibt)</li>
<li>Redo Log(ib_logfileN)</li>
</ul>
<p>更多信息参考<a class="link"   href="https://dev.mysql.com/doc/refman/8.0/en/innodb-architecture.html" >https://dev.mysql.com/doc/refman/8.0/en/innodb-architecture.html <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h5 id="buffer-pool"><a class="markdownIt-Anchor" href="#buffer-pool"></a> Buffer Pool</h5>
<p>Buffer Pool 中有多个 Instance，而每个 Instance 中有多个 chunk。</p>
<ul>
<li>
<p>MySQL中每个chunk的大小一般为128M，每个block对应一个page，一个chunk下面有8192个block。这样可以避免内存碎片化。</p>
</li>
<li>
<p>分成多个instance，可以有效避免并发冲突。</p>
</li>
<li>
<p>Page id % instance num得到它属于哪个instance。</p>
</li>
</ul>
<blockquote>
<p>当buffer pool里的页面都被使用之后，再需要换存其他页面怎么办？淘汰已有的页面。</p>
<p>基于什么规则淘汰？淘汰那个最近一段时间最少被访问过的缓存页，这种思想就是典型的 LRU 算法。</p>
<p>普通的LRU算法存在缺陷，考虑到需要扫描100GB的表，而buffer pool只有1GB，这样就会因为全表扫描的数据量大，需要淘汰的缓存页多，导致在淘汰的过程中，极有可能将需要频繁使用到的缓存页给淘汰了，而放进来的新数据却是使用频率很低的数据。</p>
<p>MySQL 没有直接使用 LRU 算法，而是在 LRU 算法上进行了优化。</p>
<p>MySQL 的优化思路就是：对数据进行冷热分离，将 LRU 链表分成两部分，一部分用来存放冷数据，也就是刚从磁盘读进来的数据，另一部分用来存放热点数据，也就是经常被访问到数据。</p>
<p>当从磁盘读取数据页后，会先将数据页存放到 LRU 链表冷数据区的头部，如果这些缓存页在 1 秒之后被访问，那么就将缓存页移动到热数据区的头部；如果是 1 秒之内被访问，则不会移动，缓存页仍然处于冷数据区中。</p>
<p>淘汰时，首先淘汰冷数据区。</p>
</blockquote>
<p>更多信息参考<a class="link"   href="https://dev.mysql.com/doc/refman/8.0/en/innodb-buffer-pool.html" >https://dev.mysql.com/doc/refman/8.0/en/innodb-buffer-pool.html <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h5 id="page"><a class="markdownIt-Anchor" href="#page"></a> Page</h5>
<table>
<thead>
<tr>
<th style="text-align:center">变长字段列表</th>
<th style="text-align:center">NULL 值标志位</th>
<th style="text-align:center">Header</th>
<th style="text-align:center">row_id</th>
<th style="text-align:center">trx_id</th>
<th style="text-align:center">roll_ptr</th>
<th style="text-align:center">Col1</th>
<th style="text-align:center">Col2</th>
<th>Col3</th>
<th style="text-align:center">…</th>
<th style="text-align:center">ColN</th>
</tr>
</thead>
</table>
<p>Header</p>
<ul>
<li>delete_mask：标识此条数据是否被删除。</li>
<li>next_record：下一条数据的位置。</li>
<li>record_type：表示当前记录的类型。</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">Page Header(120B)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">User Records</td>
</tr>
<tr>
<td style="text-align:center">Free Space</td>
</tr>
<tr>
<td style="text-align:center">Page Directory</td>
</tr>
<tr>
<td style="text-align:center">FIL Trailer(8B)</td>
</tr>
</tbody>
</table>
<p>其中 User Records 在页面上实际是无序的，通过一个单向链表连接。</p>
<h5 id="b-tree"><a class="markdownIt-Anchor" href="#b-tree"></a> B+ Tree</h5>
<ul>
<li>
<p>页面内</p>
<p>页目录中使用二分法快速定位到对应的槽，然后再遍历该槽对应分组中的记录即可快速找到指定的记录。</p>
</li>
<li>
<p>从根到叶：中间节点存储</p>
</li>
<li>
<p>点查</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">table</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">2000</span>;</span><br></pre></td></tr></table></figure></div>
</li>
<li>
<p>范围查询</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">table</span> <span class="keyword">where</span> id <span class="operator">&gt;</span> <span class="number">2000</span>;</span><br></pre></td></tr></table></figure></div>
</li>
</ul>
<h4 id="34-事务引擎"><a class="markdownIt-Anchor" href="#34-事务引擎"></a> 3.4 事务引擎</h4>
<h5 id="atomicity-与-undo-log"><a class="markdownIt-Anchor" href="#atomicity-与-undo-log"></a> Atomicity 与 Undo Log</h5>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">update</span> account_table <span class="keyword">set</span> balance <span class="operator">=</span> balance <span class="operator">-</span> <span class="string">&#x27;红包&#x27;</span> <span class="keyword">where</span> name<span class="operator">=</span><span class="string">&#x27;活动主办方&#x27;</span>;</span><br><span class="line"><span class="keyword">update</span> account_table <span class="keyword">set</span> balance <span class="operator">=</span> balance <span class="operator">+</span> <span class="string">&#x27;红包&#x27;</span> <span class="keyword">where</span> name<span class="operator">=</span><span class="string">&#x27;活动用户&#x27;</span>;</span><br><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure></div>
<p>如何将数据库回退到修改之前的状态？</p>
<p>使用 Undo Log。</p>
<p>Undo Log 是逻辑日志，记录的是数据的增量变化。利用 Undo Log 可以进行事务回滚，从而保证事务的原子性。同时也实现了多版本并发控制（MVCC），解决读写冲突和一致性读的问题。</p>
<p>在执行以下 SQL 语句中，Undo 也会生成相反操作的 SQL 语句。</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> users(id,name)<span class="keyword">value</span>(<span class="number">1</span>,cat);</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> users <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>; # undo</span><br><span class="line"><span class="keyword">update</span> users <span class="keyword">set</span> name <span class="operator">=</span> <span class="string">&#x27;dog&#x27;</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">update</span> users <span class="keyword">set</span> name <span class="operator">=</span> <span class="string">&#x27;cat&#x27;</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>; # undo</span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>原子性：一个事务（transaction）中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节。事务在执行过程中发生错误，会被恢复（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。</p>
<p>需要记录数据修改前的状态，一边在事务失败时进行回滚。</p>
<p>undo log是逻辑日志，记录的是数据的增量变化，它的作用是保证事务的原子性和事务并发控制。可以用于事务回滚，以及提供多版本机制（MVCC），解决读写冲突和一致性读的问题。</p>
</blockquote>
<h5 id="isolation-与-锁"><a class="markdownIt-Anchor" href="#isolation-与-锁"></a> Isolation 与 锁</h5>
<p>Isolation（隔离性）：数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致。</p>
<p>如果多个并发事务访问同一行记录，就需要锁机制来保证了。</p>
<p>读写是否冲突？读写互不阻塞，MVCC机制。</p>
<h5 id="isolation-与-mvcc"><a class="markdownIt-Anchor" href="#isolation-与-mvcc"></a> Isolation 与 MVCC</h5>
<p>MVCC 的意义</p>
<ul>
<li>读写互不阻塞</li>
<li>降低死锁概率</li>
<li>实现一致性读</li>
</ul>
<p>Undo Log 在 MVCC 中的作用</p>
<ul>
<li>每个事务都有一个单增的事务 ID</li>
<li>数据页的行记录中包含了 DB_ROW_ID，DB_TRX_ID，DB_ROLL_PTR</li>
<li>DB_ROLL_PTR 将数据行的所有快照记录都通过链表的结构串联了起来</li>
</ul>
<blockquote>
<p>脏读：事务还没提交之前，它对数据做的修改，不应该被其他人看到。</p>
</blockquote>
<h5 id="durability-与-redo-log"><a class="markdownIt-Anchor" href="#durability-与-redo-log"></a> Durability 与 Redo Log</h5>
<p>如何保证事务结束后，对数据的修改永久的保存？</p>
<p>方案一：事务提交前页面写盘，会导致随机 IO 写放大。</p>
<p>方案二：WAL（Write-ahead logging）</p>
<p>redo log 是物理日志，记录的是页面的变化，它的作用是保证事务持久化。如果数据写入磁盘前发生故障，重启 MySQL 后会根据 redo log 重做。</p>
<blockquote>
<p>持久化：事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。</p>
<p>WAL：修改并不直接写入到数据库文件中，而是写入到另外一个称为 WAL 的文件中；如果事务失败，WAL 中的记录会被忽略，撤销修改；如果事务成功，它将在随后的某个时间被写回到数据库文件中，提交修改。 优点：</p>
<ul>
<li>
<p>只记录增量变化，没有写放大</p>
</li>
<li>
<p>Append only，没有随机IO</p>
</li>
</ul>
</blockquote>
<h3 id="4企业实践"><a class="markdownIt-Anchor" href="#4企业实践"></a> 4.企业实践</h3>
<h4 id="41-红包雨挑战"><a class="markdownIt-Anchor" href="#41-红包雨挑战"></a> 4.1 红包雨挑战</h4>
<p><strong>情景模拟</strong></p>
<p>活动统计</p>
<ul>
<li>共计发放红包20亿元</li>
<li>总计发放卡券24亿张</li>
<li>节日红包补贴12.9亿</li>
</ul>
<p>流量统计</p>
<ul>
<li>活动钱包：400w/s</li>
<li>发红包：300w/s</li>
<li>发奖券：400w/s</li>
</ul>
<p>流量大、流量突增、稳定性</p>
<h4 id="42-大流量-sharding"><a class="markdownIt-Anchor" href="#42-大流量-sharding"></a> 4.2 大流量 — Sharding</h4>
<p>问题背景</p>
<ul>
<li>单节点写容易成为瓶颈</li>
<li>单机数据容量上限不够</li>
</ul>
<p>解决方案</p>
<ul>
<li>业务数据进行水平拆分</li>
<li>代理层进行分片路由</li>
</ul>
<p>实施效果</p>
<ul>
<li>数据库写入性能线性扩展</li>
<li>数据库容量线性扩展</li>
</ul>
<p>当数据库中的数据量越来越大时，不论是读还是写，压力都会变得越来越大。虽然上面的方案可以扩展读节点，但是对于写流量增加，以及数据量的增加却没有办法。</p>
<h4 id="43-流量突增-扩容"><a class="markdownIt-Anchor" href="#43-流量突增-扩容"></a> 4.3 流量突增 — 扩容</h4>
<p>问题背景</p>
<ul>
<li>活动流量上涨</li>
<li>集群性能不满足要求</li>
</ul>
<p>解决方案</p>
<ul>
<li>扩容 DB 物理节点数量</li>
<li>利用影子表进行压测</li>
</ul>
<p>实施效果</p>
<ul>
<li>数据库集群提供更高的吞吐</li>
<li>保证集群可以承担预期流量</li>
</ul>
<h4 id="44-流量突增-代理连接池"><a class="markdownIt-Anchor" href="#44-流量突增-代理连接池"></a> 4.4 流量突增 — 代理连接池</h4>
<p>问题背景</p>
<ul>
<li>突增流量导致大量建联</li>
<li>大量建联导致负载变大，延时上升</li>
</ul>
<p>解决方案</p>
<ul>
<li>业务侧预热连接池</li>
<li>代理侧预热连接池</li>
<li>代理侧支持连接队列</li>
</ul>
<p>实施效果</p>
<ul>
<li>避免 DB 因突增流量挂掉</li>
<li>避免代理和 DB 因大量建联挂掉</li>
</ul>
<h4 id="45-稳定性和可靠性"><a class="markdownIt-Anchor" href="#45-稳定性和可靠性"></a> 4.5 稳定性和可靠性</h4>
<blockquote>
<p>为什么要高可用？</p>
<p>恶意事故：<s>程序员删库跑路</s></p>
<p>偶然事故：一个机房断电、断网， 某施工队施工的时候挖掘机把某游戏公司的光纤挖断了，一下午的时间，保守估计损失一个亿。</p>
</blockquote>
<h5 id="451-3az-高可用"><a class="markdownIt-Anchor" href="#451-3az-高可用"></a> 4.5.1 3AZ 高可用</h5>
<p><strong>三机房部署</strong></p>
<ul>
<li>机房级别容灾</li>
<li>机房级别流量调度</li>
</ul>
<p><strong>proxy</strong></p>
<ul>
<li>读写分离，分库分表</li>
<li>限流，流量调度</li>
</ul>
<p><strong>监控报警</strong></p>
<ul>
<li>实时监控集群运行状态</li>
<li>提前上报集群风险</li>
</ul>
<p><strong>HA</strong></p>
<ul>
<li>High</li>
<li>Avaliability</li>
<li>实时监控 DB 运行状态</li>
<li>宕机快速切换</li>
</ul>
<blockquote>
<p>BinLog：binlog是mysql用来记录数据库表结构变更以及表数据修改的的二进制日志，它只会记录表的变更操作，但不会记录select和show这种查询操作。</p>
<p>数据恢复：误删数据之后可以通过mysqlbinlog工具恢复数据</p>
<p>主从复制：主库将binlog传给从库，从库接收到之后读取内容写入从库，实现主库和从库数据一致性</p>
<p>审计：可以通过二进制日志中的信息进行审计，判断是否对数据库进行注入攻击</p>
</blockquote>
<h5 id="452-ha-管理"><a class="markdownIt-Anchor" href="#452-ha-管理"></a> 4.5.2 HA 管理</h5>
<p>问题背景</p>
<ul>
<li>DB 所在机器异常宕机</li>
<li>DB 节点异常宕机</li>
</ul>
<p>解决方案</p>
<ul>
<li>HA 服务监管、切换宕机节点</li>
<li>代理支持配置热加载</li>
<li>代理自动屏蔽宕机读节点</li>
</ul>
<p>实施效果</p>
<ul>
<li>读节点宕机秒级恢复</li>
<li>写节点宕机 30s 内恢复</li>
</ul>
<h3 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h3>
<p><a class="link"   href="https://zhuanlan.zhihu.com/p/219516250" >SQL 优化之火山模型 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://dev.mysql.com/doc/refman/8.0/en/innodb-architecture.html" >Innodb 存储引擎 | MySQL 官网 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>青训营记录</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>RDBMS</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis</title>
    <url>/2023/02/22/golang-day17/</url>
    <content><![CDATA[<p>本文来源于第五届字节跳动青训营活动，已收录到<a class="link"   href="https://juejin.cn/post/7202945024749092923" >Redis | 青训营笔记 - 掘金 (juejin.cn) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，主要记录了对 Redis 的学习<span id="more"></span></p>
<h2 id="redis"><a class="markdownIt-Anchor" href="#redis"></a> Redis</h2>
<h3 id="1redis-是什么"><a class="markdownIt-Anchor" href="#1redis-是什么"></a> 1.Redis 是什么</h3>
<h4 id="为什么需要-redis"><a class="markdownIt-Anchor" href="#为什么需要-redis"></a> 为什么需要 Redis</h4>
<ul>
<li>数据从单表，演进出了分库分表</li>
<li>MySQL 从单机演进出了集群
<ul>
<li>数据量增长</li>
<li>读写数据压力的不断增加</li>
</ul>
</li>
<li>数据分冷热
<ul>
<li>热数据：经常被访问到的数据</li>
</ul>
</li>
<li>将热数据存储到内存中</li>
</ul>
<h4 id="redis-基本工作原理"><a class="markdownIt-Anchor" href="#redis-基本工作原理"></a> Redis 基本工作原理</h4>
<ul>
<li>数据从内存中读写</li>
<li>数据保存到硬盘上防止重启数据丢失
<ul>
<li>增量数据保存到 AOF 文件中</li>
<li>全量数据保存到 RDB 文件中</li>
</ul>
</li>
<li>单线程处理所有操作命令</li>
</ul>
<h3 id="2redis-应用案例"><a class="markdownIt-Anchor" href="#2redis-应用案例"></a> 2.Redis 应用案例</h3>
<h4 id="案例"><a class="markdownIt-Anchor" href="#案例"></a> 案例</h4>
<p><strong>1.连续签到</strong></p>
<p>app 每日签到，如果断签，连续签到计数将归 0。</p>
<p>连续签到的要求：每天必须在 23:59 前签到</p>
<ul>
<li>Key：uuid…</li>
<li>value：252</li>
<li>expireAt：24:00</li>
</ul>
<p><strong>String 数据结构</strong></p>
<ul>
<li>可以存储字符串、数字、二进制数据</li>
<li>通常和 expire 配合使用</li>
<li>场景：存储计数、Session</li>
</ul>
<p><strong>2.消息通知</strong></p>
<p>用 list 作为消息队列</p>
<ul>
<li>
<p>使用场景：消息通知</p>
<blockquote>
<p>例如当文章更新时，将更新后的文章推送到 ES，用户就能搜索到最新的文章数据。</p>
</blockquote>
</li>
</ul>
<p><strong>List 数据结构 Quicklist</strong></p>
<p>Quicklist 由一个双向链表和 listpack 实现</p>
<p><strong>3.计数</strong></p>
<p>一个用户有多项计数需求，可通过 hash 结构存储</p>
<p><strong>Hash 数据结构 dict</strong></p>
<ul>
<li>rehash：rehash 操作是将 ht[0] 中的数据，全部迁移到 ht[1] 中。数据量小的场景下，直接将数据从 ht[0] 拷贝到 ht[1] 速度是较快的。数据量大的场景，例如存有上百万的 KV 时，迁移过程将会明显阻塞用户请求。</li>
<li>渐进式 rehash：为避免出现这种情况，使用了 rehash 方案。基本原理就是，每次用户访问时都会迁移少量数据。将整个迁移过程，平摊到所有的访问请求过程中。</li>
</ul>
<p><strong>4.排行榜</strong></p>
<p>积分变化时，排名要实时变更</p>
<p><strong>zset 数据结构 zskiplist</strong></p>
<ul>
<li>结合 dict 后，可实现通过 key 操作跳表的功能</li>
</ul>
<p><strong>5.限流</strong></p>
<ul>
<li>
<p>要求1秒内放行的请求为 N，超过 N 则禁止访问</p>
</li>
<li>
<p>Key：comment_freq_limit_1671356046</p>
<p>对这个 Key 调用 incr，超过限制 N 则禁止访问</p>
<p>1671356046 是当前时间戳</p>
</li>
</ul>
<p><strong>6.分布式锁</strong></p>
<p>并发场景：要求一次只能有一个协程执行。执行完成后，其它等待中的协程才能执行。</p>
<p>可以使用 Redis 的 setnx 实现，利用了两个特性</p>
<ul>
<li>Redis 是单线程执行命令</li>
<li>setnx 只有未设置过才能执行成功</li>
</ul>
<h3 id="3redis-使用注意事项"><a class="markdownIt-Anchor" href="#3redis-使用注意事项"></a> 3.Redis 使用注意事项</h3>
<h4 id="31-大-key-热-key"><a class="markdownIt-Anchor" href="#31-大-key-热-key"></a> 3.1 大 Key、热 Key</h4>
<p><strong>大 Key 的定义</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">数据类型</th>
<th style="text-align:center">大 Key 标准</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">String 类型</td>
<td style="text-align:center">value 的字节数大于 10KB 即为大Key</td>
</tr>
<tr>
<td style="text-align:center">Hash/Set/Zset/list 等复杂数据结构类型</td>
<td style="text-align:center">元素个数大于5000个或总 value 字节数大于 10MB 即为大Key</td>
</tr>
</tbody>
</table>
<p><strong>大 Key 的危害</strong></p>
<ul>
<li>读取成本高</li>
<li>容易导致慢查询（过期、删除）</li>
<li>主从复制异常，服务阻塞，无法正常响应请求</li>
</ul>
<p><strong>业务侧使用大 Key 的表现</strong></p>
<ul>
<li>请求 Redis 超时报错</li>
</ul>
<p><strong>消除大 Key 的方法</strong></p>
<ol>
<li>
<p>拆分</p>
<p>将大 Key 拆分成为小 Key。例如一个 String 拆分成多个 String</p>
</li>
<li>
<p>压缩</p>
<p>将 value 压缩后写入 redis，读取时解压后再使用。压缩算法可以是 gzip、snappy、lz4 等。通常情况下，一个压缩算法压缩率高，则解压耗时就长。需要对实际数据进行测试后，选择一个合适的算法。如果存储的是 JSON 字符串，可以考虑使用 MessagePack 进行序列化。</p>
</li>
<li>
<p>集合类结构 hash、list、set、zset</p>
<ol>
<li>拆分：可以用 hash 取余，位掩码的方式决定放在哪个 key 中。</li>
<li>区分冷热：如榜单列表场景使用zset，只缓存前10页数据，后续数据走db。</li>
</ol>
</li>
</ol>
<p><strong>热 Key 的定义</strong></p>
<p>用户访问一个 Key 的 QPS 特别高，导致 Server 实例出现 CPU 负载突增或者不均的情况。</p>
<p>热 Key 没有明确的标准，QPS 超过500就有可能被识别为热 Key。</p>
<p><strong>解决热 Key 的方法</strong></p>
<ol>
<li>
<p>设置 Localcache</p>
<p>在访问 Redis 之前，在业务服务侧设置 Localcache，降低访问 Redis 的QPS。LocalCache 中缓存过期或未命中，则从 Redis 中将数据更新到 LocalCache。Java 的 Guava、Golang 的 Bigcache 就是这类 LocalCache。</p>
</li>
<li>
<p>拆分</p>
<p>将 key: value 这一个热 Key 复制写入多份，例如 key1: value；key2: value，访问的时候访问多个 key，但 value 是同一个，以此将qps 分散到不同实例上，降低负载。代价是更新时需要更新多个 key，存在数据短暂不一致的风险。</p>
</li>
<li>
<p>使用 Redis 代理的热 Key 承载能力</p>
<p>字节跳动团队的 Redis 访问代理就具备热 Key 承载能力。本质上是结合了“热 Key 发现”、“LocalCache”两个功能</p>
</li>
</ol>
<h4 id="32-慢查询场景"><a class="markdownIt-Anchor" href="#32-慢查询场景"></a> 3.2 慢查询场景</h4>
<p><strong>容易导致 redis 慢查询的操作</strong></p>
<ol>
<li>
<p>批量操作一次性传入过多的 key/value，如 mset/hmset/sadd/zadd 等 O(n) 操作</p>
<blockquote>
<p>建议单批次不要超过100，超过100之后性能下降明显。</p>
</blockquote>
</li>
<li>
<p>zset 大部分命令都是  O(log(n)) ，当大小超过5k以上时，简单的 zadd/zrem 也可能导致慢查询</p>
</li>
<li>
<p>操作的单个 value 过大，超过 10KB，也就是说，要避免使用大 Key</p>
</li>
<li>
<p>对大 Key 的 delete/expire 操作也可能导致慢查询，Redis4.0之前不支持异步删除unlink，大 Key 删除会阻塞 Redis</p>
</li>
</ol>
<h4 id="33-缓存穿透-缓存雪崩"><a class="markdownIt-Anchor" href="#33-缓存穿透-缓存雪崩"></a> 3.3 缓存穿透、缓存雪崩</h4>
<p>缓存穿透：热点数据查询绕过缓存，直接查询数据库</p>
<p>缓存雪崩：大量缓存同时过期</p>
<p><strong>缓存穿透、雪崩的危害</strong></p>
<ol>
<li>
<p>查询一个一定不存在的数据</p>
<p>通常不会缓存不存在的数据，这类查询请求都会直接打到db，如果有系统bug或人为攻击，那么容易导致db响应慢甚至宕机。</p>
</li>
<li>
<p>缓存过期时</p>
<p>在高并发场景下，一个热 key 如果过期，会有大量请求同时击穿至db，容易影响db性能和稳定。</p>
<p>同一时间有大量key集中过期时，也会导致大量请求落到db上，导致查询变慢，甚至出现db无法响应新的查询。</p>
</li>
</ol>
<p><strong>如何减少缓存穿透</strong></p>
<ol>
<li>
<p>缓存空值</p>
<p>如一个不存在的userID，这个id在缓存和数据库中都不存在，则可以缓存一个空值，下次再查询缓存直接返回空值。</p>
</li>
<li>
<p>布隆过滤器</p>
<p>通过 bloom filter 算法来存储合法 Key，得益于该算法超高的压缩率，只需占有极小的空间就能存储大量 key 值。</p>
</li>
</ol>
<p><strong>如何避免缓存雪崩</strong></p>
<ol>
<li>
<p>缓存空值</p>
<p>将缓存失效时间分散开，比如在原有的失效时间基础上增加一个随机值，例如不同Key过期时间，可以设置为10分1秒过期，10分23秒过期，10分8秒过期。单位秒部分就是随机时间，这样过期时间就分散了。</p>
<p>对于热点数据，过期时间尽量设置得长一些，冷门的数据可以相对设置过期时间短一些。</p>
</li>
<li>
<p>使用缓存集群，避免单机宕机造成的缓存雪崩。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>青训营记录</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Go 工程进阶</title>
    <url>/2023/01/26/golang-day2/</url>
    <content><![CDATA[<p>本文来源于第五届字节跳动青训营活动，已收录到<a class="link"   href="https://juejin.cn/post/7193685237723824187" >golang工程进阶 | 青训营笔记 - 掘金 (juejin.cn) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，主要记录了对golang工程开发的学习<span id="more"></span></p>
<h2 id="语言进阶"><a class="markdownIt-Anchor" href="#语言进阶"></a> 语言进阶</h2>
<h3 id="1并发-vs-并行"><a class="markdownIt-Anchor" href="#1并发-vs-并行"></a> 1.并发 VS 并行</h3>
<ul>
<li>并发：多线程程序在一个核的CPU上运行</li>
<li>并行：多线程程序在多个核的CPU上运行</li>
</ul>
<p>go语言可以充分发挥多核优势，高效运行</p>
<h4 id="11-goroutine"><a class="markdownIt-Anchor" href="#11-goroutine"></a> 1.1 Goroutine</h4>
<ul>
<li>线程：用户态，轻量级线程，栈MB级别</li>
<li>协程：内核态，线程跑多个协程，栈KB级别</li>
</ul>
<p><strong>关于用户态和内核态的区别</strong></p>
<p>用户态和内核态是操作系统的两种运行级别。</p>
<p>当程序运行在3级特权级上时，就可以称之为运行在用户态，这是最低特权级，是普通用户进程运行的特权级，大部分用户直接面对的程序都是运行在用户态。</p>
<p>当程序运行在0级特权级上时，就可以称之为运行在内核态。</p>
<p>运行在用户态下的程序不能直接访问操作系统内核数据结构和程序。用户态下的程序在其需要操作系统帮助完成某些它没有权限和能力完成的工作时就会切换到内核态，比如操作硬件。</p>
<p>这两种状态的主要差别是</p>
<ul>
<li>处于用户态执行时，进程所能访问的内存空间和对象受到限制，其处于占用的处理器是可被抢占的</li>
<li>处于内核态执行时，能够访问使用的内存空间和对象，且所占有的处理器是不允许被抢占的</li>
</ul>
<p><strong>快速打印</strong></p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hello</span><span class="params">(i <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="built_in">println</span>(<span class="string">&quot;hello goroutine: &quot;</span> + fmt.Sprint(i))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">HelloGoRoutine</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(j <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">            hello(j)</span><br><span class="line">        &#125;(i)</span><br><span class="line">    &#125;</span><br><span class="line">    time.Sleep(time.Second)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h4 id="12-csp"><a class="markdownIt-Anchor" href="#12-csp"></a> 1.2 CSP</h4>
<p>CSP(Communicating Sequential Processes)是一种并发模型。在go语言中提倡通过通信共享内存而不是通过共享内存而实现通信（像Java、C++、Python等都是通过共享内存来实现通信），go语言通过goroutine和channel实现通过通信共享内存，这是go语言的独特优势。</p>
<h4 id="13-channel"><a class="markdownIt-Anchor" href="#13-channel"></a> 1.3 Channel</h4>
<p>通道channel是用来传递数据的一个数据结构。通道可用于两个goroutine之间通过传递一个指定类型的值来同步运行和通讯。操作符&lt;-用于指定通道的方向，发送或接收。如果未指定方向，则为双向通道。</p>
<p>创建通道，通道分为无缓冲通道和有缓冲通道，在创建时指定参数即可。</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>) <span class="comment">//无缓冲通道</span></span><br><span class="line">buf := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">100</span>) <span class="comment">//有缓冲通道,缓冲区大小为100</span></span><br></pre></td></tr></table></figure></div>
<p>通道的基本使用</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line">ch &lt;- v    <span class="comment">//把v发送到通道ch</span></span><br><span class="line">v := &lt;- ch <span class="comment">//从通道ch接收数据,并赋值给v</span></span><br></pre></td></tr></table></figure></div>
<p>一个示例</p>
<ul>
<li>
<p>一个子协程发送0~9数字</p>
</li>
<li>
<p>另一个子协程计算输入数字的平方</p>
</li>
<li>
<p>主协程输出结果</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CalSqrt</span><span class="params">()</span></span> &#123;</span><br><span class="line">    src := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line">    dest := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">3</span>)</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">defer</span> <span class="built_in">close</span>(src)</span><br><span class="line">        <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">            src &lt;- i</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">defer</span> <span class="built_in">close</span>(dest)</span><br><span class="line">        <span class="keyword">for</span> i := <span class="keyword">range</span> src &#123;</span><br><span class="line">            dest &lt;- i * i</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="keyword">for</span> i := <span class="keyword">range</span> dest &#123;</span><br><span class="line">        <span class="built_in">println</span>(i)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
</ul>
<h4 id="14-并发安全-lock"><a class="markdownIt-Anchor" href="#14-并发安全-lock"></a> 1.4 并发安全 Lock</h4>
<p>对变量执行大量重复操作，使用多个协程并发执行，利用锁来保证最终结果的正确性</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> (</span><br><span class="line">	x    <span class="type">int64</span></span><br><span class="line">    lock sync.Mutex</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">addWithLock</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">2000</span>; i++ &#123;</span><br><span class="line">        lock.Lock()</span><br><span class="line">        x += <span class="number">1</span></span><br><span class="line">        lock.Unlock()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Add</span><span class="params">()</span></span> &#123;</span><br><span class="line">    x = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">go</span> addWithLock()</span><br><span class="line">    &#125;</span><br><span class="line">    time.Sleep(time.Second)</span><br><span class="line">    <span class="built_in">println</span>(x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h4 id="15-waitgroup"><a class="markdownIt-Anchor" href="#15-waitgroup"></a> 1.5 WaitGroup</h4>
<p>waitgroup是go语言应用开发过程中经常使用的并发控制技术。其内部通过一个计数器来统计协程，这个计数器的值需要在启动协程之前用Add方法初始化，在结束一个协程的时候使用Done方法将计数器-1</p>
<p>当开启一个协程时，计数器+1；当一个协程执行完时，计数器-1；主线程会一直阻塞直到计数器为0。</p>
<p>改造前面的协程快速打印的示例，使用waitgroup实现协程的同步阻塞。</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GoWait</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line">    wg.Add(<span class="number">5</span>)  <span class="comment">//先初始化计数器再启动协程</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(j <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">            <span class="keyword">defer</span> wg.Done()</span><br><span class="line">            hello(j) <span class="comment">//hello函数参考前面的例子</span></span><br><span class="line">        &#125;(i)</span><br><span class="line">    &#125;</span><br><span class="line">    wg.Wait()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="依赖管理"><a class="markdownIt-Anchor" href="#依赖管理"></a> 依赖管理</h2>
<p>go语言依赖管理的演进路线和go module实践。</p>
<p>依赖指各种开发包或者库，利用已经封装好的、经过验证的开发组件或工具，能够大大提升开发效率。</p>
<p>对于简单的程序来说，只需要依赖原生的SDK即可。对于实际工程来说，更多的是关注业务逻辑的实现，涉及框架、日志、驱动driver以及collection等一系列依赖都会通过sdk的方式引入，因此就需要对依赖包进行管理。</p>
<p>go依赖管理的演进主要经历了3个阶段，从GOPATH到Go Vendor再到目前被广泛应用的Go Module。主要围绕实现两个目标来迭代发展</p>
<ul>
<li>不同环境（项目）依赖的版本不同</li>
<li>控制依赖库的版本</li>
</ul>
<h3 id="gopath"><a class="markdownIt-Anchor" href="#gopath"></a> GOPATH</h3>
<p>GOPATH是go语言支持的一个环境变量，是go项目的工作区。根目录有以下结构</p>
<ul>
<li>src：存放go项目的源码</li>
<li>pkg：存放编译的中间产物，加快编译速度</li>
<li>bin：存在go项目编译生成的二进制文件</li>
</ul>
<p><strong>GOPATH的弊端</strong></p>
<p>GOPATH无法实现package的多版本控制。同一个pkg，存在两个版本，有两个项目依赖不同的版本，但是src下只能存放一个版本，那么就无法保证两个版本的项目都能通过编译。就是说在GOPATH管理模式下，如果多个项目依赖同一个库，则该库只能是同一份代码，无法实现多个项目依赖同一个库的不同版本。于是Go Vendor应运而生。</p>
<h3 id="go-vendor"><a class="markdownIt-Anchor" href="#go-vendor"></a> Go Vendor</h3>
<p>Go Vendor在GOPATH的基础上增加了vendor目录，用于存放当前项目依赖的副本。在Vendor机制下，如果当前目录存在vendor目录，则会优先使用该目录下的依赖，如果依赖不存在，再从GOPATH中寻找。这样，通过每个项目引入一份依赖副本，解决了多个项目需要同一个package依赖的冲突问题。但是vendor无法很好解决依赖包版本变动问题和一个项目依赖同一个包的不同版本的问题。实质上，vendor并不能很清晰地标识依赖的版本概念，无法控制依赖的版本，更新项目又可能导致依赖冲突、编译出错。于是又诞生了Go Module。</p>
<h3 id="go-module"><a class="markdownIt-Anchor" href="#go-module"></a> Go Module</h3>
<p>Go Module是go语言官方推出的依赖管理系统，解决了之前依赖管理系统存在的诸多问题。Go Module在go语言1.11版本开始引入，在go语言1.16版本默认开启。习惯上将Go Module称为go mod。</p>
<ul>
<li>通过go.mod文件管理依赖包版本</li>
<li>通过go get/go mod指令工具管理依赖包</li>
</ul>
<p>go mod最终目标是定义版本规则和管理项目依赖关系。（相当于Java中的Maven）</p>
<h3 id="依赖管理三要素"><a class="markdownIt-Anchor" href="#依赖管理三要素"></a> 依赖管理三要素</h3>
<table>
<thead>
<tr>
<th style="text-align:center">要素</th>
<th style="text-align:center">对应工具</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">配置文件，描述依赖</td>
<td style="text-align:center">go.mod</td>
</tr>
<tr>
<td style="text-align:center">中心仓库管理依赖库</td>
<td style="text-align:center">Proxy</td>
</tr>
<tr>
<td style="text-align:center">本地工具</td>
<td style="text-align:center">go get / go mod</td>
</tr>
</tbody>
</table>
<h3 id="依赖配置go-mod"><a class="markdownIt-Anchor" href="#依赖配置go-mod"></a> 依赖配置——go mod</h3>
<p>使用模块路径来标识一个模块，从模块路径找到该模块，如果是github前缀则表示可以从github仓库中找到该模块，依赖包的源代码由github托管，如果项目的子包需要被单独引用，则通过单独的init go.mod文件进行管理。</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line">module example/project/app <span class="comment">//依赖管理基本单元</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="number">1.16</span> <span class="comment">//原生sdk版本</span></span><br><span class="line"></span><br><span class="line">require (</span><br><span class="line">    <span class="comment">// 单元依赖</span></span><br><span class="line">    <span class="comment">// 依赖标识:模块路径+版本</span></span><br><span class="line">	example/lib1 v1<span class="number">.0</span><span class="number">.2</span></span><br><span class="line">    example/lib2 v1<span class="number">.0</span><span class="number">.0</span></span><br><span class="line">    ...</span><br><span class="line">)</span><br></pre></td></tr></table></figure></div>
<h3 id="依赖配置version"><a class="markdownIt-Anchor" href="#依赖配置version"></a> 依赖配置——version</h3>
<p>GOPATH和Go Vendor都是源码副本形式的依赖，没有版本规则的概念，而go mod为了方便管理定义了版本规则，分为语义化版本和基于commit的伪版本。</p>
<ul>
<li>
<p>语义化版本有三个部分<code>$&#123;MAJOR&#125;.$&#123;MINOR&#125;.$&#123;PATCH&#125;</code>，如v1.3.0，v2.3.0</p>
<p>不同的MAJOR版本表示是不兼容的API，所以即使是同一个库，MAJOR版本不同也会被认为是不同的模块。</p>
<p>MINOR版本通常是新增函数或功能，向后兼容。</p>
<p>PATCH版本一般是修复bug。</p>
</li>
<li>
<p>基于commit的伪版本也有三个部分<code>vX.0.0-yyyymmddhhmmss-abcdefgh1234</code></p>
<p>基础版本前缀和语义化版本是一样的。</p>
<p>时间戳，也就是提交commit的时间。</p>
<p>最后是校验码，包含12位的哈希前缀。每次commit后go都会默认生成一个伪版本号。</p>
</li>
</ul>
<h3 id="依赖配置indirect"><a class="markdownIt-Anchor" href="#依赖配置indirect"></a> 依赖配置——indirect</h3>
<p>依赖单元中的特殊标识符，indirect后缀，表示go.mod对应的当前模块没有直接导入该依赖模块的包，也就是间接依赖。</p>
<h3 id="依赖配置incompatible"><a class="markdownIt-Anchor" href="#依赖配置incompatible"></a> 依赖配置——incompatible</h3>
<p>在主版本为v2及以上的模块后面会有+incompatible后缀，这让go mod能够按照不同的模块来处理同一个项目不同主版本的依赖。由于go mod是在go1.11版本才开始引入，在这个更新之前已经有一些仓库打上了v2或者更高的版本tag。为了兼容这部分仓库，对于没有go.mod文件且MAJOR主版本在v2及以上的依赖，会在版本号后面加上<code>+incompatible</code>的后缀，表示可能存在不兼容的源代码。</p>
<h3 id="依赖配置依赖图"><a class="markdownIt-Anchor" href="#依赖配置依赖图"></a> 依赖配置——依赖图</h3>
<p>如果一个主项目依赖A、B两个项目，A、B分别依赖C项目v1.3、v1.4的两个版本，则最终编译时所使用的C项目版本为最低的兼容版本，即v1.4。</p>
<h3 id="依赖分发回源"><a class="markdownIt-Anchor" href="#依赖分发回源"></a> 依赖分发——回源</h3>
<p>依赖分发，也就是指go mod从哪里下载，如何下载。</p>
<p>Go Modules系统中定义的依赖最终可以对应到多版本代码管理系统中某一项目的特定提交或版本，这样的话，对于go.mod中定义的依赖，则直接可以从对应仓库中下载指定软件依赖，从而完成依赖分发。</p>
<p>但直接使用版本管理仓库下载依赖，存在诸多问题</p>
<ul>
<li>无法保证构建确定性，软件作者可以直接在代码平台 增加/修改/删除 软件版本，导致下次构建时使用另外版本的依赖或者找不到依赖版本。</li>
<li>无法保证依赖可用性，依赖软件作者可以直接在代码平台删除软件，导致依赖不可用。</li>
<li>增加第三方压力，每次从第三方代码托管平台下载依赖时都会增加第三方代码托管平台的压力。</li>
</ul>
<h3 id="依赖分发proxy"><a class="markdownIt-Anchor" href="#依赖分发proxy"></a> 依赖分发——Proxy</h3>
<p>Go Proxy就是解决上述的依赖分发问题。Go Proxy是一个服务站点，它会缓存源站中的软件内容，缓存的软件版本不会改变，并且在源站软件删除之后依然能够下载，从而实现了immutability（不变性）和available（可用的）的依赖分发。</p>
<p>使用Go Proxy之后，构建时会直接从Go Proxy站点拉取依赖。</p>
<h3 id="依赖分发变量-goproxy"><a class="markdownIt-Anchor" href="#依赖分发变量-goproxy"></a> 依赖分发——变量 GOPROXY</h3>
<p>Go Modules通过GOPROXY环境变量使用Go Proxy服务。GOPROXY是一个Go Proxy站点URL列表，可以使用&quot;direct&quot;表示源站。</p>
<p>示例配置</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">GOPROXY=<span class="string">&quot;https://proxy1.cn, https://proxy2.cn, direct&quot;</span></span><br></pre></td></tr></table></figure></div>
<p>对于以上配置，整体的依赖寻址路径会先从proxy1下载，如果proxy1不存在，再从proxy2寻找，如果proxy2不存在，则回源到源站直接下载依赖，并缓存到proxy站点中。</p>
<h3 id="工具go-get"><a class="markdownIt-Anchor" href="#工具go-get"></a> 工具——go get</h3>
<p>go get是Go Module的两个重要工具之一。</p>
<p>go get使用命令</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">go get example.org/pkg...</span><br></pre></td></tr></table></figure></div>
<p>以上命令后面接不同的指令，这些指令具有不同的作用</p>
<table>
<thead>
<tr>
<th style="text-align:center">指令</th>
<th style="text-align:center">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">@update</td>
<td style="text-align:center">默认</td>
</tr>
<tr>
<td style="text-align:center">@none</td>
<td style="text-align:center">删除依赖</td>
</tr>
<tr>
<td style="text-align:center">@v1.1.2</td>
<td style="text-align:center">下载指定tag版本，语义版本</td>
</tr>
<tr>
<td style="text-align:center">@23dfdd5</td>
<td style="text-align:center">特定的commit</td>
</tr>
<tr>
<td style="text-align:center">@master</td>
<td style="text-align:center">分支的最新commit</td>
</tr>
</tbody>
</table>
<h3 id="工具go-mod"><a class="markdownIt-Anchor" href="#工具go-mod"></a> 工具——go mod</h3>
<p>go mod也是Go Module中的重要工具。</p>
<p>go mod 使用命令</p>
<p>初始化，创建go.mod文件</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">go mod init</span><br></pre></td></tr></table></figure></div>
<p>下载模块到本地缓存</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">go mod download</span><br></pre></td></tr></table></figure></div>
<p>增加需要的依赖，删除不需要的依赖</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">go mod tidy</span><br></pre></td></tr></table></figure></div>
<p>在实际开发中，建议在向仓库提交代码之前执行<code>go mod tidy</code>，可以减少构建时无效依赖包的拉取。</p>
<p><strong>使用go mod前的一些注意事项</strong></p>
<ul>
<li>设置GO111MODULE=on，表示只使用Go Module而不会使用GOPATH。具体配置参考<a class="link"   href="https://goproxy.cn/" >七牛云 - Goproxy.cn <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li>清空IDE中的所有的GOPATH。go mod和GOPATH不能并存，开启go mod之后需要在IDE中把项目从GOPATH移除，否则可能会出错。</li>
<li>在项目中创建go.mod文件，如果已经存在则不需要重新创建。创建完go.mod文件后先执行<code>go mod tidy</code>来增加项目启动所需的最小依赖。</li>
</ul>
<h2 id="测试"><a class="markdownIt-Anchor" href="#测试"></a> 测试</h2>
<p>在实际工程开发中，除了依赖管理，还有另一个重要概念就是单元测试，包括单元测试规范、Mock测试、基准测试。测试关系着系统的质量，质量决定线上系统的稳定性，一旦出现问题就会引起事故。测试就是为了避免这些事故。</p>
<p>测试一般分为回归测试，集成测试和单元测试。回归测试一般是手动通过终端回归一些固定的主流场景，集成测试是对系统功能维度做测试验证，而单元测试阶段，开发者对单独的函数、模块做功能验证，层级至上而下，测试成本逐渐降低，测试覆盖率逐步上升。因此单元测试的覆盖率一定程度上决定了代码的质量。</p>
<h3 id="单元测试"><a class="markdownIt-Anchor" href="#单元测试"></a> 单元测试</h3>
<p>单元测试主要包括输入、测试单元、输出，以及校对。单元的概念比较广泛，包括接口、函数、模块等。最后的校对用于保证代码的功能符合预期。单元测试一方面可以保证质量，在整体覆盖率足够的情况下，一定程度上即保证了新功能本身的正确性，又保护了原有代码的完整性；另一方面可以提升效率，在代码存在bug的情况下，通过单元测试，可以在较短周期内定位和修复问题。</p>
<h4 id="规则"><a class="markdownIt-Anchor" href="#规则"></a> 规则</h4>
<p>单元测试的一些基本规范</p>
<ul>
<li>所有测试文件名称以_test.go结尾</li>
<li>所有用于测试的函数声明为<code>func TestXxx(t *testing.T)</code></li>
<li>初始化逻辑放到TestMain函数中实现</li>
</ul>
<p>这样就很好地区分了源代码和测试代码。</p>
<h4 id="示例"><a class="markdownIt-Anchor" href="#示例"></a> 示例</h4>
<p>源代码</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">HelloTom</span><span class="params">()</span></span> <span class="type">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Jerry&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>测试代码</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestHelloTom</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">    output := HelloTom()</span><br><span class="line">    expectOutput := <span class="string">&quot;Tom&quot;</span></span><br><span class="line">    <span class="keyword">if</span> output != expectOutput &#123;</span><br><span class="line">        t.Errorf(<span class="string">&quot;Expected %s do not match actual %s&quot;</span>, expectOutput, output)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h4 id="运行"><a class="markdownIt-Anchor" href="#运行"></a> 运行</h4>
<p>运行查看结果</p>
<h4 id="assert"><a class="markdownIt-Anchor" href="#assert"></a> assert</h4>
<p>assert包提供了对代码测试的支持，能够快速方便地进行代码测试</p>
<p>获取assert包，在当前项目中使用以下命令</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">go get github.com/stretchr/testify/assert</span><br></pre></td></tr></table></figure></div>
<p>改造原来的测试代码</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestHelloTom</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">    output := HelloTom()</span><br><span class="line">    expectOutput := <span class="string">&quot;Tom&quot;</span></span><br><span class="line">    assert.Equal(t, expectOutput, output)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>运行查看结果，使用assert测试能够输出更加详细的信息。</p>
<h4 id="覆盖率"><a class="markdownIt-Anchor" href="#覆盖率"></a> 覆盖率</h4>
<p>代码覆盖率用于衡量代码是否经过了足够的测试，评价项目的测试水准，评估项目是否达到了高水准测试等级。</p>
<p><strong>示例代码</strong></p>
<p>judgment.go</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">JudgePassLine</span><span class="params">(score <span class="type">int16</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> score &gt;= <span class="number">60</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>judgment_test.go</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestJudgePassLineTrue</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">    isPass := JudgePassLine(<span class="number">70</span>)</span><br><span class="line">    assert.Equal(t, <span class="literal">true</span>, isPass)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>使用以下命令进行测试</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">go <span class="built_in">test</span> judgment_test.go judgment.go --cover</span><br></pre></td></tr></table></figure></div>
<p>通过指定cover参数，可以看到覆盖率，表示执行到的代码行数占实际代码总行数。</p>
<p><strong>提升覆盖率</strong></p>
<p>可以在测试代码中增加其他的情况，重新执行所有单元测试，最终使覆盖率达到100%</p>
<p>新增测试函数</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestJudgePassLineFail</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">    isPass := JudgePassLine(<span class="number">50</span>)</span><br><span class="line">    assert.Equal(t, <span class="literal">false</span>, isPass)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>重新执行测试命令，指定cover参数，查看测试结果。</p>
<h4 id="tips"><a class="markdownIt-Anchor" href="#tips"></a> Tips</h4>
<ul>
<li>实际项目中，一般要求覆盖率是50%~60%，对于资金型服务，覆盖率要求达到80%以上。</li>
<li>在进行单元测试时，要求测试分支相互独立、全面覆盖。</li>
<li>测试单元粒度足够小，函数职责单一，即要求函数体足够小，这样能比较简单地提升覆盖率，也符合函数设计的单一职责。</li>
</ul>
<h3 id="mock测试"><a class="markdownIt-Anchor" href="#mock测试"></a> Mock测试</h3>
<p>工程中复杂的项目一般会依赖File、DB、Cache等外部依赖，而单元测试需要保证稳定性和幂等性。稳定性指相互隔离，能在任何时间、任何环境下运行测试；幂等是指每次测试运行都应该产生与之前一样的结果。而实现这些目的就需要Mock机制。</p>
<h4 id="文件处理"><a class="markdownIt-Anchor" href="#文件处理"></a> 文件处理</h4>
<p>将测试文件进行删除，进行单元测试，测试通过，但单元测试需要依赖本地的文件，如果文件被修改或者删除测试就会失败，也就是说删除文件的测试普通情况下只能测试一次。为了保证测试case的稳定性，需要对删除文件函数进行mock，屏蔽对文件的依赖。</p>
<h4 id="快速mock函数"><a class="markdownIt-Anchor" href="#快速mock函数"></a> 快速Mock函数</h4>
<p>这里提供了一个开源的mock测试库<a class="link"   href="https://github.com/bouk/monkey" >Monkey patching in Go <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，可以对函数或者实例的方法进行mock测试，原理是反射和指针赋值。这里引入了一个打桩的概念，桩或者桩代码就是指用来代替关联代码或者未实现代码的代码，目的主要是隔离、补齐、控制。</p>
<p>快速Mock函数能为一个函数打桩或为一个方法打桩。Monkey Patch的作用域在Runtime，在运行时通过Go的unsafe包，能够将内存中函数的地址替换为运行时函数的地址，将待打桩函数或方法的实现跳转到运行时。</p>
<h4 id="示例-2"><a class="markdownIt-Anchor" href="#示例-2"></a> 示例</h4>
<p>通过patch对ReadFirstLine进行打桩mock，通过defer卸载mock，使整个测试函数脱离了对本地文件的依赖。</p>
<p>源代码</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ReadFirstLine</span><span class="params">()</span></span> <span class="type">string</span> &#123;</span><br><span class="line">    open, err := os.Open(<span class="string">&quot;log&quot;</span>)</span><br><span class="line">    <span class="keyword">defer</span> open.Close()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    scanner := bufio.NewScanner(open)</span><br><span class="line">    <span class="keyword">for</span> scanner.Scan() &#123;</span><br><span class="line">        <span class="keyword">return</span> scanner.Text()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ProcessFirstLine</span><span class="params">()</span></span> <span class="type">string</span> &#123;</span><br><span class="line">    line := ReadFirstLine()</span><br><span class="line">    destLine := strings.ReplaceAll(line, <span class="string">&quot;11&quot;</span>, <span class="string">&quot;00&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> destLine</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>测试代码</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestProcessFirstLine</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">    firstLine := ProcessFirstLine()</span><br><span class="line">    assert.Equal(t, <span class="string">&quot;line00&quot;</span>, firstLine)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>测试文件内容</p>
<div class="highlight-container" data-rel="Txt"><figure class="iseeu highlight txt"><table><tr><td class="code"><pre><span class="line">line11</span><br><span class="line">line22</span><br><span class="line">line33</span><br><span class="line">line44</span><br><span class="line">line55</span><br></pre></td></tr></table></figure></div>
<p>monkey的部分源代码实现，主要通过这些函数实现打桩</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Patch</span><span class="params">(target, replacement <span class="keyword">interface</span>&#123;&#125;)</span></span> *PatchGuard &#123;</span><br><span class="line">    t := reflect.ValueOf(target)</span><br><span class="line">    r := reflect.ValueOf(replacement)</span><br><span class="line">    patchValue(t, r)</span><br><span class="line">    <span class="keyword">return</span> &amp;PatchGuard&#123;t, r&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Unpatch</span><span class="params">(target <span class="keyword">interface</span>&#123;&#125;)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> unpatchValue(reflect.ValueOf(target))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>改造测试代码增加函数实现打桩，通过patch对ReadFirstLine进行打桩mock，使其默认返回line110</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestReadFirstLineWithMock</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">	monkey.Patch(ReadFirstLine, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">string</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;line110&quot;</span></span><br><span class="line">	&#125;)</span><br><span class="line">	<span class="keyword">defer</span> monkey.Unpatch(ReadFirstLine)</span><br><span class="line">	line := ProcessFirstLine()</span><br><span class="line">	assert.Equal(t, <span class="string">&quot;line000&quot;</span>, line)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>这样即使没有本地文件，也能够模拟读取、修改或删除文件的测试。</p>
<h3 id="基准测试"><a class="markdownIt-Anchor" href="#基准测试"></a> 基准测试</h3>
<p>go语言还提供了基准测试框架，基准测试是指测试一段程序的运行性能及耗费CPU的程度。在实际项目开发中，经常会遇到代码性能瓶颈，为了定位问题经常要对代码做性能分析，这就用到了基准测试。</p>
<h4 id="示例-3"><a class="markdownIt-Anchor" href="#示例-3"></a> 示例</h4>
<p>服务器负载均衡问题。</p>
<p>源代码，假设有10台服务器，每次随机选择其中1台执行。</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">InitServerIndex</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">		ServerIndex[i] = i + <span class="number">100</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Select</span><span class="params">()</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> ServerIndex[rand.Intn(<span class="number">10</span>)]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>测试代码，基准测试以Benchmark开头，参数类型是testing.B，用b中的N值反复递增循环测试。基准测试对于一个测试用例的默认测试时间是1秒，当测试用例函数返回时还不到1秒，那么testing.B中的N值将按1、2、5、10、20、50…递增，并以递增后的值重新进行用例函数测试。</p>
<p>ResetTimer重置计时器，在重置之前的初始化或其他准备操作，不属于基准测试的范围，通过选择重置的时间点来跳过不必要的测试。</p>
<p>RunParallel是多协程并发测试。执行两个基准测试，可以发现代码在并发情况下存在劣化，主要原因是rand包为了保证全局的随机性和并发安全，使用了全局锁。</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkSelect</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">	InitServerIndex()</span><br><span class="line">	b.ResetTimer()</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; b.N; i++ &#123;</span><br><span class="line">		Select()</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkSelectParallel</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">	InitServerIndex()</span><br><span class="line">	b.ResetTimer()</span><br><span class="line">	b.RunParallel(<span class="function"><span class="keyword">func</span><span class="params">(pb *testing.PB)</span></span> &#123;</span><br><span class="line">		<span class="keyword">for</span> pb.Next() &#123;</span><br><span class="line">			Select()</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h4 id="运行-2"><a class="markdownIt-Anchor" href="#运行-2"></a> 运行</h4>
<p>在IDE中使用<code>gobench benchmark</code>选项进行测试，不要直接运行。</p>
<h4 id="优化"><a class="markdownIt-Anchor" href="#优化"></a> 优化</h4>
<p>为了解决上述的随机性能瓶颈问题，有一个开源的高性能随机数方法fastrand，仓库地址<a class="link"   href="https://github.com/bytedance/gopkg" >bytedance/gopkg <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>。主要思路是牺牲了一定的数列一致性来换取性能，在大多数场景下适用，相比原始方法的性能有大幅提升。</p>
<p>引入fastrand</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">go get github.com/bytedance/gopkg</span><br></pre></td></tr></table></figure></div>
<p>将源代码中的rand替换为fastrand即可。</p>
<h2 id="项目实战"><a class="markdownIt-Anchor" href="#项目实战"></a> 项目实战</h2>
<p>在并发编程，依赖管理以及单元测试的基础上，通过项目实践来理解项目开发的思路和流程，主要包括需求设计，代码开发和测试运行。</p>
<h3 id="需求设计"><a class="markdownIt-Anchor" href="#需求设计"></a> 需求设计</h3>
<h4 id="需求背景"><a class="markdownIt-Anchor" href="#需求背景"></a> 需求背景</h4>
<p>开发一个类似掘金社区的服务端小功能。</p>
<h4 id="需求描述"><a class="markdownIt-Anchor" href="#需求描述"></a> 需求描述</h4>
<p>社区话题页面</p>
<ul>
<li>展示话题（标题、文字描述）和回帖列表</li>
<li>暂不考虑前端页面实现，仅仅实现一个本地web服务</li>
<li>话题和回帖数据用文件存储</li>
</ul>
<h4 id="需求用例"><a class="markdownIt-Anchor" href="#需求用例"></a> 需求用例</h4>
<p>主要涉及用户浏览消费，页面的展示，包括话题内容和回帖的列表。可以先抽象出两个实体，话题内容和回帖列表，分析它们所具有的属性以及联系，定义出结构体。</p>
<h4 id="er-图entity-relationship-diagram"><a class="markdownIt-Anchor" href="#er-图entity-relationship-diagram"></a> ER 图——Entity Relationship Diagram</h4>
<p>ER图用于描述现实世界的概念模型。有了模型实体、属性以及联系，就能进入下一步，思考代码结构设计。</p>
<p>参考ER图设计：Topic话题有id、titile、content、create_time四个属性。Post帖子有id、topic_id、content、create_time四个属性，其中id和topic_id和Topic相联系。</p>
<p>这里采用典型的分层结构设计。</p>
<h3 id="代码开发"><a class="markdownIt-Anchor" href="#代码开发"></a> 代码开发</h3>
<h4 id="分层结构"><a class="markdownIt-Anchor" href="#分层结构"></a> 分层结构</h4>
<p>分层结构整体分为三层，repository数据层，service逻辑层，controller视图层。</p>
<ul>
<li>数据层关联底层数据模型，也就是model，封装外部数据的增删改查。这里的数据存储在本地文件，通过文件操作拉取话题，帖子数据。</li>
<li>数据层面向逻辑层，也就是对service层透明，屏蔽下游数据差异，即逻辑层不需要考虑数据的来源是本地文件、数据库还是微服务等。逻辑层只处理核心业务逻辑，接口模型保持不变，计算打包业务实体Entity，对应需求并上传给视图层。</li>
<li>视图层controller负责处理与外部交互的逻辑，以view视图的形式返回给客户端。这里只考虑封装为json格式化的请求结果，通过API形式访问即可。</li>
</ul>
<h4 id="组件工具"><a class="markdownIt-Anchor" href="#组件工具"></a> 组件工具</h4>
<p>开发涉及的基础组件工具。Gin：开源的高性能go web框架，源地址<a class="link"   href="https://github.com/gin-gonic/gin" >gin-gonic <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>。这里基于gin搭建web服务器，本项目主要涉及路由分发的概念，不涉及其他复杂概念。</p>
<p>使用web框架，需要用Go Module依赖管理。先用go mod init初始化go.mod管理配置文件。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">go mod init main</span><br><span class="line">go mod tidy</span><br></pre></td></tr></table></figure></div>
<p>下载gin依赖</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">go get -u github.com/gin-gonic/gin</span><br></pre></td></tr></table></figure></div>
<p>在框架依赖的基础上，只需要关注业务本身的实现，从repository到service再到controller逐步实现。</p>
<h4 id="repository"><a class="markdownIt-Anchor" href="#repository"></a> Repository</h4>
<h5 id="struct"><a class="markdownIt-Anchor" href="#struct"></a> struct</h5>
<p>根据之前的ER图定义结构体</p>
<h5 id="index"><a class="markdownIt-Anchor" href="#index"></a> index</h5>
<p>查询数据可以使用全扫描遍历的方式，但是效率不高，所以这里引入索引的概念。</p>
<p>索引就像书的目录，可以快速查找定位到需要的结果。这里利用map实现内存索引，在服务对外暴露前，利用文件元数据初始化全局内存索引，实现O(1)时间复杂度的查找操作。</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> (</span><br><span class="line">	topicIndexMap <span class="keyword">map</span>[<span class="type">int64</span>]*Topic</span><br><span class="line">    postIndexMap  <span class="keyword">map</span>[<span class="type">int64</span>][]*Post</span><br><span class="line">)</span><br></pre></td></tr></table></figure></div>
<p>具体实现，打开文件，基于file初始化scanner，通过迭代器方式遍历数据行，转化为结构体存储至内存map，完成初始化话题内存索引。同理实现帖子的内存索引初始化</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">initTopicIndexMap</span><span class="params">(filePath <span class="type">string</span>)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">    open, err := os.Open(filePath + <span class="string">&quot;topic&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    scanner := bufio.NewScanner(open)</span><br><span class="line">    topicTmpMap := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">int64</span>]*Topic)</span><br><span class="line">    <span class="keyword">for</span> scanner.Scan() &#123;</span><br><span class="line">        text := scanner.Text()</span><br><span class="line">        <span class="keyword">var</span> topic Topic</span><br><span class="line">        <span class="keyword">if</span> err := json.Unmarshal([]<span class="type">byte</span>(text), &amp;topic); err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> err</span><br><span class="line">        &#125;</span><br><span class="line">        topicTmpMap[topic.Id] = &amp;topic</span><br><span class="line">    &#125;</span><br><span class="line">    topicIndexMap = topicTmpMap</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h5 id="查询"><a class="markdownIt-Anchor" href="#查询"></a> 查询</h5>
<p>实现查询操作，直接查询key获取map中的value。这里使用了sync.Once，主要适用于高并发的情况下只执行一次的场景。基于Once的实现模式就是单例模式，减少存储的浪费。</p>
<p>topic查询实现，这里的topic结构体自行设计。同理实现post的查询</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> TopicDao <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">	topicDao  *TopicDao</span><br><span class="line">    topicOnce sync.Once</span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewTopicDaoInstance</span><span class="params">()</span></span> *TopicDao &#123;</span><br><span class="line">    topicOnce.Do(</span><br><span class="line">        <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">            topicDao = &amp;TopicDao&#123;&#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="keyword">return</span> topicDao</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(*TopicDao)</span></span> QueryTopicById(id <span class="type">int64</span>) *Topic &#123;</span><br><span class="line">    <span class="keyword">return</span> topicIndexMap[id]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h4 id="service"><a class="markdownIt-Anchor" href="#service"></a> Service</h4>
<p>实现了repository层之后就是service层。</p>
<p>定义service层实体</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> PageInfo <span class="keyword">struct</span> &#123;</span><br><span class="line">    Topic *repository.Topic</span><br><span class="line">    PostList []*repository.Post</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>实现流程是参数校验、准备数据、组装实体。</p>
<p>代码流程编排，通过err控制流程退出，正常的话会返回页面信息。</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f *QueryPageInfoFlow)</span></span> Do() (*PageInfo, <span class="type">error</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> err := f.checkParam(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> err := f.prepareInfo(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> err := f.packPageInfo(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> f.pageInfo, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>prepareInfo方法实现，由于话题和回帖信息的获取都需要topicId，这就可以考虑并行执行，提高效率。并行可以充分利用多核CPU的资源，降低接口耗时。</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f *QueryPageInfoFlow)</span></span> prepareInfo() <span class="type">error</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line">    wg.Add(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;...&#125; <span class="comment">//获取topic信息</span></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;...&#125; <span class="comment">//获取post列表</span></span><br><span class="line">    wg.Wait()</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h4 id="controller"><a class="markdownIt-Anchor" href="#controller"></a> Controller</h4>
<p>service层之后是controller层。定义一个view对象，通过code msg打包业务状态信息，用data承载业务实体信息。</p>
<p>参考代码</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> PageData <span class="keyword">struct</span> &#123;</span><br><span class="line">    Code <span class="type">int64</span>       <span class="string">`json:&quot;code&quot;`</span></span><br><span class="line">    Msg  <span class="type">string</span>      <span class="string">`json:&quot;msg&quot;`</span></span><br><span class="line">    Data <span class="keyword">interface</span>&#123;&#125; <span class="string">`json:&quot;data&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">QueryPageInfo</span><span class="params">(topicIdStr <span class="type">string</span>)</span></span> *PageData &#123;</span><br><span class="line">    topicId, err := strconv.ParseInt(topicIdStr, <span class="number">10</span>, <span class="number">64</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;...&#125;</span><br><span class="line">    pageInfo, err := service.QueryPageInfo(topicId)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;...&#125;</span><br><span class="line">    <span class="keyword">return</span> &amp;PageData&#123;</span><br><span class="line">        Code: <span class="number">0</span>,</span><br><span class="line">        Msg: <span class="string">&quot;success&quot;</span>,</span><br><span class="line">        Data: <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int64</span>&#123;</span><br><span class="line">            <span class="string">&quot;post_id&quot;</span>: postId,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h4 id="router"><a class="markdownIt-Anchor" href="#router"></a> Router</h4>
<p>最后是web服务的引擎配置，包括</p>
<ul>
<li>初始化数据索引</li>
<li>初始化引擎配置</li>
<li>构建路由</li>
<li>启动服务</li>
</ul>
<p>path映射到具体的controller，通过path变量传递话题id。</p>
<p>参考写法</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> err := Init(<span class="string">&quot;./data/&quot;</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        os.Exit(<span class="number">-1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    r := gin.Default()</span><br><span class="line">    r.GET(<span class="string">&quot;/community/page/get/:id&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">        topicId := c.Param(<span class="string">&quot;id&quot;</span>)</span><br><span class="line">        data := controller.QueryPageInfo(topicId)</span><br><span class="line">        c.JSON(<span class="number">200</span>, data)</span><br><span class="line">    &#125;)</span><br><span class="line">    err := r.Run()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="测试运行"><a class="markdownIt-Anchor" href="#测试运行"></a> 测试运行</h3>
<p>通过go run命令运行本地web服务，main.go是这里main方法所在的go文件，文件名称可以自定义</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">go run main.go</span><br></pre></td></tr></table></figure></div>
<p>通过curl命令请求服务暴露的接口，查看结果。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">curl --location --request GET <span class="string">&quot;http://0.0.0.0:8080/community/get/1&quot;</span> | json</span><br></pre></td></tr></table></figure></div>
<p>这里的json命令是通过nodejs的npm安装的，用于格式化curl输出的json信息。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g json</span><br></pre></td></tr></table></figure></div>
<h2 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h2>
<p><a class="link"   href="https://www.cnblogs.com/gizing/p/10925286.html" >用户态和内核态的区别 - Gizing - 博客园 (cnblogs.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://segmentfault.com/a/1190000018150987" >Go goroutine理解 - golang开发笔记 - SegmentFault 思否 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://www.runoob.com/go/go-concurrent.html" >Go 并发 | 菜鸟教程 (runoob.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://juejin.cn/post/7181812988461252667" >深入理解 go sync.Waitgroup - 掘金 (juejin.cn) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://blog.csdn.net/Sihang_Xie/article/details/124851399" >【Go语言入门】一文搞懂Go语言的最新依赖管理：go mod的使用 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>青训营记录</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Go 高质量编程与性能调优</title>
    <url>/2023/01/28/golang-day3/</url>
    <content><![CDATA[<p>本文来源于第五届字节跳动青训营活动，已收录到<a class="link"   href="https://juejin.cn/post/7194132732492906551" >golang高质量编程与性能调优 | 青训营笔记 - 掘金 (juejin.cn) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，主要记录了对golang高质量编程与性能调优的学习<span id="more"></span></p>
<h2 id="高质量编程与性能调优实战"><a class="markdownIt-Anchor" href="#高质量编程与性能调优实战"></a> 高质量编程与性能调优实战</h2>
<p>主要内容</p>
<ul>
<li>如何编写更简洁清晰的代码</li>
<li>常用Go语言程序的优化手段</li>
<li>熟悉Go程序性能分析工具</li>
<li>了解工程中性能优化的原则和流程</li>
</ul>
<h3 id="1高质量编程"><a class="markdownIt-Anchor" href="#1高质量编程"></a> 1.高质量编程</h3>
<h4 id="11-简介"><a class="markdownIt-Anchor" href="#11-简介"></a> 1.1 简介</h4>
<p>高质量代码：编写的代码能够达到正确可靠、简洁清晰的目标。</p>
<ul>
<li>
<p>正确性：考虑各种边界条件，能够处理错误的调用。</p>
</li>
<li>
<p>可靠性：异常情况或者错误处理的策略明确，依赖的服务出现异常能够及时处理。</p>
</li>
<li>
<p>简单：逻辑简单，后续调整功能或新增功能能够快速支持。</p>
</li>
<li>
<p>清晰：其他人在阅读代码时容易理解，重构或者修改功能不会出现无法预料的问题。</p>
</li>
</ul>
<p>编程的原则</p>
<p><strong>简单性</strong></p>
<p>消除“多余的复杂性”，以简单清晰的逻辑编写代码。复杂的逻辑难以重构和优化，无法明确预知其调整造成的影响范围，也难以在排查问题时定位。</p>
<p><strong>可读性</strong></p>
<p>从后期来看，大部分工作是对已有功能的完善和扩展，对应功能的代码会存在很长时间。维护是一个项目最漫长的周期，好的可读性可以降低维护的时间成本。</p>
<p><strong>生产力</strong></p>
<p>Go语言有特定的代码格式限制，甚至有专门的工具强制统一所有代码格式。遵循代码规范，能够避免常见的缺陷代码，降低后续联调、测试、验证、上线等各个节点出现问题的概率以及快速排查定位问题。</p>
<h3 id="12-编码规范"><a class="markdownIt-Anchor" href="#12-编码规范"></a> 1.2 编码规范</h3>
<h4 id="121-代码格式"><a class="markdownIt-Anchor" href="#121-代码格式"></a> 1.2.1 代码格式</h4>
<p>推荐使用gofmt自动格式化代码，gofmt是Go语言官方提供的工具，能够自动格式化GO语言代码为官方统一风格，常见的IDE都支持配置。</p>
<p>另外的，goimports会对依赖包进行管理，自动增删依赖包引用，按字母排序分类。</p>
<h4 id="122-注释"><a class="markdownIt-Anchor" href="#122-注释"></a> 1.2.2 注释</h4>
<p>注释有以下四种使用方式</p>
<ul>
<li>
<p>解释代码作用。</p>
<p>适合说明公共符号，比如对外提供的函数用注释描述它的功能和用途，除非函数的功能简单而明显时，才可省略注释。</p>
<p>对于显而易见的内容不需要注释。</p>
</li>
<li>
<p>解释代码如何实现</p>
<p>适合说明逻辑实现过程，解释复杂的不明显的逻辑。</p>
<p>不要解释显而易见的流程，避免增加冗余信息和造成误解。</p>
</li>
<li>
<p>解释代码实现的原因</p>
<p>适合解释代码的外部因素，为什么需要实现这个代码，提供上下文信息，说明这段代码在上下文中的意义。</p>
</li>
<li>
<p>解释代码出错的可能情况</p>
<p>适合解释代码的限制条件，一些潜在的限制条件或者无法处理的情况，例如性能隐患，输入的限制条件，可能出现的错误情况等。使阅读者在不需要了解代码实现细节的情况下弄清限制条件。</p>
</li>
</ul>
<p><strong>公共符号始终要注释</strong></p>
<ul>
<li>包中声明的每个公共符号：变量、常量函数以及结构都需要添加注释</li>
<li>任何既不明显又不简短的公共功能必须予以注释</li>
<li>无论长度或复杂程度如何，对库中的函数都必须进行注释</li>
<li>例外情况，不需要注释实现接口的方法。</li>
</ul>
<p>更多规范的注释可以参考golang的官方仓库源码<a class="link"   href="https://github.com/golang/go/tree/master/src" >golang/go <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><strong>小结</strong></p>
<ul>
<li>代码本身应该是最好的注释</li>
<li>注释应该提供代码未表达出的上下文信息</li>
</ul>
<h4 id="123-命名规范"><a class="markdownIt-Anchor" href="#123-命名规范"></a> 1.2.3 命名规范</h4>
<p>命名是代码编写中最常见的规范。</p>
<p><strong>variable</strong></p>
<ul>
<li>
<p>简洁胜于冗长</p>
</li>
<li>
<p>缩略词全大写，但当其位于变量开头且不需要对外提供时，使用全小写</p>
<p>例如，使用SeverHTTP而不是ServerHttp。使用XMLHTTPRequest或者xmlHTTPRequest。</p>
</li>
<li>
<p>变量距离其被使用的地方越远，则需要携带更多的上下文信息。</p>
<p>全局变量在其名字中需要更多的上下文信息，使得在不同的地方可以轻易辨认出其含义</p>
</li>
<li>
<p>几乎不影响理解的变量名变动，选择最简介的名称即可。</p>
</li>
<li>
<p>具有特定含义的变量名变动，选择意义最贴切的名称即可。</p>
</li>
</ul>
<p><strong>function</strong></p>
<ul>
<li>
<p>函数名不携带包名的上下文信息，因为包名和函数名总是成对出现</p>
<p>例如，使用time.Now()而不是time.NowTime()。</p>
</li>
<li>
<p>函数名尽量简短</p>
</li>
<li>
<p>当名为foo的包某个函数返回类型为Foo时，可以省略类型信息避免歧义</p>
</li>
<li>
<p>当名为foo的包某个函数返回类型为T时（T不是Foo），可以在函数名中加入类型信息</p>
<p>例如，parseInt</p>
</li>
</ul>
<p><strong>package</strong></p>
<ul>
<li>只由小写字母组成，不能包含大写字母和下划线等字符</li>
<li>简短并包含一定的上下文信息。例如schema</li>
<li>不要与标准库同名。例如不要使用sync或者strings</li>
</ul>
<p>以标准库包名为例</p>
<ul>
<li>不使用常用的变量名作为包名。例如使用bufio而不是buf</li>
<li>使用单数而不是复数。例如使用encoding而不是encodings</li>
<li>谨慎地使用缩写。例如使用fmt在不破坏上下文的情况下比format更加简短</li>
</ul>
<p><strong>小结</strong></p>
<ul>
<li>核心目标是降低阅读理解代码的成本</li>
<li>重点考虑上下文信息，设计简洁清晰的名称</li>
</ul>
<h4 id="124-控制流程"><a class="markdownIt-Anchor" href="#124-控制流程"></a> 1.2.4 控制流程</h4>
<p>流程控制经常用到的就是if else这种条件控制语句。</p>
<p><strong>避免嵌套，保持正常流程清晰</strong></p>
<p>一个简单的if else，如果两个分支都包含return语句，则可以去除冗余的else，方便后续维护。else一般就是表示正常流程，如果需要在正常流程中新增判断逻辑，则去除else可以避免分支嵌套。</p>
<p><strong>尽量保持正常代码路径为最小缩进</strong></p>
<ul>
<li>
<p>优先处理错误情况或特殊情况，尽早返回或继续循环来减少嵌套。</p>
<p>例如，使用<code>err != nil</code>而不是<code>err == nil</code>就是为了优先处理错误情况。</p>
</li>
</ul>
<p><strong>小结</strong></p>
<ul>
<li>线性原理，处理逻辑尽量走直线，避免复杂的嵌套分支</li>
<li>正常流程代码沿着屏幕向下移动</li>
<li>提升代码的可维护性和可读性</li>
<li>故障问题大多出现在复杂的条件语句和循环语句中</li>
</ul>
<h4 id="125-错误和异常处理"><a class="markdownIt-Anchor" href="#125-错误和异常处理"></a> 1.2.5 错误和异常处理</h4>
<p><strong>简单错误</strong></p>
<ul>
<li>简单的错误指的是仅出现一次的错误，且在其他地方不需要捕获该错误</li>
<li>优先使用errors.New来创建匿名变量直接表示简单错误</li>
<li>如果需要格式化错误信息，使用fmt.Errorf</li>
</ul>
<p><strong>错误的Wrap和Unwarp</strong></p>
<ul>
<li>错误的Wrap实际上是提供了一个error嵌套另一个error的能力，从而形成一个error的跟踪链</li>
<li>在fmt.Errorf中使用%w占位符来将一个错误关联至错误跟踪链中</li>
</ul>
<p><strong>错误判定</strong></p>
<ul>
<li>判断一个错误是否为特定错误，<a class="link"   href="http://xn--errors-vt9i248w.Is" >使用errors.Is <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li>不同于使用==，使用该方法可以判断错误链上的所有错误中是否含有特定的错误</li>
<li>在错误链上获取特定种类的错误，<a class="link"   href="http://xn--errors-vt9i248w.As" >使用errors.As <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>。与errors.Is不同的是As会取出调用链中指定类型的错误，并将错误赋值给定义好的变量，方便后续处理</li>
</ul>
<p><strong>panic</strong></p>
<p>panic比错误更加严重，它的出现表示程序无法正常工作。</p>
<ul>
<li>不建议在业务代码中使用panic</li>
<li>panic发生后会向上传播至调用栈顶，如果当前goroutine中所有deferred函数都不包含recover就会造成整个程序崩溃</li>
<li>若问题可以被屏蔽或解决，建议使用error代替panic</li>
<li>特殊地，当程序启动阶段发生不可逆的错误时，可以在init或main函数中使用panic</li>
</ul>
<p><strong>recover</strong></p>
<p>panic的产生并不只在程序运行阶段。如果是引入其他库时产生的bug而导致的panic就需要使用recover。</p>
<p>注意recover的生效条件</p>
<ul>
<li>recover只能在被defer的函数中使用</li>
<li>在嵌套中无法生效</li>
<li>只在当前goroutine生效</li>
<li>defer的语句是先进后出</li>
</ul>
<p>如果需要更多的上下文信息，可以在recover后用log记录当前调用的栈，方便分析定位。</p>
<p><strong>小结</strong></p>
<ul>
<li>error尽可能提供简明的上下文信息链，方便定位问题</li>
<li>panic用于真正异常的情况，无法规避</li>
<li>recover生效范围，在当前goroutine的deferred函数中生效</li>
</ul>
<h3 id="13-性能优化建议"><a class="markdownIt-Anchor" href="#13-性能优化建议"></a> 1.3 性能优化建议</h3>
<p><strong>简介</strong></p>
<ul>
<li>性能优化的前提是满足正确可靠、简洁清晰等质量因素</li>
<li>性能优化是综合评估，时间效率和空间效率可能在某些情况下不能兼得</li>
<li>针对Go语言特性来介绍Go相关的性能优化建议</li>
</ul>
<h4 id="131-benchmark"><a class="markdownIt-Anchor" href="#131-benchmark"></a> 1.3.1 Benchmark</h4>
<p><strong>如何使用</strong></p>
<ul>
<li>性能表现需要实际数据衡量</li>
<li>Go语言提供了支持基准性能测试的benchmark工具</li>
</ul>
<p>通过以下命令进行性能测试</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">go <span class="built_in">test</span> -bench=. -benchmem</span><br></pre></td></tr></table></figure></div>
<p><strong>结果说明</strong></p>
<ul>
<li>第一个参数如BenchmarkFib10-8对应被测试函数的名称，-8表示GOMAXPROCS的值为8</li>
<li>第二个参数如1855870表示一共执行1855870次，即b.N的值</li>
<li>第三个参数如602.5ns/op表示每次执行花费602.5ns</li>
<li>第四个参数如0B/op表示每次执行时申请的内存空间大小</li>
<li>第五个参数如0allocs/op表示每次执行时申请内存的次数</li>
</ul>
<h4 id="132-slice"><a class="markdownIt-Anchor" href="#132-slice"></a> 1.3.2 Slice</h4>
<p><strong>slice预分配内存</strong></p>
<ul>
<li>
<p>尽可能在使用make()初始化切片时提供容量信息</p>
</li>
<li>
<p>切片本质是一个数组片段的描述，包括数组指针、片段的长度、片段的容量（不改变内存分配情况下的最大长度）</p>
</li>
<li>
<p>切片操作并不复制切片指向的元素</p>
</li>
<li>
<p>而是创建一个新的切片复用原来切片的底层数组</p>
<p>以切片的append为例，append时有两种场景：</p>
<p>当append之后的长度小于等于容量，将会直接利用原底层数组剩余的空间。</p>
<p>当append之后的长度大于容量，则会分配一块更大的区域来容纳新的底层数组。</p>
</li>
</ul>
<p>因此，为了避免内存发生拷贝，如果能够明确最终的切片的大小，预先设置容量的值能够避免额外的内存分配，获得更好的性能。</p>
<p><strong>大内存未释放问题</strong></p>
<p>原切片由大量的元素构成，在原切片的基础上创建切片只使用了很小一段，但底层数组在内存中仍占据着大量空间，无法释放。</p>
<ul>
<li>在已有切片的基础上创建切片，不会创建新的底层数组</li>
<li>可以使用copy代替re-slice，因为通过copy会指向一个新的底层数组，原来的底层数组不再被引用之后，内存就会被回收。</li>
</ul>
<h4 id="133-map"><a class="markdownIt-Anchor" href="#133-map"></a> 1.3.3 Map</h4>
<p><strong>map预分配内存</strong></p>
<p>原理</p>
<ul>
<li>不断向map中添加元素的操作会触发map的扩容</li>
<li>提前分配好空间可以减少内存拷贝和Rehash的消耗</li>
<li>建议根据实际需求提前预估好需要的空间</li>
</ul>
<h4 id="134-字符串处理"><a class="markdownIt-Anchor" href="#134-字符串处理"></a> 1.3.4 字符串处理</h4>
<p><strong>使用strings.Builder</strong></p>
<ul>
<li>
<p>常见的字符串拼接方式就是使用+号直接拼接或者使用strings.Builder的方法拼接以及bytes.Buffer的方法拼接</p>
</li>
<li>
<p>使用+号拼接性能最差，strings.Builder和bytes.Buffer性能相近，strings.Builder更快。</p>
<p>当使用+拼接两个字符串时，生成一个新的字符串，那么就需要开辟一段新的空间，新空间的大小是原来两个字符串的大小之和。拼接第三个字符串时，再开辟一段新空间，新空间大小是三个字符串大小之和，以此类推。</p>
</li>
<li>
<p>分析</p>
<ul>
<li>字符串在Go语言中是不可变类型，占用内存大小是固定的</li>
<li>使用+每次都会重新分配内存</li>
<li>strings.Builder和bytes.Buffer底层都是[]byte数组</li>
<li>Builder和Buffer的内存扩容策略，不需要每次拼接重新分配内存</li>
</ul>
</li>
<li>
<p>Builder比Buffer快的原因</p>
<ul>
<li>bytes.Buffer转化为字符串时重新申请了一块空间</li>
<li>strings.Builder直接将底层的[]byte转换成了字符串类型返回</li>
</ul>
</li>
<li>
<p>在已知字符串长度的情况下，进一步提升Builder的拼接性能，使用预分配减少分配次数。优化后的Builder只需要一次内存分配，而优化后的Buffer有两次。</p>
</li>
</ul>
<h4 id="135-空结构体"><a class="markdownIt-Anchor" href="#135-空结构体"></a> 1.3.5 空结构体</h4>
<p><strong>使用空结构体节省内存</strong></p>
<ul>
<li>
<p>空结构体struct{}实例不占据任何内存空间</p>
</li>
<li>
<p>可做为各种场景下的占位符使用</p>
<ul>
<li>节省资源</li>
<li>空结构体本身具备很强的语义，不需要任何值就能作为占位符</li>
</ul>
</li>
<li>
<p>Set方法的实现，可以考虑用map来代替</p>
</li>
<li>
<p>对于这个场景，只需要用到map的键，不需要值</p>
</li>
<li>
<p>即使是将map的值设置为bool类型，也会多占据1个字节空</p>
<p>一个开源实现<a class="link"   href="https://github.com/deckarep/golang-set/blob/main/threadunsafe.go" >golang-set/threadunsafe.go <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>。</p>
</li>
</ul>
<h4 id="136-atomic包"><a class="markdownIt-Anchor" href="#136-atomic包"></a> 1.3.6 atomic包</h4>
<p>多线程编程场景下性能优化，保证线程安全。</p>
<p><strong>如何使用atomic包</strong></p>
<ul>
<li>锁的实现是通过操作系统来实现，属于系统调用</li>
<li>atomic操作是通过硬件实现，效率比锁高</li>
<li>sync.Mutex应该用来保护一段逻辑，不仅仅用于保护一个变量</li>
<li>对于非数值操作，可以使用atomic.Value，能承载一个interface{}</li>
</ul>
<h4 id="小结"><a class="markdownIt-Anchor" href="#小结"></a> 小结</h4>
<ul>
<li>避免常见的性能陷阱可以保证大部分程序的性能</li>
<li>普通应用代码，不要一味地追求程序的性能</li>
<li>越高级的性能优化手段越容易出现问题</li>
<li>在满足正确可靠、简洁清晰的质量要求的前提下提高程序性能</li>
</ul>
<h3 id="2性能调优实战"><a class="markdownIt-Anchor" href="#2性能调优实战"></a> 2.性能调优实战</h3>
<h3 id="21-简介"><a class="markdownIt-Anchor" href="#21-简介"></a> 2.1 简介</h3>
<p><strong>性能调优原则</strong></p>
<ul>
<li>要依靠数据而不是猜测</li>
<li>要定位最大瓶颈而不是细枝末节</li>
<li>不要过早优化</li>
<li>不要过度优化</li>
</ul>
<h3 id="22-性能分析工具-pprof"><a class="markdownIt-Anchor" href="#22-性能分析工具-pprof"></a> 2.2 性能分析工具 pprof</h3>
<p><strong>说明</strong></p>
<p>如果想知道应用在什么地方耗费了多少CPU、Memory。对于go程序有一个很方便的工具——pprof</p>
<h4 id="221-功能简介"><a class="markdownIt-Anchor" href="#221-功能简介"></a> 2.2.1 功能简介</h4>
<p>pprof是用于可视化和分析性能分析数据的工具</p>
<ul>
<li>分析-Profile：网页、可视化终端</li>
<li>工具-Tool：runtime/pprof、net/http/pprof</li>
<li>采样-Sample：CPU、堆内存-Heap、协程-Goroutine、锁-Mutex、阻塞-Block、线程创建-ThreadCreate</li>
<li>展示-View：Top、调用图-Graph、火焰图-FlameGraph、Peek、源码-Source、反汇编-Disassemble</li>
</ul>
<h4 id="222-排查实战"><a class="markdownIt-Anchor" href="#222-排查实战"></a> 2.2.2 排查实战</h4>
<p><strong>搭建pprof实践项目</strong></p>
<ul>
<li>
<p>项目地址<a class="link"   href="https://github.com/wolfogre/go-pprof-practice" >wolfogre/go-pprof-practice: go pprof practice. <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</li>
<li>
<p>该项目提前埋入了炸弹代码，能产生可观测的性能问题。windows可用任务管理器查看内存占用情况，启动项目前确保内存足够。</p>
</li>
<li>
<p>项目中引入了net/http/pprof包，在启动项目后可以通过浏览器访问pprof工具</p>
<p>main函数部分代码说明</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line">runtime.GOMAXPROCS(<span class="number">1</span>)              <span class="comment">//限制CPU使用数</span></span><br><span class="line">runtime.SetMutexProfileFraction(<span class="number">1</span>) <span class="comment">//开启锁调用跟踪</span></span><br><span class="line">runtime.SetBlockProfileRate(<span class="number">1</span>)     <span class="comment">//开启阻塞调用跟踪</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 启动 http server</span></span><br><span class="line">    <span class="keyword">if</span> err := http.ListenAndServe(<span class="string">&quot;:6060&quot;</span>, <span class="literal">nil</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatal(err)</span><br><span class="line">    &#125;</span><br><span class="line">    os.Exit(<span class="number">0</span>)</span><br><span class="line">&#125;()</span><br></pre></td></tr></table></figure></div>
</li>
</ul>
<p><strong>浏览器查看指标</strong></p>
<p>在项目启动成功后，访问<a class="link"   href="http://localhost:6060/debug/pprof%EF%BC%8C%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0pprof%E7%9A%84%E8%AE%A1%E6%95%B0%E9%A1%B5%E9%9D%A2%E3%80%82" >http://localhost:6060/debug/pprof，可以看到pprof的计数页面。 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>页面上展示了可用的程序运行采样数据，分别是</p>
<ul>
<li>allocs:内存分配情况</li>
<li>blocks:阻塞操作情况</li>
<li>cmdline:程序启动命令及其参数</li>
<li>goroutine:当前所有协程的堆栈信息</li>
<li>heap:堆上内存使用情况</li>
<li>mutex:锁竞争操作情况</li>
<li>profile:CPU占用情况</li>
<li>threadcreate:当前所有常见的系统线程的堆栈信息</li>
<li>trace:程序运行跟踪情况</li>
</ul>
<p>cmdline可以显式运行进程的命令，找到问题来源的程序。threadcreate比较复杂，不透明。trace需要配合另外的工具解析，这里暂不深入。</p>
<p>炸弹主要在CPU、堆内存、goroutine、锁竞争和阻塞操作上，可以通过pprof工具分析</p>
<p><strong>CPU</strong></p>
<p>使用操作系统自带的工具查看CPU占用，发现该项目程序的异常占用。</p>
<p>pprof的采样结果是将一段时间内的信息汇总输出到文件中，所以需要获取这个profile文件。可以直接使用暴露的接口链接下载文件后使用，也可以直接用pprof工具连接这个接口下载需要的数据。</p>
<p>使用go tool pprof + 采样链接的命令来启动采样，例如</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">go tool pprof <span class="string">&quot;http://localhost:6060/debug/pprof/profile?seconds=10&quot;</span></span><br></pre></td></tr></table></figure></div>
<p>链接就是刚刚炸弹程序暴露出来的接口，链接结尾的profile代表采样的对象是CPU使用。如果在浏览器里直接打开链接会启动一个60秒的采样并在采样结束后下载文件到本地。这里加上seconds=10的参数，指定采样时间为10秒。文件下载保存的路径会在pprof终端展示。</p>
<p>pprof终端命令</p>
<ul>
<li>
<p>top命令用于查看占用资源最多的函数。top有以下参数指标</p>
<ul>
<li>
<p>flat:当前函数本身的执行耗时</p>
</li>
<li>
<p>flat%:flat占CPU总时间的比例</p>
</li>
<li>
<p>sum%:上面每一行flat%的总和</p>
</li>
<li>
<p>cum:指当前函数本身加上其调用函数的总耗时</p>
</li>
<li>
<p>cum%:cum占CPU总时间的比例</p>
</li>
</ul>
<p>默认展示资源占用最高的10个函数，如果只需要查看占用最高的N个函数，在top命令后加上一个数字N即可。</p>
<p>flat=cum的函数说明该函数没有调用其他函数</p>
<p>flat=0的函数说明该函数只有其他函数的调用</p>
<hr />
</li>
<li>
<p>list命令会根据给出的正则表达式查找代码，并按行展示出每一行的占用</p>
<p>例如，在pprof终端输入list Eat，就能查看Eat函数每行的占用情况。这样就能定位到具体的代码。</p>
<hr />
</li>
<li>
<p>web命令可以生成一张调用关系图，默认通过浏览器打开。该命令需要提前安装Graphviz并配置环境变量才能使用。官网下载<a class="link"   href="https://graphviz.org/download/" >Download | Graphviz <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>图中除了每个节点的资源占用以外，还会将它们的调用关系描述出来。资源占用最高的函数会比较明显地展示出来。</p>
</li>
</ul>
<p>退出pprof终端，输入q回车即可。将炸弹程序直接注释。</p>
<p><strong>Heap-堆内存</strong></p>
<p>注释问题代码后，重新启动项目。用系统工具（windows是任务管理器）查看CPU占用，可以发现进程的占用已经降下来了。但还有内存占用问题，接下来排查内存问题。</p>
<p>上面排查CPU问题时使用的是pprof终端，这里使用另一种展示方式，通过<code>-http=:8080</code>参数，开启pprof自带的web UI，以网页的形式来呈现性能指标。注意链接结尾是heap</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">go tool pprof -http=:8080 <span class="string">&quot;http://localhost:6060/debug/pprof/heap&quot;</span></span><br></pre></td></tr></table></figure></div>
<p>通过上面的命令启动pprof工具后，在采样完成后会自动打开浏览器，展示出web视图，同时展示的资源使用从CPU时间变成了内存占用。</p>
<p>通过页面顶端的View菜单可以切换不同的视图，初始默认是Graph视图。Top视图就类似于终端top命令的展示效果，Source视图就类似于终端list命令的展示效果。通过这些视图可以快速定位问题，注释掉问题代码，拆除第二个炸弹。</p>
<p>重新运行项目，查看内存占用，发现内存占用也大幅下降。但实际上前面解决的内存问题只是堆内存采样的四种指标之一的inuse_space。四种指标如下</p>
<ul>
<li>alloc_objects:程序累计申请的对象数</li>
<li>alloc_space:程序累计申请的内存大小</li>
<li>inuse_objects:程序当前持有的对象数</li>
<li>inuse_space:程序当前占用的内存大小</li>
</ul>
<p>默认展示视图就是inuse_space视图，只展示当前持有的内存，但对于已经释放的内存，inuse采样不会进行展示。通过页面顶端的Sample菜单切换到alloc_space指标，分析alloc的内存问题。定位到问题代码，注释掉。至此，内存部分炸弹已经被全部清理。</p>
<p><strong>goroutine协程</strong></p>
<p>Golang是一门自带垃圾回收的语言，一般情况下内存泄露是没那么容易发生的。但是有一种例外，goroutine是很容易泄露的，进而导致内存泄露。接下来运行项目，分析goroutine使用情况。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">go tool pprof -http=:8080 <span class="string">&quot;http://localhost:6060/debug/pprof/goroutine&quot;</span></span><br></pre></td></tr></table></figure></div>
<p>goroutine使用默认视图不方便分析，可以切换到Flame Graph火焰图更加直观。</p>
<p>火焰图的展示</p>
<ul>
<li>由上到下表示调用顺序，展示了各个函数调用之间的层级关系</li>
<li>每一行代表一个函数，条形越长代表占用的资源越多</li>
<li>火焰图是动态的，支持点击块进行分析</li>
</ul>
<p>火焰图是非常常用的性能分析工具，在程序逻辑复杂的情况下很有用。</p>
<p>切换到Source视图，在该视图下搜索火焰图中占用最高的函数名称。定位到问题代码，注释掉。重新启动访问pprof可以发现goroutine已下降到正常水平。</p>
<p><strong>mutex-锁</strong></p>
<p>启动pprof工具</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">go tool pprof -http=:8080 <span class="string">&quot;http://localhost:6060/debug/pprof/mutex&quot;</span></span><br></pre></td></tr></table></figure></div>
<p>观察web视图，分析锁操作，切换到Source视图定位到具体代码，注释掉。</p>
<p><strong>block-阻塞</strong></p>
<p>在程序中，除了锁的竞争会导致阻塞以外，还有很多逻辑(例如读取一个channel)也会导致阻塞。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">go tool pprof -http=:8080 <span class="string">&quot;http://localhost:6060/debug/pprof/block&quot;</span></span><br></pre></td></tr></table></figure></div>
<p>同理在Graph视图中定位到问题函数后，切换到Source视图定位到问题代码，注释掉。</p>
<p>但实际上，该示例项目在之前的计数页面上存在两个阻塞，上面只解决了其中一个阻塞。只展示了一个阻塞，是因为另一个阻塞操作的节点总用时小于总时长的千分之五而被省略掉。这是pprof的过滤策略，能够更加有效地突出重点问题信息，而省略相对没有问题的信息。如果没有过滤策略的话，对于一个复杂的程序，大量无关紧要的内容都会展示出来，不利于定位问题。</p>
<p>第二个阻塞操作，尽管不会在pprof工具中展示出来，但也会被pprof记录下来，可以通过暴露出来的接口地址<a class="link"   href="http://localhost:6060/debug/pprof%E4%B8%AD%E7%9A%84block%E9%93%BE%E6%8E%A5%E7%9B%B4%E6%8E%A5%E8%AE%BF%E9%97%AE%E3%80%82%E9%80%9A%E8%BF%87%E8%AE%BF%E9%97%AE%E5%8F%AF%E4%BB%A5%E5%BE%97%E7%9F%A5%E8%BF%99%E4%B8%AA%E9%98%BB%E5%A1%9E%E6%93%8D%E4%BD%9C%E6%98%AF%E7%AC%A6%E5%90%88%E9%A2%84%E6%9C%9F%E7%9A%84%E6%AD%A3%E5%B8%B8%E6%93%8D%E4%BD%9C%E3%80%82" >http://localhost:6060/debug/pprof中的block链接直接访问。通过访问可以得知这个阻塞操作是符合预期的正常操作。 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><strong>小结</strong></p>
<ul>
<li>五种使用pprof采集的常用性能指标: CPU、堆内存、Goroutine、 锁竞争和阻塞;</li>
<li>两种展示方式:交互式终端和网页;</li>
<li>四种视图: Top、 Graph、 源码和火焰图。</li>
<li>pprof除了http的获取方式之外，也可以直接在运行时调用runtime/pprof包将指标数据输出到本地文件。</li>
<li>视图中还有一个更底层的「反汇编」视图。感兴趣的话可自行尝试。</li>
</ul>
<h4 id="223-pprof的采样过程和原理"><a class="markdownIt-Anchor" href="#223-pprof的采样过程和原理"></a> 2.2.3 pprof的采样过程和原理</h4>
<p><strong>CPU</strong></p>
<ul>
<li>采样对象：所有函数调用栈和它们的占用时间</li>
<li>采样率：100次/秒，固定值</li>
<li>采样时间：从手动启动到手动结束</li>
</ul>
<p>这个定时机制在unix或类unix系统上是依赖信号机制实现的。每次暂停都会接收到一个信号，通过系统计时器来保证这个信息是固定频率发送的。</p>
<p>开始采样——&gt;设定信号处理函数——&gt;开启定时器</p>
<p>停止采样——&gt;取消信号处理函数——&gt;关闭定时器</p>
<p>一共有三个相关角色：进程本身、操作系统和写缓冲。启动采样时，进程向OS注册一个定时器</p>
<ul>
<li>
<p>操作系统每10ms向进程发送一次SIGPROF信号</p>
</li>
<li>
<p>进程每次接收到SIGPROF信号后就会对当前的调用堆栈进行记录</p>
</li>
<li>
<p>与此同时，进程会启动一个写缓冲的goroutine，每隔100ms从进程中读取已经记录的堆栈信息，并写入到输出流。</p>
</li>
</ul>
<p>当采样停止时，进程向OS取消定时器，不再接收信号，写缓冲读取不到新的堆栈时，结束输出。</p>
<p><strong>Heap-堆内存</strong></p>
<p>pprof的内存采样是有局限性的，内存采样在实现上依赖了内存分配器的记录，所以只能记录在堆上分配且参与GC的内存，一些其他的内存分配，例如调用结束就会回收的栈内存、一些更底层使用cgo调用分配的内存，是不会被内存采样记录的。</p>
<ul>
<li>采样程序通过内存分配器记录在堆上分配和释放的内存，记录分配和释放的大小和数量</li>
<li>采样率：每分配512KB记录一次，可在运行开头修改，设置为1则表示每次分配都会记录</li>
<li>采样时间：从程序运行开始到获取采样结果时</li>
<li>采样指标：alloc_space, alloc_objects, inuse_space, inuse_objects。</li>
<li>计算方式：inuse = alloc - free</li>
</ul>
<p><strong>Goroutine-协程和ThreadCreate-线程创建</strong></p>
<p>goroutine和threadcreate这两个采样指标在概念上和实现上都比较相似。</p>
<ul>
<li>
<p>Goroutine</p>
<p>记录所有用户发起且在运行中的goroutine（即入口非runtime开头的）以及runtime.main函数中的调用栈信息</p>
<p>Stop The World——&gt;遍历allg切片——&gt;输出创建g的堆栈——&gt;Start The World</p>
</li>
<li>
<p>ThreadCreate</p>
<p>记录程序创建的所有系统线程的信息</p>
<p>Stop The World——&gt;遍历allm切片——&gt;输出创建m的堆栈——&gt;Start The World</p>
</li>
<li>
<p>它们在实现上非常相似，都是在Stop The World之后遍历所有goroutine/所有线程的列表(上面的m就是 GMP模型中的m,在golang中和线程一一对应）并输出堆栈，最后Start The World继续运行。这个采样是立刻触发的全量记录，可以通过比较两个时间点的差值来得到某一时间段的指标。</p>
</li>
</ul>
<p><strong>Block-阻塞和Mutex-锁</strong></p>
<p>阻塞和锁竞争这两种采样指标在流程和原理上也非常相似，这两个采样记录的都是对应操作发生的调用栈、次数和耗时，不过这两个指标的采样率含义并不相同。</p>
<ul>
<li>阻塞操作
<ul>
<li>采样阻塞操作的次数和耗时</li>
<li>采样率：阻塞耗时超过阈值时间的阻塞操作才会被记录，设置运行参数为1表示每次操作都会记录。</li>
</ul>
</li>
<li>锁竞争
<ul>
<li>采样争抢锁的次数和耗时</li>
<li>采样率：只记录固定比例的锁操作，设置运行参数为1表示每次加锁都会记录。</li>
</ul>
</li>
<li>它们在实现上也是基本相同的，都是一个「主动上报」的过程
<ul>
<li>在阻塞操作或锁操作发生时，会计算出消耗的时间，连同调用栈一起主动上报给采样器，采样器会根据采样率可能会丢弃一些记录。 例如时间未达阈值或者比例未命中。</li>
<li>在采样时，采样器会遍历已经记录的信息，统计出具体操作的次数、调用栈和总耗时。和堆内存一样， 可以对比两个时间点的差值计算出这段时间内的操作指标。</li>
</ul>
</li>
</ul>
<h4 id="小结-2"><a class="markdownIt-Anchor" href="#小结-2"></a> 小结</h4>
<ul>
<li>掌握常用pprof工具功能</li>
<li>灵活运用pprof工具分析解决性能问题</li>
<li>了解pprof的采样过程和工作原理</li>
</ul>
<h3 id="23-性能调优案例"><a class="markdownIt-Anchor" href="#23-性能调优案例"></a> 2.3 性能调优案例</h3>
<p><strong>简介</strong></p>
<p>介绍实际业务服务性能优化的案例。对逻辑相对复杂的程序进行性能调优。</p>
<ul>
<li>
<p>业务服务优化</p>
<p>业务服务一般指直接提供功能的服务，比如用户评论系统</p>
</li>
<li>
<p>基础库优化</p>
<p>基础库一般指提供通用功能的程序，主要是针对业务服务提供功能，比如监控组件，用于收集业务服务的运行指标</p>
</li>
<li>
<p>Go语言优化</p>
<p>对Go语言本身进行的优化项</p>
</li>
</ul>
<h4 id="231-业务服务优化"><a class="markdownIt-Anchor" href="#231-业务服务优化"></a> 2.3.1 业务服务优化</h4>
<p><strong>基本概念</strong></p>
<ul>
<li>服务：能单独部署，承载一定功能的程序</li>
<li>依赖：Service A的功能实现依赖Service B的响应结果，称为Service A依赖Service B</li>
<li>调用链路：能支持一个接口请求的相关服务集合及其相互之间的依赖关系</li>
<li>基础库：公共的工具包、中间件</li>
</ul>
<p><strong>流程</strong></p>
<ul>
<li>建立服务性能评估手段。</li>
<li>分析性能数据，定位性能瓶颈。用pprof采样性能数据、分析服务。</li>
<li>重点优化项改造。重构代码、使用更高效的组件等。</li>
<li>优化效果验证。通过压测对比和正确性验证之后，上线服务进行实际收益评估。</li>
</ul>
<p><strong>建立服务性能评估手段</strong></p>
<ul>
<li>服务性能评估方式
<ul>
<li>单独的benchmark无法满足复杂逻辑分析</li>
<li>不同负载情况下性能表现有所差异</li>
</ul>
</li>
<li>请求流量构造
<ul>
<li>不同请求参数覆盖逻辑不同</li>
<li>线上真实流量情况</li>
</ul>
</li>
<li>压测范围
<ul>
<li>单机压测</li>
<li>集群压测</li>
</ul>
</li>
<li>性能数据采集
<ul>
<li>单机性能数据</li>
<li>集群性能数据</li>
</ul>
</li>
</ul>
<p>最后表现为一个服务的性能指标分析报告</p>
<p><strong>分析性能数据，定位性能瓶颈</strong></p>
<p>常见性能问题</p>
<ul>
<li>
<p>使用库不规范</p>
<ul>
<li>基础组件不规范，一般是代码编写逻辑问题，比如提供了缓存机制，但是代码中没有开启。</li>
<li>日志使用不规范，一般是线上服务环境导致某一调用链路数据量剧增，日志量随之剧增，影响性能。</li>
</ul>
</li>
<li>
<p>高并发场景优化不足</p>
<p>例如同步请求造成的性能瓶颈，影响到了业务逻辑处理，后续可改造成异步请求提升性能。</p>
</li>
</ul>
<p><strong>重点优化项改造</strong></p>
<ul>
<li>
<p>性能优化的前提是保证正确性，在变动较大的性能优化上线之前，还需要进行正确性验证。由于线上的场景和流程太多，所以一般会借助自动化手段来保证优化后程序的正确性。</p>
</li>
<li>
<p>响应数据diff</p>
<ul>
<li>
<p>线上请求数据录制回放</p>
<p>不仅包含请求参数录制，还有线上的返回内容录制</p>
</li>
<li>
<p>新旧逻辑接口数据diff</p>
<p>重放时对比线上的返回内容和优化后服务的返回内容进行正确性验证</p>
</li>
</ul>
</li>
</ul>
<p><strong>优化效果验证</strong></p>
<ul>
<li>重复压测验证</li>
<li>上线评估优化效果
<ul>
<li>关注服务监控</li>
<li>逐步放量</li>
<li>收集性能数据</li>
</ul>
</li>
</ul>
<p>压测并不能保证和线上表现完全一致，有时还要通过线上的表现再进行分析改进，是个长期的过程。</p>
<p><strong>进一步优化，服务整体链路分析</strong></p>
<ul>
<li>规范上游服务调用接口，明确场景需求</li>
<li>分析链路，通过业务流程优化提升服务性能</li>
</ul>
<h4 id="232-基础库优化"><a class="markdownIt-Anchor" href="#232-基础库优化"></a> 2.3.2 基础库优化</h4>
<p><strong>AB实验SDK的优化</strong></p>
<blockquote>
<p>A/B测试（也称为<strong>分割测试</strong>或<strong>桶测试</strong>）是一种将网页或应用程序的两个版本相互比较以确定哪个版本的性能更好的方法。AB测试本质上是一个实验，其中页面的两个或多个变体随机显示给用户，统计分析确定哪个变体对于给定的转换目标（指标如CTR）效果更好。</p>
</blockquote>
<ul>
<li>分析基础库核心逻辑和性能瓶颈
<ul>
<li>设计完善改造方案</li>
<li>数据按需获取</li>
<li>数据序列化协议优化</li>
</ul>
</li>
<li>内部压测验证</li>
<li>推广业务服务落地验证</li>
</ul>
<h4 id="233-go语言优化"><a class="markdownIt-Anchor" href="#233-go语言优化"></a> 2.3.3 Go语言优化</h4>
<p><strong>编译器和运行时优化</strong></p>
<ul>
<li>优化内存分配策略</li>
<li>优化代码编译流程，生成更高效的程序</li>
<li>内部压测验证</li>
<li>推广业务服务落地验证</li>
</ul>
<p>优点</p>
<ul>
<li>接入简单，只需要调整编译配置</li>
<li>通用性强</li>
</ul>
<h3 id="24-总结"><a class="markdownIt-Anchor" href="#24-总结"></a> 2.4 总结</h3>
<ul>
<li>性能调优原则
<ul>
<li>要依靠数据而不是猜测</li>
</ul>
</li>
<li>性能分析工具pprof
<ul>
<li>熟练使用pprof工具排查性能问题并了解其基本原理</li>
</ul>
</li>
<li>性能调优
<ul>
<li>保证正确性</li>
<li>定位主要瓶颈</li>
</ul>
</li>
</ul>
<h2 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h2>
<p><a class="link"   href="https://go.dev/doc/tutorial/add-a-test" >Add a test - The Go Programming Language <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://pkg.go.dev/testing#hdr-Benchmarks" >testing package - testing - Go Packages <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://geektutu.com/post/hpg-slice.html" >切片(slice)性能及陷阱 | Go 语言高性能编程 | 极客兔兔  <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://cloud.tencent.com/developer/article/1496302" >什么是A/B test？有哪些流程？有什么用？ - 腾讯云开发者社区-腾讯云 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>青训营记录</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Go 语言内存管理详解</title>
    <url>/2023/01/30/golang-day4/</url>
    <content><![CDATA[<p>本文来源于第五届字节跳动青训营活动，已收录到<a class="link"   href="https://juejin.cn/post/7194838118955450428" >Go 语言内存管理详解 | 青训营笔记 - 掘金 (juejin.cn) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，主要记录了对golang内存管理的学习<span id="more"></span></p>
<h2 id="内存管理详解"><a class="markdownIt-Anchor" href="#内存管理详解"></a> 内存管理详解</h2>
<h3 id="追求极致性能"><a class="markdownIt-Anchor" href="#追求极致性能"></a> 追求极致性能</h3>
<p>性能优化：提升软件系统处理能力，减少不必要的消耗，充分发掘计算机算力。</p>
<p>性能优化的目的</p>
<ul>
<li>用户体验：带来用户体验的提升</li>
<li>资源高效利用：降低成本。提高效率</li>
</ul>
<h3 id="性能优化的层面"><a class="markdownIt-Anchor" href="#性能优化的层面"></a> 性能优化的层面</h3>
<ul>
<li>业务层优化
<ul>
<li>针对特定场景，具体问题具体分析</li>
<li>容易获得较大性能收益</li>
</ul>
</li>
<li>语言运行时优化
<ul>
<li>解决更通用的性能问题</li>
<li>考虑更多场景</li>
<li>Tradeoffs权衡</li>
</ul>
</li>
<li>数据驱动
<ul>
<li>自动化性能分析工具——pprof</li>
<li>依靠数据而非猜测</li>
<li>首先优化最大瓶颈</li>
</ul>
</li>
</ul>
<h3 id="性能优化与软件质量"><a class="markdownIt-Anchor" href="#性能优化与软件质量"></a> 性能优化与软件质量</h3>
<ul>
<li>软件质量至关重要</li>
<li>在保证接口稳定的前提下改进具体实现</li>
<li>测试用例：覆盖尽可能多的场景，方便回归</li>
<li>文档：做了什么，没做什么，能达到怎样的效果</li>
<li>隔离：通过选项控制是否开启优化</li>
<li>可观测：必要的日志输出</li>
</ul>
<h3 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h3>
<ul>
<li>性能优化的基本问题</li>
<li>性能优化的两个层面</li>
<li>性能优化的可维护性</li>
</ul>
<h3 id="1自动内存管理"><a class="markdownIt-Anchor" href="#1自动内存管理"></a> 1.自动内存管理</h3>
<h4 id="11-自动内存管理"><a class="markdownIt-Anchor" href="#11-自动内存管理"></a> 1.1 自动内存管理</h4>
<ul>
<li>动态内存
<ul>
<li>程序在运行时根据需求动态分配的内存：malloc()</li>
</ul>
</li>
<li>自动内存管理（垃圾回收）：由程序语言的运行时系统管理动态内存
<ul>
<li>避免手动内存管理，专注于实现业务逻辑</li>
<li>保证内存使用的正确性和安全性：double-free problem，use-after-free problem</li>
</ul>
</li>
<li>三个任务
<ul>
<li>为新对象分配空间</li>
<li>找到存活对象</li>
<li>回收死亡对象的内存空间</li>
</ul>
</li>
</ul>
<p><strong>相关概念</strong></p>
<ul>
<li>
<p>Mutator：业务线程，分配新对象，修改对象的指向关系</p>
</li>
<li>
<p>Collector：GC线程，找到存活对象，回收死亡对象的内存空间</p>
</li>
<li>
<p>Serial GC：只有一个collector</p>
</li>
<li>
<p>Parallel GC：支持多个collector同时回收的GC算法</p>
</li>
<li>
<p>Concurrent GC：mutator(s)和collector(s)可以同时执行</p>
</li>
<li>
<p>Collectors必须感知对象指向关系的改变</p>
</li>
<li>
<p>评价GC算法</p>
<ul>
<li>安全性（Safety）：不能回收存活的对象。这是基本要求</li>
<li>吞吐率（Throughput）：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>−</mo><mfrac><mrow><mi>G</mi><mi>C</mi><mtext>时间</mtext></mrow><mtext>程序执行总时间</mtext></mfrac></mrow><annotation encoding="application/x-tex">1-\frac {GC时间}{程序执行总时间}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.217331em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.872331em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">程</span><span class="mord cjk_fallback mtight">序</span><span class="mord cjk_fallback mtight">执</span><span class="mord cjk_fallback mtight">行</span><span class="mord cjk_fallback mtight">总</span><span class="mord cjk_fallback mtight">时</span><span class="mord cjk_fallback mtight">间</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">G</span><span class="mord mathnormal mtight" style="margin-right:0.07153em;">C</span><span class="mord cjk_fallback mtight">时</span><span class="mord cjk_fallback mtight">间</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>。花在GC上的时间</li>
<li>暂停时间（Pause time）：stop the world（STW）。业务是否感知</li>
<li>内存开销（Space overhead）：GC元数据开销</li>
</ul>
</li>
<li>
<p>追踪垃圾回收（Tracing garbage collection）</p>
</li>
<li>
<p>引用计数（Reference counting）</p>
</li>
</ul>
<h4 id="12-追踪垃圾回收"><a class="markdownIt-Anchor" href="#12-追踪垃圾回收"></a> 1.2 追踪垃圾回收</h4>
<ul>
<li>
<p>对象被回收的条件：指针指向关系不可达的对象</p>
</li>
<li>
<p>标记根对象</p>
<ul>
<li>静态变量、全局变量、常量、线程栈等</li>
</ul>
</li>
<li>
<p>标记：找到可达对象</p>
<ul>
<li>求指针指向关系的传递闭包：从根对象出发，找到所有可达对象</li>
</ul>
</li>
<li>
<p>清理：所有不可达对象</p>
<ul>
<li>
<p>将存活对象复制到另外的内存空间（Copying GC）</p>
<p>Copying GC：将对象复制到另外的内存空间</p>
</li>
<li>
<p>将死亡对象的内存标记为“可分配”（Mark-sweep GC）</p>
<p>Mark-sweep GC：使用free list管理空闲内存</p>
</li>
<li>
<p>移动并整理存活对象（Mark-compact GC）</p>
<p>Compact GC：原地整理对象</p>
</li>
</ul>
</li>
<li>
<p>根据对象的生命周期，使用不同的标记和清理策略</p>
</li>
</ul>
<h4 id="13-分代-gcgenerational-gc"><a class="markdownIt-Anchor" href="#13-分代-gcgenerational-gc"></a> 1.3 分代 GC（Generational GC）</h4>
<ul>
<li>分代假说（Generational hypothesis）：most objects die young</li>
<li>Intuition：很多对象在分配出来后很快就不在使用了</li>
<li>每个对象都有年龄：经历过GC的次数</li>
<li>目的：对年轻和年老的对象，制定不同的GC策略，降低整体内存管理的开销</li>
<li>不同年龄的对象处于heap的不同区域</li>
<li>年轻代（Young generation）
<ul>
<li>常规的对象分配</li>
<li>由于存活对象很少，可以采用copying collection</li>
<li>GC吞吐率很高</li>
</ul>
</li>
<li>老年代（Old generation）
<ul>
<li>对象趋向一直活着，反复复制开销较大</li>
<li>可以采用mark-sweep collection</li>
</ul>
</li>
</ul>
<h4 id="14-引用计数"><a class="markdownIt-Anchor" href="#14-引用计数"></a> 1.4 引用计数</h4>
<ul>
<li>每个对象都有一个与之关联的引用数目</li>
<li>对象存活的条件：当且仅当引用数大于0</li>
<li>优点
<ul>
<li>内存管理的操作被平摊到程序执行过程中</li>
<li>内存管理不需要了解runtime的实现细节：C++智能指针（smart pointer）</li>
</ul>
</li>
<li>缺点
<ul>
<li>维护引用计数的开销较大：通过原子操作保证对引用计数操作的原子性和可见性</li>
<li>无法回收环形数据结构——weak reference</li>
<li>内存开销：每个对象都引入的额外内存空间存储引用数目</li>
<li>回收内存时依然可能引发暂停</li>
</ul>
</li>
</ul>
<h4 id="总结-2"><a class="markdownIt-Anchor" href="#总结-2"></a> 总结</h4>
<ul>
<li>自动内存管理的背景和意义</li>
<li>概念和评价方法</li>
<li>追踪垃圾回收</li>
<li>引用计数</li>
<li>分代 GC</li>
<li>学术界和工业界一直致力于解决自动内存管理技术的不足之处
<ul>
<li>相关信息<a class="link"   href="https://pldi22.sigplan.org/details/pldi-2022-pldi/15/Low-Latency-High-Throughput-Garbage-Collection" >Low-Latency, High-Throughput Garbage Collection (PLDI 2022 - PLDI Research Papers)  <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li>相关介绍<a class="link"   href="https://zhuanlan.zhihu.com/p/525093935" >PLDI’22 | June 13-17，编程语言顶级会议 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
</li>
</ul>
<h3 id="2go管理及优化"><a class="markdownIt-Anchor" href="#2go管理及优化"></a> 2.Go管理及优化</h3>
<h4 id="21-go-内存分配"><a class="markdownIt-Anchor" href="#21-go-内存分配"></a> 2.1 Go 内存分配</h4>
<p><strong>分块</strong></p>
<ul>
<li>目标：为对象在heap上分配内存</li>
<li>提前将内存分块
<ul>
<li>调用系统调用 mmap() 向OS申请一大块内存，例如 4 MB</li>
<li>先将内存划分成大块，例如 8 KB，称作 mspan</li>
<li>再将大块继续划分成特定大小的小块，用于对象分配</li>
<li>noscan mspan：分配不包含指针的对象——GC 不需要扫描</li>
<li>scan mspan：分配包含指针的对象——GC 需要扫描</li>
</ul>
</li>
<li>对象分配：根据对象的大小，选择最合适的块返回</li>
</ul>
<p><strong>缓存</strong></p>
<ul>
<li>TCMalloc：thread caching</li>
<li>每个 p 包含一个 mcache 用于快速分配，用于为绑定于 p 上的 g 分配对象</li>
<li>mcache 管理一组 mspan</li>
<li>当 mcache 中的 mspan 分配完毕，向 mcentral 申请带有未分配块的 mspan</li>
<li>当 mspan 中没有分配的对象，mspan 会被缓存在 mcentral 中，而不是立刻释放并归还给 OS</li>
</ul>
<h4 id="22-go-内存管理优化"><a class="markdownIt-Anchor" href="#22-go-内存管理优化"></a> 2.2 Go 内存管理优化</h4>
<ul>
<li>对象分配是非常高频的操作：每秒分配 GB 级别的内存</li>
<li>小对象占比较高</li>
<li>Go 内存分配比较耗时
<ul>
<li>分配路径长：g -&gt; m -&gt; p -&gt; mcache -&gt; mspan -&gt; memory block -&gt; return pointer</li>
<li>pprof：对象分配的函数是最频繁调用的函数之一</li>
</ul>
</li>
</ul>
<h4 id="23-优化方案balanced-gc"><a class="markdownIt-Anchor" href="#23-优化方案balanced-gc"></a> 2.3 优化方案：Balanced GC</h4>
<ul>
<li>
<p>每个 g 都绑定一大块内存（1KB），称作 goroutine allocation buffer（GAB）</p>
</li>
<li>
<p>GAB 用于 noscan 类型的小对象分配：&lt; 128 B</p>
</li>
<li>
<p>使用三个指针维护 GAB：base，end，top</p>
</li>
<li>
<p>Bump pointer（指针碰撞）风格对象分配</p>
<ul>
<li>无须和其他分配请求互斥</li>
<li>分配动作简单高效</li>
</ul>
</li>
<li>
<p>GAB 对于 Go 内存管理来说是一个大对象</p>
</li>
<li>
<p>本质：将多个小对象的分配合并成一次大对象的分配</p>
</li>
<li>
<p>问题：GAB的对象分配方式会导致内存被延迟释放</p>
</li>
<li>
<p>方案：移动 GAB 中存活的对象</p>
<ul>
<li>当 GAB 总大小超过一定阈值时，将 GAB 中存活的对象复制到另外分配的 GAB 中</li>
<li>原先的 GAB 可以释放，避免内存泄漏</li>
<li>本质：用 copying GC 的算法管理小对象。根据对象的生命周期，使用不同的标记和清理策略。</li>
</ul>
</li>
</ul>
<p><strong>性能收益</strong>（数据仅供参考）</p>
<ul>
<li>高峰期 CPU usage 降低 4.6%，核心接口时延下降 4.5%~7.7%</li>
</ul>
<h4 id="总结-3"><a class="markdownIt-Anchor" href="#总结-3"></a> 总结</h4>
<ul>
<li>Go 内存管理 — 分块</li>
<li>Go 内存管理 — 缓存</li>
<li>Go 对象分配的性能问题
<ul>
<li>分配路径过长</li>
<li>小对象居多</li>
</ul>
</li>
<li>Balanced GC
<ul>
<li>指针碰撞风格的对象分配</li>
<li>实现了 copying GC</li>
<li>性能收益</li>
</ul>
</li>
</ul>
<h3 id="3编译器和静态分析"><a class="markdownIt-Anchor" href="#3编译器和静态分析"></a> 3.编译器和静态分析</h3>
<h4 id="31-编译器的结构"><a class="markdownIt-Anchor" href="#31-编译器的结构"></a> 3.1 编译器的结构</h4>
<ul>
<li>重要的软件系统
<ul>
<li>识别符号语法和非法的程序</li>
<li>生成正确且高效的代码</li>
</ul>
</li>
<li>分析部分（前端 front end）
<ul>
<li>词法分析，生成词素（lexeme）</li>
<li>语法分析，生成语法树</li>
<li>语义分析，收集类型信息，进行语义检查</li>
<li>中间代码生成，生成intermediate representation（IR）</li>
</ul>
</li>
<li>综合部分（后端 back end）
<ul>
<li>代码优化，机器无关优化，生成优化后的 IR</li>
<li>代码生成，生成目标代码</li>
</ul>
</li>
</ul>
<p>后端是优化重点，同时控制流和数据流分析是优化的基础。</p>
<h4 id="32-静态分析"><a class="markdownIt-Anchor" href="#32-静态分析"></a> 3.2 静态分析</h4>
<ul>
<li>静态分析：不执行程序代码，推导程序的行为，分析程序的性质。</li>
<li>控制流（Control flow）：程序执行的流程</li>
<li>数据流（Data flow）：数据在控制流上的传递</li>
<li>通过分析控制流和数据流，可以知道更多关于程序的性质（properties）</li>
<li>根据这些性质优化代码</li>
</ul>
<h4 id="33-过程内分析和过程间分析"><a class="markdownIt-Anchor" href="#33-过程内分析和过程间分析"></a> 3.3 过程内分析和过程间分析</h4>
<ul>
<li>过程内分析（Intra-procedural analysis）
<ul>
<li>仅在函数内部进行分析</li>
</ul>
</li>
<li>过程间分析
<ul>
<li>考虑函数调用时参数传递和返回值的数据流和控制流</li>
</ul>
</li>
<li>过程间分析是个问题
<ul>
<li>需要通过数据流分析得知接口 i 的具体类型，才能知道有多个同名方法（比如<code>func (a *A) foo()</code>和<code>func (b *B) foo()</code>）存在时，接口 i 调用的是哪个<code>foo()</code></li>
<li>根据接口的具体类型，产生了新的控制流，<code>i.foo()</code>，分析继续</li>
<li>过程间分析需要同时分析控制流和数据流——联合求解，比较复杂</li>
</ul>
</li>
</ul>
<h4 id="总结-4"><a class="markdownIt-Anchor" href="#总结-4"></a> 总结</h4>
<ul>
<li>编译器的结构与编译的流程</li>
<li>编译器后端优化</li>
<li>数据流分析和控制流分析</li>
<li>过程内分析和过程间分析</li>
</ul>
<h3 id="4go编译器优化"><a class="markdownIt-Anchor" href="#4go编译器优化"></a> 4.Go编译器优化</h3>
<ul>
<li>为什么做编译器优化
<ul>
<li>用户无感知，重新编译即可获得性能收益</li>
<li>通用性优化</li>
</ul>
</li>
<li>现状
<ul>
<li>采用的优化少</li>
<li>编译时间较短，没有进行复杂的代码分析和优化</li>
</ul>
</li>
<li>编译优化的思路
<ul>
<li>场景：面向后端长期执行任务</li>
<li>Tradeoff：用编译时间换取更高效的机器码</li>
</ul>
</li>
<li>Beast mode
<ul>
<li>函数内联分析</li>
<li>逃逸分析</li>
<li>默认栈大小调整</li>
<li>边界检查消除</li>
<li>循环展开</li>
<li>…</li>
</ul>
</li>
</ul>
<h4 id="41-函数内联inlining"><a class="markdownIt-Anchor" href="#41-函数内联inlining"></a> 4.1 函数内联（Inlining）</h4>
<ul>
<li>
<p>内联：将被调用函数的函数体（callee）的副本替换到调用位置（caller）上，同时重写代码以反映参数的绑定</p>
</li>
<li>
<p>优点</p>
<ul>
<li>消除函数调用开销，例如传递函数、保存寄存器等</li>
<li>将过程间分析转化为过程内分析，帮助其他优化，例如逃逸分析</li>
</ul>
</li>
<li>
<p>函数内联对性能的影响程度——使用 micro-benchmark验证</p>
<p>示例</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkInline</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">	x := genInteger()</span><br><span class="line">	y := genInteger()</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; b.N; i++ &#123;</span><br><span class="line">		addInline(x, y)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">addInline</span><span class="params">(a, b <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkInlineDisabled</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">	x := genInteger()</span><br><span class="line">	y := genInteger()</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; b.N; i++ &#123;</span><br><span class="line">		addNoInline(x, y)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//go:noinline</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">addNoInline</span><span class="params">(a, b <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">genInteger</span><span class="params">()</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	rand.Seed(time.Now().UnixNano())</span><br><span class="line">	<span class="keyword">return</span> rand.Intn(<span class="number">100</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>注意这里的<code>//go:noinline</code>是一种编译指示，<code>noinline</code>表示不要内联，固定写法。这种编译指示类似于C语言中的<code>#include</code>。</p>
</li>
<li>
<p>使用 micro-benchmark快速验证和对比性能优化结果</p>
<p>使用以下命令进行性能测试</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">go <span class="built_in">test</span> -bench .</span><br></pre></td></tr></table></figure></div>
</li>
<li>
<p>缺点</p>
<ul>
<li>函数体变大，instruction cache（icache）不友好</li>
<li>编译生成的 Go 镜像变大</li>
</ul>
</li>
<li>
<p>函数内联在大多数情况下是正向优化</p>
</li>
<li>
<p>内联策略</p>
<ul>
<li>调用和被函数的规模</li>
<li>…</li>
</ul>
</li>
</ul>
<h4 id="42-beast-mode"><a class="markdownIt-Anchor" href="#42-beast-mode"></a> 4.2 Beast Mode</h4>
<ul>
<li>Go 函数内联受到的限制较多
<ul>
<li>语言特性，例如 interface，defer等，限制了函数内联</li>
<li>内联策略非常保守</li>
</ul>
</li>
<li>Beast Mode：调整函数内联的策略，使更多函数被内联
<ul>
<li>降低函数调用的开销</li>
<li>增加了其他优化的机会：逃逸分析</li>
</ul>
</li>
<li>开销
<ul>
<li>Go 镜像增加约 10%</li>
<li>编译时间增加</li>
</ul>
</li>
</ul>
<p><strong>性能收益</strong>（数据仅供参考）</p>
<ul>
<li>高峰期 CPU usage 降低 9%，时延降低 10%</li>
<li>内存使用降低 3%</li>
</ul>
<h4 id="43-逃逸分析"><a class="markdownIt-Anchor" href="#43-逃逸分析"></a> 4.3 逃逸分析</h4>
<p>逃逸分析：分析代码中指针的动态作用域，即指针在何处可以被访问</p>
<ul>
<li>大致思路
<ul>
<li>从对象分配处出发，沿着控制流，观察对象的数据流</li>
<li>若发现指针 p 在当前作用域 s
<ul>
<li>作为参数传递给其他函数</li>
<li>传递给全局变量</li>
<li>传递给其他的 goroutine</li>
<li>传递给已逃逸的指针指向的对象</li>
</ul>
</li>
<li>则指针 p 指向的对象逃逸出 s，反之则没有逃逸出 s</li>
</ul>
</li>
<li>Beast Mode：函数内联拓展了函数边界，更多对象不逃逸</li>
<li>优化：未逃逸的对象可以在栈上分配
<ul>
<li>对象在栈上分配和回收很快：移动 sp</li>
<li>减少在 heap 上的分配，降低 GC 负担</li>
</ul>
</li>
</ul>
<h4 id="总结-5"><a class="markdownIt-Anchor" href="#总结-5"></a> 总结</h4>
<ul>
<li>Go 编译器优化问题</li>
<li>Beast Mode</li>
<li>函数内联</li>
<li>逃逸分析</li>
<li>通过 micro-benchmark 快速验证性能优化</li>
<li>性能收益</li>
</ul>
<h3 id="归纳"><a class="markdownIt-Anchor" href="#归纳"></a> 归纳</h3>
<ul>
<li>性能优化
<ul>
<li>自动内存管理</li>
<li>Go 内存管理</li>
<li>编译器与静态分析</li>
<li>编译器优化</li>
</ul>
</li>
<li>实践
<ul>
<li>Balanced GC 优化对象分配</li>
<li>Beast Mode 提升代码性能</li>
</ul>
</li>
<li>分析问题的方法与解决问题的思路，不仅适用于Go 语言，也适用于其他语言的优化</li>
</ul>
<h3 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h3>
<p><a class="link"   href="https://juejin.cn/post/7189525739836801085/" >【后端专场 学习资料二】第五届字节跳动青训营 - 掘金 (juejin.cn) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://segmentfault.com/a/1190000016743220" >Go 语言编译器的 “//go:” 详解 - Golang 攻略 - SegmentFault 思否 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>青训营记录</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Go 框架三件套详解</title>
    <url>/2023/02/01/golang-day5/</url>
    <content><![CDATA[<p>本文来源于第五届字节跳动青训营活动，已收录到<a class="link"   href="https://juejin.cn/post/7195211923154010168" >Go 框架三件套详解(Web/RPC/ORM) | 青训营笔记 - 掘金 (juejin.cn) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，主要记录了对golang web开发框架三件套的学习<span id="more"></span></p>
<h2 id="框架三件套详解webrpcorm"><a class="markdownIt-Anchor" href="#框架三件套详解webrpcorm"></a> 框架三件套详解(Web/RPC/ORM)</h2>
<blockquote>
<p>什么是 ORM 框架</p>
<p>对象关系映射（Object Relational Mapping，简称 ORM）模式是一种为了解决面向对象与关系数据库存在的互不匹配的现象的技术。ORM框架是连接数据库的桥梁，只要提供了持久化类与表的映射关系，ORM框架在运行时就能参照映射文件的信息，把对象持久化到数据库中</p>
<p>什么是 RPC 框架</p>
<p>RPC 是远程过程调用（Remote Procedure Call）。RPC 的主要功能目标是让构建分布式计算（应用）更容易，在提供强大的远程调用能力时不损失本地调用的语义简洁性。为实现该目标，RPC 框架需提供一种透明调用机制，让使用者不必显式的区分本地调用和远程调用。</p>
<p>什么是 Web 框架（这里的 Web 框架在后面用 HTTP 框架来称呼）</p>
<p>Web 框架是用于进行 Web 开发的一套软件架构。主要是为开发者封装好了一系列与业务逻辑无关的代码实现，方便开发者专注于业务逻辑代码的编写。</p>
</blockquote>
<h3 id="1三件套介绍"><a class="markdownIt-Anchor" href="#1三件套介绍"></a> 1.三件套介绍</h3>
<ul>
<li>
<p>ORM 框架：<a class="link"   href="https://github.com/go-gorm/gorm" >GORM <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>GORM 是一个已经迭代了十多年的功能强大的 ORM 框架，拥有非常丰富的开源扩展。</p>
</li>
<li>
<p>RPC 框架：<a class="link"   href="https://github.com/cloudwego/kitex" >Kitex <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>Kitex 由字节跳动开发，是 Golang 微服务 RPC 框架，具有高性能、强可扩展的主要特点，支持多协议并且拥有丰富的开源扩展。</p>
</li>
<li>
<p>HTTP 框架：<a class="link"   href="https://github.com/cloudwego/hertz" >Hertz <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>Hertz 由字节跳动开发，是 HTTP 框架，参考了其他开源框架的优势，具有高易用性、高性能、高扩展性特点。</p>
</li>
</ul>
<h3 id="2-三件套的使用"><a class="markdownIt-Anchor" href="#2-三件套的使用"></a> 2. 三件套的使用</h3>
<h4 id="gorm-的基本使用"><a class="markdownIt-Anchor" href="#gorm-的基本使用"></a> GORM 的基本使用</h4>
<h5 id="gorm-的约定默认"><a class="markdownIt-Anchor" href="#gorm-的约定默认"></a> GORM 的约定（默认）</h5>
<ul>
<li>GORM 使用名为 ID 的字段作为主键</li>
<li>使用结构体的蛇形负数作为表名</li>
<li>字段名的蛇形作为列名</li>
<li>使用 CreatedAt、UpdatedAt 字段作为创建、更新时间</li>
</ul>
<p>示例</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义 model</span></span><br><span class="line"><span class="keyword">type</span> Product <span class="keyword">struct</span> &#123;</span><br><span class="line">    Code  <span class="type">string</span></span><br><span class="line">    Price <span class="type">uint</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 为 model 定义表名</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p Product)</span></span> TableName() <span class="type">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;product&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 连接数据库</span></span><br><span class="line">    <span class="comment">// 创建数据</span></span><br><span class="line">    <span class="comment">// 查询数据</span></span><br><span class="line">    <span class="comment">// 更新数据</span></span><br><span class="line">    <span class="comment">// 删除数据</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>参考<a class="link"   href="https://gorm.cn/zh_CN/docs/models.html" >模型定义 | GORM  <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h5 id="gorm-支持的数据库"><a class="markdownIt-Anchor" href="#gorm-支持的数据库"></a> GORM 支持的数据库</h5>
<p>GORM 目前支持 MySQL、SQLServer、PostgreSQL、SQLite。</p>
<p>GORM连接数据库需要提供 DSN 参数。DSN（DataSource Name）数据源名称，用来描述数据库连接信息。参考<a class="link"   href="https://github.com/go-sql-driver/mysql#dsn-data-source-name" >https://github.com/go-sql-driver/mysql#dsn-data-source-name <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>GORM 通过驱动来连接数据库，如果需要连接其它类型的数据库，可以复用/自行开发驱动。</p>
<p>示例</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line">dsn := <span class="string">&quot;user:pass@tcp(127.0.0.1:3306)/dbname?charset=utf8mb4&amp;parseTime=True&amp;loc=Local&quot;</span></span><br><span class="line">db, err := gorm.Open(mysql.Open(dsn), &amp;gorm.Config&#123;&#125;)</span><br></pre></td></tr></table></figure></div>
<p>参考<a class="link"   href="https://gorm.cn/zh_CN/docs/connecting_to_the_database.html" >连接到数据库 | GORM  <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h5 id="gorm-创建数据"><a class="markdownIt-Anchor" href="#gorm-创建数据"></a> GORM 创建数据</h5>
<p>通过 Create 方法创建数据</p>
<ul>
<li>
<p>创建一条数据</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line">p := &amp;Product&#123;Code: <span class="string">&quot;D42&quot;</span>&#125;</span><br><span class="line">res := db.Create(p)</span><br></pre></td></tr></table></figure></div>
</li>
<li>
<p>创建多条数据</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line">products := []*Product&#123;&#123;Code: <span class="string">&quot;D41&quot;</span>&#125;, &#123;Code: <span class="string">&quot;D42&quot;</span>&#125;, &#123;Code: <span class="string">&quot;D43&quot;</span>&#125;&#125;</span><br><span class="line">res, err := db.Create(products)</span><br></pre></td></tr></table></figure></div>
</li>
</ul>
<p>特殊的操作 Upsert ，用于创建一条唯一的数据，若该数据已存在则执行更新操作，若该数据不存在则执行插入操作。（这里的Upsert不是一个方法，而是一种思路逻辑）</p>
<p>Upsert 数据冲突问题</p>
<ul>
<li>
<p>使用 OnConflict 方法应对</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 发生冲突时, 不对冲突做处理, 数据也不会改变</span></span><br><span class="line">p := &amp;Product&#123;Code: <span class="string">&quot;D42&quot;</span>, ID: <span class="number">1</span>&#125;</span><br><span class="line">db.Clauses(clause.OnConflict&#123;DoNothing: <span class="literal">true</span>&#125;).Create(&amp;p)</span><br></pre></td></tr></table></figure></div>
</li>
<li>
<p>使用默认值，在结构体中使用 default 标签为字段定义默认值</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">    ID   <span class="type">int64</span></span><br><span class="line">    Code <span class="type">string</span> <span class="string">`gorm:&quot;default:404&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
</ul>
<p>参考<a class="link"   href="https://gorm.cn/zh_CN/docs/create.html" >创建 | GORM  <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h5 id="gorm-查询数据"><a class="markdownIt-Anchor" href="#gorm-查询数据"></a> GORM 查询数据</h5>
<p>使用 First 方法查询第一条数据（默认主键升序），查询不到数据则返回 ErrRecordNotFound 错误</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line">u := &amp;User&#123;&#125;</span><br><span class="line">db.First(u) <span class="comment">// SELECT * FROM users ORDER BY id LIMIT 1;</span></span><br></pre></td></tr></table></figure></div>
<p>其它类似的有 Take 方法获取一条数据（没有指定排序字段）和 Last 方法获取最后一条数据（默认主键降序）。</p>
<p>使用 Where 方法和 Find 方法查询多条数据，需要注意使用 Find 查询多条数据时，查询不到数据也不会报错。</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line">users := <span class="built_in">make</span>([]*User, <span class="number">0</span>)</span><br><span class="line">result := db.Where(<span class="string">&quot;age &gt; 10&quot;</span>).Find(&amp;users) <span class="comment">// SELECT * FROM users where age &gt; 10;</span></span><br><span class="line">fmt.Println(result.RowsAffected) <span class="comment">// 返回查询到的记录数</span></span><br><span class="line"><span class="comment">// IN: SELECT * FROM users WHERE name IN (&#x27;abcd&#x27;, &#x27;defg&#x27;);</span></span><br><span class="line">db.Where(<span class="string">&quot;name IN ?&quot;</span>, []<span class="type">string</span>&#123;<span class="string">&quot;abcd&quot;</span>, <span class="string">&quot;defg&quot;</span>&#125;).Find(&amp;users)</span><br><span class="line"><span class="comment">// LIKE: SELECT * FROM users WHERE name LIKE &#x27;%d%&#x27;;</span></span><br><span class="line">db.Where(<span class="string">&quot;name LIKE ?&quot;</span>, <span class="string">&quot;%d%&quot;</span>).Find(&amp;users)</span><br><span class="line"><span class="comment">// AND: SELECT * FROM users WHERE name = &#x27;abcd&#x27; AND age &gt;= 22;</span></span><br><span class="line">db.Where(<span class="string">&quot;name = ? AND age &gt;= ?&quot;</span>, <span class="string">&quot;abcd&quot;</span>, <span class="string">&quot;22&quot;</span>).Find(&amp;users)</span><br></pre></td></tr></table></figure></div>
<p>使用结构体作为查询条件</p>
<p>当使用结构体作为条件查询时，GORM 只会查询非零值字段。这意味着字段值为 0、‘’、false或其他零值的字段无法用于构建查询条件，可以使用 Map 来构建查询条件。</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SELECT * FROM users WHERE name = &quot;abc&quot;;</span></span><br><span class="line">db.Where(&amp;User&#123;Name: <span class="string">&quot;abc&quot;</span>, Age: <span class="number">0</span>&#125;).Find(&amp;users) <span class="comment">//Age为零值,不会被构建</span></span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE name = &quot;abc&quot; AND age = 0;</span></span><br><span class="line">db.Where(<span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;<span class="string">&quot;Name&quot;</span>: <span class="string">&quot;abc&quot;</span>, <span class="string">&quot;Age&quot;</span>: <span class="number">0</span>&#125;).Find(&amp;users)</span><br></pre></td></tr></table></figure></div>
<p>参考<a class="link"   href="https://gorm.cn/zh_CN/docs/query.html" >查询 | GORM  <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h5 id="gorm-更新数据"><a class="markdownIt-Anchor" href="#gorm-更新数据"></a> GORM 更新数据</h5>
<p>使用 Model 方法和 Update 以及 Updates 方法更新数据</p>
<ul>
<li>
<p>条件更新单个列</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// UPDATE users SET name=&#x27;hello&#x27; WHERE age &gt; 18;</span></span><br><span class="line">db.Model(&amp;User&#123;&#125;).Where(<span class="string">&quot;age &gt; ?&quot;</span>, <span class="number">18</span>).Update(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;hello&quot;</span>)</span><br></pre></td></tr></table></figure></div>
</li>
<li>
<p>条件更新多个列</p>
<ul>
<li>
<p>根据 struct 更新属性，使用 Struct 更新时，只会更新非零值字段，如果需要更新零值字段可以使用 Map 更新或使用 Select 选择字段。</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// UPDATE users SET name=&#x27;hello&#x27;, age=18 WHERE id = 111;</span></span><br><span class="line">db.Model(&amp;User&#123;ID: <span class="number">111</span>&#125;).Updates(User&#123;Name: <span class="string">&quot;hello&quot;</span>, Age: <span class="number">18</span>&#125;)</span><br></pre></td></tr></table></figure></div>
</li>
<li>
<p>根据 map 更新属性</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// UPDATE users SET name=&#x27;hello&#x27;, age=18, actived=false WHERE id = 111;</span></span><br><span class="line">db.Model(&amp;User&#123;ID: <span class="number">111</span>&#125;).Updates(<span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;hello&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">18</span>, <span class="string">&quot;actived&quot;</span>: <span class="literal">false</span>&#125;)</span><br></pre></td></tr></table></figure></div>
</li>
<li>
<p>更新选定字段</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// UPDATE users SET name=&#x27;hello&#x27; WHERE id = 111;</span></span><br><span class="line">db.Model(&amp;User&#123;ID: <span class="number">111</span>&#125;).Select(<span class="string">&quot;name&quot;</span>).Updates(<span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;hello&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">18</span>, <span class="string">&quot;actived&quot;</span>: <span class="literal">false</span>&#125;)</span><br></pre></td></tr></table></figure></div>
</li>
</ul>
</li>
<li>
<p>SQL 表达式更新</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// UPDATE &quot;products&quot; SET &quot;price&quot; = price * 2 + 100 WHERE &quot;id&quot; = 3;</span></span><br><span class="line">db.Model(&amp;Product&#123;ID: <span class="number">3</span>&#125;).Update(<span class="string">&quot;price&quot;</span>, gorm.Expr(<span class="string">&quot;price * ? + ?&quot;</span>, <span class="number">2</span>, <span class="number">100</span>))</span><br></pre></td></tr></table></figure></div>
</li>
</ul>
<p>参考<a class="link"   href="https://gorm.cn/zh_CN/docs/update.html" >更新 | GORM  <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h5 id="gorm-删除数据"><a class="markdownIt-Anchor" href="#gorm-删除数据"></a> GORM 删除数据</h5>
<p>物理删除，硬删除，数据会被直接删除，执行的是删除操作。</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 根据主键删除</span></span><br><span class="line">db.Delete(&amp;User&#123;&#125;, <span class="number">10</span>) <span class="comment">// DELETE FROM users WHERE id = 10;</span></span><br><span class="line">db.Delete(&amp;User&#123;&#125;, <span class="string">&quot;10&quot;</span>) <span class="comment">// DELETE FROM users WHERE id = 10;</span></span><br><span class="line">db.Delete(&amp;User&#123;&#125;, []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;) <span class="comment">// DELETE FROM users WHERE id IN (1,2,3);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 批量删除</span></span><br><span class="line">db.Where(<span class="string">&quot;name LIKE ?&quot;</span>, <span class="string">&quot;%d%&quot;</span>).Delete(User&#123;&#125;) <span class="comment">// DELETE FROM users WHERE name LIKE &quot;%d%&quot;;</span></span><br><span class="line">db.Delete(User&#123;&#125;, <span class="string">&quot;name LIKE ?&quot;</span>, <span class="string">&quot;%d%&quot;</span>) <span class="comment">// DELETE FROM users WHERE name LIKE &quot;%d%&quot;;</span></span><br></pre></td></tr></table></figure></div>
<p>逻辑删除，软删除，数据实际上没有被删除，执行的实际上是更新操作。</p>
<p>GORM 提供了 gorm.DeletedAt 字段用于实现软删除，只需在 Model 结构体中添加这个字段即可。</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">    ID      <span class="type">int64</span></span><br><span class="line">    Name    <span class="type">string</span> <span class="string">`gorm:&quot;default:404&quot;`</span></span><br><span class="line">    Age     <span class="type">int64</span>  <span class="string">`gorm:&quot;default:18&quot;`</span></span><br><span class="line">    Deleted gorm.DeletedAt</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>拥有该字段的 Model 调用 Delete 方法时能够进行软删除，记录不会从数据库中真正删除。但 GORM 会将 DeletedAt 置为当前时间，并且无法通过正常的查询方法找到该记录。可以使用 Unscoped 方法查询被软删除的数据，也可以通过 Unscoped 方法来实现永久删除。</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line">db.Unscoped().Where(<span class="string">&quot;age = 20&quot;</span>).Find(&amp;users)</span><br><span class="line"></span><br><span class="line">db.Unscoped().Where(<span class="string">&quot;age = 20&quot;</span>).Delete(&amp;users) <span class="comment">// 数据被永久删除</span></span><br></pre></td></tr></table></figure></div>
<p>参考<a class="link"   href="https://gorm.cn/zh_CN/docs/delete.html" >删除 | GORM  <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h5 id="gorm-事务"><a class="markdownIt-Anchor" href="#gorm-事务"></a> GORM 事务</h5>
<p>GORM 提供了 Begin、Commit、Rollback 方法用于使用事务</p>
<p>开始事务</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line">tx := db.Begin()</span><br></pre></td></tr></table></figure></div>
<p>事务操作，注意这里应使用 tx 而不是 db</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line">err := tx.Create(&amp;User&#123;Name: <span class="string">&quot;name&quot;</span>&#125;).Error</span><br></pre></td></tr></table></figure></div>
<p>事务回滚，遇到错误时放弃本次事务操作</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    tx.Rollback()</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>提交事务，应用本次事务操作带来的修改</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line">tx.Commit()</span><br></pre></td></tr></table></figure></div>
<p>GORM 提供了 Transaction 方法用于自动提交事务，可以不用写Commit 和 Rollback 方法就能实现事务的自动管理。</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line">db.Transaction(<span class="function"><span class="keyword">func</span><span class="params">(tx *gorm.DB)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> err := tx.Create(&amp;User&#123;Name: <span class="string">&quot;404&quot;</span>&#125;).Error; err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="comment">// 返回任何错误都会回滚事务</span></span><br><span class="line">    <span class="keyword">return</span> err</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> err := tx.Create(&amp;User&#123;Name: <span class="string">&quot;504&quot;</span>&#125;).Error; err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> err</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回 nil 提交事务</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>
<p>参考<a class="link"   href="https://gorm.cn/zh_CN/docs/transactions.html" >事务 | GORM  <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h5 id="gorm-hook"><a class="markdownIt-Anchor" href="#gorm-hook"></a> GORM Hook</h5>
<p>GORM 提供了 CURD 的 Hook 能力。</p>
<p>Hook 是在创建、查询、更新、删除等操作执行之前、之后自动调用的函数。如果 Hook 返回错误，GORM 将停止后续的操作并回滚事务。</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *User)</span></span> BeforeCreate(tx *gorm.DB) (err <span class="type">error</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> u.Age &lt; <span class="number">0</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> errors.New(<span class="string">&quot;can&#x27;t save invalid data&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *User)</span></span> AfterCreate(tx *gorm.DB) (err <span class="type">error</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> tx.Create(&amp;User&#123;Name: <span class="string">&#x27;admin&#x27;</span>&#125;).Error</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>参考<a class="link"   href="https://gorm.cn/zh_CN/docs/hooks.html" >Hook | GORM  <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h5 id="gorm-性能提高"><a class="markdownIt-Anchor" href="#gorm-性能提高"></a> GORM 性能提高</h5>
<p>对于写操作（创建、更新、删除），为了确保数据的完整性，GORM 会将它们封装在事务内运行，但这会降低性能。可以使用 SkipDefaultTransaction 关闭默认事务。</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line">db, err := gorm.Open(mysql.Open(dsn), &amp;gorm.Config&#123;</span><br><span class="line">  SkipDefaultTransaction: <span class="literal">true</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>
<p>使用 PrepareStmt 缓存预编译语句可以提高后续调用的速度</p>
<p>PrepareStmt 可以在连接数据库进行全局配置，也可以在事务操作中临时配置，详细可查阅 GORM 的文档</p>
<p>参考<a class="link"   href="https://gorm.cn/zh_CN/docs/performance.html" >性能 | GORM  <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h5 id="gorm-生态"><a class="markdownIt-Anchor" href="#gorm-生态"></a> GORM 生态</h5>
<p>GORM 拥有非常丰富的生态，以下是一些常用的扩展</p>
<ul>
<li><a class="link"   href="https://github.com/go-gorm/gen" >GORM 代码生成工具 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><a class="link"   href="https://github.com/go-gorm/sharding" >GORM 分片库方案 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><a class="link"   href="https://github.com/go-gorm/hints" >GORM 手动索引 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><a class="link"   href="https://github.com/go-gorm/optimisticlock" >GORM 乐观锁 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><a class="link"   href="https://github.com/go-gorm/dbresolver" >GORM 读写分离 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><a class="link"   href="https://github.com/go-gorm/opentelemetry" >GORM OpenTelemetry 扩展 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
<h4 id="kitex-的基本使用"><a class="markdownIt-Anchor" href="#kitex-的基本使用"></a> Kitex 的基本使用</h4>
<h5 id="安装-kitex-代码生成工具"><a class="markdownIt-Anchor" href="#安装-kitex-代码生成工具"></a> 安装 Kitex 代码生成工具</h5>
<p>Kitex 目前对 Windows 的支持不完善，建议使用 linux 系统或者<a class="link"   href="https://learn.microsoft.com/zh-cn/windows/wsl/install" >安装 WSL | Microsoft Learn <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>安装代码生成工具</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ go install github.com/cloudwego/kitex/tool/cmd/kitex@latest</span><br><span class="line">$ go install github.com/cloudwego/thriftgo@latest</span><br></pre></td></tr></table></figure></div>
<p>参考<a class="link"   href="https://www.cloudwego.io/zh/docs/kitex/getting-started/" >快速开始 | CloudWeGo <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h5 id="定义-idl"><a class="markdownIt-Anchor" href="#定义-idl"></a> 定义 IDL</h5>
<p>IDL（Interface  description language），即接口描述语言。是跨平台开发的基础。</p>
<blockquote>
<p>对于RPC框架而言，IDL又不仅仅是一个接口描述语言。对于市面上绝大多数的RPC框架而言，IDL还是一个工具和一种使用过程，专指根据 IDL 描述文件，用指定的开发语言，生成对应的服务端接口模块，和客户端程序。这样的好处是，便于开发者快速开发。</p>
</blockquote>
<p>使用 IDL 定义服务与接口</p>
<p>要进行 RPC 远程过程调用，就需要知道对方的接口是什么，需要什么参数，需要知道返回值是什么样的。这就需要通过 IDL 来约定双方的协议，类似于函数签名，然后通过函数名调用函数。</p>
<p>关于 IDL 的具体编写有多种语法，可以参考以下资料</p>
<p>使用 Thrift 语法<a class="link"   href="https://thrift.apache.org/docs/idl" >Apache Thrift - Interface Description Language (IDL) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>使用 proto3 语法<a class="link"   href="https://developers.google.com/protocol-buffers/docs/proto3?hl=zh-cn" >语言指南 (proto3)  | Protocol Buffers  | Google Developers <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>或者<a class="link"   href="https://protobuf.dev/programming-guides/proto3/" >Language Guide (proto 3) | Protocol Buffers Documentation (protobuf.dev) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>这里以 thrift 语法为例，创建一个 echo.thrift</p>
<div class="highlight-container" data-rel="Thrift"><figure class="iseeu highlight thrift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> go api</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Request</span> </span>&#123;</span><br><span class="line">    <span class="number">1</span>: <span class="type">string</span> message</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Response</span> </span>&#123;</span><br><span class="line">	<span class="number">1</span>: <span class="type">string</span> message</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">service</span> <span class="title">Echo</span> </span>&#123;</span><br><span class="line">	Response echo(<span class="number">1</span>: Request req)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h5 id="kitex-生成代码"><a class="markdownIt-Anchor" href="#kitex-生成代码"></a> Kitex 生成代码</h5>
<p>在 IDL 的基础上通过运行以下命令生成代码</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ kitex -module example -service example echo.thrift</span><br></pre></td></tr></table></figure></div>
<p>上述命令中，<code>-module</code> 表示生成的该项目的 go module 名，<code>-service</code> 表明我们要生成一个服务端项目，后面紧跟的 <code>example</code> 为该服务的名字。最后一个参数则为该服务的 IDL 文件。</p>
<p>生成后的项目结构如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">|-- build.sh</span><br><span class="line">|-- echo.thrift</span><br><span class="line">|-- handler.go</span><br><span class="line">|-- kitex_gen</span><br><span class="line">|   `-- api</span><br><span class="line">|       |-- echo</span><br><span class="line">|       |   |-- client.go</span><br><span class="line">|       |   |-- echo.go</span><br><span class="line">|       |   |-- invoker.go</span><br><span class="line">|       |   `-- server.go</span><br><span class="line">|       |-- echo.go</span><br><span class="line">|       `-- k-echo.go</span><br><span class="line">|-- main.go</span><br><span class="line">`-- script</span><br><span class="line">    |-- bootstrap.sh</span><br><span class="line">    `-- settings.py</span><br></pre></td></tr></table></figure></div>
<p><a class="link"   href="http://build.sh" >build.sh <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>：构建脚本。</p>
<p>kitex_gen：IDL 内容相关的生成代码，主要是基础的 Server/Client 代码。</p>
<p>main.go：程序入口。</p>
<p>handler.go：开发者在该文件里实现 IDL service 定义的方法。</p>
<h5 id="kitex-基本使用"><a class="markdownIt-Anchor" href="#kitex-基本使用"></a> Kitex 基本使用</h5>
<p>服务默认监听 8888 端口。</p>
<p>在 handler.go 中实现方法</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> EchoImpl <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *EchoImpl)</span></span> Echo(ctx context.Context, req *api.Request) (resp *api.Response. err <span class="type">error</span>) &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> ...</span></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h5 id="kitex-client-发起请求"><a class="markdownIt-Anchor" href="#kitex-client-发起请求"></a> Kitex Client 发起请求</h5>
<p>新建一个 client 目录，创建 main.go，在 main.go 中实现方法</p>
<ul>
<li>
<p>创建 Client</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line">c, err := echo.NewClient(<span class="string">&quot;example&quot;</span>, client.WithHostPorts(<span class="string">&quot;0.0.0.0:8888&quot;</span>))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    log.Fatal(err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li>
<p>发起请求</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line">req := &amp;api.Request&#123;Message: <span class="string">&quot;my request&quot;</span>&#125;</span><br><span class="line">resp, err := c.Echo(context.Background(), req, callopt.WithRPCTimeout(<span class="number">3</span>*time.Second))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">log.Println(resp)</span><br></pre></td></tr></table></figure></div>
</li>
</ul>
<h5 id="kitex-服务注册与发现"><a class="markdownIt-Anchor" href="#kitex-服务注册与发现"></a> Kitex 服务注册与发现</h5>
<p>目前 Kitex 的服务注册与发现已经对接了主流的服务注册与发现中心，如 ETCD，Nacos 等。详细信息参考<a class="link"   href="https://www.cloudwego.io/zh/docs/kitex/tutorials/service-governance/discovery/" >服务发现 | CloudWeGo <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>。</p>
<h5 id="kitex-生态"><a class="markdownIt-Anchor" href="#kitex-生态"></a> Kitex 生态</h5>
<p>Kitex 拥有非常丰富的扩展生态，以下是一些常用的扩展</p>
<ul>
<li><a class="link"   href="https://github.com/kitex-contrib/xds" >XDS 扩展 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><a class="link"   href="https://github.com/kitex-contrib/obs-opentelemetry" >opentelemetry 扩展 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><a class="link"   href="https://github.com/kitex-contrib/registry-etcd" >ETCD 服务注册与发现扩展 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><a class="link"   href="https://github.com/kitex-contrib/registry-nacos" >Nacos 服务注册与发现扩展 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><a class="link"   href="https://github.com/kitex-contrib/registry-zookeeper" >Zookeeper 服务注册与发现扩展 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><a class="link"   href="https://github.com/kitex-contrib/polaris" >polaris 扩展 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><a class="link"   href="https://github.com/cloudwego/kitex-examples/" >丰富的示例代码与业务 Demo <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
<p>更多信息参考<a class="link"   href="https://www.cloudwego.io/zh/docs/kitex" >https://www.cloudwego.io/zh/docs/kitex <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h4 id="hertz-的基本使用"><a class="markdownIt-Anchor" href="#hertz-的基本使用"></a> Hertz 的基本使用</h4>
<h5 id="hertz-基本使用"><a class="markdownIt-Anchor" href="#hertz-基本使用"></a> Hertz 基本使用</h5>
<p>使用 Hertz 实现，服务监听 8080 端口并注册了一个 GET 方法的路由函数。</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    h := server.Default(server.WithHostPorts(<span class="string">&quot;127.0.0.1:8080&quot;</span>))</span><br><span class="line">    h.GET(<span class="string">&quot;/ping&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c context.Context, ctx *app.RequestContext)</span></span> &#123;</span><br><span class="line">        ctx.JSON(consts.StatusOK, utils.H&#123;<span class="string">&quot;ping&quot;</span>: <span class="string">&quot;pong&quot;</span>&#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    h.Spin</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>参考<a class="link"   href="https://www.cloudwego.io/zh/docs/hertz/getting-started/" >快速开始 | CloudWeGo <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h4 id="hertz-路由"><a class="markdownIt-Anchor" href="#hertz-路由"></a> Hertz 路由</h4>
<ul>
<li>
<p>Hertz 提供了 GET、POST、PUT、DELETE、ANY 等方法用于注册路由。</p>
</li>
<li>
<p>Hertz 提供了路由组（Group）的能力，用于支持路由分组的功能。</p>
</li>
<li>
<p>Hertz 提供了参数路由和通配路由，路由的优先级为：静态路由 &gt; 命名路由 &gt; 通配路由</p>
</li>
</ul>
<p>更多信息以及使用方法参考<a class="link"   href="https://www.cloudwego.io/zh/docs/hertz/tutorials/basic-feature/route/" >路由 | CloudWeGo <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>。</p>
<h5 id="hertz-参数绑定"><a class="markdownIt-Anchor" href="#hertz-参数绑定"></a> Hertz 参数绑定</h5>
<p>Hertz 提供了 Bind、Validate、BindAndValidate 函数用于进行参数绑定和校验</p>
<p>更多信息以及使用方法参考<a class="link"   href="https://www.cloudwego.io/zh/docs/hertz/tutorials/basic-feature/binding-and-validate/" >绑定与校验 | CloudWeGo <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h5 id="hertz-中间件"><a class="markdownIt-Anchor" href="#hertz-中间件"></a> Hertz 中间件</h5>
<p>Hertz 的中间件主要分为客户端中间件与服务端中间件，如下是一个服务端中间件示例</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">MyMiddleware</span><span class="params">()</span></span> app.HandlerFunc &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(ctx conext.Context, c *app.RequestContext)</span></span> &#123;</span><br><span class="line">        <span class="comment">// pre-handle</span></span><br><span class="line">        fmt.Println(<span class="string">&quot;pre-handle&quot;</span>)</span><br><span class="line">        c.Next(ctx)</span><br><span class="line">        <span class="comment">// post-handle</span></span><br><span class="line">        fmt.Println(<span class="string">&quot;post-handle&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    h := server.Default(server.WithHostPorts(<span class="string">&quot;127.0.0.1:8080&quot;</span>))</span><br><span class="line">    h.Use(MyMiddleware())</span><br><span class="line">    h.GET(<span class="string">&quot;/middleware&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(ctx context.Context, c *app.RequestContext)</span></span> &#123;</span><br><span class="line">        c.String(consts.StatusOK, <span class="string">&quot;Hello hertz!&quot;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    h.Spin()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>终止中间件调用链的执行，可以使用 c.Abort、c.AbortWithMsg、c.AbortWithStatus 方法。</p>
<p>参考<a class="link"   href="https://www.cloudwego.io/zh/docs/hertz/tutorials/basic-feature/middleware/" >中间件概览 | CloudWeGo <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h5 id="hertz-client"><a class="markdownIt-Anchor" href="#hertz-client"></a> Hertz Client</h5>
<p>Hertz 提供了 HTTP Client 用于发送 HTTP 请求。</p>
<p>示例</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line">c, err := client.NewClient()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// get请求</span></span><br><span class="line">status, body, _ := c.Get(context.Background(), <span class="literal">nil</span>, <span class="string">&quot;http://example.com&quot;</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;status=%v body=%v\n&quot;</span>, status, <span class="type">string</span>(body))</span><br><span class="line"><span class="comment">// post请求</span></span><br><span class="line"><span class="keyword">var</span> postArgs protocol.Args</span><br><span class="line">postArgs.Set(<span class="string">&quot;arg&quot;</span>, <span class="string">&quot;a&quot;</span>)</span><br><span class="line">status, body, _ = c.Post(context.Background(), <span class="literal">nil</span>, <span class="string">&quot;http://example.com&quot;</span>, &amp;postArgs)</span><br><span class="line">fmt.Printf(<span class="string">&quot;status=%v body=%v\n&quot;</span>, status, <span class="type">string</span>(body))</span><br></pre></td></tr></table></figure></div>
<p>参考<a class="link"   href="https://github.com/cloudwego/hertz-examples#client" >cloudwego/hertz-examples: Examples for Hertz.  <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h5 id="hertz-代码生成工具"><a class="markdownIt-Anchor" href="#hertz-代码生成工具"></a> Hertz 代码生成工具</h5>
<p>Hertz 提供了代码生成工具 Hz ，通过定义 IDL 文件即可生成对应的基础服务代码。</p>
<p>参考<a class="link"   href="https://www.cloudwego.io/zh/docs/hertz/tutorials/toolkit/toolkit/" >hz 命令行工具使用 | CloudWeGo <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h5 id="hertz-性能"><a class="markdownIt-Anchor" href="#hertz-性能"></a> Hertz 性能</h5>
<ul>
<li>网络库</li>
<li>Json 编解码 Sonic</li>
<li>使用 sync.Pool 复用对象协议层数据解析优化</li>
</ul>
<h5 id="hertz-生态"><a class="markdownIt-Anchor" href="#hertz-生态"></a> Hertz 生态</h5>
<p>Hertz 拥有非常丰富的扩展生态，以下是一些常用的扩展</p>
<ul>
<li><a class="link"   href="https://github.com/hertz-contrib/http2" >HTTP2 扩展 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><a class="link"   href="https://github.com/hertz-contrib/obs-opentelemetry" >opentelemetry 扩展 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><a class="link"   href="https://github.com/hertz-contrib/i18n" >国际化扩展 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><a class="link"   href="https://github.com/hertz-contrib/reverseproxy" >反向代理扩展 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><a class="link"   href="https://github.com/hertz-contrib/jwt" >JWT 鉴权扩展 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><a class="link"   href="https://github.com/hertz-contrib/websocket" >Websocket 扩展 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><a class="link"   href="https://github.com/cloudwego/hertz-examples" >丰富的示例代码与业务 Demo <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
<p>更多信息参考<a class="link"   href="https://github.com/cloudwego/hertz#extensions" >https://github.com/cloudwego/hertz#extensions <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="3实战案例介绍"><a class="markdownIt-Anchor" href="#3实战案例介绍"></a> 3.实战案例介绍</h3>
<h4 id="项目介绍"><a class="markdownIt-Anchor" href="#项目介绍"></a> 项目介绍</h4>
<p>项目地址<a class="link"   href="https://github.com/cloudwego/kitex-examples/tree/main/bizdemo/easy_note" >cloudwego/kitex-examples  <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>上面的笔记项目是一个使用 Hertz、Kitex、Gorm 搭建出来的具备一定业务逻辑的后端 API 项目。</p>
<table>
<thead>
<tr>
<th style="text-align:center">服务名称</th>
<th style="text-align:center">服务介绍</th>
<th style="text-align:center">传输协议</th>
<th style="text-align:center">主要技术栈</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">demoapi</td>
<td style="text-align:center">API 服务</td>
<td style="text-align:center">HTTP</td>
<td style="text-align:center">Gorm/Kitex/Hertz</td>
</tr>
<tr>
<td style="text-align:center">demouser</td>
<td style="text-align:center">用户数据管理</td>
<td style="text-align:center">Protobuf</td>
<td style="text-align:center">Gorm/Kitex</td>
</tr>
<tr>
<td style="text-align:center">demonote</td>
<td style="text-align:center">笔记数据管理</td>
<td style="text-align:center">Thrift</td>
<td style="text-align:center">Gorm/Kitex</td>
</tr>
</tbody>
</table>
<h4 id="功能介绍"><a class="markdownIt-Anchor" href="#功能介绍"></a> 功能介绍</h4>
<p>项目模块</p>
<ul>
<li>demoapi
<ul>
<li>用户登录</li>
<li>用户注册</li>
<li>用户创建笔记</li>
<li>用户更新笔记</li>
<li>用户删除笔记</li>
<li>用户查询笔记</li>
</ul>
</li>
<li>demouser
<ul>
<li>创建用户</li>
<li>查询用户</li>
<li>校验用户</li>
</ul>
</li>
<li>demonote
<ul>
<li>创建笔记</li>
<li>更新笔记</li>
<li>删除笔记</li>
<li>查询笔记</li>
</ul>
</li>
</ul>
<h4 id="项目调用关系"><a class="markdownIt-Anchor" href="#项目调用关系"></a> 项目调用关系</h4>
<ul>
<li>demouser 和 demonote 的数据都存储在 MySQL 数据库中，从 MySQL 中获取数据。</li>
<li>demouser 和 demonote 使用 ETCD 服务注册。</li>
<li>demoapi 使用 proto 协议调用 demouser 操作用户数据，使用 thrift 协议调用 demonote 操作笔记数据。</li>
<li>demoapi 使用 ETCD 服务发现。</li>
<li>调用方通过 HTTP 请求调用demoapi。</li>
</ul>
<h4 id="idl-介绍"><a class="markdownIt-Anchor" href="#idl-介绍"></a> IDL 介绍</h4>
<p>参考项目文件<a class="link"   href="https://github.com/cloudwego/kitex-examples/tree/main/bizdemo/easy_note/idl" >kitex-examples/bizdemo/easy_note/idl <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h4 id="技术栈介绍"><a class="markdownIt-Anchor" href="#技术栈介绍"></a> 技术栈介绍</h4>
<p>技术框架</p>
<ul>
<li>语言：GO</li>
<li>底层存储：MySQL</li>
<li>服务注册：ETCD</li>
<li>RPC 框架
<ul>
<li>Kitex：registry-etcd 和 tracer-opentracing</li>
<li>Kitex 扩展</li>
</ul>
</li>
<li>ORM 框架
<ul>
<li>GORM</li>
<li>GORM 扩展：gorm-mysql 和 gorm-opentracing</li>
</ul>
</li>
<li>HTTP 框架
<ul>
<li>Hertz</li>
<li>Hertz 扩展：Hertz-Jwt</li>
</ul>
</li>
<li>链路追踪
<ul>
<li>Jeager</li>
<li>opentracing</li>
</ul>
</li>
</ul>
<h4 id="创建笔记功能实现关键代码"><a class="markdownIt-Anchor" href="#创建笔记功能实现关键代码"></a> 创建笔记功能实现关键代码</h4>
<h5 id="hertz-关键代码"><a class="markdownIt-Anchor" href="#hertz-关键代码"></a> Hertz 关键代码</h5>
<p><a class="link"   href="https://github.com/cloudwego/kitex-examples/blob/main/bizdemo/easy_note/cmd/api/handlers/create_note.go" >kitex-examples/create_note.go <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h5 id="kitex-client-关键代码"><a class="markdownIt-Anchor" href="#kitex-client-关键代码"></a> Kitex Client 关键代码</h5>
<p><a class="link"   href="https://github.com/cloudwego/kitex-examples/blob/main/bizdemo/easy_note/cmd/api/rpc/note.go" >kitex-examples/note.go <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h5 id="kitex-server-关键代码"><a class="markdownIt-Anchor" href="#kitex-server-关键代码"></a> Kitex Server 关键代码</h5>
<p><a class="link"   href="https://github.com/cloudwego/kitex-examples/blob/main/bizdemo/easy_note/cmd/note/service/create_note.go" >kitex-examples/create_note.go <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h5 id="gorm-关键代码"><a class="markdownIt-Anchor" href="#gorm-关键代码"></a> Gorm 关键代码</h5>
<p><a class="link"   href="https://github.com/cloudwego/kitex-examples/blob/main/bizdemo/easy_note/cmd/note/dal/db/note.go" >kitex-examples/note.go <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="4总结与展望"><a class="markdownIt-Anchor" href="#4总结与展望"></a> 4.总结与展望</h3>
<h4 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h4>
<ul>
<li>了解 Gorm/Kitex/Hertz 的基本概念</li>
<li>熟悉 Gorm/Kitex/Hertz 的基础用法</li>
<li>通过实战案例分析将三件套的使用联系起来</li>
</ul>
<h4 id="展望"><a class="markdownIt-Anchor" href="#展望"></a> 展望</h4>
<ul>
<li>进一步熟悉 Gorm/Kitex/Hertz 的使用，通过阅读<a class="link"   href="https://www.cloudwego.io/" >官方文档 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>熟悉框架更多的用法。</li>
<li>阅读笔记项目源码并在本地环境运行，使用 Gorm/Kitex/Hertz 进行项目开发。</li>
<li>参与 Gorm/Kitex/Hertz 的开源贡献，例如 Hertz 的 Windows 平台支持。</li>
<li><a class="link"   href="https://github.com/cloudwego/hertz/issues" >官方 issues | 问题 ·Cloudwego/Hertz <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
<h3 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h3>
<p><a class="link"   href="https://zhuanlan.zhihu.com/p/374901408" >什么是RPC？原理是什么？如何实现一个 RPC 框架？ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://zhuanlan.zhihu.com/p/397060740" >RPC框架的IDL与IDL-less  <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://gorm.cn/zh_CN/docs/" >GORM 指南 | GORM  <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://blog.mazhuang.vip/database/mysql/upsert-f2f8bfbaba7a/" >Mysql 的 upsert 操作 | Seeker (mazhuang.vip) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://www.cloudwego.io/zh/docs/kitex/getting-started/" >Kitex 快速开始 | CloudWeGo <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://juejin.cn/post/7174311695592980510" >一文带你快速入门GolangHTTP框架Hertz - 掘金 (juejin.cn) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>青训营记录</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>规则引擎与设计实现</title>
    <url>/2023/02/03/golang-day6/</url>
    <content><![CDATA[<p>本文来源于第五届字节跳动青训营活动，已收录到<a class="link"   href="https://juejin.cn/post/7195554661318967351" >规则引擎与设计实现 | 青训营笔记 - 掘金 (juejin.cn) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，主要记录了对规则引擎的学习<span id="more"></span></p>
<h2 id="规则引擎与设计实现"><a class="markdownIt-Anchor" href="#规则引擎与设计实现"></a> 规则引擎与设计实现</h2>
<blockquote>
<p>规则引擎的组成部分及应用场景</p>
<p>规则引擎的核心原理——编译原理的相关概念</p>
<p>设计并实现一个规则引擎——YoungEngine</p>
<p>实现一个Web版规则引擎</p>
</blockquote>
<h3 id="1-认识规则引擎"><a class="markdownIt-Anchor" href="#1-认识规则引擎"></a> 1. 认识规则引擎</h3>
<h4 id="规则引擎的定义"><a class="markdownIt-Anchor" href="#规则引擎的定义"></a> 规则引擎的定义</h4>
<ul>
<li>
<p>规则引擎是一种嵌入在应用程序中的组件，实现了将业务决策从应用程序代码中分离出来，并使用预定义的语义模块编写业务决策。接收数据输入，解释业务规则，并根据业务逻辑做出业务决策。</p>
</li>
<li>
<p>解决开发人员重复编码的问题</p>
<p>业务决策与服务本身解耦，提高服务的可维护性，缩短开发路径，提高效率</p>
</li>
</ul>
<h4 id="组成部分"><a class="markdownIt-Anchor" href="#组成部分"></a> 组成部分</h4>
<ul>
<li>数据输入
<ul>
<li>支持接受使用预定义的语义编写的规则作为策略集。比如“price &gt; 500”</li>
<li>接受业务的数据作为执行过程中的参数。比如价格、标签等</li>
</ul>
</li>
<li>规则理解
<ul>
<li>能够按照预先定义的词法、语法、优先级、运算符等正确理解业务规则所表达的语义。</li>
</ul>
</li>
<li>规则执行
<ul>
<li>根据执行时输入的参数对策略集中的规则进行正确的解释和执行。</li>
<li>同时对规则执行过程中的数据类型进行检查，确保执行结果的正确。</li>
</ul>
</li>
</ul>
<h4 id="应用场景"><a class="markdownIt-Anchor" href="#应用场景"></a> 应用场景</h4>
<ul>
<li>风控对抗。快速识别和对抗，以实现最好的风控识别效果。</li>
<li>活动策略运营。提高运营策略的迭代效率，方便新玩法的探索和效果验证。</li>
<li>数据分析和清洗。方便快捷地产出所需要的数据。</li>
</ul>
<h3 id="2编译原理基本概念"><a class="markdownIt-Anchor" href="#2编译原理基本概念"></a> 2.编译原理基本概念</h3>
<p>规则引擎和编译原理具有一定的关联性。它们都有理解、执行、输入输出的流程。</p>
<ul>
<li>理解：词法分析、语法分析</li>
<li>执行：抽象语法树</li>
<li>输入输出：参数注入、类型检查</li>
</ul>
<h4 id="词法分析-lexicel-analysis"><a class="markdownIt-Anchor" href="#词法分析-lexicel-analysis"></a> 词法分析 Lexicel Analysis</h4>
<p>词法分析就是把源代码字符串转换为词法单元（Token）的过程。</p>
<ul>
<li>
<p>识别Token：有限自动机（Finite-State Automaton）</p>
<p>有限自动机就是一个状态机，它的状态数量是有限的。该状态在任何一个状态，基于输入的字符，都能做一个确定的状态转换。</p>
</li>
</ul>
<h4 id="语法分析-syntax-analysis"><a class="markdownIt-Anchor" href="#语法分析-syntax-analysis"></a> 语法分析 Syntax Analysis</h4>
<p>语法分析就是在词法分析的基础上，识别表达式的语法结构的过程。</p>
<ul>
<li>抽象语法树：表达式的语法结构可以用树来表示，其每个节点（子树）是一个语法单元，这个单元的构成规则就叫语法。每个节点还可以有下级节点。</li>
</ul>
<h4 id="抽象语法树-abstract-syntax-tree"><a class="markdownIt-Anchor" href="#抽象语法树-abstract-syntax-tree"></a> 抽象语法树 Abstract Syntax Tree</h4>
<ul>
<li>
<p>上下文无关语法 Context-Free Grammar</p>
<p>语言句子无需考虑上下文，就可以判断正确性。可以使用巴克斯范式（BNF）来表达。</p>
<p>产生式：一个表达式可以由另外已知类型的表达式或者符号推导产生。</p>
<p>内置符号：字面量（string、bool、number）标识符、运算符。</p>
<p>一个基础表达式可以由常量（string、bool、number）或标识符（identifier），一个乘法表达式可以由基础表达式或者乘法表达式+基础表达式组成。</p>
</li>
<li>
<p>递归下降算法 Recursive Descent Parsing</p>
<p>递归下降算法就是自顶向下构造语法树，不断地对Token进行语法展开（下降），展开过程中可能会遇到递归的情况。</p>
</li>
</ul>
<h4 id="类型检查"><a class="markdownIt-Anchor" href="#类型检查"></a> 类型检查</h4>
<ul>
<li>
<p>类型综合</p>
<p>根据表达式的类型构造出父表达式的类型。例如，表达式A+B的类型是根据A和B的类型定义的。</p>
</li>
<li>
<p>编译时检查和运行时检查</p>
<p>类型检查可以发生在表达式的编译阶段，即在构造语法树的阶段，也可以发生在执行时的阶段。</p>
<ul>
<li>编译时：需要提前声明参数的类型，在构建语法树过程中进行类型检查</li>
<li>执行时：可以根据执行时的参数输入的值类型，在执行过程中进行类型检查</li>
</ul>
</li>
</ul>
<h3 id="3设计一个规则引擎"><a class="markdownIt-Anchor" href="#3设计一个规则引擎"></a> 3.设计一个规则引擎</h3>
<h4 id="设计目标"><a class="markdownIt-Anchor" href="#设计目标"></a> 设计目标</h4>
<p>设计一个规则引擎，支持特定的词法、运算符、数据类型和优先级，并且支持基于以上预定义语法的规则表达式的编译和执行。</p>
<ul>
<li>词法（合法Token）：参数、布尔值、字符串、十进制int、十进制float、预定义运算符的规定写法</li>
<li>数据类型：字符串、布尔值、十进制int、十进制float</li>
<li>运算符：一元运算符、二元运算符、逻辑操作符、括号</li>
<li>优先级：各种运算符的优先级定义</li>
</ul>
<h4 id="词法分析"><a class="markdownIt-Anchor" href="#词法分析"></a> 词法分析</h4>
<ul>
<li>设计词法分析的状态机</li>
</ul>
<h4 id="语法分析"><a class="markdownIt-Anchor" href="#语法分析"></a> 语法分析</h4>
<ul>
<li>优先级的表达</li>
<li>语法树结构</li>
</ul>
<h4 id="语法树的执行与类型检查"><a class="markdownIt-Anchor" href="#语法树的执行与类型检查"></a> 语法树的执行与类型检查</h4>
<ul>
<li>
<p>语法树执行</p>
<p>预先定义好每种操作符的执行逻辑</p>
<p>对抽象语法树进行后缀遍历执行，即</p>
<ul>
<li>先执行左子树，得到左节点的值</li>
<li>再执行右子树，得到右节点的值</li>
<li>最后根据根节点的操作符执行得到根节点的值</li>
</ul>
</li>
<li>
<p>类型检查</p>
<p>检查时机：执行时检查</p>
<p>检查方法：在一个节点的左右子节点执行完成后，分别校验左右子节点的类型是否符合对应操作符的类型检查预设规则。</p>
<ul>
<li>‘&gt;’ 符号要求左右子节点的值都存在且为int或float</li>
<li>‘!’ 符号要求左节点为空且右节点的值为bool</li>
</ul>
</li>
</ul>
<h3 id="4规则引擎的实现"><a class="markdownIt-Anchor" href="#4规则引擎的实现"></a> 4.规则引擎的实现</h3>
<p>可参考<a class="link"   href="https://github.com/qimengxingyuan/young_engine" >qimengxingyuan/young_engine: 简单的规则引擎  <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>实现。</p>
<h3 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h3>
<p><a class="link"   href="https://juejin.cn/post/7193363381804335161/#heading-11" >【后端专场 学习资料三】第五届字节跳动青训营 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>青训营记录</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>架构初探</title>
    <url>/2023/02/03/golang-day7/</url>
    <content><![CDATA[<p>本文来源于第五届字节跳动青训营活动，已收录到<a class="link"   href="https://juejin.cn/post/7195891149012795452" >架构初探 | 青训营笔记 - 掘金 (juejin.cn) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，主要记录了对架构分析设计的学习<span id="more"></span></p>
<h2 id="架构初探"><a class="markdownIt-Anchor" href="#架构初探"></a> 架构初探</h2>
<h3 id="1-什么是架构"><a class="markdownIt-Anchor" href="#1-什么是架构"></a> 1. 什么是架构</h3>
<p><strong>定义</strong></p>
<p>架构，又称软件架构，是有关软件整体结构与组件的抽象描述，用于指导软件系统各个方面的设计。</p>
<p>实现一个软件有很多种方法，架构在方法选择上起着至关重要的指导作用。</p>
<p>架构的重要性</p>
<ul>
<li>地基没打好，大厦容易倒</li>
<li>地基坚实了，大厦才能盖得高</li>
<li>站在巨人肩膀上，才能看得远</li>
</ul>
<h4 id="11-问题"><a class="markdownIt-Anchor" href="#11-问题"></a> 1.1 问题</h4>
<ul>
<li>如何设计</li>
<li>如何开发</li>
<li>如何运营</li>
<li>…</li>
</ul>
<h4 id="12-单机"><a class="markdownIt-Anchor" href="#12-单机"></a> 1.2 单机</h4>
<p>软件系统需要对外提供服务。单机，就是把所有功能都实现在一个进程里，并部署在一台机器上</p>
<p>优点：简单，是最基本的架构</p>
<p>缺点</p>
<ul>
<li>单体服务存在架构瓶颈（高并发连接问题，是单体架构本身的设计缺陷）</li>
<li>运维的时候需要停服，届时用户无法使用服务</li>
</ul>
<p>单机服务的模式除了简单之外没有任何优点。当今互联网时代，单机服务的形态一般只适合出现在预研或初创阶段，但凡业务有发展和迭代的需求，就应该优先快速做架构迭代。</p>
<h4 id="13-单体-垂直应用-垂直切分"><a class="markdownIt-Anchor" href="#13-单体-垂直应用-垂直切分"></a> 1.3 单体、垂直应用 | 垂直切分</h4>
<p>把进程部署在多个机器上，并引入负载均衡层，经过这样的垂直切分，就来到了单体架构。负载均衡层用于引导用户去正常工作的机器。</p>
<p>在单体架构的基础上进一步地再把不同应用的代码从之前的一个大的进程中拆分出来，就来到了垂直应用架构。</p>
<ul>
<li>单体架构通过分布式部署逐步演化为分布式架构，垂直应用架构就是一种分布式架构。</li>
<li>垂直应用架构：按应用垂直切分单体并进行分布式部署的架构。</li>
<li>优点
<ul>
<li>水平扩容</li>
<li>运维不需要停服</li>
</ul>
</li>
<li>缺点
<ul>
<li>职责太多，开发效率不高</li>
<li>爆炸半径大（即影响范围大），小变动可能会引起大范围的问题</li>
</ul>
</li>
</ul>
<p>根据应用把架构做垂直拆分仍存在缺陷，于是演化出了根据模块/职责对架构进行水平拆分。</p>
<h4 id="14-soa-微服务-水平切分"><a class="markdownIt-Anchor" href="#14-soa-微服务-水平切分"></a> 1.4 SOA、微服务 | 水平切分</h4>
<p>把原本包含了众多复杂逻辑的进程按照功能单元抽象成多个服务，并为它们之间的通信定义标准，便得到了SOA架构。</p>
<p>SOA(Service-Oriented Architecture)</p>
<ul>
<li>将应用的不同功能单元抽象为服务</li>
<li>定义服务之间的通信标准</li>
</ul>
<p>两个重要概念</p>
<ul>
<li>服务：根据功能抽象出来的概念。比如，处理用户登录信息的 Passport 服务，负责持久化存储的数据库服务，以及为了加快查询速度的缓存服务等。</li>
<li>通信标准：服务之间通信的基石。</li>
</ul>
<p>为了服务之间更好的通信，有两个大的发展方向：中心化和去中心化。由于中心化的方案较重，拓展性差，普及性不高。这里就考虑去中心化方向。去中心化方向的最终形态就是微服务架构。</p>
<ul>
<li>
<p>微服务架构：SOA 的去中心化演进方向</p>
</li>
<li>
<p>优点</p>
<ul>
<li>不同模块的开发者可以各司其职，开发迭代效率得到显著提高</li>
<li>各个服务独立运维，变更操作的影响面可控，应用整体的稳定性得到了提高</li>
</ul>
</li>
</ul>
<p><strong>垂直切分和水平切分带来的一系列问题</strong></p>
<ul>
<li>单机部署演进而来的分布式架构，存在数据一致性问题</li>
<li>服务的不断拓展，依赖关系的复杂化，如何实现高可用</li>
<li>多个微服务的管理运维问题</li>
<li>微服务的目标是强化单一职责，控制爆炸半径，在解耦和过微之间取舍</li>
</ul>
<h4 id="小结"><a class="markdownIt-Anchor" href="#小结"></a> 小结</h4>
<p>架构的演进初衷</p>
<ul>
<li>需求量越来越大，需要增加人手</li>
<li>整体逻辑越做越复杂，需要分工合作</li>
</ul>
<p>架构的演进思路</p>
<ul>
<li>垂直切分：按照应用切分</li>
<li>水平切分：按照服务切分</li>
</ul>
<h3 id="2企业级后端架构剖析"><a class="markdownIt-Anchor" href="#2企业级后端架构剖析"></a> 2.企业级后端架构剖析</h3>
<h4 id="21-云计算"><a class="markdownIt-Anchor" href="#21-云计算"></a> 2.1 云计算</h4>
<p>云计算是指通过软件自动化管理，提供计算资源的服务网络，是现代互联网大规模熟悉分析和存储的基石。</p>
<p>基础</p>
<ul>
<li>虚拟化技术：硬件（虚拟机）、操作系统（容器）、网络</li>
<li>编排方案：虚拟机编排方案（OpenStack）、容器编排方案（Kubernetes）</li>
</ul>
<p>架构</p>
<ul>
<li>Iaas（Infrastructure as a Service）</li>
<li>Paas（Platform as a Service）</li>
<li>SaaS（Software as a Service）</li>
<li>Faas（Function as a Service）</li>
</ul>
<h4 id="22-云原生"><a class="markdownIt-Anchor" href="#22-云原生"></a> 2.2 云原生</h4>
<p>云原生，实际是云原生计算的简称，它是云计算发展到现在的一种形态。</p>
<p>云原生技术为在公有云、私有云、混合云等新型的动态环境中构建和运行可弹性拓展的应用提供了可能性。它的代表技术有</p>
<ul>
<li>容器化</li>
<li>服务网格</li>
<li>微服务</li>
<li>不可变基础架构</li>
<li>声明式 API</li>
</ul>
<p>基于这些技术，开发者可以构建出容错性好、易于管理、具备较好观测性的云服务。结合可靠的自动化机制，服务可以轻松应对频繁和可预测的重大变更。</p>
<p>云原生主要涉及四个大方面</p>
<ul>
<li>弹性资源：基于虚拟化容器以及灵活的编排调度机制，可以为云服务提供快速扩缩容能力，而且极大程度地提高了物理资源的利用率。在这方面，kubernetes 技术已经称为了业界的标准</li>
<li>微服务架构：微服务架构也是云原生的重要基石之一。依托于功能单元解构，使得云服务具备了快速迭代的可能，业务得以迅速发展；统一的通信标准能够帮助越来越多的组件加入到云原生的大家庭，同时也使得各组件之间的交互变的更容易</li>
<li>DevOps：设计-&gt;开发-&gt;测试-&gt;交付-&gt;开发-&gt;测试-&gt;交付，自动化的流程使得软件的工作流程更高效，将微服务架构的优势发挥的淋漓尽致</li>
<li>服务网格：如果说微服务架构的重要进步，是将庞大的单体服务按照业务功能解耦开来，那么，服务网格的重要进步就是将业务逻辑与网络通信和治理解耦开来。业务不再需要关心异构系统中 RPC 中间件治理能力的不统一，也使得复杂的治理能力的落地成为可能</li>
</ul>
<h5 id="221-弹性计算资源"><a class="markdownIt-Anchor" href="#221-弹性计算资源"></a> 2.2.1 弹性计算资源</h5>
<p>弹性计算资源类型</p>
<ul>
<li>服务资源调度：微服务和大服务</li>
<li>计算资源调度：在线和离线</li>
<li>消息队列：在线和离线</li>
</ul>
<h5 id="222-弹性存储资源"><a class="markdownIt-Anchor" href="#222-弹性存储资源"></a> 2.2.2 弹性存储资源</h5>
<p>弹性存储资源类型</p>
<ul>
<li>典型：对象和数据</li>
<li>关系型数据库</li>
<li>元数据：服务发现</li>
<li>NoSQL</li>
</ul>
<p>将存储资源视为服务</p>
<h5 id="223-devops"><a class="markdownIt-Anchor" href="#223-devops"></a> 2.2.3 DevOps</h5>
<p>DevOps 是云原生时代软件交付的利器，贯穿整个软件开发周期。</p>
<p>结合自动化流程，提高软件开发、交付效率</p>
<h5 id="224-微服务架构"><a class="markdownIt-Anchor" href="#224-微服务架构"></a> 2.2.4 微服务架构</h5>
<p>通信标准</p>
<ul>
<li>HTTP（RESTful、API）</li>
<li>RPC（Thrift、gRPC）</li>
</ul>
<p>微服务中间件  RPC vs HTTP</p>
<ul>
<li>性能</li>
<li>服务治理</li>
<li>协议可解释性</li>
</ul>
<p>云原生场景下，微服务大可不必在业务逻辑中实现符合通信标准的交互逻辑，而是交给框架来做。</p>
<h5 id="225-服务网格"><a class="markdownIt-Anchor" href="#225-服务网格"></a> 2.2.5 服务网格</h5>
<p>服务网络（Service Mesh）</p>
<ul>
<li>微服务之间通讯的中间层</li>
<li>高性能网络代理</li>
<li>业务代码与治理解耦</li>
</ul>
<p>相比较于 RPC/HTTP 框架</p>
<ul>
<li>异构系统治理统一化</li>
<li>与业务进程解耦，生命周期易管理</li>
</ul>
<h3 id="企业级后端架构的挑战"><a class="markdownIt-Anchor" href="#企业级后端架构的挑战"></a> 企业级后端架构的挑战</h3>
<p><strong>问题</strong></p>
<ul>
<li>基础设施层面：
<ul>
<li>物理资源是运有限的，机器和带宽</li>
<li>资源利用率受制于部署服务</li>
</ul>
</li>
<li>用户层面
<ul>
<li>网络通信开销较大</li>
<li>网络抖动导致运维成本提高</li>
<li>异构环境下，不同实例资源水位不均</li>
</ul>
</li>
</ul>
<h4 id="31-离在线资源并池"><a class="markdownIt-Anchor" href="#31-离在线资源并池"></a> 3.1 离在线资源并池</h4>
<p>核心收益</p>
<ul>
<li>降低物理资源成本</li>
<li>提供更多的弹性资源，增加收入</li>
</ul>
<p>解决思路：离在线并池</p>
<ul>
<li>在线业务的特点
<ul>
<li>IO 密集型为主</li>
<li>潮汐性、实时性</li>
</ul>
</li>
<li>离线业务的特点
<ul>
<li>计算密集型占多数</li>
<li>非实时性</li>
</ul>
</li>
</ul>
<p>在同一个机器做离在线隔离，使用自动扩缩容</p>
<h4 id="32-自动扩缩容"><a class="markdownIt-Anchor" href="#32-自动扩缩容"></a> 3.2 自动扩缩容</h4>
<p>核心收益：降低业务成本</p>
<p>解决思路：自动扩缩容，利用在线业务潮汐性自动扩缩容</p>
<p>扩缩容依据的指标，微服务亲和性部署</p>
<h4 id="33-微服务亲和性部署"><a class="markdownIt-Anchor" href="#33-微服务亲和性部署"></a> 3.3 微服务亲和性部署</h4>
<p>核心收益</p>
<ul>
<li>降低业务成本</li>
<li>提高服务可用性</li>
</ul>
<p>解决思路：微服务亲和性部署</p>
<ul>
<li>将满足亲和性条件的容器调度到一台宿主机</li>
<li>微服务中间件与服务网格通过共享内存通信</li>
<li>服务网格控制面实施灵活、动态的流量调度</li>
</ul>
<h4 id="34-流量治理"><a class="markdownIt-Anchor" href="#34-流量治理"></a> 3.4 流量治理</h4>
<p>核心收益</p>
<ul>
<li>提高微服务调用容错性</li>
<li>容灾</li>
<li>进一步提高开发效率，DevOps 发挥到极致</li>
</ul>
<p>解决思路：基于微服务中间件和服务网格的流量治理</p>
<ul>
<li>熔断、重试</li>
<li>单元化</li>
<li>复杂环境（功能、预览）的流量调度</li>
</ul>
<h4 id="cpu-水位负载均衡"><a class="markdownIt-Anchor" href="#cpu-水位负载均衡"></a> CPU 水位负载均衡</h4>
<p>核心收益</p>
<ul>
<li>打平异构环境算力差异</li>
<li>为自动扩缩容提供正向输入</li>
</ul>
<p>解决思路：CPU 水位负载均衡</p>
<ul>
<li>Iaas：提供资源探针</li>
<li>服务网格：动态负载均衡</li>
</ul>
<h3 id="4-后端架构实战"><a class="markdownIt-Anchor" href="#4-后端架构实战"></a> 4. 后端架构实战</h3>
<p><strong>问题提炼</strong></p>
<p>输入</p>
<ul>
<li>服务网格数据面：支持带权重的负载均衡策略</li>
<li>注册中心存储了所有容器的权重信息</li>
<li>宿主机能够提供容器的资源使用情况和物理资源信息（如 CPU 型号）</li>
</ul>
<p>关键点</p>
<ul>
<li>紧急回滚能力</li>
<li>大规模</li>
<li>极端场景</li>
</ul>
<h4 id="41-自适应静态权重"><a class="markdownIt-Anchor" href="#41-自适应静态权重"></a> 4.1 自适应静态权重</h4>
<p>方案</p>
<ul>
<li>采集宿主机物理资源信息</li>
<li>调整容器注册的权重</li>
</ul>
<p>优点</p>
<ul>
<li>复杂度低</li>
<li>完全分布式，可用性高</li>
<li>微服务中间件无适配成本</li>
</ul>
<p>缺点</p>
<ul>
<li>无紧急回滚能力</li>
<li>缺乏运行时自适应能力</li>
</ul>
<h4 id="42-自适应动态权重-alpha"><a class="markdownIt-Anchor" href="#42-自适应动态权重-alpha"></a> 4.2 自适应动态权重 Alpha</h4>
<p>方案</p>
<ul>
<li>容器动态权重的自适应调整</li>
<li>服务网格的服务发现和流量调度能力</li>
</ul>
<p>优点</p>
<ul>
<li>解决无法紧急回滚的问题</li>
<li>运行时权重自适应</li>
</ul>
<p>缺点：过度流量倾斜可能会有异常情况</p>
<h4 id="43-自适应动态权重-beta"><a class="markdownIt-Anchor" href="#43-自适应动态权重-beta"></a> 4.3 自适应动态权重 Beta</h4>
<p>方案：服务网格上报 RPC 指标</p>
<p>优点：极端场景的处理成为可能</p>
<p>缺点</p>
<ul>
<li>时序数据库压力较大</li>
<li>动态权重决策中心职责越来越多，迭代 -&gt; 变更 -&gt; 风险</li>
</ul>
<h4 id="44-自适应动态权重-release"><a class="markdownIt-Anchor" href="#44-自适应动态权重-release"></a> 4.4 自适应动态权重 Release</h4>
<p>演进方向</p>
<ul>
<li>微服务化</li>
<li>引入消息队列削峰、解耦</li>
<li>离在线链路切分</li>
<li>梳理强弱依赖</li>
<li>解决在线分析引擎的数据一致性问题：一致性哈希</li>
<li>解决时序数据库压力：将其作为旁路工具，采用纯内存的在线分析引擎进行实时策略计算</li>
<li>离线分析：使用消息队列解耦、削峰</li>
<li>离线回馈在线</li>
</ul>
<h4 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h4>
<p>没有最好的架构，只有最合适的架构</p>
<p>架构设计的流程</p>
<ul>
<li>需求先行。弄清楚要解决什么问题</li>
<li>业界调研。业界都有哪些解决方案可供参考</li>
<li>技术选型。内部/社区都有哪些基础组件</li>
<li>异常情况。考虑清除应对各种异常问题的方案</li>
</ul>
<h3 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h3>
<p><a class="link"   href="https://zhuanlan.zhihu.com/p/136587858" >软件架构的演变-单体架构，垂直架构，分布式架构，SOA架构和微服务架构的演变历程 - 知乎  <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://zhuanlan.zhihu.com/p/26302012" >水平拆分 &amp; 垂直拆分 - 知乎  <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>青训营记录</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式理论</title>
    <url>/2023/02/03/golang-day8/</url>
    <content><![CDATA[<p>本文来源于第五届字节跳动青训营活动，已收录到<a class="link"   href="https://juejin.cn/post/7196300179998228535" >分布式理论 | 青训营笔记 - 掘金 (juejin.cn) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，主要记录了对分布式理论的学习<span id="more"></span></p>
<h2 id="分布式理论"><a class="markdownIt-Anchor" href="#分布式理论"></a> 分布式理论</h2>
<h3 id="1分布式概述"><a class="markdownIt-Anchor" href="#1分布式概述"></a> 1.分布式概述</h3>
<h4 id="11-什么是分布式"><a class="markdownIt-Anchor" href="#11-什么是分布式"></a> 1.1 什么是分布式</h4>
<p>分布式系统是计算机程序的集合，这些程序利用跨多个独立计算节点的计算资源来实现共同的目标。可以分为分布式计算、分布式存储、分布式数据库等。</p>
<p>优势</p>
<ol>
<li>去中心化</li>
<li>低成本</li>
<li>弹性</li>
<li>资源共享</li>
<li>可靠性高</li>
</ol>
<p>挑战</p>
<ol>
<li>普通的节点故障</li>
<li>不可靠的网络</li>
<li>异构的机器与硬件环境</li>
<li>安全</li>
</ol>
<h4 id="12-分布式的必要性"><a class="markdownIt-Anchor" href="#12-分布式的必要性"></a> 1.2 分布式的必要性</h4>
<p>使用者角度</p>
<ul>
<li>原因：1.数据爆炸，对存储和计算有大规模运用的需求；2.成本低，构建在廉价服务器之上。</li>
<li>如何实现：1.分布式框架；2.成熟的分布式系统。</li>
<li>目标规划：1.理清规模，负载，一致性要求等；2.明确稳定性要求，制定技术方案。</li>
</ul>
<p>学习者角度</p>
<ul>
<li>原因：1.后端开发必备技能；2.帮助理解后台服务器之间协作的机理。</li>
<li>如何学习：1.掌握分布式理论；2.了解一致性协议。</li>
<li>学习规划：1.把要点深入展开，针对难点搜索互联网资料进行学习；2.将所学知识运用于实践。</li>
</ul>
<h4 id="13-常见的分布式系统"><a class="markdownIt-Anchor" href="#13-常见的分布式系统"></a> 1.3 常见的分布式系统</h4>
<p>分布式存储</p>
<ol>
<li>
<p>Google File System（GFS）：google 分布式文件存储系统</p>
</li>
<li>
<p>Ceph：统一的分布式存储系统</p>
</li>
<li>
<p>Hadoop HDFS：基于 GFS 架构的开源分布式文件系统</p>
</li>
<li>
<p>Zookeeper：高可用的分布式数据管理与系统协调框架</p>
</li>
</ol>
<p>分布式数据库</p>
<ol>
<li>Google Spanner：google 可扩展的、全球分布式的数据库</li>
<li>TiDB：开源分布式关系型数据库</li>
<li>HBase：开源 Nosql 数据库</li>
<li>MongoDB：文档数据库</li>
</ol>
<p>分布式计算</p>
<ol>
<li>Hadoop：基于 MapReduce 分布式计算框架</li>
<li>Spark：在 Hadoop 基础之上，使用内存来存储数据</li>
<li>YARN：分布式资源调度</li>
</ol>
<h3 id="2系统模型"><a class="markdownIt-Anchor" href="#2系统模型"></a> 2.系统模型</h3>
<h4 id="21-故障模型"><a class="markdownIt-Anchor" href="#21-故障模型"></a> 2.1 故障模型</h4>
<ul>
<li>Byzantine failure：节点可以任意篡改发送给其他节点的数据</li>
<li>Authentication detectable byzantine failure（ADB）：Byzantine failure 的特例，节点可以篡改数据，但不能伪造其他节点的数据</li>
<li>Performance failure：节点未在特定时间段内收到数据，即时间太早或太晚</li>
<li>Omission failure：节点收到数据的时间无限晚，即收不到数据</li>
<li>Crash failure：在 omission failure 的基础上，增加了节点停止响应的假设，即持续性地 omission failure</li>
<li>Fail-stop failure：在 Crash failure 的基础上增加了错误可检测的假设</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">故障</th>
<th style="text-align:center">描述</th>
<th style="text-align:center">可能的类型</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">磁盘故障</td>
<td style="text-align:center">如：磁头不寻道、盘片不转、磁介质损伤等。年发生率 1-2%</td>
<td style="text-align:center">Fail-stop</td>
</tr>
<tr>
<td style="text-align:center">磁盘坏道、坏块</td>
<td style="text-align:center">磁头划伤引起坏道，或受宇宙射线影响晶体管产生位反转</td>
<td style="text-align:center">Fail-stop，ADB</td>
</tr>
<tr>
<td style="text-align:center">服务器主板、板卡故障</td>
<td style="text-align:center">可能是风扇故障，或灰尘引起的短路，或 SCSI/RAID 卡造成的死机</td>
<td style="text-align:center">Crash</td>
</tr>
<tr>
<td style="text-align:center">网络故障</td>
<td style="text-align:center">电源故障、背板故障等，网卡位反转、网络流量大造成大量丢包等</td>
<td style="text-align:center">Byzantine，Omission</td>
</tr>
<tr>
<td style="text-align:center">网络分区</td>
<td style="text-align:center">网络分区异常引起节点形成不同的子集，子集中网络相遇，子集间网络不通</td>
<td style="text-align:center">Performance</td>
</tr>
<tr>
<td style="text-align:center">内存故障</td>
<td style="text-align:center">内存出错造成的数据被篡改，分为 UE、CE 两种</td>
<td style="text-align:center">ADB</td>
</tr>
<tr>
<td style="text-align:center">线缆故障</td>
<td style="text-align:center">服务器光模块频繁 up 或 down</td>
<td style="text-align:center">Performance，Omission</td>
</tr>
<tr>
<td style="text-align:center">内核崩溃</td>
<td style="text-align:center">内核内部的致命错误，产生的 kernel panic</td>
<td style="text-align:center">Crash</td>
</tr>
<tr>
<td style="text-align:center">CPU 故障</td>
<td style="text-align:center">年故障率接近 1%</td>
<td style="text-align:center">Omission、Crash</td>
</tr>
<tr>
<td style="text-align:center">电源故障</td>
<td style="text-align:center">服务器失去电力支撑</td>
<td style="text-align:center">Omission</td>
</tr>
<tr>
<td style="text-align:center">软件故障</td>
<td style="text-align:center">如：进程 crash、内存踩坏、状态不一致、配置错误、软件 bug 等</td>
<td style="text-align:center">Byzantine、Crash 等</td>
</tr>
</tbody>
</table>
<h4 id="22-拜占庭将军问题"><a class="markdownIt-Anchor" href="#22-拜占庭将军问题"></a> 2.2 拜占庭将军问题</h4>
<blockquote>
<p>两将军问题（Two Generals’ Problem）：两支军队的将军只能派信使穿越敌方领土相互通信，以此约定进攻时间。该问题希望求解如何在两名将军派出的任何信使都可能被俘虏的情况下，就经过时间达成共识。</p>
<p>结论是，两将军问题被证实是无解的电脑通信问题，两支军队理论上永远无法达成共识。</p>
<p>方案一：同时发送 N 个信使，任何一个达到对方军队，都算成功。</p>
<p>方案二：设置超时时间，发送后未在一定时间返回，则加派信使。</p>
<p>共识与消息传递不是一个概念：即使保证了消息传递成功，也不能保证达成共识。</p>
<p>TCP 三次握手是在两个方向确认包的序列号，增加了超时重试，是两将军问题的一个工程解。</p>
<p>思考</p>
<ol>
<li>
<p>为何 TCP 需要三次握手？而不是两次或四次？</p>
<p>可以参考一下笔者个人整理的笔记<a class="link"   href="https://github.com/s-chance/packet-tracer#25tcp%E8%BF%90%E8%BE%93%E8%BF%9E%E6%8E%A5%E7%AE%A1%E7%90%86" >s-chance/packet-tracer: 计算机网络 | Packet Tracer的使用 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</li>
<li>
<p>挥手过程中，如果 FIN 报文丢失，会发生什么结果？</p>
<p>参考<a class="link"   href="https://zhuanlan.zhihu.com/p/557759425" >TCP 三次握手和四次挥手，中间失败了会发生什么？ - 知乎 (zhihu.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</li>
</ol>
<p>拜占庭将军考虑更加普适的场景，例如 3 个将军 ABC 互相传递消息，消息可能丢失，也可能被篡改，当有一个将军是“叛徒”（即出现拜占庭故障）时，整个系统无法达成一致。</p>
<p>如果没有“叛徒”，无论各自观察到怎样的敌情，总能达成一致的行动。</p>
<p>假设由于“叛徒” C 的存在，将军 A 和将军 B 获得不同的信息。这样将军 A 获得 2 票进攻 1 票撤退的信息，将军 B 获得 1 票进攻 2 票撤退的信息，产生了不一致。</p>
<p>考虑当 4 个将军，只有 1 个叛徒的场景。将军 D 作为消息分发中枢，约定如果没收到消息则执行撤退。</p>
<ul>
<li>如果 D 为 “叛徒”，ABC 无论收到任何消息，总能达成一致</li>
<li>D 为 “忠将”，ABC 中有 2 人将 D 的消息进行正确的传递，同样能保证最终决策符合大多数。</li>
</ul>
<p>进而能够证明，当有 3m+1 个将军，其中有 m 个“叛徒”时，可以增加 m 轮协商，最终达成一致。</p>
</blockquote>
<h4 id="23-共识和一致性"><a class="markdownIt-Anchor" href="#23-共识和一致性"></a> 2.3 共识和一致性</h4>
<p><strong>读请求和写请求并发时可能读到旧值</strong></p>
<p>客户端 A 读到 x=0，当客户端 C 正在写入时，客户端 A 和 B 可能读到 0 或者 1。但是当 C 写入完成后，A 和 B 最终能读到一致的数据。这样的一致性被称为 Eventually consistent（最终一致性）。</p>
<p><strong>一旦某个读获取到新值，所有的客户端都必须返回新值</strong></p>
<p>当客户端 A 读到更新的版本 x=1 后，及时将消息同步给其他客户端，这样其他客户端立即能获取到 x=1。这样的一致性被称为 Linearizability（线性一致性）</p>
<p>如果要保证“线性”一致性，多个节点间势必需要进行协商，以寻求一致。这样会增加延迟，系统可用性便会受损。</p>
<h4 id="24-时间和事件顺序"><a class="markdownIt-Anchor" href="#24-时间和事件顺序"></a> 2.4 时间和事件顺序</h4>
<blockquote>
<p>1978 年 Leslie Lamport 发表在 Communications of the ACM 上的论文 <em>Time, Clocks, and the Ordering  of Events in a Distributed System</em></p>
<p>我们定义“happened before”关系，记为“→”。其满足如下三个条件</p>
<ul>
<li>如果 a 和 b 是在相同节点上的两个事件，a 在 b 之前发生，则定义 a → b</li>
<li>如果事件 a 表示某个节点发送某条消息，b 是另一个节点接受这条消息，则有 a → b</li>
<li>如果有 a → b 且 b → c，则有 a → c</li>
</ul>
<p>当且仅当 a <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>↛</mo></mrow><annotation encoding="application/x-tex">\nrightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel amsrm">↛</span></span></span></span> b 且 b <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>↛</mo></mrow><annotation encoding="application/x-tex">\nrightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel amsrm">↛</span></span></span></span> a 时，则称两个事件为并发的（concurrent）。</p>
<p>Lamport 逻辑时钟</p>
<p>对于每一个节点 Pi 定义时钟 Ci 为一个函数，它为任意的事件 a 赋值编号为 Ci（a）</p>
<ol>
<li>如果 a 和 b 是在相同节点 Pi 上的两个事件，a 在 b 之前发生，则有 Ci（a）&lt; Ci（b）</li>
<li>如果事件 a 表示节点 Pi 发送某条消息， b 表示节点 Pj 接受这条消息，则有 Ci（a）&lt; Cj（b）</li>
</ol>
<p>利用逻辑时钟，可以对整个系统中的事件进行全序排序。</p>
</blockquote>
<h3 id="3理论基础"><a class="markdownIt-Anchor" href="#3理论基础"></a> 3.理论基础</h3>
<h4 id="31-cap-理论"><a class="markdownIt-Anchor" href="#31-cap-理论"></a> 3.1 CAP 理论</h4>
<table>
<thead>
<tr>
<th style="text-align:center">选项</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">C（Consistence）</td>
<td style="text-align:center">一致性，指数据在多个副本之间能够保持一致的特性（严格的一致性）。</td>
</tr>
<tr>
<td style="text-align:center">A（Availability）</td>
<td style="text-align:center">可用性，指系统提供的服务必须一直处于可用的状态，每次请求都能获取到非错的响应，但是不保证获取的数据为最新数据。</td>
</tr>
<tr>
<td style="text-align:center">P（Network partitioning）</td>
<td style="text-align:center">分区容错性，分布式系统在遇到任何网络分区故障的时候，仍然能够对外提供满足一致性和可用性的服务，除非整个网络环境都发生了故障。</td>
</tr>
</tbody>
</table>
<p>CAP 理论往往运用于数据库领域，同样适用于分布式存储方向</p>
<p>一个分布式系统最多只能同时满足 CAP 理论三项中的两项，因此有以下几种设计</p>
<ul>
<li>
<p>CA：放弃分区容错性，加强一致性和可用性，即传统的单机数据库的选择。</p>
</li>
<li>
<p>AP：放弃一致性（这里的一致性是指强一致性），追求分区容错性和可用性，例如一些注重用户体验的系统。</p>
</li>
<li>
<p>CP：放弃可用性，追求一致性和分区容错性，例如与资金安全相关的系统。</p>
</li>
</ul>
<p>目前大多数都是分布式系统，因此网络分区是必备的。在网络发生分区的情况下，必须在可用性和一致性之间做出选择。</p>
<p>近似解决方法：把故障节点的负载转移给备用节点负责。</p>
<h4 id="32-acid-理论"><a class="markdownIt-Anchor" href="#32-acid-理论"></a> 3.2 ACID 理论</h4>
<p>事务是数据库系统中非常重要的概念，它是数据库管理系统执行过程中的一个逻辑单元，它能够保证一个事务中的所有操作要么全部执行，要么全都不执行。</p>
<p>数据库事务拥有四个特性 ACID，分别是原子性（Atomicity）、一致性（Consistency）、隔离性（Isolation）和持久性（Durability）</p>
<ul>
<li>
<p>原子性（A）</p>
<p>原子性是指事务包含的操作要么全部成功，要么全部失败回滚。</p>
</li>
<li>
<p>一致性（C）</p>
<p>一致性是指事务必须使数据库从一个一致性状态变换到另一个一致性状态，即一个事务执行之前和执行之后都必须处于一致性状态。</p>
</li>
<li>
<p>隔离性（I）</p>
<p>隔离性是指当多个用户并发访问数据库时，数据库为每一个用户开启的事务，不能被其他事务的操作所干扰，多个并发事务之间要相互隔离</p>
</li>
<li>
<p>持久性（D）</p>
<p>持久性是指一个事务一旦被提交了，那么对于数据库中的数据的改变就是永久性的，即使是在数据库系统遇到故障的情况下，也不会丢失提交事务的操作</p>
</li>
</ul>
<h4 id="33-base-理论"><a class="markdownIt-Anchor" href="#33-base-理论"></a> 3.3 BASE 理论</h4>
<p>Base 理论是对 CAP 理论中一致性和可用性权衡的结果，其来源于对大型互联网分布式实践的总结，是基于 CAP 定理逐步演化而来的。其核心思想是</p>
<ul>
<li>Basically Available（基本可用）：假设系统出现了不可预知的故障，但是还能使用，只是相比较正常的系统而言，会有响应时间上的损失或功能上的损失。</li>
<li>Soft State（软状态）：允许系统中的数据存在中间状态，并认为该状态不影响系统的整体可用性，即允许系统在多个不同节点的数据副本存在数据信息延时。</li>
<li>Eventually Consistent（最终一致性）：系统能够保证在没有其他新的更新操作的情况下，数据最终一定能够达到一致的状态，因此所有客户端对系统的数据访问最终都能够获取到最新的值。</li>
</ul>
<h3 id="4分布式事务"><a class="markdownIt-Anchor" href="#4分布式事务"></a> 4.分布式事务</h3>
<h4 id="41-二阶段提交"><a class="markdownIt-Anchor" href="#41-二阶段提交"></a> 4.1 二阶段提交</h4>
<p>二阶段提交（Two-phase Commit）：为了使基于分布式系统架构下的所有节点在进行事务提交时保持一致性而设计的一种演算法。</p>
<p>三个假设</p>
<ol>
<li>引入协调者（Coordinator）和参与者（Participants），互相进行网络通信</li>
<li>所有节点都采用预写式日志，且日志被写入后即被保持在可靠的存储设备上</li>
<li>所有节点不会永久性损坏，即使损坏后仍然可以恢复</li>
</ol>
<p>可能出现的情况</p>
<ol>
<li>
<p>Coordinator 不宕机，Participants 宕机，需要进行回滚操作。</p>
<p>回滚：在 Prepare 阶段，如果某个事务参与者反馈失败消息，说明该节点的本地事务执行不成功，必须回滚。</p>
</li>
<li>
<p>Coordinator 宕机，Participants 不宕机，可以引入新的协调者，待查询状态后，重复二阶段提交。</p>
</li>
<li>
<p>Coordinator 宕机，Participants 宕机。无法确认状态，需要数据库管理员的介入，防止数据库进入一个不一致的状态。</p>
</li>
</ol>
<p>二阶段提交需要注意的问题</p>
<ol>
<li>
<p>性能问题</p>
<p>两阶段提交需要多次节点间的网络通信，耗时过大，资源需要进行锁定，徒增资源等待时间。</p>
</li>
<li>
<p>协调者单点故障问题</p>
<p>如果事务协调者节点宕机，需要另起新的协调者，否则参与者处于中间状态无法完成事务。</p>
</li>
<li>
<p>网络分区带来的数据不一致</p>
<p>一部分参与者收到了 Commit 消息，另一部分参与者没收到 Commit 消息，会导致节点之间数据不一致。</p>
</li>
</ol>
<p>思考</p>
<ol>
<li>
<p>日志被保存在 [可靠] 的存储设备上。如何保证这一点？</p>
<p>参考<a class="link"   href="https://zhuanlan.zhihu.com/p/509856830" >分布式日志存储架构设计方案 - 知乎 (zhihu.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</li>
<li>
<p>参与者 Commit 了，但 Ack 信息协调者没收到怎么办？</p>
<p>参考<a class="link"   href="https://zhuanlan.zhihu.com/p/243324226" >12.4 故障恢复（Crash Recovery） - 知乎 (zhihu.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</li>
</ol>
<h4 id="42-三阶段提交"><a class="markdownIt-Anchor" href="#42-三阶段提交"></a> 4.2 三阶段提交</h4>
<p>三阶段提交 vs 二阶段提交</p>
<p>三阶段提交将二阶段提交中的 Prepare 阶段拆成两部分：CanCommit 和 PreCommit 机制。</p>
<ul>
<li>Coordinator 在 CanCommit 阶段向 Participants 询问是否可以执行</li>
<li>Participants 回复可以则进入 PreCommit 阶段，失败或超时则退出</li>
<li>在 PreCommit 阶段 Coordinator 再次向 Participants 询问是否可以执行</li>
<li>Participants 回复可以则进入 DoCommit 阶段，失败或超时则 Rollback</li>
<li>在 DoCommit 阶段 Coordinator 向所有人提交事务请求</li>
<li>Participants 在收到 Coordinator 的事务请求并执行之后提交反馈结果 Ack 给 Coordinator</li>
</ul>
<p>这解决了两个问题</p>
<ol>
<li>单点故障问题</li>
<li>阻塞问题</li>
</ol>
<p>另外引入超时机制，在等待超时之后，会继续进行事务的提交。</p>
<p>思考</p>
<p>三阶段缓和了二阶段面临的单点故障问题，但依然未解决以下问题</p>
<ol>
<li>性能问题</li>
<li>网络分区场景带来的数据一致性问题</li>
</ol>
<h4 id="43-mvcc"><a class="markdownIt-Anchor" href="#43-mvcc"></a> 4.3 MVCC</h4>
<blockquote>
<p>在数据库的实际使用过程中，可能会出现资源竞争导致数据不一致等问题。需要有一种机制来保证数据的正确访问和修改，这种机制就是数据库的并发控制。其中乐观并发控制、悲观并发控制和多版本并发控制是数据库并发控制主要采用的技术手段。</p>
</blockquote>
<p>悲观并发控制，也称为“悲观锁”。操作数据时直接把数据锁住，直到操作完成之后才会释放锁；上锁期间其他人不能修改数据。</p>
<p>乐观并发控制，也称为“乐观锁”。不会上锁，只是在执行更新时判断别人是否修改数据，只有冲突时才放弃操作。</p>
<p>多版本并发控制 MVCC，维持一个数据的多个版本使读写操作没有冲突。所以既不会阻塞写，也不会阻塞读。MVCC 为每个修改保存一个版本，并和事务的时间戳相关联。可以提高并发性能，解决脏读的问题。</p>
<blockquote>
<p>Spanner 论文里通过 TrueTime API 提供一个物理时钟的方式。服务器时钟偏差在 1 到 7ms 之间。</p>
<p>另外一种时间戳的实现：时间戳预言机（TSO），采用中心化的授时方式，所有协调者向中心化节点获取时钟。优点是算法简单，实现方便，但需要每个节点都与它进行交互，会产生一些网络通信的成本。TSO 的授时中就需要考虑低延迟，高性能以及更好的容错性。</p>
</blockquote>
<h3 id="5共识协议"><a class="markdownIt-Anchor" href="#5共识协议"></a> 5.共识协议</h3>
<h4 id="51-quorum-nwr-模型"><a class="markdownIt-Anchor" href="#51-quorum-nwr-模型"></a> 5.1 Quorum NWR 模型</h4>
<p>Quorum NWR 三要素</p>
<ul>
<li>
<p>N：在分布式存储系统中，有多少份备份数据</p>
</li>
<li>
<p>W：代表一次成功的更新数据操作要求至少有 w 份数据成功写入</p>
</li>
<li>
<p>R：代表一次成功的读取数据操作要求至少有 R 份数据成功读取</p>
</li>
</ul>
<p>为了保证强一致性，需要保证 W+R &gt; N</p>
<p>Quorum NWR 模型将 CAP 的选择交给用户，是一种简化版的一致性模型。</p>
<p>思考</p>
<ul>
<li>
<p>引起的并发更新问题</p>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">副本1</th>
<th style="text-align:center">副本2</th>
<th style="text-align:center">副本3</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">初始值(v)</td>
<td style="text-align:center">v1=1</td>
<td style="text-align:center">v1=1</td>
<td style="text-align:center">v1=1</td>
</tr>
<tr>
<td style="text-align:center">第一次写</td>
<td style="text-align:center">v2=2</td>
<td style="text-align:center">v2=2</td>
<td style="text-align:center">v1=1</td>
</tr>
<tr>
<td style="text-align:center">第二次写</td>
<td style="text-align:center">v3=3</td>
<td style="text-align:center">v2=2</td>
<td style="text-align:center">v2=2</td>
</tr>
</tbody>
</table>
<p>如果读取副本 1 和副本 2，得出 v=3 的结论</p>
<p>如果读取副本 2 和副本 3，得吃 v=2 的结论</p>
</li>
<li>
<p>问题的根源：允许数据被覆盖</p>
</li>
</ul>
<h4 id="52-raft-协议"><a class="markdownIt-Anchor" href="#52-raft-协议"></a> 5.2 RAFT 协议</h4>
<p>Raft 协议是一种分布式一致性算法（共识算法），即使出现部分节点故障，网络延时等情况，也不影响各节点，进而提高系统的整体可用性。Raft 是使用较为广泛的分布式协议。从某种角度来看，RAFT 也使用了 Quorum 机制。</p>
<ul>
<li>Leader - 领导者，通常一个系统中是一主（Leader）多从（Follower）。Leader 负责处理所有的客户端请求，并向 Follower 同步请求日志，当日志同步到大多数节点上后，通知 Follower 提交日志。</li>
<li>Follower - 跟随者，不会发生任何请求。接受并持久化 Leader 同步的日志，在 Leader 告知日志可以提交后，再提交日志。当 Leader 出现故障时，主动推荐自己为 Candidate。</li>
<li>Candidate - 备选者，Leader 选举过程中的临时角色。向其他节点发送请求投票信息。如果获得大多数选票，则晋升为 Leader。</li>
<li>Log（日志）：节点之间同步的信息，以只追加写的方式进行同步，解决了数据被覆盖的问题。</li>
<li>Term（任期号）：单调递增，每个 Term 内最多只有一个 Leader。</li>
<li>Committed：日志被复制到多数派节点，即可认为已经被提交。</li>
<li>Applied：日志被应用到本地状态机，执行了 log 中的命令，修改了内存状态</li>
</ul>
<p>Leader 选举过程</p>
<ol>
<li>初始全部为 Follower</li>
<li>Current Term + 1</li>
<li>选举自己</li>
<li>向其它参与者发起 RequestVote 请求，retry 直到遇到以下几种情况
<ul>
<li>收到多数派请求，成为 Leader，并发送心跳</li>
<li>收到其它 Leader 的请求，转为 Follower，更新自己的 Term</li>
<li>收到部分请求，但未达到多数派，选举超时，随机 timeout 开始下一轮</li>
</ul>
</li>
</ol>
<p>两个规则</p>
<ul>
<li>在一个任期内每个参与者最多投一票（持久化）</li>
<li>要成为 Leader，必须拿到多数投票</li>
</ul>
<p>Log Replication 过程：新 Leader 产生，Leader 和 Follower 不同步，Leader 强制覆盖 Follower 的不同步的日志</p>
<ol>
<li>Leader 收到写请求 w</li>
<li>将 w 写入本地 log</li>
<li>向其它 Follower 发起 AppendEntries RPC</li>
<li>等待多数派回复
<ul>
<li>更新本地状态机，返回给客户端</li>
<li>发送下一个心跳通知 Follower 上一个 Log 已经被 Committed</li>
<li>Follower 也根据命令应用本地状态机</li>
</ul>
</li>
<li>若 Follwer 有问题，则 Leader 会一直 retry</li>
<li>若 Leader 有问题，则切主</li>
</ol>
<p>切主：当 Leader 出现问题时，就需要重新选举。</p>
<ol>
<li>Leader 发现失去 Follower 的响应，失去 Leader 身份</li>
<li>两个 Follower 之间一段时间未收到心跳，重新进行选举，选出新的 Leader，此时发生了切主</li>
<li>Leader 重启，以 Follower 的身份加入进来</li>
</ol>
<p>问题：旧 Leader 未失去身份，新 Leader 已经选出，产生了“双主”，如何解决？“双主”的存在带来的主要问题就是 Stale Read，一种读取历史数据版本的机制。</p>
<p>Stale Read</p>
<p>发生 Leader 切换，old leader 收到了读请求。如果直接响应，可能会有 Stale Read。解决方案就是保证读的强一致性。</p>
<p>读操作在 lease timeout 内，默认自己是 leader；不是则发起一次 heartbeat。等待 Commit Index 应用到状态机。</p>
<p>Election timeout &gt; lease timeout：新 leader 上任，自从上次心跳之后一定超过了 Election timeout 的时间，旧 leader 大概率能够发现自己的 Lease 已经过期。</p>
<h4 id="53-paxos-协议"><a class="markdownIt-Anchor" href="#53-paxos-协议"></a> 5.3 Paxos 协议</h4>
<p>Paxos 算法与 RAFT 算法区别</p>
<ol>
<li>Multi-Paxos 可以并发修改日志，而 Raft 写日志操作必须是连续的</li>
<li>Multi-Paxos 可以随机选主，不必要求最新最全的节点当选 Leader</li>
</ol>
<p>Paxos 的优势：写入并发性能高，所有节点都能写入</p>
<p>Paxos 的劣势：没有一个节点有完整的最新的数据，恢复流程复杂，需要同步历史记录</p>
<p>Paxos 中有三种角色：Proposer（提出者）、Acceptor（决策者）、Learner（决策学习者）</p>
<p>Proposer 与 Acceptor 之间的协作</p>
<ol>
<li>Proposer 获取 Proposal ID n，并向所有 Acceptor 广播</li>
<li>Acceptor 接收到信息后进行判断，如果 n &gt; min_proposal 则使 min_proposal := n，并返回 accepted_value 和 Proposal</li>
<li>Proposer 接收过半数回复，选择 Proposal 最大的 accepted_value 作为共识</li>
<li>第二阶段，广播 Accept(n, value) 到所有节点</li>
<li>Acceptor 接收到信息后再次判断，如果 n &gt; min_proposal 则使 min_proposal := n， accepted_value := value，本地持久化后返回</li>
<li>Proposer 接收过半请求，若有结果 &gt; n，更新新的提议，跳转回第 1 步</li>
</ol>
<h3 id="6分布式实践"><a class="markdownIt-Anchor" href="#6分布式实践"></a> 6.分布式实践</h3>
<h4 id="61-mapreduce"><a class="markdownIt-Anchor" href="#61-mapreduce"></a> 6.1 MapReduce</h4>
<ul>
<li>Mapper：将输入分解为多个 Job 来并行处理。彼此之间几乎没有依赖关系。</li>
<li>Shuffler：将 mapper 结果打乱，防止数据倾斜。</li>
<li>Reducer：对 map 阶段的结果进行全局汇总。</li>
</ul>
<p>相关资料<a class="link"   href="https://zhuanlan.zhihu.com/p/408392107" >为什么 MapReduce 再次流行起来了？ - 知乎 (zhihu.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h4 id="62-分布式-kv"><a class="markdownIt-Anchor" href="#62-分布式-kv"></a> 6.2 分布式 KV</h4>
<p>相关资料<a class="link"   href="https://juejin.cn/post/6844903504964747278" >小米开源分布式KV存储系统Pegasus - 掘金 (juejin.cn) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h3>
<p>分布式概述</p>
<ul>
<li>什么是分布式</li>
<li>分布式的必要性</li>
<li>常见的分布式系统</li>
</ul>
<p>系统模型</p>
<ul>
<li>故障模型</li>
<li>拜占庭将军问题</li>
<li>共识与一致性</li>
<li>时间和事件顺序</li>
</ul>
<p>基础理论</p>
<ul>
<li>CAP 理论</li>
<li>ACID 理论</li>
<li>BASE 理论</li>
</ul>
<p>分布式事务</p>
<ul>
<li>二阶段提交</li>
<li>三阶段提交</li>
<li>MVCC</li>
</ul>
<p>共识协议</p>
<ul>
<li>Quorum NWR 算法</li>
<li>Raft 协议</li>
<li>Paxos 协议</li>
</ul>
<p>分布式实践</p>
<ul>
<li>MapReduce</li>
<li>分布式 KV</li>
</ul>
<h3 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h3>
<p><a class="link"   href="https://zhuanlan.zhihu.com/p/107439021" >拜占庭将军问题 (The Byzantine Generals Problem) - 知乎 (zhihu.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://zhuanlan.zhihu.com/p/338835258" >CAP理论该怎么理解？为什么是三选二？为什么是CP或者AP？面试题有哪些？ - 知乎 (zhihu.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://juejin.cn/post/7016165148020703246" >看一遍就理解：MVCC原理详解 - 掘金 (juejin.cn) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://zhuanlan.zhihu.com/p/266850866" >乐观锁、悲观锁和MVCC，今天让你一次搞懂 - 知乎 (zhihu.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://zhuanlan.zhihu.com/p/404786050" >Raft 一致性协议完整解析 - 知乎 (zhihu.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://zhuanlan.zhihu.com/p/361108372" >理解 Paxos 协议——浅谈分布式一致性协议 - 知乎 (zhihu.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>青训营记录</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>微服务架构</title>
    <url>/2023/02/04/golang-day9/</url>
    <content><![CDATA[<p>本文来源于第五届字节跳动青训营活动，已收录到<a class="link"   href="https://juejin.cn/post/7196678344573337656" >微服务架构 | 青训营笔记 - 掘金 (juejin.cn) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，主要记录了对微服务架构原理与治理实践的学习<span id="more"></span></p>
<h2 id="微服务架构原理与治理实践"><a class="markdownIt-Anchor" href="#微服务架构原理与治理实践"></a> 微服务架构原理与治理实践</h2>
<h3 id="背景"><a class="markdownIt-Anchor" href="#背景"></a> 背景</h3>
<p>微服务架构是当前大多数互联网公司的标准架构。</p>
<p>主要学习微服务架构的由来及原理、服务治理功能工作机制。</p>
<h3 id="1微服务架构介绍"><a class="markdownIt-Anchor" href="#1微服务架构介绍"></a> 1.微服务架构介绍</h3>
<h4 id="11-系统架构演变历史"><a class="markdownIt-Anchor" href="#11-系统架构演变历史"></a> 1.1 系统架构演变历史</h4>
<p>架构演变的原因</p>
<ul>
<li>互联网的爆炸性发展</li>
<li>硬件设施的快速发展</li>
<li>需求复杂性的多样化</li>
<li>开发人员的急剧增加</li>
<li>计算机理论及技术的发展</li>
</ul>
<p>单体架构 —&gt; 垂直应用架构 —&gt; 分布式架构 —&gt; SOA 架构 —&gt; 微服务架构</p>
<h5 id="单体架构"><a class="markdownIt-Anchor" href="#单体架构"></a> 单体架构</h5>
<ul>
<li>
<p>优势</p>
<ol>
<li>
<p>性能最高</p>
</li>
<li>
<p>冗余小</p>
</li>
</ol>
</li>
<li>
<p>劣势</p>
<ol>
<li>
<p>debug 困难</p>
</li>
<li>
<p>模块相互影响（非核心功能可能导致程序崩溃）</p>
</li>
<li>
<p>模块分工、依赖管理困难，开发流程几乎无法分工</p>
</li>
</ol>
</li>
</ul>
<h5 id="垂直应用架构"><a class="markdownIt-Anchor" href="#垂直应用架构"></a> 垂直应用架构</h5>
<p>安装业务线垂直划分</p>
<ul>
<li>优势：业务独立开发维护</li>
<li>劣势
<ol>
<li>不同业务存在冗余，无法复用</li>
<li>每个业务还是单体</li>
</ol>
</li>
</ul>
<h5 id="分布式架构"><a class="markdownIt-Anchor" href="#分布式架构"></a> 分布式架构</h5>
<p>抽取出业务无关的公共模块</p>
<ul>
<li>优势：业务无关的独立服务</li>
<li>劣势
<ol>
<li>服务模块 bug 可能导致全站瘫痪</li>
<li>调用关系复杂</li>
<li>不同服务冗余</li>
</ol>
</li>
</ul>
<h5 id="soa-架构service-oriented-architecture"><a class="markdownIt-Anchor" href="#soa-架构service-oriented-architecture"></a> SOA 架构（Service Oriented Architecture）</h5>
<p>面向服务的架构</p>
<ul>
<li>优势：服务注册</li>
<li>劣势
<ol>
<li>整个系统设计是中心化的</li>
<li>需要从上至下设计</li>
<li>重构困难</li>
</ol>
</li>
</ul>
<h5 id="微服务架构"><a class="markdownIt-Anchor" href="#微服务架构"></a> 微服务架构</h5>
<p>彻底服务化的架构</p>
<ul>
<li>优势
<ol>
<li>高效的开发迭代效率</li>
<li>业务独立设计</li>
<li>自下而上设计</li>
<li>故障隔离可控</li>
</ol>
</li>
<li>劣势
<ol>
<li>治理、运维难度急剧增加</li>
<li>观测挑战</li>
<li>安全性问题</li>
<li>分布式系统本身的复杂性</li>
</ol>
</li>
</ul>
<h4 id="12-微服务架构概览"><a class="markdownIt-Anchor" href="#12-微服务架构概览"></a> 1.2 微服务架构概览</h4>
<p>从组件的维度去分析微服务架构的整体视角</p>
<ul>
<li>服务配置和治理：服务配置、服务治理</li>
<li>消息队列 MQ
<ul>
<li>用户服务：用户数据库</li>
<li>商品服务：商品数据库</li>
<li>订单服务：订单数据库</li>
<li>广告服务：数据仓库、Redis</li>
</ul>
</li>
<li>链路追踪和监控：链路追踪、服务监控</li>
<li>网关</li>
</ul>
<h4 id="13-微服务架构核心要素"><a class="markdownIt-Anchor" href="#13-微服务架构核心要素"></a> 1.3 微服务架构核心要素</h4>
<ul>
<li>服务治理：服务注册、服务发现、负载均衡、扩缩容、流量治理、稳定性治理、…</li>
<li>可观测性：日志采集、日志分析、监控打点、监控大盘、异常报警、链路追踪、…</li>
<li>安全：身份验证、认证授权、访问令牌、审计、传输加密、黑产攻击、…</li>
</ul>
<h4 id="14-总结"><a class="markdownIt-Anchor" href="#14-总结"></a> 1.4 总结</h4>
<ul>
<li>系统架构的演变历史</li>
<li>微服务架构的整体概览</li>
<li>微服务架构的核心要素</li>
</ul>
<h3 id="2微服务架构原理及特征"><a class="markdownIt-Anchor" href="#2微服务架构原理及特征"></a> 2.微服务架构原理及特征</h3>
<h4 id="21-基本概念"><a class="markdownIt-Anchor" href="#21-基本概念"></a> 2.1 基本概念</h4>
<ul>
<li>
<p>服务（service）</p>
<p>一组具有相同逻辑的运行实体。</p>
</li>
<li>
<p>实例（instance）</p>
<p>一个服务中，每个运行实体即为一个实例。</p>
</li>
<li>
<p>实例与进程的关系</p>
<p>实例与进程之间没有必然对应关系，一个实例可以对应一个或多个进程（反过来不常见）。</p>
</li>
<li>
<p>集群（cluster）</p>
<p>通常指服务内部的逻辑划分，包含多个实例。</p>
</li>
<li>
<p>常见的实例承载形式</p>
<p>进程、VM、k8s pod、…</p>
</li>
<li>
<p>有状态/无状态服务</p>
<p>服务的实例是否存储了可持久化的数据，例如磁盘文件。</p>
</li>
<li>
<p>服务间通信</p>
<p>对于单体服务，不同模块通信只是简单的函数调用。</p>
<p>对于微服务，服务间通信意味着网络传输。</p>
</li>
</ul>
<h4 id="22-服务注册与发现"><a class="markdownIt-Anchor" href="#22-服务注册与发现"></a> 2.2 服务注册与发现</h4>
<p>问题：在代码层面，如何指定调用一个目标服务的地址（ip:port）？</p>
<h5 id="硬编码-hardcode"><a class="markdownIt-Anchor" href="#硬编码-hardcode"></a> 硬编码 hardcode</h5>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Service A want to call Service B.</span></span><br><span class="line">client := grpc.NewClient(<span class="string">&quot;10.23.45.67:8080&quot;</span>)</span><br></pre></td></tr></table></figure></div>
<p>硬编码 hardcode 的问题：当服务存在多个实例时，hardcode 无法调用动态变化的服务地址。</p>
<h5 id="dns"><a class="markdownIt-Anchor" href="#dns"></a> DNS</h5>
<p>DNS 的思想就是中间层。</p>
<p>DNS 的问题</p>
<ul>
<li>本地 DNS 存在缓存，导致延时。</li>
<li>负载均衡问题。</li>
<li>不支持服务实例的探活检查。</li>
<li>域名无法配置端口。</li>
</ul>
<h5 id="服务注册中心-service-registry"><a class="markdownIt-Anchor" href="#服务注册中心-service-registry"></a> 服务注册中心 Service Registry</h5>
<p>解决思路：新增一个统一的服务注册中心，用于存储服务名到服务实例的映射。与 DNS 类似，也是一个中间层。</p>
<h5 id="服务实例上线及下线过程"><a class="markdownIt-Anchor" href="#服务实例上线及下线过程"></a> 服务实例上线及下线过程</h5>
<ul>
<li>
<p>当一个实例还有流量时，不能直接下线，当它没有流量时，可以下线。</p>
</li>
<li>
<p>当一个服务下线几个实例后访问压力过大，可以添加新的实例到服务中。</p>
</li>
<li>
<p>新启用的实例会先进行健康检查，检查无误后再注册到服务中心。</p>
</li>
<li>
<p>健康检查是在服务运作期间一直持续进行的。</p>
</li>
</ul>
<h4 id="23-流量特征"><a class="markdownIt-Anchor" href="#23-流量特征"></a> 2.3 流量特征</h4>
<ul>
<li>统一网关路口</li>
<li>内网通信多数采用 RPC</li>
<li>网状调用链路</li>
</ul>
<p>弱化连接的概念，强调“请求”，即同一个客户端长连接发出的请求，理论上可以到达服务中所有实例。网关 gateway 可以用于身份认证，进而将 token 附在请求上。</p>
<h4 id="24-总结"><a class="markdownIt-Anchor" href="#24-总结"></a> 2.4 总结</h4>
<ul>
<li>微服务架构中的基本组件及术语</li>
<li>服务注册及发现中间层</li>
<li>平滑无损的服务实例上下线流程</li>
<li>微服务架构中的基本流量特征</li>
</ul>
<h3 id="3核心服务治理功能"><a class="markdownIt-Anchor" href="#3核心服务治理功能"></a> 3.核心服务治理功能</h3>
<h4 id="31-服务发布"><a class="markdownIt-Anchor" href="#31-服务发布"></a> 3.1 服务发布</h4>
<p>服务发布（deployment），即让一个服务升级运行新的代码的过程。</p>
<p>服务发布的难点</p>
<ul>
<li>
<p>服务不可用</p>
</li>
<li>
<p>服务抖动</p>
</li>
<li>
<p>服务回滚</p>
</li>
<li>
<p>蓝绿部署问题</p>
</li>
<li>
<p>灰度发布（金丝雀发布）问题</p>
</li>
</ul>
<h4 id="32-流量治理"><a class="markdownIt-Anchor" href="#32-流量治理"></a> 3.2 流量治理</h4>
<p>在微服务架构下，可以基于地区、集群、实例、请求等维度，对端到端流量的路由路径进行精确控制（这里就是狭义的对流量进行控制）。</p>
<h4 id="33-负载均衡"><a class="markdownIt-Anchor" href="#33-负载均衡"></a> 3.3 负载均衡</h4>
<p>负载均衡（Load Balance）负责分配请求在每个下游实例上以控制分布情况。</p>
<p>常见的 LB 策略</p>
<ul>
<li>Round Robin</li>
<li>Random</li>
<li>Ring Hash</li>
<li>Least Request</li>
<li>…</li>
</ul>
<h4 id="34-稳定性治理"><a class="markdownIt-Anchor" href="#34-稳定性治理"></a> 3.4 稳定性治理</h4>
<p>线上服务难免会出现问题，这和程序本身正确性无关。</p>
<ul>
<li>网络攻击</li>
<li>流量突增</li>
<li>机房断电</li>
<li>光纤断开</li>
<li>机器故障</li>
<li>网络故障</li>
<li>机房空调故障</li>
<li>…</li>
</ul>
<p>微服务架构中典型的稳定性治理功能</p>
<ul>
<li>限流</li>
<li>熔断</li>
<li>过载保护</li>
<li>降级</li>
</ul>
<h4 id="35-总结"><a class="markdownIt-Anchor" href="#35-总结"></a> 3.5 总结</h4>
<ul>
<li>服务发布：蓝绿部署、灰度发布</li>
<li>基于地区、集群、实例、请求等维度的流量治理功能</li>
<li>几种常见的负载均衡策略</li>
<li>微服务架构中的稳定性治理功能</li>
</ul>
<h3 id="4服务治理实践"><a class="markdownIt-Anchor" href="#4服务治理实践"></a> 4.服务治理实践</h3>
<h4 id="41-重试的意义"><a class="markdownIt-Anchor" href="#41-重试的意义"></a> 4.1 重试的意义</h4>
<h5 id="本地函数调用可能引发的异常"><a class="markdownIt-Anchor" href="#本地函数调用可能引发的异常"></a> 本地函数调用可能引发的异常</h5>
<ul>
<li>参数非法</li>
<li>OOM（Out Of Memory）</li>
<li>NPE（Null Pointer Exception）</li>
<li>边界 case</li>
<li>系统崩溃</li>
<li>死循环</li>
<li>程序异常退出</li>
</ul>
<p>本地函数没有重试的意义</p>
<h5 id="远程函数调用可能引发的异常"><a class="markdownIt-Anchor" href="#远程函数调用可能引发的异常"></a> 远程函数调用可能引发的异常</h5>
<ul>
<li>网络抖动</li>
<li>下游负载高导致超时</li>
<li>下游机器宕机</li>
<li>本地机器负载高，调度超时</li>
<li>下游熔断、限流</li>
<li>…</li>
</ul>
<p>远程函数需要进行重试</p>
<p><strong>重试可以避免掉偶然发生的错误，提高 SLA（Service-Level Agreement）</strong></p>
<ul>
<li>
<p>降低错误率</p>
<p>假设单次请求的错误率为 0.01，那么连续两次的错误的概率为 0.0001。</p>
</li>
<li>
<p>降低长尾延时</p>
<p>对于偶尔耗时较长的请求，重试请求有机会提前返回。</p>
</li>
<li>
<p>容忍暂时性错误</p>
<p>某些时候系统会有暂时性异常，例如网络抖动，重试可以尽量规避。</p>
</li>
<li>
<p>避开下游故障实例</p>
<p>一个服务中可能会有少量实例故障，例如机器故障，重试其他实例可以成功。</p>
</li>
</ul>
<h4 id="42-重试的难点"><a class="markdownIt-Anchor" href="#42-重试的难点"></a> 4.2 重试的难点</h4>
<ul>
<li>幂等性：多次请求可能会造成数据不一致。</li>
<li>重试风暴：随着调用深度的增加，重试次数会指数级上涨。</li>
<li>超时设置：间隔多少时间后发起重试请求。例如，服务 A 向服务 B 重试 3 次，但服务 B 需要向服务 C 重试 9 次，服务 C 需要向服务 D 重试 27 次，以此类推。</li>
</ul>
<h4 id="43-重试策略"><a class="markdownIt-Anchor" href="#43-重试策略"></a> 4.3 重试策略</h4>
<p>重试只有在大部分请求都成功，只有少部分请求失败时，才有必要。如果大部分请求都失败，重试只会加剧问题严重性。</p>
<h5 id="限制重试比例"><a class="markdownIt-Anchor" href="#限制重试比例"></a> 限制重试比例</h5>
<p>设定一个重试比例阈值，例如 1%，重试次数占所有请求次数比例不能超过该阈值。</p>
<h5 id="防止链路重试"><a class="markdownIt-Anchor" href="#防止链路重试"></a> 防止链路重试</h5>
<p>链路层面的防重试风暴的核心是限制每层都发生重试，理想情况下是只有最下一层发生重试。可以返回特殊的 status 表明“请求失败，但不进行重试”。</p>
<p>缺点是需要侵入性修改业务代码。</p>
<h5 id="hedged-requests"><a class="markdownIt-Anchor" href="#hedged-requests"></a> Hedged requests</h5>
<p>对于可能超时或延时高的请求，重新向另一个下游实例发送一个相同的请求，并等待先到达的响应。</p>
<h4 id="44-重试效果验证"><a class="markdownIt-Anchor" href="#44-重试效果验证"></a> 4.4 重试效果验证</h4>
<p>实际验证经过上述重试策略后，在链路上发生的重试放大效应。</p>
<h4 id="45-总结"><a class="markdownIt-Anchor" href="#45-总结"></a> 4.5 总结</h4>
<ul>
<li>重试的意义及难点</li>
<li>应对重试风暴的策略</li>
</ul>
<h3 id="归纳总结"><a class="markdownIt-Anchor" href="#归纳总结"></a> 归纳总结</h3>
<ul>
<li>微服务架构介绍</li>
<li>微服务架构原理及特征</li>
<li>核心服务治理功能</li>
<li>服务治理实践</li>
</ul>
<h3 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h3>
<p><a class="link"   href="https://zhuanlan.zhihu.com/p/42671353" >什么是蓝绿部署、滚动发布和灰度发布？ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://zhuanlan.zhihu.com/p/141398230" >Motan系列6：负载均衡（LoadBalance） <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://juejin.cn/post/7194381054797905981/#heading-0" >【后端专场 学习资料四】第五届字节跳动青训营 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>青训营记录</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>在Linux上配置Java环境</title>
    <url>/2022/11/26/java-in-linux/</url>
    <content><![CDATA[<h3 id="基于ubuntu2004lts配置java环境"><a class="markdownIt-Anchor" href="#基于ubuntu2004lts配置java环境"></a> 基于Ubuntu20.04LTS配置Java环境</h3>
<p>在Linux上配置Java环境的方式有3种, 系统级配置、用户级配置、临时配置</p>
<p>配置好Java环境就能够在Linux上运行基于Java环境运行的相关程序, 你可以在Linux系统上搭建基于Java实现的网站。这里以<strong>系统级配置</strong>为例, 适合个人开发者使用<span id="more"></span></p>
<h4 id="1下载targz压缩包"><a class="markdownIt-Anchor" href="#1下载targz压缩包"></a> 1.下载tar.gz压缩包</h4>
<p>从<a class="link"   href="https://www.oracle.com/java/technologies/downloads/" >Java官网 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>下载tar.gz包, 可以先下载到windows中, 再通过远程文件传输工具, 将压缩包传送到Linux的目录下, 也可以直接在Linux服务器中使用命令下载到指定目录</p>
<p>本文使用的是<strong>jdk-8u151-linux-i586.tar.gz</strong>包, 高版本可能有所区别, 32位与64位版本在不同linux发行版上可能有所区别</p>
<h4 id="2在linux中配置环境"><a class="markdownIt-Anchor" href="#2在linux中配置环境"></a> 2.在Linux中配置环境</h4>
<h5 id="1前提准备"><a class="markdownIt-Anchor" href="#1前提准备"></a> 1.前提准备</h5>
<p>默认当前目录是<strong>初始目录/root</strong>, 默认当前用户权限为<strong>root权限</strong>, 默认<strong>tar.gz包已经传送到/root目录下</strong></p>
<h5 id="2创建用于存放java文件夹的目录"><a class="markdownIt-Anchor" href="#2创建用于存放java文件夹的目录"></a> 2.创建用于存放Java文件夹的目录</h5>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">mkdir</span> /usr/java</span><br></pre></td></tr></table></figure></div>
<h5 id="3解压targz压缩包到该目录"><a class="markdownIt-Anchor" href="#3解压targz压缩包到该目录"></a> 3.解压tar.gz压缩包到该目录</h5>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo tar -zxvf jdk-8u151-linux-i586.tar.gz -C /usr/java</span><br></pre></td></tr></table></figure></div>
<h5 id="4编辑环境变量文件"><a class="markdownIt-Anchor" href="#4编辑环境变量文件"></a> 4.编辑环境变量文件</h5>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/profile</span><br></pre></td></tr></table></figure></div>
<p>在文件末尾追加下面内容, 具体目录根据实际情况编写</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/java/jdk1.8.0_151</span><br><span class="line"><span class="built_in">export</span> JRE_HOME=<span class="variable">$&#123;JAVA_HOME&#125;</span>/jre</span><br><span class="line"><span class="built_in">export</span> CLASSPATH=<span class="variable">$&#123;JAVA_HOME&#125;</span>/lib:<span class="variable">$&#123;JRE_HOME&#125;</span>/lib</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$&#123;JAVA_HOME&#125;</span>/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure></div>
<p><strong>一些特殊符号说明</strong></p>
<p><code>:</code>表示并列符号, 说明某个变量的值有多个, 用<code>:</code>来区分。相当于Windows下的 <code>;</code></p>
<p><code>$</code>表示引用变量, <code>&#123;&#125;</code> 则用于限定变量边界, 如上面的<code>$&#123;JAVA_HOME&#125;</code>就表示<code>/usr/java/jdk1.8.0_151</code></p>
<h5 id="5使环境变量马上生效"><a class="markdownIt-Anchor" href="#5使环境变量马上生效"></a> 5.使环境变量马上生效</h5>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure></div>
<h4 id="3测试java环境"><a class="markdownIt-Anchor" href="#3测试java环境"></a> 3.测试Java环境</h4>
<p>运行以下命令, 如果都成功运行, 则说明Java环境配置完成</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">java -version</span><br><span class="line">java</span><br><span class="line">javac</span><br></pre></td></tr></table></figure></div>
<h5 id="可能遇到的问题"><a class="markdownIt-Anchor" href="#可能遇到的问题"></a> 可能遇到的问题</h5>
<p>安装i586后缀jdk, 即<strong>安装32位的jdk</strong>后测试Java环境时提示<strong>bash: /usr/lib/java/jdk1.8.0_151/bin/java: 没有那个文件或目录</strong>, 可能是由于当前Linux发行版<strong>默认没有用于amd64系统的32位libc开发包</strong></p>
<p>可通过以下5个常用命令查看Linux发行版的架构信息</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">uname</span> -a</span><br><span class="line">dpkg --print-architecture <span class="comment"># 这条命令只适用于基于Debian和Ubuntu的Linux发行版</span></span><br><span class="line">getconf LONG_BIT</span><br><span class="line"><span class="built_in">arch</span></span><br><span class="line">file /sbin/init </span><br><span class="line"><span class="comment"># file命令需要配合它链接的另一个文件使用</span></span><br><span class="line"><span class="comment"># 在Ubuntu中是链接的是/lib/systemd/systemd</span></span><br><span class="line"><span class="comment"># 通过file /lib/systemd/systemd查看到架构信息</span></span><br></pre></td></tr></table></figure></div>
<h5 id="安装缺失的32位开发包"><a class="markdownIt-Anchor" href="#安装缺失的32位开发包"></a> 安装缺失的32位开发包</h5>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install libc6-i386</span><br></pre></td></tr></table></figure></div>
<p>如果安装libc6-i386失败, 请先更新软件列表, 再尝试重新安装, 并重新测试Java环境</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure></div>
<p>如果还是失败请选择64位的jdk版本重新进行配置</p>
<h5 id="重新测试java环境"><a class="markdownIt-Anchor" href="#重新测试java环境"></a> 重新测试Java环境</h5>
<h4 id="4update-alternatives软件版本管理"><a class="markdownIt-Anchor" href="#4update-alternatives软件版本管理"></a> 4.update-alternatives软件版本管理</h4>
<h5 id="1系统注册jdk需要使用多个jdk版本时"><a class="markdownIt-Anchor" href="#1系统注册jdk需要使用多个jdk版本时"></a> 1.系统注册jdk(需要使用多个jdk版本时)</h5>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo update-alternatives --install /usr/bin/java java /usr/java/jdk1.8.0_151/bin/java 300</span><br></pre></td></tr></table></figure></div>
<p><strong>参数说明</strong></p>
<p>第一个参数: --install表示向update-alternatives注册服务名</p>
<p>第二个参数: 注册<strong>最终地址</strong>, 成功后将会把命令在这个固定的目的地址做真实命令的<strong>软链接</strong>, 通过管理这个软链就能实现不同版本jdk的切换</p>
<p>第三个参数: <strong>服务名</strong>, 管理时以它为关联依据</p>
<p>第四个参数: 被管理命令的<strong>绝对路径</strong></p>
<p>第五个参数: <strong>优先级</strong>, 数字越大优先级越高</p>
<h5 id="2交互式修改"><a class="markdownIt-Anchor" href="#2交互式修改"></a> 2.交互式修改</h5>
<p>如果有多个版本的jdk, 可执行下面的命令通过交互界面进行切换</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo update-alternatives --config java</span><br></pre></td></tr></table></figure></div>
<p>查看多个版本的jdk以及当前状态</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo update-alternatives --display java</span><br></pre></td></tr></table></figure></div>
<p>调整为<strong>auto</strong>模式, 如果上面查看的状态是<strong>manual</strong>, 则还不能自动选择优先级高的jdk版本, 需要调整为auto模式</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo update-alternatives --auto java</span><br></pre></td></tr></table></figure></div>
<h4 id="5补充"><a class="markdownIt-Anchor" href="#5补充"></a> 5.补充</h4>
<p><strong>将上述的/etc/profile替换成~/.bashrc就是用户级配置</strong></p>
<p><strong>/etc/profile</strong>: 此文件为系统的每个用户设置环境信息, 当用户第一次登录时, 该文件被执行, 是<strong>系统全局</strong>对终端环境的设置, 它是login时最先被系统加载的, 是它调用了/etc/bashrc, 以及/etc/profile.d目录下的*.sh文件, 如果有一个软件包, 系统上只安装一份, 供所有开发者使用, 建议在/etc/profile.d下创建一个新的xxx.sh, 配置环境变量</p>
<p><strong>~/.bashrc</strong>: 是<strong>用户</strong>相关的终端（shell）的环境设置, 通常打开一个新终端时, 默认会加载里面的设置, 在这里的设置不会影响其它用户。如果一个服务器多个开发者使用, 需要配置多个sdk, 则推荐使用该设置</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>linux基础</title>
    <url>/2022/11/17/linux-base/</url>
    <content><![CDATA[<h3 id="关于linux的通用操作"><a class="markdownIt-Anchor" href="#关于linux的通用操作"></a> 关于Linux的通用操作</h3>
<p>基于Ubuntu22.04发行版的环境，本文整理了一些在Linux系统下基本通用的操作，使初学者能初步学会Linux系统的操作或使老用户重新回顾一下常用操作<span id="more"></span></p>
<h4 id="参考文章-linux-幕布-mubucom-作者时光逝"><a class="markdownIt-Anchor" href="#参考文章-linux-幕布-mubucom-作者时光逝"></a> 参考文章 <a class="link"   href="https://mubu.com/doc/28TtabEpGV3" >Linux - 幕布 (mubu.com) 作者：时光＆逝  <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h4>
<h4 id="准备工作"><a class="markdownIt-Anchor" href="#准备工作"></a> 准备工作</h4>
<p>远程连接工具<a class="link"   href="https://www.xshell.com/zh/xshell/" >XSHELL - NetSarang Website <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>远程文件传输工具 <a class="link"   href="https://www.xshell.com/zh/xftp/" >XFTP - NetSarang Website <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>配合XFTP可以较为直观地观察文件及目录的变化</p>
<p>注：一些发行版可能需要手动安装部分命令。另外，在执行命令时<strong>请确认自己所处的当前目录</strong></p>
<h4 id="提示"><a class="markdownIt-Anchor" href="#提示"></a> 提示</h4>
<p>一些命令可能需要在root权限下执行，或者在执行命令的前面都加上<code>sudo</code>的前缀，表示临时使用root权限执行这条命令</p>
<p>如果忘记了root密码可以通过以下方法重新设置</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo passwd <span class="comment"># 进入密码设置</span></span><br><span class="line"><span class="comment"># 输入当初安装时设置的非root普通用户密码</span></span><br><span class="line"><span class="comment"># 输入新的root密码</span></span><br><span class="line"><span class="comment"># 重复输入root密码</span></span><br><span class="line">su <span class="comment"># 切换到root</span></span><br><span class="line"><span class="comment"># 输入刚刚设置的root密码，就能切换到root用户</span></span><br></pre></td></tr></table></figure></div>
<h4 id="vim文本编辑器"><a class="markdownIt-Anchor" href="#vim文本编辑器"></a> vim文本编辑器</h4>
<p><strong>查看vim配置信息</strong></p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">vim --version</span><br></pre></td></tr></table></figure></div>
<p><strong>简易配置一下vim</strong></p>
<p>用vim打开用户vimrc文件</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">vim <span class="variable">$HOME</span>/.vimrc</span><br></pre></td></tr></table></figure></div>
<p>写入以下内容（后面的注释不需要）</p>
<blockquote>
<p>syntax on   # 开启语法高亮</p>
<p>set ts = 4    #  设置tab的缩进显示为四个空格的宽度</p>
<p>set expandtab # 设置tab字符替换为等宽的4个空格字符</p>
<p>set autoindent # 开启自动缩进</p>
<p>set number # 开启行号显示</p>
<p>set relativenumber # 使用相对行号</p>
</blockquote>
<p>关于vim的基本操作可以参考其它文章 <a class="link"   href="https://www.runoob.com/linux/linux-vim.html" >Linux vi/vim | 菜鸟教程 (runoob.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 或者视频<a class="link"   href="https://www.bilibili.com/video/BV13t4y1t7Wg/?share_source=copy_web&amp;vd_source=f4fedbdbfad10afdb2269285bd340510" >【保姆级入门】Vim编辑器 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h4 id="用户管理"><a class="markdownIt-Anchor" href="#用户管理"></a> 用户管理</h4>
<p>linux系统是一个多用户多任务的操作系统，任何一个要使用系统资源的用户都必须先向系统管理员申请一个账号，然后以这个账号的身份进入系统</p>
<p>linux的用户至少要属于一个组</p>
<h5 id="基本命令"><a class="markdownIt-Anchor" href="#基本命令"></a> 基本命令</h5>
<p><strong>useradd命令</strong>：创建一个用户</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># useradd [参数] 用户名</span></span><br><span class="line">useradd normal <span class="comment"># 创建一个名为normal的用户，用户目录默认家目录</span></span><br><span class="line">useradd -d /myuser normal <span class="comment"># 创建一个名为normal的用户，指定用户目录</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># useradd [参数] 组名 用户名</span></span><br><span class="line">useradd -g visitor vis <span class="comment"># 创建一个名为vis的用户的同时指定用户组为visitor</span></span><br></pre></td></tr></table></figure></div>
<p><strong>passwd命令</strong>：指定或修改用户的密码</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># passwd 用户名</span></span><br><span class="line">passwd normal <span class="comment"># 指定或修改normal用户的密码</span></span><br></pre></td></tr></table></figure></div>
<p><strong>userdel命令</strong>：删除用户</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># userdel 用户名</span></span><br><span class="line">userdel normal <span class="comment"># 删除normal用户</span></span><br><span class="line">userdel -r normal <span class="comment"># 同时删除该用户的目录</span></span><br></pre></td></tr></table></figure></div>
<p><strong>usermod命令</strong>：修改用户信息</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># usermod [参数] 新用户名 旧用户名</span></span><br><span class="line">usermod -l vis normal <span class="comment"># 修改normal用户名为vis、</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># usermod [参数] 组名 用户名</span></span><br><span class="line">groupadd demo</span><br><span class="line">usermod -g demo vis <span class="comment"># 修改vis用户所在的用户组为demo组</span></span><br></pre></td></tr></table></figure></div>
<p><strong>id命令</strong>：查询用户信息</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># id 用户名</span></span><br><span class="line"><span class="built_in">id</span> normal <span class="comment"># 查询normal用户信息</span></span><br></pre></td></tr></table></figure></div>
<p><strong>su命令</strong>：用户切换</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># su [参数] 用户名</span></span><br><span class="line">su common <span class="comment"># 切换到一个名为common的用户</span></span><br><span class="line">su - common <span class="comment"># 将环境变量一并切换为common用户的环境变量</span></span><br></pre></td></tr></table></figure></div>
<p><strong>groupadd命令</strong>：添加一个名为visitor的用户组</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># groupadd 组名</span></span><br><span class="line">groupadd visitor</span><br></pre></td></tr></table></figure></div>
<p><strong>groupdel命令</strong>：删除visitor用户组</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># groupdel 组名</span></span><br><span class="line">groupdel visitor</span><br></pre></td></tr></table></figure></div>
<p><strong>groupmod命令</strong>：修改用户组</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># groupmod [选项 参数] 组名</span></span><br><span class="line">groupmod -n demo <span class="built_in">test</span> <span class="comment"># 修改test组名为demo</span></span><br><span class="line">groupmod -g 9999 <span class="built_in">test</span> <span class="comment"># 修改test组ID为9999</span></span><br></pre></td></tr></table></figure></div>
<h5 id="用户信息文件"><a class="markdownIt-Anchor" href="#用户信息文件"></a> 用户信息文件</h5>
<ul>
<li>
<p><strong>/etc/passwd</strong>是用户(user)的配置文件，记录用户的各种信息</p>
</li>
<li>
<p><strong>/ect/shadow</strong>是口令的配置文件</p>
</li>
<li>
<p><strong>/etc/group</strong>是组(group)的配置文件，记录组的各种信息</p>
</li>
</ul>
<h4 id="常用命令"><a class="markdownIt-Anchor" href="#常用命令"></a> 常用命令</h4>
<h5 id="进程命令"><a class="markdownIt-Anchor" href="#进程命令"></a> 进程命令</h5>
<p><strong>init命令</strong>：Linux下的进程初始化工具，用于切换运行级别</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">init 0 <span class="comment"># 停机(不要将initdefault设置为0)</span></span><br><span class="line">init 1 <span class="comment"># 单用户模式，一般用于系统级维护</span></span><br><span class="line">init 2 <span class="comment"># 多用户模式，无法使用NFS(网络文件系统)挂载，没有网络支持</span></span><br><span class="line">init 3 <span class="comment"># 多用户模式，标准的运行级，有网络支持</span></span><br><span class="line">init 4 <span class="comment"># 保留，未使用</span></span><br><span class="line">init 5 <span class="comment"># X11(xwindow)图形化界面模式，多用户，有网络支持，一般用于远程连接时使用Linux图形化界面</span></span><br><span class="line">init 6 <span class="comment"># 重新启动(不要将initdefault设置为6)</span></span><br></pre></td></tr></table></figure></div>
<h5 id="帮助命令"><a class="markdownIt-Anchor" href="#帮助命令"></a> 帮助命令</h5>
<p><strong>man命令</strong>：用于获取帮助手册</p>
<p><strong>help命令</strong>：获取shell内置命令的帮助信息</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">man vim <span class="comment"># 获取vim的帮助手册</span></span><br><span class="line"><span class="built_in">help</span> <span class="built_in">cd</span> <span class="comment"># 获取cd命令的帮助信息</span></span><br><span class="line"><span class="built_in">help</span> <span class="built_in">mv</span> <span class="comment"># 获取mv命令的帮助信息，但会失败，因为mv不是内置命令</span></span><br><span class="line"><span class="built_in">type</span> <span class="built_in">mv</span> <span class="comment"># 查看mv命令的类型(内置命令或外部命令)</span></span><br></pre></td></tr></table></figure></div>
<h5 id="文件目录命令"><a class="markdownIt-Anchor" href="#文件目录命令"></a> 文件目录命令</h5>
<p><strong>pwd命令</strong>：查看当前所在目录的绝对路径</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">pwd</span></span><br></pre></td></tr></table></figure></div>
<p><strong>ls命令</strong>：查看当前所在目录的所有文件和目录</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ls [参数] [目录或文件名]</span></span><br><span class="line"><span class="built_in">ls</span> -a <span class="comment"># 显示当前所有文件和目录，包括不可见的</span></span><br><span class="line"><span class="built_in">ls</span> -l <span class="comment"># 以列表的形式显示信息</span></span><br></pre></td></tr></table></figure></div>
<p><strong>cd命令</strong>：切换到指定目录</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cd [目录路径]</span></span><br><span class="line"><span class="built_in">cd</span> ~  <span class="comment"># 进入默认初始目录</span></span><br><span class="line"><span class="built_in">cd</span> .. <span class="comment"># 返回上一级目录</span></span><br><span class="line"><span class="built_in">cd</span> /opt <span class="comment"># 进入opt目录</span></span><br></pre></td></tr></table></figure></div>
<p><strong>mkdir命令</strong>：创建指定目录，可根据绝对路径或相对路径创建</p>
<p><strong>rmdir命令</strong>：删除指定的空目录</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mkdir [参数] 目录名</span></span><br><span class="line"><span class="built_in">mkdir</span> <span class="built_in">test</span> <span class="comment"># 在当前目录下创建一个test目录</span></span><br><span class="line"><span class="built_in">mkdir</span> -p a/b/c <span class="comment"># 在当前目录下创建a/b/c的嵌套多级目录</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># rmdir [参数] 目录名</span></span><br><span class="line"><span class="built_in">rmdir</span> <span class="built_in">test</span> <span class="comment"># 删除test目录，test目录下不能有其它内容</span></span><br><span class="line"><span class="comment"># 删除有其它内容的目录时需要使用rm -rf命令</span></span><br></pre></td></tr></table></figure></div>
<p><strong>touch命令</strong>：创建空文件，可根据绝对路径或相对路径创建</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># touch 文件名</span></span><br><span class="line"><span class="built_in">touch</span> demo.txt <span class="comment"># 在当前目录下创建demo.txt文件</span></span><br></pre></td></tr></table></figure></div>
<p><strong>cp命令</strong>：拷贝文件到指定目录</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cp [参数] 源目录 指定目录</span></span><br><span class="line"><span class="built_in">cp</span> demo.txt <span class="built_in">test</span> <span class="comment"># 复制demo.txt文件到当前同级的test目录下</span></span><br><span class="line"><span class="built_in">cp</span> -r <span class="built_in">source</span> <span class="built_in">test</span> <span class="comment"># 将source文件夹以及文件夹下所有内容复制到同级的test文件夹下(递归复制)</span></span><br></pre></td></tr></table></figure></div>
<p><strong>rm命令</strong>：删除文件或目录（文件夹）</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># rm [参数] 文件名</span></span><br><span class="line"><span class="built_in">rm</span> demo.txt <span class="comment"># 删除demo.txt文件</span></span><br><span class="line"><span class="built_in">rm</span> -r <span class="built_in">source</span> <span class="comment"># 递归删除整个source目录</span></span><br><span class="line"><span class="built_in">rm</span> -rf <span class="built_in">test</span> <span class="comment"># 无提示地强制删除整个test目录 </span></span><br></pre></td></tr></table></figure></div>
<p><strong>cat命令</strong>：只读地查看文件内容</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat [参数] 文件名</span></span><br><span class="line"><span class="built_in">cat</span> demo.txt <span class="comment"># 查看demo.txt的内容</span></span><br><span class="line"><span class="built_in">cat</span> -n demo.txt <span class="comment"># 查看文件时显示行号</span></span><br></pre></td></tr></table></figure></div>
<p><strong>more命令</strong>：基于vi编辑器的文本过滤器，以全屏方式按页显示文件内容，适合阅读长内容的文本</p>
<table>
<thead>
<tr>
<th style="text-align:center">快捷键</th>
<th style="text-align:center">具体功能</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">空格(space)</td>
<td style="text-align:center">向下翻一页</td>
</tr>
<tr>
<td style="text-align:center">Enter</td>
<td style="text-align:center">向下翻一行</td>
</tr>
<tr>
<td style="text-align:center">q</td>
<td style="text-align:center">退出</td>
</tr>
<tr>
<td style="text-align:center">Ctrl+F</td>
<td style="text-align:center">向下滚动一屏</td>
</tr>
<tr>
<td style="text-align:center">Ctrl+B</td>
<td style="text-align:center">返回上一屏</td>
</tr>
<tr>
<td style="text-align:center">=</td>
<td style="text-align:center">输出当前行行号</td>
</tr>
<tr>
<td style="text-align:center">:f</td>
<td style="text-align:center">输出文件名和行号</td>
</tr>
</tbody>
</table>
<p><strong>less命令</strong>： 来分屏查看文件内容，与<strong>more命令</strong>类似，但功能更加强大。能根据显示需要加载文件内容，而不是一次性加载，对于显示大型文件有较高的效率</p>
<table>
<thead>
<tr>
<th style="text-align:center">快捷键</th>
<th style="text-align:center">具体功能</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">空格(space)</td>
<td style="text-align:center">向下翻一页</td>
</tr>
<tr>
<td style="text-align:center">[pagedown]</td>
<td style="text-align:center">向下翻一页</td>
</tr>
<tr>
<td style="text-align:center">[pageup]</td>
<td style="text-align:center">向上翻一页</td>
</tr>
<tr>
<td style="text-align:center">/字串</td>
<td style="text-align:center">向下搜寻字串 n向下 N向上</td>
</tr>
<tr>
<td style="text-align:center">?字串</td>
<td style="text-align:center">向上搜寻字串 n向上 N向下</td>
</tr>
<tr>
<td style="text-align:center">q</td>
<td style="text-align:center">退出</td>
</tr>
</tbody>
</table>
<p><strong>&gt;指令</strong>：输出重定向，会覆盖文件的内容</p>
<p><strong>&gt;&gt;指令</strong>：追加内容到文件尾部，不会覆盖文件的内容</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span> &gt; info.txt <span class="comment"># 将当前目录的信息写入info.txt</span></span><br><span class="line"><span class="built_in">ls</span> -l &gt; info.txt <span class="comment"># 覆盖info.txt的内容为列表形式的目录信息</span></span><br><span class="line"><span class="built_in">ls</span> &gt;&gt; info.txt <span class="comment"># 将目录信息追加到文件末尾</span></span><br></pre></td></tr></table></figure></div>
<p><strong>echo命令</strong>：输出内容到控制台，可与**&gt;指令或&gt;&gt;指令**组合使用</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># echo [参数] [字符串]</span></span><br><span class="line"><span class="built_in">echo</span> hello world <span class="comment"># 输出hello world到控制台</span></span><br><span class="line"><span class="built_in">echo</span> happy &gt;&gt; info.txt <span class="comment"># 此时控制台不会输出内容，内容追加到info.txt中，具体内容可以自定义</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$PATH</span> <span class="comment"># 获取PATH变量，PATH是原本就存在于Linux下的环境变量</span></span><br></pre></td></tr></table></figure></div>
<p><strong>head命令</strong>：查看文件前n行内容，n默认为10</p>
<p><strong>tail命令</strong>：查看文件后n行内容，n默认为10</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># head [参数] [行数] 文件名</span></span><br><span class="line"><span class="built_in">head</span> info.txt <span class="comment"># 查看info.txt的前10行内容</span></span><br><span class="line"><span class="built_in">head</span> -n 3 info.txt <span class="comment"># 查看info.txt的前3行内容</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># tail [参数] [行数] 文件名</span></span><br><span class="line"><span class="built_in">tail</span> info.txt <span class="comment"># 查看info.txt的后10行内容</span></span><br><span class="line"><span class="built_in">tail</span> -n 3 info.txt <span class="comment"># 查看info.txt的后3行内容</span></span><br></pre></td></tr></table></figure></div>
<p><strong>ln命令</strong>：给源文件创建一个<strong>软链接</strong>。软链接也称符号链接，类似于快捷方式，主要存放了链接其他文件的路径。可以通过ln命令<strong>软链接的方式</strong>设置<strong>全局</strong>环境变量（这是一种方式）</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ln -s 源文件路径 目标路径</span></span><br><span class="line"><span class="built_in">ln</span> -s info.txt <span class="built_in">test</span>/ <span class="comment"># 将info.txt软链接到同级的test目录下</span></span><br></pre></td></tr></table></figure></div>
<h5 id="时间日期命令"><a class="markdownIt-Anchor" href="#时间日期命令"></a> 时间日期命令</h5>
<p><strong>date命令</strong>：显示或设定系统的日期和时间</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># date [参数] [格式]</span></span><br><span class="line"><span class="built_in">date</span> <span class="comment"># 显示当前系统时间</span></span><br><span class="line"><span class="built_in">date</span> -u <span class="comment"># 显示UTC时间</span></span><br><span class="line"><span class="built_in">date</span> -d <span class="string">&quot;+1 day&quot;</span> +%Y%m%d <span class="comment"># 显示后一天的日期</span></span><br><span class="line"><span class="built_in">date</span> -d <span class="string">&quot;-1 month&quot;</span> +%Y%m%d <span class="comment"># 显示上一月的日期</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">date</span> -s <span class="string">&quot;2022-11-18 06:30:00&quot;</span> <span class="comment"># 设置系统时间为2022年11月18日 6时30分0秒，重启系统后会失效</span></span><br></pre></td></tr></table></figure></div>
<p><strong>cal命令</strong>：显示月历，需要手动安装命令</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">apt install ncal <span class="comment"># 安装命令</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># cal [参数] [月份] [年份]</span></span><br><span class="line">cal <span class="comment"># 查看本月月历</span></span><br><span class="line">cal 12 2022 <span class="comment"># 查看2022年12月月历</span></span><br></pre></td></tr></table></figure></div>
<h5 id="搜索查找命令"><a class="markdownIt-Anchor" href="#搜索查找命令"></a> 搜索查找命令</h5>
<p><strong>find命令</strong>：从指定目录向下递归地遍历各个子目录，将满足条件的文件或目录显示在终端</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># find [搜索范围] [参数] ...</span></span><br><span class="line">find . -name <span class="string">&quot;*.txt&quot;</span> <span class="comment"># 查找当前目录及子目录下文件名后缀为txt的文件</span></span><br><span class="line">find . -<span class="built_in">type</span> f <span class="comment"># 查找当前目录及子目录下普通类型的文件</span></span><br><span class="line">find . -user root <span class="comment"># 查找当前目录及子目录下属于root用户的文件</span></span><br><span class="line">find . -size 0 <span class="comment"># 查找当前目录及子目录下长度为0的文件</span></span><br></pre></td></tr></table></figure></div>
<p><strong>locate命令</strong>：可以快速定位文件路径，需要手动安装命令。利用事先建立的包含系统中所有文件名称路径的locate数据库实现快速定位，无需遍历整个文件夹，查询速度较快。</p>
<p>locate数据库不是实时更新的(默认情况下每天自动更新一次)，无法查询当天新建的文件，但可以手动更新locate数据库</p>
<p><font color='red'>注意：测试命令需要新建文件时，记得随时手动更新locate数据库</font></p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">apt install plocate <span class="comment"># 安装命令</span></span><br><span class="line">updatedb <span class="comment"># 手动更新locate数据库</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># locate [参数] [文件名]</span></span><br><span class="line">locate passwd <span class="comment"># 查找passwd文件</span></span><br><span class="line">locate /etc/sh <span class="comment"># 查找etc目录下所有以sh开头的文件</span></span><br><span class="line">locate -n 2 passwd <span class="comment"># 最多显示2个输出</span></span><br><span class="line">locate -i ~/r <span class="comment"># 忽略大小写查找当前用户目录下r开头的文件</span></span><br></pre></td></tr></table></figure></div>
<p><strong>grep命令</strong>：在指定文件里查找指定的内容</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># grep [内容] [文件名]</span></span><br><span class="line">grep root info.txt <span class="comment"># 在info.txt里查找root字符所在的行并输出到控制台</span></span><br><span class="line">grep -n root info.txt <span class="comment"># 显示在完整文本中对应匹配的行号</span></span><br><span class="line">grep -i root info.txt <span class="comment"># 忽略大小写进行查找</span></span><br></pre></td></tr></table></figure></div>
<h5 id="压缩与解压命令"><a class="markdownIt-Anchor" href="#压缩与解压命令"></a> 压缩与解压命令</h5>
<p><strong>gzip命令</strong>：压缩文件，格式只能为*.gz，它的设计目标是为了处理单个文件</p>
<p><strong>gunzip命令</strong>：解压文件，只能解压*.gz后缀的文件</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># gzip 文件</span></span><br><span class="line">gzip info.txt <span class="comment"># 压缩info.txt文件为info.txt.gz文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># gunzip 文件</span></span><br><span class="line">gunzip info.txt.gz <span class="comment"># 解压info.txt.gz文件为info.txt文件</span></span><br></pre></td></tr></table></figure></div>
<p><strong>zip命令</strong>：压缩文件和目录，适用于多个文件和目录</p>
<p><strong>unzip命令</strong>：解压文件和目录</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># zip [参数] 文件名.zip 要压缩的文件名</span></span><br><span class="line">zip info.zip info.txt <span class="comment"># 将info.txt压缩到info.zip中</span></span><br><span class="line">zip -r test.zip <span class="built_in">test</span>/ <span class="comment"># 将test目录下所有文件和子目录递归压缩，用于处理多文件多目录的压缩</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># unzip [参数] 文件名.zip</span></span><br><span class="line">unzip test.zip <span class="comment"># 直接解压test.zip</span></span><br><span class="line">unzip -d beta/ test.zip <span class="comment"># 指定解压test.zip到同级的beta目录下 </span></span><br></pre></td></tr></table></figure></div>
<p><strong>tar命令</strong>：打包目录或解包tar文件，并且能附加压缩和解压功能</p>
<p>注意：打包和压缩包不是一个概念，解包和解压也不是</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># tar 必填参数[选填参数] 打包文件名 源文件名</span></span><br><span class="line">tar -cvf info.tar info.txt <span class="comment"># 打包info.txt到info.tar中</span></span><br><span class="line">tar -zcvf info.tar.gz info.txt <span class="comment"># 打包的同时使用gzip进行压缩</span></span><br><span class="line"></span><br><span class="line">tar -xvf info.tar <span class="comment"># 解包info.tar</span></span><br><span class="line">tar -zxvf info.tar.gz <span class="comment"># 解压并解包info.tar.gz</span></span><br><span class="line"></span><br><span class="line">tar -tvf info.tar <span class="comment"># 不解压，仅查看包中的文件信息</span></span><br><span class="line"><span class="comment"># 指定解包到哪个目录</span></span><br><span class="line">tar -xvf info.tar -C /tmp <span class="comment"># 解包到tmp目录下</span></span><br></pre></td></tr></table></figure></div>
<h5 id="路由表命令"><a class="markdownIt-Anchor" href="#路由表命令"></a> 路由表命令</h5>
<p><strong>route命令</strong>： 显示和操作IP路由表</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># route [参数]</span></span><br><span class="line">route <span class="comment"># 查看路由表</span></span><br><span class="line">route -n <span class="comment"># 不解析名字</span></span><br></pre></td></tr></table></figure></div>
<h5 id="文本操作命令"><a class="markdownIt-Anchor" href="#文本操作命令"></a> 文本操作命令</h5>
<p><strong>sed命令</strong>：能够在不打开文件的情况下处理、编辑文本文件， 主要用来自动编辑一个或多个文件、简化对文件的反复操作、编写转换程序等</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sed [参数] 文件名</span></span><br><span class="line">sed -e <span class="string">&#x27;s/-/*/g&#x27;</span> info.txt &gt;&gt; info.txt <span class="comment"># 将info.txt中所有的字符-替换为*，并应用修改到info.txt中</span></span><br></pre></td></tr></table></figure></div>
<h4 id="组管理与权限管理"><a class="markdownIt-Anchor" href="#组管理与权限管理"></a> 组管理与权限管理</h4>
<h5 id="组管理"><a class="markdownIt-Anchor" href="#组管理"></a> 组管理</h5>
<p>在linux中的每个用户必须属于一个组，不能独立于组外，一般在创建用户时就默认生成了一个同名的用户组</p>
<p>在linux中每个文件有所有者、所在组、其它组的概念</p>
<p>文件的所有者就是创建该文件的用户</p>
<p>除文件的所有者和所在组的用户外，系统的其它用户都是文件的其它组</p>
<p>一个用户可以属于多个组，用户组又分为主组(主要组)和附加组(次要组)，其中主组不能被删除，除非用户指定了新的主组，而附加组可以随意修改。</p>
<p>提示：<strong>查看文件权限、所有者等信息</strong>可以使用<strong>ls -l 指定的文件名</strong>实现；<strong>查看用户相关信息</strong>可以使用<strong>id 指定的用户名</strong>实现</p>
<h5 id="基本命令-2"><a class="markdownIt-Anchor" href="#基本命令-2"></a> 基本命令</h5>
<p><strong>chown命令</strong>：修改文件所有者和所有组，若缺省组名，则不会改变所有组</p>
<p><strong>chgrp命令</strong>：修改文件所在组</p>
<p><strong>usermod命令</strong>：改变用户所在主组(<code>-g</code>参数)或追加附加组(<code>-aG</code>参数，若不加a参数则会覆盖原来的附加组)</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># chown 用户名:组名 文件名</span></span><br><span class="line"><span class="built_in">chown</span> common info.txt <span class="comment"># info.txt所有者改为common用户</span></span><br><span class="line"><span class="built_in">ls</span> -l info.txt <span class="comment"># 查看info.txt的信息</span></span><br><span class="line"><span class="comment"># chgrp 组名 文件名</span></span><br><span class="line"><span class="built_in">chgrp</span> common info.txt <span class="comment"># info.txt所在组改为common组</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># usermod -g 组名 用户名</span></span><br><span class="line">usermod -g ok common <span class="comment"># common用户所在主组改为ok组</span></span><br><span class="line"><span class="comment"># usermod -aG 组名 用户名</span></span><br><span class="line">usermod -aG two,tree,four common <span class="comment"># common用户追加多个附加组</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">id</span> common <span class="comment"># 查看common用户的信息</span></span><br></pre></td></tr></table></figure></div>
<h5 id="权限管理"><a class="markdownIt-Anchor" href="#权限管理"></a> 权限管理</h5>
<p>文件权限内容，通过ls -l 指定文件名查看</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 一个示例</span></span><br><span class="line">-rw-r--r-- 1 root root 320 11月 18 17:49 info.txt</span><br></pre></td></tr></table></figure></div>
<p><strong>-rw-r–r–解读</strong>(下标从0开始)</p>
<ol>
<li>第0位确定文件类型(d, - , l , c , b)</li>
<li>第1-3位确定所有者（该文件的所有者）拥有该文件的权限</li>
<li>第4-6位确定所属组（同用户组的）拥有该文件的权限</li>
<li>第7-9位确定其他用户拥有该文件的权限</li>
</ol>
<p><strong>rwx权限说明</strong></p>
<ol>
<li>
<p>r表示可读read</p>
</li>
<li>
<p>w表示可写write</p>
</li>
<li>
<p>x表示可执行execute</p>
</li>
<li>
<p>对于文件来说</p>
<ul>
<li>
<p>r表示可以读取查看文件</p>
</li>
<li>
<p>w表示可以修改，但不能删除文件，删除一个文件必须拥有父文件夹的rwx权限(存在一个特例，在提前知道目录里的具体内容的情况下，手动指定对应的完整文件名进行删除)</p>
</li>
<li>
<p>x表示文件可执行</p>
</li>
</ul>
</li>
<li>
<p>对于目录来说</p>
<ul>
<li>r表示可以读取，查看目录内容</li>
<li>w表示可修改，<strong>目录内</strong>创建+删除+重命名目录</li>
<li>x表示可以进入该目录</li>
</ul>
</li>
</ol>
<h5 id="基本命令-3"><a class="markdownIt-Anchor" href="#基本命令-3"></a> 基本命令</h5>
<p><strong>chmod命令</strong>：修改文件或目录的权限</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 参数</span></span><br><span class="line"><span class="comment"># u:所有者 g:使用组 o:其他人 a:所有人</span></span><br><span class="line"><span class="comment"># +:添加权限 -:删除权限 =:设置权限</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">chmod</span> a=--- info.txt <span class="comment"># 取消所有人对info.txt的rwx权限</span></span><br><span class="line"><span class="built_in">chmod</span> u=rwx,g=rw-,o=r info.txt</span><br><span class="line"><span class="built_in">chmod</span> g+x,o-r info.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过rwx权限对应的数字设置权限</span></span><br><span class="line"><span class="comment"># r=4 w=2 x=1  rwx=4+2+1=7</span></span><br><span class="line"><span class="built_in">chmod</span> 611 info.txt</span><br></pre></td></tr></table></figure></div>
<h4 id="进程管理"><a class="markdownIt-Anchor" href="#进程管理"></a> 进程管理</h4>
<p>在linux中，每个执行的程序（代码）都称为一个进程。每一个进程都分配一个 ID 号</p>
<p>每一个进程，都会对应一个父进程，而这个父进程可以复制多个子进程</p>
<p>每个进程都可能以两种方式存在的：前台与后台</p>
<p>一般系统的服务都是以后台进程的方式存在，而且都会常驻在系统中，直到关机</p>
<h5 id="fg和bg命令进程前后台调度命令"><a class="markdownIt-Anchor" href="#fg和bg命令进程前后台调度命令"></a> fg和bg命令：进程前后台调度命令</h5>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在前台结束一个进程</span></span><br><span class="line">Control+c</span><br><span class="line"><span class="comment"># 在前台暂停一个进程</span></span><br><span class="line">Control+z</span><br><span class="line"><span class="comment"># 查看后台执行进程的进程号</span></span><br><span class="line"><span class="built_in">jobs</span></span><br><span class="line"><span class="comment"># 运行命令时，在命令末尾加上&amp;可让命令在后台执行</span></span><br><span class="line">&amp;</span><br><span class="line"><span class="comment"># 将命令进程号码为N的命令进程放到前台执行</span></span><br><span class="line"><span class="built_in">fg</span> N</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">%N</span><br><span class="line"><span class="comment"># 将命令进程号码为N的命令进程放到后台执行</span></span><br><span class="line"><span class="built_in">bg</span> N</span><br></pre></td></tr></table></figure></div>
<h5 id="ps命令查看系统进程"><a class="markdownIt-Anchor" href="#ps命令查看系统进程"></a> ps命令查看系统进程</h5>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ps [参数]</span></span><br><span class="line">ps -a <span class="comment"># 显示当前终端的所有进程信息</span></span><br><span class="line">ps -u <span class="comment"># 以用户的格式显示进程信息</span></span><br><span class="line">ps -x <span class="comment"># 显示后台进程运行的参数</span></span><br></pre></td></tr></table></figure></div>
<h5 id="kill命令终止进程"><a class="markdownIt-Anchor" href="#kill命令终止进程"></a> kill命令终止进程</h5>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kill [参数] 进程号PID</span></span><br><span class="line"><span class="comment"># 参数(基本都使用9)</span></span><br><span class="line"><span class="comment"># 1:重新加载 9:强制停止 15:正常停止</span></span><br><span class="line"><span class="comment"># kill命令需要与ps命令配合使用</span></span><br><span class="line"><span class="built_in">kill</span> -9 9899 <span class="comment"># 9899是通过ps获取的PID号，强制停止9899的进程</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># killall命令能终止指定名称的所有进程，适合系统负载过大时使用</span></span><br><span class="line"><span class="comment"># killall -9 进程名称</span></span><br></pre></td></tr></table></figure></div>
<h5 id="pstree命令查看进程信息"><a class="markdownIt-Anchor" href="#pstree命令查看进程信息"></a> pstree命令查看进程信息</h5>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># pstree [参数]</span></span><br><span class="line"><span class="comment"># pstree相对ps可以更直观地查看进程信息</span></span><br><span class="line">pstree -p <span class="comment"># 额外显示进程的PID</span></span><br><span class="line">pstree -u <span class="comment"># 额外显示进程的所属用户</span></span><br></pre></td></tr></table></figure></div>
<h5 id="service命令操作进程后台服务"><a class="markdownIt-Anchor" href="#service命令操作进程后台服务"></a> service命令操作进程（后台服务）</h5>
<p>服务(service) 本质就是进程，但是是<strong>运行在后台的一个特殊进程</strong>。这个特殊进程通常都会监听某个端口等待其它程序的请求，比如(mysql , sshd 防火墙等)。因此这个进程又称为<strong>守护进程</strong>。</p>
<p><strong>telnet命令</strong>可以用于远程登录主机，也可以测试某个端口</p>
<p><strong>查看服务</strong></p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">chkconfig --list | grep 8989 <span class="comment"># 该命令已被弃用</span></span><br></pre></td></tr></table></figure></div>
<p><strong>top命令持续监听运行状态</strong></p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># top [参数]</span></span><br><span class="line"><span class="comment"># 参数</span></span><br><span class="line"><span class="comment"># -d 秒数:指定每隔几秒更新，默认3秒</span></span><br><span class="line"><span class="comment"># -i:不显示任何闲置或僵死进程</span></span><br><span class="line"><span class="comment"># -p 进程PID:监控指定的PID的进程状态</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># top命令会进入一个交互页面，可以通过以下操作进行交互</span></span><br><span class="line"><span class="comment"># P:以CPU使用率排序，默认</span></span><br><span class="line"><span class="comment"># M:以内存的使用率排序</span></span><br><span class="line"><span class="comment"># N:以PID排序</span></span><br><span class="line"><span class="comment"># q:退出top交互页面</span></span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux FireWall</title>
    <url>/2024/02/27/linux-firewall/</url>
    <content><![CDATA[<p>记录关于 Linux 防火墙的一些简单使用和说明<span id="more"></span></p>
<p>Linux  防火墙可能在很多时候对初学者部署网络服务造成了一定的“阻碍”。由于不清楚防火墙的重要性，许多用户选择直接关闭防火墙。对于一些大型云服务商来说，他们在防火墙之外还提供了安全组，能类似地起到防火墙的作用，使得 Linux 自带的防火墙似乎没有使用的必要性。但是对于 VPS 服务来说，他们是不提供安全组服务的，这意味着用户需要自己为服务器的安全负责，这时就很有必要学习 Linux 自带的防火墙技术——iptables。</p>
<h2 id="linux-防火墙"><a class="markdownIt-Anchor" href="#linux-防火墙"></a> Linux 防火墙</h2>
<p>以下内容大部分参考自<a class="link"   href="https://www.bilibili.com/video/BV1Jz4y1u7Lz/" >iptables核心运作原理和数据包过滤方法 | 技术蛋老师 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>。</p>
<h3 id="iptables-的由来"><a class="markdownIt-Anchor" href="#iptables-的由来"></a> iptables 的由来</h3>
<p>以常见的 linux 服务器为例，可以划分为<strong>硬件、内核空间、用户空间</strong>三部分。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/02/27/linux-firewall/f825b099b593ad097431dba7b71d966e5cc3a9d1.png@690w_!web-note.webp"
                      class="" title="img"
                >
<p>流量的流动是先从网卡，再到 linux 内核，最后抵达到网络应用。</p>
<p><strong>过滤</strong>就是先让流量从网卡进来，然后在 linux 内核里进行过滤处理，最后进入网络应用。这样网络应用前面就有一道防火墙，防火墙就位于 linux 内核的实现中。</p>
<p>在 linux 内核中存在一个叫 <strong>netfilter</strong> 的框架，一旦有流量进来，就会触发 netfilter的机制对流量进行过滤。</p>
<p>为了方便操作 netfilter 框架， iptables 工具应运而生，iptables 相当于 netfilter 的接口。使用 iptables 命令就可以执行 netfilter 的复杂流量过滤逻辑。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/02/27/linux-firewall/bdc4747c99a88429a6b10cc47f5a2d2d34985993.png@690w_!web-note.webp"
                      class="" title="img"
                >
<p>不过 iptables 对于初学者来说还是具有一定的学习难度。</p>
<h3 id="tables-表格"><a class="markdownIt-Anchor" href="#tables-表格"></a> tables 表格</h3>
<p>iptables 具有多个 table (表格)，即 filter、nat、mangle、raw、security，常见的是前 4 个表格，最常用的则是 <strong>filter</strong> 和 <strong>nat</strong></p>
<p>这两个表中，filter 负责过滤，nat 负责网络地址转换。nat 表可以支持负载均衡等强大功能。不过，绝大多数用户可能只需要关心 filter 表。</p>
<h3 id="chains-链路"><a class="markdownIt-Anchor" href="#chains-链路"></a> chains 链路</h3>
<p>数据包抵达网络应用程序，最简单的链路就是一进一出。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/02/27/linux-firewall/dd704f8f01fdde09c64efda5937a02110f980c8c.png@690w_!web-note.webp"
                      class="" title="img"
                >
<p>但实际上 linux 系统本身也可以作为路由器存在，有些数据包会经过这台 linux 主机，并且被转发到其它设备，这样就会多一条转发链路，加上前面的一进一出链路，就可能发生很多情况。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/02/27/linux-firewall/346ad17db7da14cb8b89af5117b0d9438cd2366c.png@690w_!web-note.webp"
                      class="" title="img"
                >
<p>不过处于内核的 netfilter 已经对链路的各个部分进行了管理。</p>
<p>当数据包一抵达到系统时，就由 <strong>PREROUTING</strong> 链负责。</p>
<p>如果数据包的目标是本机，就由 <strong>INPUT</strong> 链负责。</p>
<p>数据包如果从本机出去，就由 <strong>OUTPUT</strong> 链负责。</p>
<p>数据包如果不是要到本机，只是经过本机路由，就由 <strong>FORWARD</strong> 链负责。</p>
<p>数据包如果要离开本机，或者路由后，还有个 <strong>POSTROUTING</strong> 链负责。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/02/27/linux-firewall/e71c211f7afef61efca10acde5a35cb042b5ecc0.png@690w_!web-note.webp"
                      class="" title="img"
                >
<p>单从过滤数据包的使用需求上，用户不需要了解所有的链。如果使用 filter 表，只需要管理 INPUT、OUTPUT 和 FORWARD 链。</p>
<p>filter 链路简单来说就是<strong>数据包的目标是本机可以过滤、数据包的转发可以过滤、数据包的目标是主机以外的其它地址可以过滤。</strong></p>
<p><strong>具体实现过滤就是在对应的链里加入规则。</strong></p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/02/27/linux-firewall/0f693be352f258e9c231179c3463db57c03cbdc0.png@690w_!web-note.webp"
                      class="" title="img"
                >
<p>iptables 含有不同的表，表里面有着不同的链，链里面可以制定不同的规则。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/02/27/linux-firewall/1b74a15809579860fd87b760eec1f502ce4cda5f.png@690w_!web-note.webp"
                      class="" title="img"
                >
<h3 id="命令使用"><a class="markdownIt-Anchor" href="#命令使用"></a> 命令使用</h3>
<p>使用 iptables 命令通常需要 root 权限，测试时为了方便可以切换到 root 操作。</p>
<h4 id="查看表内容"><a class="markdownIt-Anchor" href="#查看表内容"></a> 查看表内容</h4>
<p><strong>iptables --table filter --list</strong> 这个命令会列出 filter 表里面的内容，不使用 --table 指定任何表，则默认选用 filter 表。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/02/27/linux-firewall/0056ade209dfeb03992da54355f3f9e18263b55f.png@690w_!web-note.webp"
                      class="" title="img"
                >
<p>可以看到这里的三条链，这里初始没有设置任何规则。使用另一台处于同一局域网内的主机可以 ping 通。</p>
<p>接下来，使用 iptables 阻止另一台主机直接访问。</p>
<h4 id="设置规则"><a class="markdownIt-Anchor" href="#设置规则"></a> 设置规则</h4>
<p>先指定表格，再指定链，然后设置具体的规则</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">iptables \</span><br><span class="line">--table filter \</span><br><span class="line">--append INPUT \</span><br><span class="line">--<span class="built_in">source</span> 192.168.3.20 \</span><br><span class="line">--jump REJECT</span><br></pre></td></tr></table></figure></div>
<p>上面的命令在 filter 表的 INPUT 链中添加了规则：所有来自 192.168.3.20 (同一局域网的另一台主机 IP) 源地址的数据包，会被 INPUT 链拒绝处理。</p>
<p>重新查看 filter 表的信息如下</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/02/27/linux-firewall/159d1000070c56b00209091c0c9d9b006cbc7d54.png@690w_!web-note.webp"
                      class="" title="img"
                >
<p>这里还需要注意 prot (protocol 协议)，因为没有指定具体协议，所以默认为 all。</p>
<p>此时另一台主机应该无法顺利 ping 通，当本机去 ping 该主机也会收不到来自该主机的响应。</p>
<p>除了使用 <strong>REJECT</strong> 拒绝处理，还可以使用 <strong>DROP</strong> 进行丢弃。</p>
<p>可以在上面命令的基础上将 REJECT 替换为 DROP 执行。不过需要注意此时 INPUT 链中会先后包含 REJECT 和 DROP 两条规则，并且会根据先后顺序依次执行，但是 REJECT 规则会直接拒绝掉，导致 DORP 规则无法执行。需要先删除 REJECT 规则才能让 DROP 顺利执行。</p>
<p>查看表内容时可以加上 <strong>–line-numbers 参数</strong>方便查看规则</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/02/27/linux-firewall/7df3b0f7b10e163649bb89a77c6e3de0470202f7.png@690w_!web-note.webp"
                      class="" title="img"
                >
<h4 id="删除规则"><a class="markdownIt-Anchor" href="#删除规则"></a> 删除规则</h4>
<p><strong>iptables --table filter --delete INPUT 1</strong></p>
<p>上面的命令会删除 INPUT 链的第一条规则，即 REJECT 规则。删除之后，原来的 DROP 会成为新的第一条规则</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/02/27/linux-firewall/e2fa90c7f20c58be5196acdc1f3d1edc34a94976.png@690w_!web-note.webp"
                      class="" title="img"
                >
<p>因此，使用序号连续删除规则的时候需要注意。</p>
<p>重新 ping 会出现另外的失败提示。</p>
<h4 id="批量屏蔽-ip-地址"><a class="markdownIt-Anchor" href="#批量屏蔽-ip-地址"></a> 批量屏蔽 IP 地址</h4>
<p>可以在 <a class="link"   href="https://ipdeny.com" >https://ipdeny.com <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 上找到对应的地址段，使用 wget 下载对应的文件，查看文件内容，有大量的 IP 段。这里使用命令手动添加和普通的脚本添加都不是最推荐的方式。</p>
<p>使用 ipset 指令就可以将大量的 IP 段单独汇集为一个集合，生成唯一 的哈希值。</p>
<p>当为 iptables 添加 IP 地址时，只需要使用该哈希值来代表背后的 IP 地址段集合。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">ipset create asan <span class="built_in">hash</span>:net</span><br></pre></td></tr></table></figure></div>
<p>上面的命令会创建一个名为 asan 的集合，使用 net 表示网络号，而非主机号。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">ipset list asan</span><br></pre></td></tr></table></figure></div>
<p>上面的命令会列出 asan 集合的信息，此时集合里面还没有添加 IP 地址段。</p>
<p>接下来是将 IP 地址段添加到集合中，使用 iptables 和 ipset 编写脚本。</p>
<p>首先，创建一个名为 <a class="link"   href="http://block-india.sh" >block-india.sh <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 的文件，然后在脚本里填入以下内容</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">ipset create asan hash:net -exist # -exist 避免重复创建导致失败</span><br><span class="line">ipset flush asan # 清除旧地址</span><br><span class="line">[ -f &quot;in-aggregated.zone&quot; ] &amp;&amp; rm in-aggregated.zone # 删除旧文件</span><br><span class="line"></span><br><span class="line">wget .... # 下载 url 对应的文件</span><br><span class="line"></span><br><span class="line">if [ $? -eq 0 ] # 判断是否下载成功</span><br><span class="line">then</span><br><span class="line">	echo &quot;********** Downloaded **************&quot;</span><br><span class="line">	for address in `cat in-aggregatd.zone`</span><br><span class="line">	do</span><br><span class="line">		ipset add asan $address # 循环添加到 asan 集合中</span><br><span class="line">	done</span><br><span class="line">else</span><br><span class="line">	echo &quot;********** Failed to download **************&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">iptables \</span><br><span class="line">--table filter \</span><br><span class="line">--append INPUT \</span><br><span class="line">--match set --match-set asan src \</span><br><span class="line">--jump DROP</span><br></pre></td></tr></table></figure></div>
<p>脚本编写完成，赋予文件可执行权限。</p>
<p>在执行之前先 ping 一下集合中的一个 IP 确认没有问题。</p>
<p>执行完脚本后，可以执行 <strong>ipset list asan | less</strong> 或结合 <strong>grep</strong> 查看是否添加成功。</p>
<p>重新 ping 之前测试用的 IP 发现 ping 不通，表示设置成功。</p>
<h4 id="持久化规则"><a class="markdownIt-Anchor" href="#持久化规则"></a> 持久化规则</h4>
<p>重启服务器后一般会自动清空 iptables 和 ipset 的设置。可以使用以下命令</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">ipset save &gt; /etc/rules.ipset</span><br><span class="line">iptables-save &gt; /etc/rules.iptables</span><br></pre></td></tr></table></figure></div>
<p>对于 ipset 可以使用 <strong>ipset save &gt; /etc/rules.ipset</strong> 将规则保存到 rules.ipset 文件。</p>
<p>对于 iptables 可以使用 <strong>iptables-save &gt; /etc/rules.iptables</strong> 将规则保存到 rules.iptables 文件。</p>
<p>重启服务器，使用以下命令分别恢复设置</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">ipset restore &lt; /etc/rules.ipset</span><br><span class="line">iptables-restore &lt; /etc/rules.iptables</span><br></pre></td></tr></table></figure></div>
<p>如果在恢复设置之前还添加了新的设置，不想在恢复时被覆盖掉，可以<strong>在 iptables-restore 后面加上 --noflush 或者 -n，在 ipset restore 后加上 -exist。</strong></p>
<blockquote>
<p>其它永久保存规则和集合的方法：deb 系提供了 iptables-persistent 包，rehl 系提供了iptables-services 包。</p>
</blockquote>
<p>iptables 在 Linux 服务器发展中有着很重要的地位。到了现代，即使已经出现了 nftables (iptables 的现代化替代)，还是有大量的服务器依旧使用 iptables 管理防火墙。</p>
<p>以下是一些补充资料的整理说明，简单地介绍为了简化 Linux 防火墙管理的一些工具。这些工具基本都是基于 iptables/nftables 实现的，本质上是对底层的 iptables/nftables 的抽象化实现，使得非专业用户也能很好地管理防火墙，满足日常需求。</p>
<h2 id="防火墙简化管理"><a class="markdownIt-Anchor" href="#防火墙简化管理"></a> 防火墙简化管理</h2>
<p><code>ufw</code>、<code>firewalld</code>、<code>iptables</code>和<code>nftables</code>都是Linux防火墙工具，它们可以独立使用，也有一些底层联系。</p>
<ul>
<li><strong>ufw</strong>：全称 Uncomplicated Firewall，是 Ubuntu 提供的一个 iptables 的接口，因为原生的 iptables 配置麻烦，学习成本较高。ufw 支持 IPv4 和 IPv6，最新版的 UFW 默认启用了 IPv6 配置。</li>
<li><strong>firewalld</strong>：Centos7 及以上的发行版自带了 firewalld 防火墙，firewalld 带有 iptables 防火墙。其原因是 iptables 的防火墙策略是交由内核层面的 netfilter 网络过滤器来处理的，而 firewalld 则是交由内核层面的 nftables 包过滤框架来处理。相较于 iptables 防火墙而言，firewalld 支持动态更新技术并加入了区域（zone）的概念。</li>
<li><strong>iptables</strong>：iptables 是最底层、最古老的防火墙系统，所有系统都会存在此防火墙，但一般而言使用其它上层管理工具的时候，只需保证该防火墙处于完全开放状态即可。</li>
<li><strong>nftables</strong>：nftables 是用于替换 iptables 的工具。</li>
</ul>
<blockquote>
<p>一些历史发展：iptables 是最早的防火墙工具，后来出现了 ufw 和 firewalld，这两个工具都是对 iptables 进行了封装，使得管理员在配置防火墙时可以通过执行相对简单，更容易理解的命令配置防火墙，而不是通过执行复杂难懂的 iptables 命令。最后，nftables 出现，作为 iptables 的替代品。</p>
</blockquote>
<h3 id="iptables-迁移到-nftables"><a class="markdownIt-Anchor" href="#iptables-迁移到-nftables"></a> iptables 迁移到 nftables</h3>
<p>可以按照以下步骤从 iptables 过渡到 nftables</p>
<ol>
<li>
<p><strong>停用 iptables</strong>：首先，需要停用 iptables 相关服务。</p>
<p>可以使用以下命令来停用 iptables、ip6tables</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl stop iptables</span><br><span class="line">sudo systemctl <span class="built_in">disable</span> iptables</span><br><span class="line">sudo systemctl stop ip6tables</span><br><span class="line">sudo systemctl <span class="built_in">disable</span> ip6tables</span><br></pre></td></tr></table></figure></div>
<p>这些命令会停止 iptables 服务，并禁止它在系统启动时自动启动。</p>
</li>
<li>
<p><strong>设置 iptables</strong>：然后，选择将其配置为允许所有流量，这样它就不会干扰 nftables 的操作。</p>
<p>要让 iptables 允许所有流量，可以使用以下命令</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo iptables -P INPUT ACCEPT</span><br><span class="line">sudo iptables -P FORWARD ACCEPT</span><br><span class="line">sudo iptables -P OUTPUT ACCEPT</span><br><span class="line">sudo iptables -F</span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>这一步看起来似乎是多余的，但这实际上是一个谨慎的做法，旨在确保在迁移到 <code>nftables</code> 的过程中网络流量不会受到意外的中断或干扰。</p>
</blockquote>
</li>
<li>
<p><strong>安装并启用 nftables</strong>：最后，安装并启用 nftables。</p>
<p>可以使用以下命令来安装 nftables</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install nftables</span><br></pre></td></tr></table></figure></div>
<p>使用以下命令来启用 nftables 服务</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> nftables</span><br><span class="line">sudo systemctl start nftables</span><br></pre></td></tr></table></figure></div>
<p>这些命令会启动nftables服务，并设置它在系统启动时自动启动。</p>
</li>
<li>
<p><strong>验证 nftables 规则</strong></p>
<p>查看当前的规则集来验证 <code>nftables</code> 的配置是否按预期工作。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo nft list ruleset</span><br></pre></td></tr></table></figure></div>
</li>
<li>
<p><strong>规则集转换</strong></p>
<p>redhat 官方推出以下参考的资料，用于将 iptabls 的规则集转换为 nftables 的规则集。</p>
<p><a class="link"   href="https://access.redhat.com/documentation/zh-cn/red_hat_enterprise_linux/8/html/configuring_and_managing_networking/getting-started-with-nftables_configuring-and-managing-networking" >配置和管理网络——nftables 入门 | Red Hat <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://access.redhat.com/documentation/zh-cn/red_hat_enterprise_linux/8/html/securing_networks/getting-started-with-nftables_securing-networks" >安全网络——nftables 入门 | Red Hat <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</li>
</ol>
<p>注意：这些步骤通常都需要root权限才能执行。在执行这些步骤时，请确保已经备份了系统和数据，以防万一。</p>
<h3 id="firewalld-使用"><a class="markdownIt-Anchor" href="#firewalld-使用"></a> firewalld 使用</h3>
<blockquote>
<p><code>firewalld</code>支持<code>nftables</code>后端。</p>
</blockquote>
<p><code>firewalld</code> 是一个动态管理防火墙规则的守护进程，使用 <code>zones</code> 和 <code>services</code> 的概念来简化防火墙管理。它提供了更直观的方式来组织规则和管理网络流量的访问权限。以下是 <code>firewalld</code> 的一些基本用法：</p>
<h4 id="安装和启动-firewalld"><a class="markdownIt-Anchor" href="#安装和启动-firewalld"></a> 安装和启动 firewalld</h4>
<p>在大多数基于 RPM 的发行版（如 Fedora、CentOS、RHEL）上，<code>firewalld</code> 默认已安装。如果没有，可以使用包管理器进行安装：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum install firewalld    <span class="comment"># CentOS/RHEL</span></span><br><span class="line">sudo dnf install firewalld    <span class="comment"># Fedora</span></span><br><span class="line">sudo apt install firewalld    <span class="comment"># Ubuntu/Debian</span></span><br></pre></td></tr></table></figure></div>
<h4 id="基本管理"><a class="markdownIt-Anchor" href="#基本管理"></a> 基本管理</h4>
<p><strong>启动和停止 firewalld</strong>：</p>
<ul>
<li>
<p>启动</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl start firewalld</span><br></pre></td></tr></table></figure></div>
</li>
<li>
<p>停止</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl stop firewalld</span><br></pre></td></tr></table></figure></div>
</li>
<li>
<p>使 firewalld 服务在系统启动时自动启动</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> firewalld</span><br></pre></td></tr></table></figure></div>
</li>
<li>
<p>禁用自动启动</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">disable</span> firewalld</span><br></pre></td></tr></table></figure></div>
</li>
</ul>
<p><strong>重载 firewalld</strong>：不中断当前连接的情况下，应用更改。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure></div>
<p><strong>查看 firewalld 状态</strong>：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo firewall-cmd --state</span><br></pre></td></tr></table></figure></div>
<h4 id="区域管理"><a class="markdownIt-Anchor" href="#区域管理"></a> 区域管理</h4>
<p><code>firewalld</code> 使用 zones 来定义网络的安全级别。每个 zone 都有一套规则，用于决定哪些流量可以进入。默认 zone 通常是 <code>public</code>。</p>
<ul>
<li>
<p>查看所有可用的 zones：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo firewall-cmd --get-zones</span><br></pre></td></tr></table></figure></div>
<ul>
<li>这个命令用于列出 <code>firewalld</code> 所知的所有可用防火墙区域。</li>
<li>这些区域包括预定义的区域和用户自定义的区域。</li>
<li>输出只是区域的名称列表，不包括每个区域的具体规则或配置详情。</li>
<li>这个命令非常有用，当你想要快速查看所有可用的防火墙区域时，比如在创建新规则或者修改现有规则时确定要使用哪个区域。</li>
</ul>
</li>
<li>
<p>详细查看所有的 zones 和配置：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo firewall-cmd --list-all-zones</span><br></pre></td></tr></table></figure></div>
<ul>
<li>这个命令用于详细列出所有防火墙区域及其当前配置，包括每个区域的规则、服务、接口、源地址等。</li>
<li>输出会显示每个区域的完整配置，这对于审查当前防火墙的配置和确定各个区域的作用非常有帮助。</li>
<li>因为输出可能会很长（取决于有多少区域以及它们的配置如何），所以通常在需要详细了解防火墙设置时使用这个命令。</li>
</ul>
</li>
<li>
<p>查看默认的 zones：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">firewall-cmd --get-default-zone</span><br></pre></td></tr></table></figure></div>
<ul>
<li>这个命令用于查询当前的默认防火墙区域。</li>
<li>默认区域是新加入网络接口或源未被指定为其他区域的情况下所使用的区域。</li>
<li>它是系统上所有未明确分配到其他区域的网络流量的默认处理区域。</li>
</ul>
</li>
<li>
<p>查看当前接口所属的 zone：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo firewall-cmd --get-active-zones</span><br></pre></td></tr></table></figure></div>
<ul>
<li>这个命令用于列出当前所有活跃的防火墙区域及其关联的网络接口和源地址。</li>
<li>活跃区域是指当前已经有网络接口或源地址被分配的区域。这表示这些区域正在被用于管理进出这些接口或源地址的网络流量。</li>
<li>这个命令提供了一个快照，展示了哪些区域是配置中的，以及它们是如何关联到特定的网络接口或源地址的。</li>
</ul>
</li>
<li>
<p>设置默认的 zones：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">firewall-cmd --set-default-zone=[zonename]</span><br></pre></td></tr></table></figure></div>
</li>
</ul>
<p><strong>修改区域配置</strong>：临时（直到下次重启或重载）或永久（持久化存储）修改防火墙规则</p>
<ul>
<li>
<p>临时添加服务：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo firewall-cmd --zone=&lt;zone&gt; --add-service=&lt;service&gt;</span><br></pre></td></tr></table></figure></div>
</li>
<li>
<p>永久添加服务：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo firewall-cmd --permanent --zone=&lt;zone&gt; --add-service=&lt;service&gt;</span><br></pre></td></tr></table></figure></div>
<p>还可以使用以下命令对当前修改过的规则即时保存为永久配置，不过是截止到这条命令执行的时间点之前，后续添加新的规则不会受影响。</p>
 <div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo fiewall-cmd --runtime-to-permanent</span><br></pre></td></tr></table></figure></div>
<p>该命令可以在确定当前的运行时配置满足需求后，快速将其保存为永久配置，避免了手动重新添加规则的麻烦。</p>
<p>对于任何新的规则更改，如果希望它们即刻生效并持久化，应该继续使用 <code>--permanent</code> 参数并在需要时使用 <code>--reload</code> 命令来应用更改。</p>
</li>
</ul>
<h4 id="规则管理"><a class="markdownIt-Anchor" href="#规则管理"></a> 规则管理</h4>
<p><strong>允许/禁止服务</strong>：启用或禁用特定的服务。</p>
<ul>
<li>
<p>允许服务：<code>sudo firewall-cmd --zone=&lt;zone&gt; --add-service=&lt;service&gt;</code></p>
</li>
<li>
<p>禁止服务：<code>sudo firewall-cmd --zone=&lt;zone&gt; --remove-service=&lt;service&gt;</code></p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo firewall-cmd --zone=public --add-service=http</span><br><span class="line">sudo firewall-cmd --zone=public --remove-service=http</span><br></pre></td></tr></table></figure></div>
<p>添加 <code>--permanent</code> 参数以使更改永久。</p>
</li>
</ul>
<p><strong>允许/禁止端口</strong>：开放或关闭特定的端口。</p>
<ul>
<li>
<p>允许端口：<code>sudo firewall-cmd --zone=&lt;zone&gt; --add-port=&lt;port&gt;/&lt;protocol&gt;</code></p>
</li>
<li>
<p>禁止端口：<code>sudo firewall-cmd --zone=&lt;zone&gt; --remove-port=&lt;port&gt;/&lt;protocol&gt;</code></p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo firewall-cmd --zone=public --add-port=8080/tcp</span><br><span class="line">sudo firewall-cmd --zone=public --remove-port=8080/tcp</span><br></pre></td></tr></table></figure></div>
<p>同样，添加 <code>--permanent</code> 参数以使更改永久。</p>
</li>
</ul>
<p><strong>查看配置</strong></p>
<ol>
<li>
<p><strong>列出区域中的服务和端口</strong>：查看区域中当前允许的服务和端口。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo firewall-cmd --zone=&lt;zone&gt; --list-services</span><br><span class="line">sudo firewall-cmd --zone=&lt;zone&gt; --list-ports</span><br></pre></td></tr></table></figure></div>
</li>
<li>
<p><strong>列出所有配置</strong>：查看特定区域或所有区域的详细配置。</p>
<p>列出特定区域的所有配置：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo firewall-cmd --zone=&lt;zone&gt; --list-all</span><br></pre></td></tr></table></figure></div>
<p>列出所有区域的配置：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo firewall-cmd --list-all-zones</span><br></pre></td></tr></table></figure></div>
</li>
</ol>
<p><strong>高级功能</strong></p>
<p>直接规则：直接操作 iptables/nftables 规则。</p>
<ul>
<li>
<p>添加直接规则：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo firewall-cmd --permanent --direct --add-rule ipv4 filter INPUT 0 -p tcp --dport 80 -j ACCEPT</span><br></pre></td></tr></table></figure></div>
</li>
<li>
<p>删除直接规则：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo firewall-cmd --permanent --direct --remove-rule ipv4 filter INPUT 0 -p tcp --dport 80 -j ACCEPT</span><br></pre></td></tr></table></figure></div>
</li>
</ul>
<h4 id="重新加载配置"><a class="markdownIt-Anchor" href="#重新加载配置"></a> 重新加载配置</h4>
<p>更改 <code>firewalld</code> 的配置后，尤其是对于使用<code>--permanent</code>参数的配置，需要显式地重新加载规则，以便更改生效：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure></div>
<p>使用 <code>--list-all</code> 参数定期检查区域配置，确保规则按预期工作。</p>
<h4 id="查看和添加服务"><a class="markdownIt-Anchor" href="#查看和添加服务"></a> 查看和添加服务</h4>
<p><code>firewalld</code> 使用服务（services）来简化管理。服务是预定义的端口和协议的组合，这使得开放对特定类型网络服务的访问变得简单。每个服务都有一个与之关联的配置文件，定义了所需的端口和协议。</p>
<p>查看所有预定义的服务(这里不指定<code>zone</code>会使用默认的设置，如<code>public</code>)：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo firewall-cmd --get-services</span><br></pre></td></tr></table></figure></div>
<p>查看特定服务的详细信息：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo firewall-cmd --info-service=http</span><br></pre></td></tr></table></figure></div>
<p>添加自定义服务：</p>
<ol>
<li>
<p>创建一个 XML 文件定义服务。例如，为自定义应用<code>myapp</code>创建<code>/etc/firewalld/services/myapp.xml</code>：</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">service</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">short</span>&gt;</span>MyApp<span class="tag">&lt;/<span class="name">short</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>This is my custom application.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">port</span> <span class="attr">protocol</span>=<span class="string">&quot;tcp&quot;</span> <span class="attr">port</span>=<span class="string">&quot;8080&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">service</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li>
<p>重新加载<code>firewalld</code>以识别新服务：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure></div>
</li>
<li>
<p>将新服务添加到防火墙规则中：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo firewall-cmd --zone=public --add-service=myapp</span><br></pre></td></tr></table></figure></div>
<p>添加<code>--permanent</code>参数以使更改永久</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo firewall-cmd --permanent --zone=public --add-service=myapp</span><br></pre></td></tr></table></figure></div>
<p>当使用<code>--permanent</code>参数时，规则会被保存在配置文件中，即使<code>firewalld</code>服务重启也会保留这些规则。不使用<code>--permanent</code>参数的更改仅在当前会话中有效，重启<code>firewalld</code>服务后会丢失。</p>
</li>
</ol>
<h4 id="富规则rich-rules"><a class="markdownIt-Anchor" href="#富规则rich-rules"></a> 富规则（Rich Rules）</h4>
<p><code>firewalld</code> 的富规则（Rich Rules）提供了更复杂的规则定义方式，允许创建包含源地址、端口、协议等多种条件的细致规则。</p>
<ul>
<li>
<p>添加富规则</p>
<p>例如，拒绝来自特定 IP 地址的所有访问：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo firewall-cmd --zone=public --add-rich-rule=<span class="string">&#x27;rule family=&quot;ipv4&quot; source address=&quot;192.168.1.100&quot; drop&#x27;</span> --permanent</span><br></pre></td></tr></table></figure></div>
</li>
</ul>
<h4 id="恐慌模式"><a class="markdownIt-Anchor" href="#恐慌模式"></a> 恐慌模式</h4>
<p><code>firewalld</code> 提供了一个非常有用的功能，即“恐慌模式”（panic mode），它允许管理员在遇到网络安全威胁时，快速地切断所有外部网络通信，有效防止潜在的攻击。这个功能对于紧急情况下保护系统免受进一步损害非常有帮助。</p>
<ol>
<li>
<p><strong>启用恐慌模式</strong>：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo firewall-cmd --panic-on</span><br></pre></td></tr></table></figure></div>
<p>启用恐慌模式会立即阻断所有进出的网络流量，这相当于一个紧急的“断网”开关。</p>
</li>
<li>
<p><strong>禁用恐慌模式</strong>：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo firewall-cmd --panic-off</span><br></pre></td></tr></table></figure></div>
<p>当安全威胁已经被处理，或者确定网络可以安全恢复时，可以使用此命令禁用恐慌模式，恢复正常的网络通信。</p>
</li>
<li>
<p><strong>查询恐慌模式状态</strong>：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo firewall-cmd --query-panic</span><br></pre></td></tr></table></figure></div>
<p>这个命令可以让你查询当前防火墙是否处于恐慌模式。这对于确认防火墙的当前状态非常有用。</p>
</li>
</ol>
<p><strong>注意事项</strong></p>
<ul>
<li><strong>恐慌模式的使用场景</strong>：只有在确信系统正遭受攻击，且需要立即切断所有网络连接以保护系统和数据安全时，才应该启用恐慌模式。这是一个极端措施，会影响到所有网络服务和通信。</li>
<li><strong>恢复网络通信</strong>：在禁用恐慌模式后，系统的网络通信会恢复正常。但是，根据攻击的性质和系统的配置，可能需要进一步的检查和修复工作，以确保系统的安全性。</li>
<li><strong>规划应急响应</strong>：将恐慌模式作为应急响应计划的一部分，确保相关人员了解如何正确使用这一功能，并了解启用和禁用恐慌模式后的后续步骤。</li>
</ul>
<p>恐慌模式是 <code>firewalld</code> 提供的一个强大工具，能够在遭受攻击时提供即时的保护措施。然而，它应该谨慎使用，并伴随着全面的安全策略和事后分析。</p>
<h4 id="锁闭机制"><a class="markdownIt-Anchor" href="#锁闭机制"></a> 锁闭机制</h4>
<p><code>firewalld</code> 提供了一个锁闭机制（lockdown mode），这是一种安全特性，用于限制本地程序比如 KVM 虚拟机组件或一些代理服务组件对防火墙配置的修改。当启用锁闭模式时，通常只有 root 用户才能修改防火墙规则。</p>
<ol>
<li>
<p><strong>查询防火墙的锁闭状态</strong>：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo firewall-cmd --query-lockdown</span><br></pre></td></tr></table></figure></div>
<p>这个命令会返回当前防火墙的锁闭状态，如果启用了锁闭模式，它会返回 <code>yes</code>，否则返回 <code>no</code>。</p>
</li>
<li>
<p><strong>启用锁闭模式</strong>：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo firewall-cmd --lockdown-on</span><br></pre></td></tr></table></figure></div>
<p>执行这个命令后，防火墙将进入锁闭模式，限制未授权的防火墙配置更改。</p>
</li>
<li>
<p><strong>禁用锁闭模式</strong>：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo firewall-cmd --lockdown-off</span><br></pre></td></tr></table></figure></div>
<p>使用这个命令可以禁用锁闭模式，恢复到允许更改防火墙配置的状态。</p>
</li>
</ol>
<p><strong>注意事项</strong></p>
<ul>
<li><strong>使用场景</strong>：锁闭模式特别适用于生产环境，或者任何对安全性要求较高的环境，它可以帮助确保防火墙配置不会被未授权的更改所破坏。</li>
<li><strong>权限</strong>：这些操作需要 root 用户权限，这意味着只有系统管理员和有适当权限的用户可以启用或禁用锁闭模式。</li>
<li><strong>影响</strong>：启用锁闭模式可能会影响那些需要修改防火墙规则的合法程序和服务，因此在启用之前需要仔细考虑。</li>
</ul>
<p><code>firewalld</code> 的锁闭机制提供了一个额外的安全层，帮助防止未授权的防火墙配置更改。管理员可以根据需要启用或禁用锁闭模式，以适应不同的安全需求和操作环境。在启用锁闭模式时，确保考虑到对合法服务和应用程序的潜在影响。</p>
<h2 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h2>
<p><a class="link"   href="https://www.bilibili.com/video/BV1Jz4y1u7Lz/" >iptables核心运作原理和数据包过滤方法 | 技术蛋老师 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://wiki.nftables.org/wiki-nftables/index.php/Main_Page" >nftables wiki <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://farkasity.gitbooks.io/nftables-howto-zh/content/" >Nftables HOWTO 中文翻译 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://access.redhat.com/documentation/zh-cn/red_hat_enterprise_linux/8/html/configuring_and_managing_networking/getting-started-with-nftables_configuring-and-managing-networking" >配置和管理网络——nftables 入门 | Red Hat <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://access.redhat.com/documentation/zh-cn/red_hat_enterprise_linux/8/html/securing_networks/getting-started-with-nftables_securing-networks" >安全网络——nftables 入门 | Red Hat <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://firewalld.org/documentation/" >Documentation | firewalld.org <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://zhuanlan.zhihu.com/p/141473859" >FirewallD 防火墙使用概述 | Linux 中国 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>firewall</tag>
        <tag>iptables</tag>
      </tags>
  </entry>
  <entry>
    <title>linux中的特殊权限与隐藏属性</title>
    <url>/2023/08/10/linux-special-permissions/</url>
    <content><![CDATA[<p>本文主要记录一些关于linux系统中特殊权限与隐藏属性的内容<span id="more"></span></p>
<h3 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h3>
<p>在linux系统中，有文件属性和文件权限两个不同的概念。文件权限指的是用户对文件或目录的操作权限，包括读取、写入和执行。而文件属性则指的是文件的一些特征，例如是否可以被修改或移动。文件属性能够针对所有用户，包括root用户。</p>
<p>但除了以上三个常见的文件权限以外还有另外三个特殊文件权限，以及文件的隐藏属性。</p>
<h3 id="文件的特殊权限"><a class="markdownIt-Anchor" href="#文件的特殊权限"></a> 文件的特殊权限</h3>
<p>linux文件的三种特殊权限：suid、sgid、sticky。这些权限都可以通过<code>chmod</code>命令设置，可以使用对应的符号设置也可以使用对应的数字设置。suid和guid对应的符号都是s，ticky对应的符号是t，它们依次对应所有者、用户组、其他用户的权限。suid(u+s)表示所有者权限，其对应的数字是4；sgid(g+s)表示用户组权限，其对应的数字是2；sticky(o+t)表示其他用户权限，其对应的数字是1。通常情况下，使用<code>chmod</code>命令进行八进制数字语法设置权限时，特殊权限是位于第一个数字位，其余的三个数字位就是对应所有者、用户组、其他用户的读写执行权限。</p>
<h4 id="suid权限"><a class="markdownIt-Anchor" href="#suid权限"></a> suid权限</h4>
<p>SUID(Set User ID)：当设置了SUID位的可执行文件被运行时，任何用户在执行该文件时都会以文件所有者的身份执行，而不是以启动它的用户的身份执行。这意味着当可执行文件属主是root用户时，且该文件设置了suid权限，那么任何用户在执行这个文件时都会临时拥有root权限。<strong>这在普通用户执行需要root权限的命令时很有用。</strong></p>
<p>例如，普通用户正常情况下是无法在根目录直接创建文件。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/08/10/linux-special-permissions/image-20230810163953702.png"
                      class="" title="image-20230810163953702"
                >
<p>但是可以通过suid权限让普通用户可以在执行<code>touch</code>命令时，以root的身份执行。</p>
<p>使用以下命令为<code>touch</code>命令设置suid权限，并在普通用户下在根目录创建文件</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># root用户</span></span><br><span class="line"><span class="built_in">chmod</span> u+s /bin/touch</span><br><span class="line"><span class="built_in">ls</span> -l /bin/touch</span><br><span class="line"></span><br><span class="line"><span class="comment"># test用户</span></span><br><span class="line"><span class="built_in">cd</span> /</span><br><span class="line"><span class="built_in">touch</span> test.txt</span><br></pre></td></tr></table></figure></div>
<p>查看命令，可以看到在所有者的权限上出现了<strong>s</strong>的符号，代表了suid权限。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/08/10/linux-special-permissions/image-20230810165344173.png"
                      class="" title="image-20230810165344173"
                >
<p>之后普通用户就可以直接执行具有suid权限的可执行文件或命令，直接在根目录下创建文件。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/08/10/linux-special-permissions/image-20230810165701363.png"
                      class="" title="image-20230810165701363"
                >
<p>可通过以下命令查找所有具有suid权限的文件</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo find / -perm -4000 <span class="comment"># 查找所有具有suid权限的可执行文件</span></span><br></pre></td></tr></table></figure></div>
<h4 id="suid权限和sudo命令的比较"><a class="markdownIt-Anchor" href="#suid权限和sudo命令的比较"></a> suid权限和sudo命令的比较</h4>
<p>从“以root身份执行”的角度来看，二者具有同样的效果，但实际使用与体验上可能大不一样。</p>
<p>首先，suid通过<code>chmod</code>命令来设置的一种特殊文件权限(如果要获取root权限，则还必须要求这个可执行文件的所有者是root)，而<code>sudo</code>是一种可以在一定时间内以root身份进行操作的权限命令。</p>
<p>suid是针对可执行文件，只需要使用<code>chmod</code>命令设置即可，但是获取的权限取决于这个文件的所有者，而并不一定是root。<code>sudo</code>是针对特定的用户，需要在/etc/sudoers文件中进行配置，便于这些用户使用root权限进行操作。</p>
<p>由此可见，suid可以使得某一个具有该权限的可执行文件能被任何用户执行，但是也仅限于被赋予了suid权限的可执行文件，例如上面的示例中，笔者虽然给<code>touch</code>命令设置了suid权限，但普通用户根本无法正常地对这个文件进行写入以及删除的操作等，除非把其他一系列相关的可执行文件都设置suid权限，但这样容易导致安全问题(suid提权)。而<code>sudo</code>命令可以给受信任的用户在一定时间内以root的身份进行操作。</p>
<p>因此在日常中，<code>sudo</code>可能是相对安全且方便的选择，而suid权限的设置需要用户具有一定的专业知识，<strong>实际上在大多数linux发行版中已经预置了一些具有suid权限的可执行文件</strong>，例如<code>passwd</code>命令，方便用户安全地修改自己的密码。这些是经过了专业的设计，内置了安全措施，所以suid权限对于普通用户来说，可能是不怎么被关注的，即使它已经存在于一些日常使用的命令中。大多数普通用户主要了解基础的三个权限即可。</p>
<h4 id="sgid权限"><a class="markdownIt-Anchor" href="#sgid权限"></a> sgid权限</h4>
<p>SGID(Set Group ID)：当一个目录被设置了sgid权限时，任何用户在该目录下创建的新文件都会继承该目录的属组。这意味着，如果一个目录的属组是test，则在该目录下创建的新文件都会属于test组。sgid权限通常用于设置目录权限，对文件设置sgid权限是没有什么实际意义的。这对<strong>团队在linux服务器开发项目时，成员之间共享文件和目录</strong>时很有用，<strong>每个新添加的文件和目录都会具有与父目录相同的属组</strong>。</p>
<h4 id="sgid使用案例"><a class="markdownIt-Anchor" href="#sgid使用案例"></a> sgid使用案例</h4>
<p>使用以下命令为webapp目录设置sgid权限，并用不同的用户在该目录下创建文件和子目录。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 准备测试用户、组和目录</span></span><br><span class="line">useradd -m <span class="built_in">test</span></span><br><span class="line">useradd -m webappdev</span><br><span class="line">groupadd webappgroup</span><br><span class="line">usermod -aG webappgroup <span class="built_in">test</span></span><br><span class="line">usermod -aG webappgroup webappdev</span><br><span class="line"><span class="built_in">mkdir</span> /webapp</span><br><span class="line"><span class="built_in">chmod</span> 775 /webapp <span class="comment"># 允组内所有用户写入执行，这是多用户共享目录的必要权限</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置webapp目录的所有者和组</span></span><br><span class="line"><span class="built_in">chown</span> webappdev:webappgroup /webapp</span><br><span class="line"><span class="comment"># 设置webapp目录的sgid权限</span></span><br><span class="line"><span class="built_in">chmod</span> g+s /webapp</span><br><span class="line"><span class="comment"># 查看权限</span></span><br><span class="line"><span class="built_in">ls</span> -ld /webapp</span><br><span class="line"></span><br><span class="line"><span class="comment"># test用户添加文件和目录</span></span><br><span class="line">su - <span class="built_in">test</span></span><br><span class="line"><span class="built_in">touch</span> test_file</span><br><span class="line"><span class="built_in">mkdir</span> test_dir</span><br><span class="line"><span class="comment"># webappdev用户添加文件和目录</span></span><br><span class="line">su - webappdev</span><br><span class="line"><span class="built_in">touch</span> dev_file</span><br><span class="line"><span class="built_in">mkdir</span> dev_dir</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看文件和目录权限</span></span><br><span class="line"><span class="built_in">cd</span> /webapp</span><br><span class="line"><span class="built_in">ls</span> -l</span><br></pre></td></tr></table></figure></div>
<p>在没有设置sgid权限的情况下，不同用户创建的文件和目录属于各自的组</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/08/10/linux-special-permissions/image-20230810210143869.png"
                      class="" title="image-20230810210143869"
                >
<p>在设置sgid权限的情况下，不同用户创建的文件和目录统一为父目录的属组</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/08/10/linux-special-permissions/image-20230810210327163.png"
                      class="" title="image-20230810210327163"
                >
<p>sgid权限要求<strong>父目录组权限至少要有写入执行(g+wx)的权限</strong>，否则只能给目录所有者一个用户使用，那么也没有什么实际意义了。</p>
<p>但这样还不能够满足共享文件和目录的基本要求，因为<strong>用户可以直接删除其他用户的文件和目录</strong>，而sticky权限可以弥补这一个缺点。</p>
<h4 id="sticky权限"><a class="markdownIt-Anchor" href="#sticky权限"></a> sticky权限</h4>
<p>sticky(sticky bit)：当一个目录被设置了sticky权限时，即使其他用户对该目录具有写入权限，也只能删除自己拥有的文件，这意味着，如果一个目录具有sticky权限，那么任何用户都不能删除该目录中其他用户拥有的文件。sticky权限也是用于目录的权限设置，对文件设置sticky权限没有什么实际意义。这对<strong>共享文件和目录时，防止普通用户删除其他用户的文件</strong>很有用。</p>
<h4 id="sticky使用案例"><a class="markdownIt-Anchor" href="#sticky使用案例"></a> sticky使用案例</h4>
<p>使用以下命令，可以直接使用前面sgid案例的测试数据，为目录设置sticky权限，并用不同的用户去测试上传删除自己和其他用户的文件。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建共享目录</span></span><br><span class="line"><span class="built_in">mkdir</span> /webapp</span><br><span class="line"><span class="comment"># 设置sticky权限</span></span><br><span class="line"><span class="built_in">chmod</span> o+t /webapp</span><br><span class="line"><span class="built_in">ls</span> -ld /webapp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置所有权，允许所有用户上传文件，但只允许root用户和文件对应的所有者删除对应的文件</span></span><br><span class="line"><span class="built_in">chown</span> root:webappgroup /webappgroup</span><br><span class="line"><span class="built_in">chmod</span> 3777 /webapp <span class="comment"># 这里如果使用777则会把前面设置的sticky权限覆盖掉</span></span><br><span class="line"><span class="built_in">ls</span> -ld /webapp</span><br><span class="line"></span><br><span class="line"><span class="comment"># test用户添加文件</span></span><br><span class="line">su - <span class="built_in">test</span></span><br><span class="line"><span class="built_in">cd</span> /webapp &amp;&amp; <span class="built_in">touch</span> test_file</span><br><span class="line"></span><br><span class="line"><span class="comment"># webappdev用户添加文件</span></span><br><span class="line">su - webappdev</span><br><span class="line"><span class="built_in">cd</span> /webapp &amp;&amp; <span class="built_in">touch</span> dev_file</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试用户删除其他用户的文件</span></span><br><span class="line">su - <span class="built_in">test</span></span><br><span class="line"><span class="built_in">cd</span> /webapp &amp;&amp; <span class="built_in">rm</span> dev_file</span><br><span class="line">su - webappdev</span><br><span class="line"><span class="built_in">cd</span> /webapp &amp;&amp; <span class="built_in">rm</span> test_file</span><br></pre></td></tr></table></figure></div>
<p>设置了sticky权限之后，即使拥有父目录的所有权限，只要不是该文件的所有者，就无法删除文件，每个用户只能删除自己创建的文件。另外，<strong>root用户无视sticky权限的限制</strong>。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/08/10/linux-special-permissions/image-20230810223346767.png"
                      class="" title="image-20230810223346767"
                >
<p>linux系统中，创建、删除、重命名文件至少需要父目录的写入执行(wx)权限，因此sticky权限也要至少<strong>保证目录的所有者具有相应的权限</strong>，否则任何普通用户都无法在目录下创建自己的文件了，那么也没有什么实际意义了。如果考虑和sgid权限配合使用，则还要保证<strong>组具有相应的权限</strong>。</p>
<h3 id="文件的隐藏属性"><a class="markdownIt-Anchor" href="#文件的隐藏属性"></a> 文件的隐藏属性</h3>
<p>linux文件属性包括文件的许多特征，通常有文件类型、文件大小、文件所有者、文件所属组、文件最后修改时间等，而隐藏属性是属于文件的特殊性质。这些隐藏属性在linux中可以通过<code>chattr</code>命令进行设置，通过<code>lsattr</code>命令查看。</p>
<h4 id="chattr"><a class="markdownIt-Anchor" href="#chattr"></a> chattr</h4>
<p><code>chattr</code>是一个linux命令，用于设置文件的某些隐藏属性，以保护重要文件和文件夹免受意外删除或修改，而且是少有的能够直接限制root用户的命令。</p>
<p><code>chattr</code>的语法如下，</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">chattr [选项] [操作符] [属性] 文件...</span><br></pre></td></tr></table></figure></div>
<p>其中操作符有以下几个符号：</p>
<ul>
<li><code>+</code>：将指定的属性添加到现有属性</li>
<li><code>-</code>：从现有属性中删除指定的属性</li>
<li><code>=</code>：将指定的属性设置为唯一属性，覆盖原来的属性</li>
</ul>
<p>操作符后可接多个属性，下面是一些常见属性：</p>
<ul>
<li><code>a</code>：文件只能以追加模式写入。</li>
<li><code>A</code>：文件的访问时间(atime)记录不会被修改，可以减少磁盘IO。</li>
<li><code>e</code>：文件使用extents映射磁盘上的块，这个属性无法被<code>chattr</code>修改，与文件系统有关，例如ext4文件系统。</li>
<li><code>i</code>：文件不可变，即文件不能被删除或修改。</li>
</ul>
<p>更多说明内容可以使用<code>man chattr</code>查询。</p>
<h4 id="lsattr"><a class="markdownIt-Anchor" href="#lsattr"></a> lsattr</h4>
<p><code>lsattr</code>命令主要用于查看文件对应的隐藏属性。</p>
<p>例如</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">lsattr /etc/passwd</span><br></pre></td></tr></table></figure></div>
<h4 id="chattr锁定文件"><a class="markdownIt-Anchor" href="#chattr锁定文件"></a> chattr锁定文件</h4>
<p>前面提到<code>chattr</code>是少有的能够直接限制root用户的命令，但同时它也需要谨慎使用。</p>
<p>可以通过以下命令创建并锁定文件，即使root用户也无法直接删除和修改。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">touch</span> ~/immutable.txt</span><br><span class="line">sudo chattr +i ~/immutable.txt</span><br><span class="line">lsattr ~/immutable.txt</span><br><span class="line"></span><br><span class="line">sudo <span class="built_in">rm</span> -rf ~/immutable.txt</span><br></pre></td></tr></table></figure></div>
<p>执行命令可以看到即使使用root权限也无法删除该文件</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/08/10/linux-special-permissions/image-20230811010112011.png"
                      class="" title="image-20230811010112011"
                >
<p>要删除文件，只能使用<code>chattr</code>重新取消<code>i</code>属性。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo chattr -i ~/immutable.txt</span><br><span class="line"></span><br><span class="line"><span class="built_in">rm</span> -rf ~/immutable.txt</span><br></pre></td></tr></table></figure></div>
<p><code>chattr</code>命令虽然可以阻止文件被意外删除或修改，但是它所针对的文件或目录对象，通常是一些内容不会去改动的系统配置文件、日志文件、备份文件等，而且这些文件和目录不应该对其他的文件和目录有依赖关系。例如，你对那些linux命令的可执行文件使用<code>chattr</code>锁定，那它们大概率会无法正常工作。</p>
<h3 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h3>
<p>以上，主要介绍了suid、sgid、sticky三个特殊权限和文件的隐藏属性。</p>
<p>说明了如何使用sgid权限创建一个能够自动继承父目录属组的共享目录，使用sticky权限来限制共享目录的多个用户对共享文件的删除权限，以及整合sgid和sticky权限来打造一个安全且便于协作的共享文件目录。</p>
<p>最后介绍了如何利用文件的隐藏属性来限制root用户及其他任何用户的误操作以保护重要文件。</p>
<h3 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h3>
<p><a class="link"   href="https://www.runoob.com/linux/linux-comm-chattr.html" >Linux chattr命令 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://www.cnblogs.com/poloyy/p/12586677.html" >Linux - 文件的三种时间之atime、ctime、mtime的区别和简单用法 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>特殊文件属性</tag>
        <tag>特殊文件权限</tag>
      </tags>
  </entry>
  <entry>
    <title>linux下的后台进程管理</title>
    <url>/2023/04/20/managing-background-processes-in-linux/</url>
    <content><![CDATA[<p>后台进程管理对于任何一个操作系统来说都是非常重要的，它们在维持操作系统的基本功能运作时，还能运行更多用户自定义的进程服务。<span id="more"></span></p>
<p>通过对后台进程管理的学习可以进一步了解操作系统的运作机制以及系统资源的分配调度。</p>
<p>本文主要介绍几种在<code>linux</code>系统下长时间运行后台进程的方法。即使断开<code>	ssh</code>连接或者是关闭终端后，依然能够保持在后台运行。</p>
<h2 id="nohup"><a class="markdownIt-Anchor" href="#nohup"></a> nohup</h2>
<h3 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h3>
<p><code>nohup</code>命令是一个最简单的长时间运行后台进程的命令，通常它和</p>
<p><code>&amp;</code>符号一起使用。</p>
<p><code>nohup</code>命令能够忽略<code>SIGHUP</code>信号的影响，在退出终端之后也能保持进程运行。(但是可以用<code>Ctrl+C</code>终止，即不忽略<code>SIGINT</code>信号)</p>
<p><code>&amp;</code>符号能够忽略<code>SIGINT</code>信号，并让命令和进程在后台运行，不在终端显示进程的输出信息，输出被重定向到指定的文件里，默认是<code>nohup.out</code>文件。(但是需要保持终端打开，退出终端后会终止)</p>
<p>将<code>nohup</code>和<code>&amp;</code>结合使用就能可靠实现长时间在后台运行。</p>
<h3 id="基本使用"><a class="markdownIt-Anchor" href="#基本使用"></a> 基本使用</h3>
<h4 id="运行"><a class="markdownIt-Anchor" href="#运行"></a> 运行</h4>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">nohup</span> <span class="built_in">command</span> &gt; ./out.file 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure></div>
<p><code>command</code>是具体要在后台运行的命令。</p>
<p><code>out.file</code>是指定的输出文件路径和文件名，如果缺省则默认输出到<code>nohup.out</code>文件中。</p>
<p><code>2&gt;&amp;1</code>表示将标准错误<code>2</code>重定向到标准输出<code>&amp;1</code>，标准输出<code>&amp;1</code>再被重定向输入到输出文件中。</p>
<p><code>&amp;</code>表示在后台运行。</p>
<h4 id="终止"><a class="markdownIt-Anchor" href="#终止"></a> 终止</h4>
<p><code>nohup</code>+<code>&amp;</code>的进程可以通过<code>ps</code>命令搜索关键词得到进程号<code>pid</code>，再用<code>kill</code>命令终止。(一般来说，成功执行<code>nohup</code>后会输出<code>pid</code>的信息)</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">ps -aux | grep [...]</span><br><span class="line"><span class="built_in">kill</span> -9 [pid]</span><br></pre></td></tr></table></figure></div>
<h3 id="小结"><a class="markdownIt-Anchor" href="#小结"></a> 小结</h3>
<p><code>nohup</code>命令是<code>linux</code>自带的命令，它提供了最简单的长时间运行后台进程的方案，但是功能也相对较少，不足以应付一些复杂的<strong>交互性</strong>的任务，一般用于临时性地长时间运行某个命令。后面介绍的命令则提供了更多的功能。</p>
<h2 id="screen"><a class="markdownIt-Anchor" href="#screen"></a> screen</h2>
<h3 id="概述-2"><a class="markdownIt-Anchor" href="#概述-2"></a> 概述</h3>
<p><code>screen</code>命令(全称<code>GNU Screen</code>)用于多重视窗管理程序，可以在不同的终端连接到同一个<strong>会话</strong>，是一种<strong>终端多路复用器</strong>。<code>screen</code>的使用可以很方便地保留会话，并解决了<code>nohup</code>在交互性任务上的不足。</p>
<h3 id="基本使用-2"><a class="markdownIt-Anchor" href="#基本使用-2"></a> 基本使用</h3>
<h4 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h4>
<p><code>screen</code>命令可能需要先手动安装</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Debian/Ubuntu</span></span><br><span class="line">sudo apt install screen</span><br></pre></td></tr></table></figure></div>
<h4 id="创建"><a class="markdownIt-Anchor" href="#创建"></a> 创建</h4>
<p>创建一个名为<code>test</code>的虚拟终端(默认用<code>hostname</code>命名，推荐自定义名称)</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">screen -S <span class="built_in">test</span></span><br></pre></td></tr></table></figure></div>
<p>或者使用</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">screen -R <span class="built_in">test</span></span><br></pre></td></tr></table></figure></div>
<p><code>-R</code>参数会先试图恢复已经存在的名为<code>test</code>的虚拟终端，如果找不到则创建新的虚拟终端。</p>
<p>使用<code>-S</code>参数可能会有重名的问题(<code>pid</code>不会重复)，如下</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/04/20/managing-background-processes-in-linux/image-20230421000557507.png"
                      class="" title="image-20230421000557507"
                >
<h4 id="水平分割"><a class="markdownIt-Anchor" href="#水平分割"></a> 水平分割</h4>
<p>在<code>screen</code>窗口中，先输入<code>Ctrl+a</code>，再输入<code>|</code>，将当前窗口左右划分。</p>
<h4 id="垂直分割"><a class="markdownIt-Anchor" href="#垂直分割"></a> 垂直分割</h4>
<p>在<code>screen</code>窗口中，先输入<code>Ctrl+a</code>，再输入<code>S</code>，将当前窗口上下划分。</p>
<blockquote>
<p>这里的<code>S</code>必须大写</p>
</blockquote>
<h4 id="窗口切换"><a class="markdownIt-Anchor" href="#窗口切换"></a> 窗口切换</h4>
<p>在<code>screen</code>窗口中，先输入<code>Ctrl+a</code>，再输入<code>Tab</code>，切换不同的窗口。</p>
<h4 id="重连会话"><a class="markdownIt-Anchor" href="#重连会话"></a> 重连会话</h4>
<p>重新进入虚拟终端，可以使用以下命令</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">screen -r [name/pid]</span><br></pre></td></tr></table></figure></div>
<h4 id="退出"><a class="markdownIt-Anchor" href="#退出"></a> 退出</h4>
<p>在<code>screen</code>中，先输入<code>Ctrl+a</code>，再输入<code>d</code>会保留并退出该<code>screen</code>。</p>
<blockquote>
<p>注意输入的顺序，否则会误删screen</p>
</blockquote>
<h4 id="查询"><a class="markdownIt-Anchor" href="#查询"></a> 查询</h4>
<p>列出所有<code>screen</code>创建的虚拟终端以及其状态</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">screen -<span class="built_in">ls</span></span><br></pre></td></tr></table></figure></div>
<p>或者在<code>screen</code>虚拟终端中，先输入<code>Ctrl+a</code>，再输入<code>&quot;</code>即可查询。</p>
<p>虚拟终端具有两种状态</p>
<ul>
<li>Attached：激活状态，表示该<code>screen</code>正在作为当前终端使用。</li>
<li>Detached：非激活状态，表示该<code>screen</code>正在作为后台进程运行。</li>
</ul>
<h4 id="终止-2"><a class="markdownIt-Anchor" href="#终止-2"></a> 终止</h4>
<p>在进程处理完毕后，已经不需要虚拟终端了，就可以释放资源。</p>
<p>在对应的虚拟终端下时，可以用<code>exit</code>命令退出并释放资源。(推荐使用这种方式，因为能够直接确认当前终端是否处理完进程)</p>
<blockquote>
<p>tips：在<code>screen</code>中，输入<code>Ctrl+d</code>也可以释放该<code>screen</code>。</p>
</blockquote>
<p>在主终端下，如果确定某个虚拟终端可以终止，也可以使用以下命令释放</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">screen -R/-r/-S [name/pid] -X quit</span><br></pre></td></tr></table></figure></div>
<p>更多信息参考<a href="https://www.mintimate.cn/2021/09/02/howToUseScreen/"> <strong>雨月空间站</strong> </a></p>
<h3 id="小结-2"><a class="markdownIt-Anchor" href="#小结-2"></a> 小结</h3>
<p><code>screen</code>虽然解决了<code>nohup</code>存在的局限性，但是功能相对后面的<code>tmux</code>还是稍微欠缺，不过基本能够满足大部分日常使用。用户可以根据自身的需求和习惯来选择<code>GNU</code>的<code>screen</code>或者是更加现代化的<code>tmux</code>。</p>
<h2 id="tmux"><a class="markdownIt-Anchor" href="#tmux"></a> tmux</h2>
<h3 id="概述-3"><a class="markdownIt-Anchor" href="#概述-3"></a> 概述</h3>
<p><code>tmux</code>是一个类似于<code>screen</code>的终端复用器，总体功能上比<code>screen</code>更加丰富，且风格更加现代化。</p>
<p><code>tmux</code>具有会话(session)、窗口(window)、窗格(pane)的三层结构。会话是所有虚拟终端的集合，窗口是整个屏幕，窗格是各个虚拟终端。一个会话可以创建多个窗口，一个窗口可以创建多个窗格。</p>
<h3 id="基本使用-3"><a class="markdownIt-Anchor" href="#基本使用-3"></a> 基本使用</h3>
<h4 id="安装-2"><a class="markdownIt-Anchor" href="#安装-2"></a> 安装</h4>
<p><code>tmux</code>的安装</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install tmux</span><br></pre></td></tr></table></figure></div>
<h4 id="创建会话"><a class="markdownIt-Anchor" href="#创建会话"></a> 创建会话</h4>
<p>创建会话session</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">tmux</span><br></pre></td></tr></table></figure></div>
<p>在tmux创建的会话底部会有一条状态栏，表示了当前的<code>session name</code>，<code>session number</code>，shell的类型以及<code>hostname</code>等。</p>
<p>创建一个名为<code>test</code>的会话session</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">tmux new-session -s <span class="built_in">test</span></span><br><span class="line">tmux new -s <span class="built_in">test</span> <span class="comment"># 简写格式</span></span><br></pre></td></tr></table></figure></div>
<p>会话管理：在<code>tmux</code>窗口中，先输入<code>Ctrl+b</code>，再输入<code>s</code>，可以查看并管理所有会话。</p>
<h4 id="窗口分割"><a class="markdownIt-Anchor" href="#窗口分割"></a> 窗口分割</h4>
<p>在一个<code>tmux</code>的会话中可以分割出多个窗格</p>
<p><strong>水平分割</strong></p>
<p>在<code>tmux</code>窗口中，先输入<code>Ctrl+b</code>，再输入<code>%</code>，将窗口左右划分。</p>
<p><strong>垂直分割</strong></p>
<p>在<code>tmux</code>窗口中，先输入<code>Ctrl+b</code>，再输入<code>&quot;</code>，将窗口上下划分。</p>
<h4 id="多窗格管理"><a class="markdownIt-Anchor" href="#多窗格管理"></a> 多窗格管理</h4>
<p><strong>编号展示</strong></p>
<p>在<code>tmux</code>窗口中，先输入<code>Ctrl+b</code>，再输入<code>q</code>，可以知道窗格创建的先后顺序。</p>
<p><strong>窗格切换</strong></p>
<p>在<code>tmux</code>窗口中，先输入<code>Ctrl+b</code>，再输入<code>;</code>，切换到上一个窗格；</p>
<p>先输入<code>Ctrl+b</code>，再输入<code>o</code>，切换到下一个窗格。</p>
<p><strong>窗格关闭</strong></p>
<p>在<code>tmux</code>窗口中，先输入<code>Ctrl+b</code>，再输入<code>x</code>，可以关闭当前选中的窗格。也可以使用<code>Ctrl+d</code>或者<code>exit</code>命令，直接退出窗格。</p>
<h4 id="多窗口管理"><a class="markdownIt-Anchor" href="#多窗口管理"></a> 多窗口管理</h4>
<p><strong>创建窗口</strong></p>
<p>在<code>tmux</code>窗口中，先输入<code>Ctrl+b</code>，再输入<code>c</code>，可以创建新的窗口，新窗口会覆盖当前窗口，同时底部状态栏会多出一个shell的信息。</p>
<p><strong>切换窗口</strong></p>
<p>在<code>tmux</code>窗口中，先输入<code>Ctrl+b</code>，再输入<code>p</code>，切换到上一个窗口；</p>
<p>先输入<code>Ctrl+b</code>，再输入<code>n</code>，切换到下一个窗口；</p>
<p>先输入<code>Ctrl+b</code>，再输入<code>w</code>，可以在列表中选择窗口。</p>
<p>更多快捷键参考<a class="link"   href="https://zhuanlan.zhihu.com/p/137715607" >Tmux的常用快捷键 | 知乎 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h4 id="查询会话"><a class="markdownIt-Anchor" href="#查询会话"></a> 查询会话</h4>
<p>列出所有已创建的<code>tmux</code></p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">tmux <span class="built_in">ls</span></span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>tips：也可以用前面提到的方法，在<code>tmux</code>窗口中，先输入<code>Ctrl+b</code>，再输入<code>s</code>，也可以查询已创建的<code>tmux</code></p>
</blockquote>
<h4 id="脱离会话"><a class="markdownIt-Anchor" href="#脱离会话"></a> 脱离会话</h4>
<p>在<code>tmux</code>窗口中，先输入<code>Ctrl+b</code>，再输入<code>d</code>，或者使用以下命令</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">tmux detach</span><br></pre></td></tr></table></figure></div>
<p>就能保存会话并脱离。</p>
<blockquote>
<p>注意：如果输入的是<code>Ctrl+d</code>，则会直接删除会话。</p>
</blockquote>
<h4 id="重连会话-2"><a class="markdownIt-Anchor" href="#重连会话-2"></a> 重连会话</h4>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">tmux attach -t [session-name]</span><br><span class="line">tmux a -t [session-name] <span class="comment"># 简写格式</span></span><br></pre></td></tr></table></figure></div>
<h4 id="删除会话"><a class="markdownIt-Anchor" href="#删除会话"></a> 删除会话</h4>
<p>在主终端下，执行以下命令</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">tmux kill-session -t [session-name]</span><br></pre></td></tr></table></figure></div>
<p>或者在tmux窗口中，输入<code>Ctrl+d</code>，即可将会话删除。</p>
<h3 id="小结-3"><a class="markdownIt-Anchor" href="#小结-3"></a> 小结</h3>
<p><code>tmux</code>拥有比<code>screen</code>更加友好的信息提示，交互体验更加好。<code>tmux</code>也基本满足了日常使用需求，是适合广大用户的选择。</p>
<blockquote>
<p>不过，如果习惯了<code>screen</code>的快捷键操作等，也可以使用<code>screen</code>，同样可以很好地满足需求，而不必在多个工具间切换。</p>
<p>另外，不建议同时使用<code>screen</code>和<code>tmux</code>管理后台进程，一方面，它们的操作方式不同，另一方面，它们在管理后台进程时可能会冲突。</p>
</blockquote>
<p>关于<code>tmux</code>更多的技巧操作可以参考<a class="link"   href="https://zhuanlan.zhihu.com/p/414295937" >你需要知道的tmux使用技巧 | 知乎 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>以及对<code>tmux</code>的美化配置可以参考<a class="link"   href="https://zhuanlan.zhihu.com/p/122277982" >推荐神器Tmux和巨好看的配置文件 | 知乎 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h2 id="byobu"><a class="markdownIt-Anchor" href="#byobu"></a> byobu</h2>
<h3 id="概述-4"><a class="markdownIt-Anchor" href="#概述-4"></a> 概述</h3>
<p><code>byobu</code>是基于<code>screen</code>和<code>tmux</code>的终端多路复用器包装器，它通常和<code>screen</code>或<code>tmux</code>组合使用，在<code>screen</code>或<code>tmux</code>的基础上提供更多的功能支持。它本身无法独立实现<code>screen</code>和<code>tmux</code>的功能。</p>
<blockquote>
<p><code>byobu</code>早期是为<code>screen</code>开发的前端包装器，默认使用<code>screen</code>作为后端，目的是降低配置和操作成本。</p>
<p>现在的<code>byobu</code>默认使用<code>tmux</code>后端，相当于<code>tmux</code>的增强版，习惯<code>screen</code>的用户也可以手动配置<code>byobu</code>使用<code>screen</code>后端。</p>
</blockquote>
<h3 id="基本使用-4"><a class="markdownIt-Anchor" href="#基本使用-4"></a> 基本使用</h3>
<p><code>byobu</code>可以直接套用其后端的命令格式，如果使用的是<code>tmux</code>后端，只需要在<code>tmux</code>命令的基础上把<code>tmux</code>换成<code>byobu</code>即可，<code>screen</code>同理。</p>
<blockquote>
<p>实际上，使用<code>byobu</code>的功能主要是通过各种快捷键。</p>
</blockquote>
<h4 id="安装-3"><a class="markdownIt-Anchor" href="#安装-3"></a> 安装</h4>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install byobu</span><br></pre></td></tr></table></figure></div>
<h4 id="操作"><a class="markdownIt-Anchor" href="#操作"></a> 操作</h4>
<p><code>byobu</code>的命令可以直接套用其后端的命令，也可以直接使用其后端的快捷键操作。</p>
<p>以下是基于<code>tmux</code>后端的几个命令示例，直接套用<code>tmux</code>的命令格式即可</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建会话</span></span><br><span class="line">byobu new -s <span class="built_in">test</span></span><br><span class="line"><span class="comment"># 查询会话</span></span><br><span class="line">byobu <span class="built_in">ls</span></span><br><span class="line"><span class="comment"># 脱离会话</span></span><br><span class="line">byobu detach</span><br><span class="line"><span class="comment"># 重连会话</span></span><br><span class="line">byobu a -t <span class="built_in">test</span></span><br><span class="line"><span class="comment"># 删除会话</span></span><br><span class="line">byobu kill-session -t <span class="built_in">test</span></span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>快捷键操作可参考<a class="link"   href="https://zhuanlan.zhihu.com/p/113680062" >byobu常用快捷键 | 知乎 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，里面是以<code>screen</code>为后端的例子</p>
<p>注意：<code>screen</code>的前置快捷键是<code>Ctrl+a</code>，<code>tmux</code>的前置快捷键是<code>Ctrl+b</code></p>
</blockquote>
<h3 id="补充"><a class="markdownIt-Anchor" href="#补充"></a> 补充</h3>
<p><code>byobu</code>的默认配置和<code>tmux</code>很相似，一开始看不出明显的区别，需要手动配置<code>byobu</code>。</p>
<h2 id="zellij"><a class="markdownIt-Anchor" href="#zellij"></a> Zellij</h2>
<h3 id="概述-5"><a class="markdownIt-Anchor" href="#概述-5"></a> 概述</h3>
<p><code>Zellij</code>是基于<code>Rust</code>实现的终端多路复用器，与<code>WebAssembly</code>原生兼容。<code>Zellij</code>的最大特点是支持插件，并且预先包装好了一个开箱即用的友好用户界面。它的用户窗口底部展示了一些键位以及其对应的功能类，能够帮助用户快速适应基本操作。另外对于<code>tmux</code>用户来说，<code>Zellij</code>兼容<code>tmux</code>的主要快捷键，因此<code>tmux</code>用户可以更快地适应<code>Zellij</code>。</p>
<h3 id="基本使用-5"><a class="markdownIt-Anchor" href="#基本使用-5"></a> 基本使用</h3>
<p><code>Zellij</code>的下载方式可参考官网 <a class="link"   href="https://zellij.dev/" >https://zellij.dev/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><code>Zellij</code>的使用哲学是：先进入对应的功能类，然后使用提示的按键进行操作，最后按下<code>enter</code>键确认。这种方式使得<code>Zellij</code>的操作非常直观和易用。</p>
<blockquote>
<p><code>Zellij</code>的基本操作说明已经整合到了它那开箱即用的用户界面中，可以根据它的界面提示来进行操作。从笔者个人角度来看，<code>Zellij</code>可能是最容易学习的。</p>
</blockquote>
<h3 id="小结-4"><a class="markdownIt-Anchor" href="#小结-4"></a> 小结</h3>
<p><code>Zellij</code>的诞生揭示了几个重要的趋势和需求</p>
<ul>
<li>
<p>跨平台兼容性：<code>Zellij</code>使用<code>Rust</code>编写，可以在多种操作系统上运行，用户和开发者都可以在多个平台上无缝切换使用它。</p>
<blockquote>
<p>实际上，从跨平台的概念出现到现在，已经诞生了一大批跨平台的工具。</p>
</blockquote>
</li>
<li>
<p>插件化和可定制性：<code>Zellij</code>拥有插件系统，这是传统的终端复用器所不具备的。用户可以通过插件系统定制和扩展工具的功能或外观布局。(不过目前<code>Zellij</code>的插件生态仍在完善中)</p>
<blockquote>
<p>插件系统也是一种设计哲学，典型的例子就是<code>vscode</code>和<code>Neovim</code>。</p>
</blockquote>
</li>
<li>
<p>易用性和直观性：<code>Zellij</code>提供了预先配置的开箱即用的用户界面，使得新用户可以更容易地上手，且不需要过多的配置。</p>
<blockquote>
<p>这点在另一个<code>Rust</code>工具——<code>helix</code>的设计理念中也有所体现。借助<code>helix</code>的内置文档和提示，初学者在面对<code>helix</code>或<code>vim</code>及其分支<code>Neovim</code>时，学习<code>helix</code>的成本远远低于<code>vim</code>系列的工具。</p>
</blockquote>
</li>
<li>
<p>性能和效率：<code>Zellij</code>是由<code>Rust</code>实现的工具，而<code>Rust</code>语言本身就是为了提供高性能和内存安全。</p>
<blockquote>
<p>目前也涌现出了一大批由<code>Rust</code>重写的工具，不过<code>Rust</code>总体生态还需要开发者和用户群体双方的支持和投入。</p>
</blockquote>
</li>
</ul>
<h2 id="其他"><a class="markdownIt-Anchor" href="#其他"></a> 其他</h2>
<p>这部分方案适用于有特定需求的开发者。网站开发者，游戏服务器开发者或者是深度学习开发者等大型项目开发者，<code>screen</code>和<code>tmux</code>不适合管理这些大项目，因为它们不具有因程序崩溃或意外终止而<strong>自动重启</strong>的功能及其他的一些高级功能。</p>
<h3 id="systemd"><a class="markdownIt-Anchor" href="#systemd"></a> systemd</h3>
<p><code>systemd</code>是大部分主流<code>linux</code>系统的默认初始化系统，它通过<code>systemctl</code>这个命令来控制，具有<code>screen</code>和<code>tmux</code>所不具备的高级功能。</p>
<p>但是<code>systemd</code>与系统耦合度较高，而且其自定义配置<strong>需要具备一定的专业知识</strong>，通常一般的用户很少使用<code>systemd</code>来作为首选方案。</p>
<blockquote>
<p>这里指的是配置<code>systemd</code>管理用户自定义的程序，不是指使用<code>systemd</code>，<code>systemd</code>在日常生活就已经很频繁地在使用了。</p>
</blockquote>
<p>不过，有很多专业软件程序都有对<code>systemd</code>的支持，例如<code>mysql</code>、<code>nginx</code>、<code>NetworkManager</code>等，对于特定的<code>linux</code>系统开发者来说。</p>
<h3 id="supervisor"><a class="markdownIt-Anchor" href="#supervisor"></a> supervisor</h3>
<p><code>supervisor</code>是一个专注后台进程管理的程序，它使用<code>supervisorctl</code>命令来控制，可以让开发人员方便地管理和监控进程，它基于<code>python</code>开发，是开发者快速管理项目的一套简单易用的方案，不需要考虑过高的系统耦合性问题。</p>
<blockquote>
<p>有一部分<code>linux</code>发行版并不是使用<code>systemd</code>作为初始化系统(尽管大多数发行版都在支持<code>systemd</code>)，这部分的系统就无法使用<code>systemd</code>的方案。因此，<code>supervisor</code>可能会是一种方案。</p>
</blockquote>
<p>相关使用和配置可以参考<a class="link"   href="https://zhuanlan.zhihu.com/p/147305277" >Linux进程管理工具 Supervisor详解 | 知乎 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h2 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h2>
<p><a class="link"   href="https://cloud.tencent.com/developer/article/1763384" >Linux：Nohup命令详解 ｜ 腾讯云开发者社区 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://www.runoob.com/linux/linux-comm-nohup.html" >linux nohup命令 | 菜鸟教程 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a href="https://www.mintimate.cn/2021/09/02/howToUseScreen/">Linux终端命令神器–Screen命令详解 | <strong>雨月空间站</strong></a></p>
<p><a href="https://qianxu.run/2021/03/28/tmux-vs-screen/">tmux vs screen | <strong>qxdn 的乐园</strong></a></p>
<p><a class="link"   href="https://zhuanlan.zhihu.com/p/122277982" >推荐神器Tmux和巨好看的配置文件 | 知乎 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://zhuanlan.zhihu.com/p/414295937" >你需要知道的tmux使用技巧 | 知乎 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://cloud.tencent.com/developer/article/1526675" >可能是东半球最全面易懂的 Tmux 使用教程！( 强烈建议收藏 ) | 腾讯云开发者社区 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://zhuanlan.zhihu.com/p/147305277" >Linux进程管理工具 Supervisor详解 | 知乎 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>后台管理</tag>
        <tag>screen</tag>
        <tag>tmux</tag>
        <tag>byobu</tag>
      </tags>
  </entry>
  <entry>
    <title>一些现代化的linux命令</title>
    <url>/2023/07/24/modern-linux-commands/</url>
    <content><![CDATA[<p>本文主要介绍一些现代化的linux基础命令。对比传统的命令，它们在实现了原有功能的基础上或多或少有一些不同于传统命令的特性。<span id="more"></span></p>
<h3 id="文件目录"><a class="markdownIt-Anchor" href="#文件目录"></a> 文件目录</h3>
<h4 id="文件内容查看"><a class="markdownIt-Anchor" href="#文件内容查看"></a> 文件内容查看</h4>
<p><code>cat</code>命令的现代化实现<a href="https://github.com/sharkdp/bat"><code>bat</code></a>命令。<code>bat</code>命令在<code>cat</code>命令的基础上加入了<strong>行号显示、代码高亮和Git集成</strong>。</p>
<h4 id="文件查找"><a class="markdownIt-Anchor" href="#文件查找"></a> 文件查找</h4>
<p><code>find</code>命令的现代化实现<a href="https://github.com/sharkdp/fd"><code>fd</code></a>命令。<code>fd</code>命令并不是为了取代传统的<code>find</code>命令，<code>fd</code>命令主要是实现了<code>find</code>大多数常用的用法，并不具有<code>find</code>命令所有强大的功能，但是通常<code>fd</code>命令的速度要快于<code>find</code>命令。</p>
<p><code>fd</code>命令内部使用正则搜索，而<a href="https://github.com/junegunn/fzf"><code>fzf</code></a>项目提供了模糊搜索的功能，可以将<code>fd</code>和<code>fzf</code>组合使用。</p>
<h4 id="文本内容搜索"><a class="markdownIt-Anchor" href="#文本内容搜索"></a> 文本内容搜索</h4>
<p><code>grep</code>命令的现代化实现<code>ack</code>命令。<code>ack</code>命令的速度也通常快于<code>grep</code>命令，基于<code>ack</code>命令又派生了<a href="https://github.com/ggreer/the_silver_searcher"><code>ag</code></a>命令。<code>grep</code>命令和<code>ack</code>命令的搜索方式不同，<code>grep</code>只会在指定路径的所有文件上搜索内容，而<code>ack</code>则采取更加智能的搜索方式。<a href="https://github.com/BurntSushi/ripgrep"><code>ripgrep</code></a>的<code>rg</code>命令则结合了<code>grep</code>和<code>ack</code>，能够自动选择最佳搜索策略。目前从检索速度上来看，<code>ripgrep</code>的性能最强，其次是<code>silversearcher-ag</code>，最后是<code>grep</code>。具体可以参考<a class="link"   href="https://www.ubuntukylin.com/news/1740-cn.html" >巧用这几种文本检索工具，节省80%的时间 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>。</p>
<h4 id="目录内容列举"><a class="markdownIt-Anchor" href="#目录内容列举"></a> 目录内容列举</h4>
<p><code>ls</code>命令的现代化实现<a href="https://github.com/ogham/exa"><code>exa</code></a>命令。<code>exa</code>命令的默认设置可能看上去比<code>ls</code>命令更加美观，但是在编写脚本时，还是应该使用更加通用的<code>ls</code>命令，以避免不必要的麻烦。具体参考<a class="link"   href="https://linux.cn/article-13972-1.html" >exa：一个 ls 命令的现代替代品 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>。</p>
<blockquote>
<p><code>exa</code>项目作者由于没有精力维护项目，现在推荐使用社区分支<a href="https://github.com/eza-community/eza"><code>eza</code></a></p>
</blockquote>
<p>此外，还有类似的<a href="https://github.com/lsd-rs/lsd"><code>lsd</code></a>项目。<code>exa</code>、<code>eza</code>和<code>lsd</code>都是基于<code>Rust</code>实现。</p>
<h4 id="目录路径切换"><a class="markdownIt-Anchor" href="#目录路径切换"></a> 目录路径切换</h4>
<p><code>cd</code>命令的现代化实现<a href="https://github.com/ajeetdsouza/zoxide"><code>zoxide</code></a>命令。<code>zoxide</code>命令是一个更加智能的命令，受到了<a href="https://github.com/wting/autojump"><code>autojump</code></a>的启示，能够记录目录切换的历史并模糊匹配历史记录的路径。</p>
<h4 id="终端文件管理器"><a class="markdownIt-Anchor" href="#终端文件管理器"></a> 终端文件管理器</h4>
<p>对于前面目录内容列举的<code>cli</code>命令行界面(<em>Command Line Interface</em>)工具，其实还可以考虑使用<code>tui</code>终端用户界面(<em>Terminal User Interface</em>)工具。以下是几个基于<code>Rust</code>实现的推荐项目</p>
<ul>
<li>
<p><a href="https://github.com/Canop/broot"><code>broot</code></a>：<code>broot</code>是一个用<code>Rust</code>编写的终端文件管理器，基于非阻塞异步I/O。它集成了<code>ls</code>、<code>tree</code>、<code>find</code>、<code>grep</code>、<code>du</code>、<code>fzf</code>等工具的常用功能，在一个TUI界面里完成上述各种工作。</p>
</li>
<li>
<p><a href="https://github.com/kamiyaa/joshuto"><code>joshuto</code></a>：是一个类似<code>ranger</code>的终端文件管理器，速度更快，但是需要手动配置才能使用预览文本和图片的功能。</p>
</li>
<li>
<p><a href="https://github.com/sxyazi/yazi"><code>yazi</code></a>：<code>yazi</code>是一个用Rust编写的终端文件管理器，基于非阻塞异步I/O。它旨在提供一个高效、用户友好、可定制的文件管理体验。在大部分终端中支持预览文本和图片，资源占用会比<code>joshuto</code>更高。</p>
</li>
</ul>
<blockquote>
<p>关于终端文件管理器的选择可以参考这里的<a class="link"   href="https://github.com/kamiyaa/joshuto/discussions/454" >discussions <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，根据实际需求选择。</p>
</blockquote>
<h3 id="系统管理"><a class="markdownIt-Anchor" href="#系统管理"></a> 系统管理</h3>
<h4 id="进程管理监控"><a class="markdownIt-Anchor" href="#进程管理监控"></a> 进程管理监控</h4>
<p><code>top</code>命令的现代化实现有很多，这里主要介绍<code>htop</code>命令，更多内容可以参考<a class="link"   href="https://zhuanlan.zhihu.com/p/51911977" >关于 top 工具的 6 个替代方案 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>。</p>
<p><code>htop</code>命令通常相对<code>top</code>命令更易于使用，可以很方便地对进程进行过滤和排序，在必要的时候杀死对应的进程。</p>
<p><code>ps</code>命令的现代化实现<a href="https://github.com/dalance/procs"><code>procs</code></a>命令。<code>procs</code>命令也是基于<code>Rust</code>实现。</p>
<h4 id="磁盘空间管理"><a class="markdownIt-Anchor" href="#磁盘空间管理"></a> 磁盘空间管理</h4>
<p><code>df</code>命令的现代化实现<a href="https://github.com/muesli/duf"><code>duf</code></a>命令。<code>duf</code>命令提供了一个所有挂载设备的概览。</p>
<h4 id="目录空间管理"><a class="markdownIt-Anchor" href="#目录空间管理"></a> 目录空间管理</h4>
<p><code>du</code>命令的现代化实现<a href="https://github.com/rofl0r/ncdu"><code>ncdu</code></a>命令。<code>ncdu</code>命令相比<code>du</code>命令更加直观易用，<code>du</code>命令实际上不是一个很直观的命令，通常<code>du</code>命令需要配合多个参数使用才能得到直观的信息。此外，<code>ncdu</code>命令提供的是一个可交互的界面，可以进行排序以及交互式地删除目录。</p>
<blockquote>
<p>截止2024年，<code>ncdu</code>的github仓库已经很久没有更新，可以考虑基于<code>Rust</code>实现的<a href="https://github.com/bootandy/dust"><code>dust</code></a>项目。</p>
</blockquote>
<h3 id="网络管理"><a class="markdownIt-Anchor" href="#网络管理"></a> 网络管理</h3>
<h4 id="主机网络管理工具"><a class="markdownIt-Anchor" href="#主机网络管理工具"></a> 主机网络管理工具</h4>
<p><code>net-tools</code>工具的现代化替代<code>iproute2</code>工具。<code>net-tools</code>工具中有几个很知名的命令，例如<code>ifconfig</code>命令。</p>
<p>实际上，自2001年起，linux社区已经停止了对<code>net-tools</code>的维护，而<code>iproute2</code>旨在取代<code>net-tools</code>，并提供了一些新功能。一些linux发行版已经停止支持<code>net-tools</code>，只支持<code>iproute2</code>，例如<code>Archlinux</code>的livecd中就默认使用<code>iproute2</code>而不是<code>net-tools</code>。</p>
<p>虽然<code>net-tools</code>是一个比较古老的命令，但是<code>net-tools</code>目前仍在广泛使用，因此<code>net-tools</code>还是值得linux系统管理员学习的。</p>
<h4 id="网络请求工具"><a class="markdownIt-Anchor" href="#网络请求工具"></a> 网络请求工具</h4>
<p><code>curl</code>和<code>wget</code>的现代化实现<a href="https://github.com/httpie/cli"><code>httpie</code></a>工具。此外还有<a href="https://github.com/rs/curlie"><code>curlie</code></a>项目，<code>curlie</code>集成了<code>curl</code>的强大功能与<code>httpie</code>的易用性。</p>
<blockquote>
<p>与<code>curlie</code>类似的还有<a href="https://github.com/ducaale/xh"><code>xh</code></a>项目。</p>
<p><code>httpie</code>基于<code>Python</code>实现，<code>curlie</code>基于<code>Go</code>实现，<code>xh</code>基于<code>Rust</code>实现。</p>
</blockquote>
<h4 id="dns查询工具"><a class="markdownIt-Anchor" href="#dns查询工具"></a> DNS查询工具</h4>
<p><code>nslookup</code>工具的现代化实现<code>dig</code>工具，而<code>dig</code>工具又有其替代实现<a href="https://github.com/ogham/dog"><code>dog</code></a>项目。<code>dog</code>是一款简单易用的命令行工具，具有丰富多彩的输出，支持<code>DNS-over-TLS</code>和<code>DNS-over-HTTPS</code>协议。</p>
<h4 id="网络安全工具"><a class="markdownIt-Anchor" href="#网络安全工具"></a> 网络安全工具</h4>
<p><code>netcat</code>工具的现代化实现<code>ncat</code>和<code>socat</code>工具。<code>ncat</code>是<code>netcat</code>的现代版本，而<code>socat</code>是<code>netcat</code>的现代化N倍加强版，不仅支持<code>ncat</code>和<code>netcat</code>的所有功能，还支持更多的协议和连接方式等，比<code>ncat</code>更强大、更复杂。</p>
<h4 id="远程文件传输工具"><a class="markdownIt-Anchor" href="#远程文件传输工具"></a> 远程文件传输工具</h4>
<p><code>scp</code>命令的现代化替代<code>sftp</code>命令或<code>rsync</code>命令。<code>scp</code>命令属于OpenSSH项目的一部分，它被认为已经过时，不灵活且不容易修复。推荐使用<code>sftp</code>命令或<code>rsync</code>命令进行文件传输。但是，有一定的用户群体习惯使用<code>scp</code>命令，这里提供了一篇过渡参考<a class="link"   href="https://linux.cn/article-12575-1.html" >scp 用户的 rsync 迁移指南 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>。</p>
<h3 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h3>
<p><a class="link"   href="https://zhuanlan.zhihu.com/p/401429004" >25 个 Linux 下最炫酷又强大的命令行神器 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://linux.cn/article-14172-1.html" >一些经典 Linux 命令的现代替代品 | Linux 中国 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://zhuanlan.zhihu.com/p/439233295" >10 款你不知道的 Linux 环境下的替代工具！ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://www.ruanyifeng.com/blog/2022/01/cli-alternative-tools.html" >命令行常用工具的替代品 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://github.com/ibraheemdev/modern-unix" >modern-unix | github <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>modern</tag>
        <tag>commands</tag>
      </tags>
  </entry>
  <entry>
    <title>Monorepo 规范实践</title>
    <url>/2024/02/20/monorepo-setup-guide/</url>
    <content><![CDATA[<p>本文主要记录关于 Monorepo 的项目规范实践，借助 pnpm 包管理器和 NodeJs 环境等，通过各种配置实现对项目的自动化或半自动化规范。<span id="more"></span></p>
<h2 id="基础工具"><a class="markdownIt-Anchor" href="#基础工具"></a> 基础工具</h2>
<h3 id="nodejs"><a class="markdownIt-Anchor" href="#nodejs"></a> NodeJs</h3>
<p>安装可参考<a class="link"   href="https://www.runoob.com/nodejs/nodejs-install-setup.html" >菜鸟教程 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="pnpm"><a class="markdownIt-Anchor" href="#pnpm"></a> pnpm</h3>
<p>安装参考<a class="link"   href="https://pnpm.io/installation" >官网教程 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h2 id="项目初始化"><a class="markdownIt-Anchor" href="#项目初始化"></a> 项目初始化</h2>
<p>创建 package.json 和 tsconfig.json 文件，这两个文件不能为空，可以先单独写一个<code>&#123;&#125;</code>。</p>
<h3 id="手动创建"><a class="markdownIt-Anchor" href="#手动创建"></a> 手动创建</h3>
<p>package.json</p>
<div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;@monorepo-template/root&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;private&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.1.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Monorepo Template Setup&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;MIT&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div>
<p>tsconfig.json</p>
<div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div>
<h3 id="命令创建"><a class="markdownIt-Anchor" href="#命令创建"></a> 命令创建</h3>
<p>package.json</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">pnpm init</span><br></pre></td></tr></table></figure></div>
<p>tsconfig.json(需要提前安装好 typescript 相关的包)</p>
<div class="highlight-container" data-rel="Ada"><figure class="iseeu highlight ada"><table><tr><td class="code"><pre><span class="line">tsc <span class="comment">--init</span></span><br></pre></td></tr></table></figure></div>
<h3 id="项目结构"><a class="markdownIt-Anchor" href="#项目结构"></a> 项目结构</h3>
<p>参考如下</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">/my-monorepo-project</span><br><span class="line">  ├── /apps</span><br><span class="line">  │   ├── /web-app       # 前端应用</span><br><span class="line">  │   └── /mobile-app    # 移动应用</span><br><span class="line">  │</span><br><span class="line">  ├── /packages</span><br><span class="line">  │   ├── /ui-components # 通用 UI 组件库</span><br><span class="line">  │   ├── /utils         # 通用工具库</span><br><span class="line">  │   └── /api-client    # API 客户端库</span><br><span class="line">  │</span><br><span class="line">  ├── /services</span><br><span class="line">  │   ├── /user-service  # 用户服务</span><br><span class="line">  │   └── /product-service # 产品服务</span><br><span class="line">  │</span><br><span class="line">  ├── /libs              # 可能包含更底层的共享代码或第三方库的封装</span><br><span class="line">  │</span><br><span class="line">  ├── /scripts           # 构建脚本、部署脚本等</span><br><span class="line">  │</span><br><span class="line">  ├── /docs              # 项目文档</span><br><span class="line">  │</span><br><span class="line">  ├── /configs           # 通用配置文件，如 ESLint、Prettier 配置</span><br><span class="line">  │</span><br><span class="line">  ├── package.json       # Node.js 项目的依赖和脚本（如果使用）</span><br><span class="line">  ├── lerna.json         # 如果使用 Lerna 管理多包</span><br><span class="line">  ├── yarn.lock          # 如果使用 Yarn 作为包管理器</span><br><span class="line">  └── .gitignore         # Git 忽略文件配置</span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>这里的 Lerna + Yarn 可以用 <a class="link"   href="https://pnpm.io/zh/workspaces" >pnpm workspaces <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 替代，下面会介绍。</p>
</blockquote>
<h2 id="项目规范化"><a class="markdownIt-Anchor" href="#项目规范化"></a> 项目规范化</h2>
<h3 id="pnpm-workspace"><a class="markdownIt-Anchor" href="#pnpm-workspace"></a> pnpm workspace</h3>
<p>在项目根目录下创建 pnpm-workspace.yaml</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">packages:</span> <span class="comment"># 这里包含的是需要通过pnpm管理的项目文件夹</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;apps/*&#x27;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;packages/*&#x27;</span></span><br></pre></td></tr></table></figure></div>
<h3 id="typescript"><a class="markdownIt-Anchor" href="#typescript"></a> typescript</h3>
<p>目前大部分项目会使用 typescript 对 javascript 进行增强，以下是在 Monorepo 中配置 typescript 的主要步骤</p>
<h4 id="1安装依赖"><a class="markdownIt-Anchor" href="#1安装依赖"></a> 1.安装依赖</h4>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">pnpm add -w -D typescript ts-node @types/node</span><br></pre></td></tr></table></figure></div>
<p><code>-w</code>表示安装到项目根目录下，<code>-D</code>表示作为开发依赖安装。</p>
<p>注意：全程需要使用 pnpm，不能混合使用 npm、yarn 等。</p>
<h4 id="2配置"><a class="markdownIt-Anchor" href="#2配置"></a> 2.配置</h4>
<p>在项目根目录下创建 tsconfig.xxx.json 的文件，例如 tsconfig.option.json</p>
<div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;composite&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;incremental&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="comment">// 这几项配置与Typescript的Project References，tsc的--build模式有关，</span></span><br><span class="line">        <span class="comment">// 具体你可以查阅typescript文档，包括但不限于：</span></span><br><span class="line">        <span class="comment">// https://www.typescriptlang.org/tsconfig#composite</span></span><br><span class="line">        <span class="comment">// https://www.typescriptlang.org/tsconfig#incremental</span></span><br><span class="line">        <span class="comment">// https://www.typescriptlang.org/docs/handbook/project-references.html</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">&quot;declaration&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;declarationMap&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;emitDeclarationOnly&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;noEmitOnError&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;skipLibCheck&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="comment">// 这几项配置（当然还有其他相关配置）与生成js文件、d.ts文件，sourcemap文件有关，</span></span><br><span class="line">        <span class="comment">// 具体你可以查阅typescript文档，包括但不限于：</span></span><br><span class="line">        <span class="comment">// https://www.typescriptlang.org/tsconfig#declaration</span></span><br><span class="line">        <span class="comment">// https://www.typescriptlang.org/tsconfig#emitDeclarationOnly</span></span><br><span class="line">        <span class="comment">// https://www.typescriptlang.org/tsconfig#noEmitOnError</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">&quot;esModuleInterop&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;allowSyntheticDefaultImports&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="comment">// 这几项配置与CommonJS和ESModule之间的互操作性有关，</span></span><br><span class="line">        <span class="comment">// 具体你可以查阅typescript文档，包括但不限于：</span></span><br><span class="line">        <span class="comment">// https://www.typescriptlang.org/tsconfig#esModuleInterop</span></span><br><span class="line">        <span class="comment">// 我们也将会在后续的视频中演示依赖于此类配置的pkg，因此这里就不展开了</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">&quot;resolveJsonModule&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;strict&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">        <span class="comment">//  这几项配置的作用比较显而易见，具体可查阅文档：</span></span><br><span class="line">        <span class="comment">// https://www.typescriptlang.org/tsconfig#resolveJsonModule</span></span><br><span class="line">        <span class="comment">// https://www.typescriptlang.org/tsconfig#strict</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div>
<p>配置前面创建好的 tsconfig.json 继承 tsconfig.option.json</p>
<div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;extends&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./tsconfig.option.json&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div>
<h4 id="3多项目配置"><a class="markdownIt-Anchor" href="#3多项目配置"></a> 3.多项目配置</h4>
<p>以 packages 目录为例，这里包括 ui 和 utils 两个项目。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">packages</span><br><span class="line">├── ui</span><br><span class="line">│  ├── src</span><br><span class="line">│  ├── package.json</span><br><span class="line">│  └── tsconfig.json</span><br><span class="line">└── utils</span><br><span class="line">   ├── src</span><br><span class="line">   ├── package.json</span><br><span class="line">   └── tsconfig.json</span><br></pre></td></tr></table></figure></div>
<p>ui 文件夹下的配置</p>
<p>package.json</p>
<div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;@monorepo-template/ui&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;private&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.1.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;local ui package&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;MIT&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./src/index.ts&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div>
<p>tsconfig.json</p>
<div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;extends&quot;</span><span class="punctuation">:</span> <span class="string">&quot;../../tsconfig.option.json&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div>
<p>utils 文件夹下的配置</p>
<p>package.json</p>
<div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;@monorepo-template/utils&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;private&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.1.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;local utils package&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;MIT&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./src/index.ts&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div>
<p>tsconfig.json</p>
<div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;extends&quot;</span><span class="punctuation">:</span> <span class="string">&quot;../../tsconfig.option.json&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div>
<p>依次把需要通过 pnpm 管理的项目按照上面的方式配置。</p>
<h4 id="4安装使用本地包"><a class="markdownIt-Anchor" href="#4安装使用本地包"></a> 4.安装使用本地包</h4>
<p>在 utils/src 中创建 index.ts 如下</p>
<div class="highlight-container" data-rel="Ts"><figure class="iseeu highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>然后在项目根目录的 apps 文件夹下的 web-app 项目中安装这个 utils 包</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> apps/web-app</span><br><span class="line">pnpm add @monorepo-template/utils</span><br></pre></td></tr></table></figure></div>
<p>在 web-app/src 下创建 index.ts 如下</p>
<div class="highlight-container" data-rel="Ts"><figure class="iseeu highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; add &#125; <span class="keyword">from</span> <span class="string">&#x27;@monorepo-template/utils&#x27;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;sum: &#x27;</span>, <span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">main</span>();</span><br></pre></td></tr></table></figure></div>
<p>在终端使用 ts-node 执行该文件，需要先在全局安装 ts-node</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">ts-node ./src/index.ts</span><br></pre></td></tr></table></figure></div>
<p>如果没有在全局安装 ts-node，可以在该项目的 package.json 中添加配置</p>
<div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;debug&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ts-node ./src/index.ts&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div>
<p>然后在终端执行</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">pnpm run debug</span><br></pre></td></tr></table></figure></div>
<h3 id="代码质量和格式检查"><a class="markdownIt-Anchor" href="#代码质量和格式检查"></a> 代码质量和格式检查</h3>
<h4 id="1eslint-代码质量检查"><a class="markdownIt-Anchor" href="#1eslint-代码质量检查"></a> 1.Eslint 代码质量检查</h4>
<p>安装依赖</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">pnpm add -w -D eslint @typescript-eslint/parser @typescript-eslint/eslint-plugin</span><br></pre></td></tr></table></figure></div>
<p>在项目根目录下创建 .eslintrc 和 .eslintignore</p>
<p>.eslintrc</p>
<div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// 该配置项主要用于指示此.eslintrc文件是Eslint在项目内使用的根级别文件，并且 ESLint 不应在该目录之外搜索配置文件</span></span><br><span class="line">    <span class="attr">&quot;root&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 默认情况下，Eslint使用其内置的 Espree 解析器，该解析器与标准 JavaScript 运行时和版本兼容，而我们需要将ts代码解析为eslint兼容的AST，所以此处我们使用 @typescript-eslint/parser。</span></span><br><span class="line">    <span class="attr">&quot;parser&quot;</span><span class="punctuation">:</span> <span class="string">&quot;@typescript-eslint/parser&quot;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 该配置项告诉eslint我们拓展了哪些指定的配置集，其中</span></span><br><span class="line">    <span class="comment">// eslint:recommended ：该配置集是 ESLint 内置的“推荐”，它打开一组小的、合理的规则，用于检查众所周知的最佳实践</span></span><br><span class="line">    <span class="comment">// @typescript-eslint/recommended：该配置集是typescript-eslint的推荐，它与eslint:recommended相似，但它启用了特定于ts的规则</span></span><br><span class="line">    <span class="comment">// @typescript-eslint/eslint-recommended ：该配置集禁用 eslint:recommended 配置集中已经由 typeScript 处理的规则，防止eslint和typescript之间的冲突。</span></span><br><span class="line">    <span class="comment">// prettier（即eslint-config-prettier）关闭所有可能干扰 Prettier 规则的 ESLint 规则，确保将其放在最后，这样它有机会覆盖其他配置集</span></span><br><span class="line">    <span class="attr">&quot;extends&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;eslint:recommended&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;plugin:@typescript-eslint/recommended&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;plugin:@typescript-eslint/eslint-recommended&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;prettier&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 该配置项指示要加载的插件，这里</span></span><br><span class="line">    <span class="comment">// @typescript-eslint 插件使得我们能够在我们的存储库中使用typescript-eslint包定义的规则集。</span></span><br><span class="line">    <span class="comment">// prettier插件（即eslint-plugin-prettier）将 Prettier 规则转换为 ESLint 规则</span></span><br><span class="line">    <span class="attr">&quot;plugins&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;@typescript-eslint&quot;</span><span class="punctuation">,</span> <span class="string">&quot;prettier&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">&quot;rules&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;prettier/prettier&quot;</span><span class="punctuation">:</span> <span class="string">&quot;error&quot;</span><span class="punctuation">,</span> <span class="comment">// 打开prettier插件提供的规则，该插件从 ESLint 内运行 Prettier</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭这两个 ESLint 核心规则，这两个规则和prettier插件一起使用会出现问题，具体可参阅</span></span><br><span class="line">        <span class="comment">// https://github.com/prettier/eslint-plugin-prettier/blob/master/README.md#arrow-body-style-and-prefer-arrow-callback-issue</span></span><br><span class="line">        <span class="attr">&quot;arrow-body-style&quot;</span><span class="punctuation">:</span> <span class="string">&quot;off&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;prefer-arrow-callback&quot;</span><span class="punctuation">:</span> <span class="string">&quot;off&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;@typescript-eslint/no-explicit-any&quot;</span><span class="punctuation">:</span> <span class="string">&quot;off&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div>
<p>.eslintignore</p>
<div class="highlight-container" data-rel="Cos"><figure class="iseeu highlight cos"><table><tr><td class="code"><pre><span class="line">node_modules/</span><br><span class="line"></span><br><span class="line">pnpm-<span class="keyword">lock</span>.yaml</span><br><span class="line"></span><br><span class="line">*.md</span><br></pre></td></tr></table></figure></div>
<p>在项目根目录下的 package.json 中配置</p>
<div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="comment">//&quot;__eslit__comment__&quot;: &quot;查阅eslint文档 https://eslint.org/docs/latest/use/command-line-interface 了解cli工具的options&quot;,</span></span><br><span class="line">        <span class="attr">&quot;lint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eslint ./ --ext .ts,.js,.json --max-warnings=0&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div>
<p>在前面的 index.ts 中编写不符合 eslint 规则集的代码</p>
<div class="highlight-container" data-rel="Ts"><figure class="iseeu highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;test&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></table></figure></div>
<p>执行命令检查代码</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">pnpm run lint</span><br></pre></td></tr></table></figure></div>
<h4 id="2prettier-统一代码格式"><a class="markdownIt-Anchor" href="#2prettier-统一代码格式"></a> 2.Prettier 统一代码格式</h4>
<p>安装依赖</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">pnpm add -w -D prettier</span><br></pre></td></tr></table></figure></div>
<p>在项目根目录下创建 .prettierrc 和 .prettierignore</p>
<p>.prettierrc</p>
<div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="comment">//&quot;__comment__&quot;: &quot;查阅链接https://prettier.io/docs/en/options了解prettier各项配置&quot;,</span></span><br><span class="line">  <span class="attr">&quot;semi&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;singleQuote&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;tabWidth&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;printWidth&quot;</span><span class="punctuation">:</span> <span class="number">120</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div>
<p>.prettierignore</p>
<div class="highlight-container" data-rel="Cos"><figure class="iseeu highlight cos"><table><tr><td class="code"><pre><span class="line">node_modules/</span><br><span class="line"></span><br><span class="line">pnpm-<span class="keyword">lock</span>.yaml</span><br></pre></td></tr></table></figure></div>
<p>在项目根目录下的 package.json 中配置</p>
<div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="attr">&quot;format&quot;</span><span class="punctuation">:</span> <span class="string">&quot;prettier --config .prettierrc &#x27;.&#x27; --write&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div>
<p>编写测试代码，执行命令格式化代码</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">pnpm run format</span><br></pre></td></tr></table></figure></div>
<p>上面的配置方式仍需要手动格式化代码，不过实际编码过程中往往是持续、自动地根据对代码进行格式化。在对于 vscode、vim 等有 prettier 插件支持的编辑器中很容易实现，不过对于记事本这些无插件支持的编辑器可以考虑官方推荐的另一种方式 <a class="link"   href="https://www.npmjs.com/package/onchange" >onchange <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>。</p>
<p>对于 VsCode 编辑器，安装以下两个插件即可</p>
<style>.cgtiermxavih{zoom:50%;}</style><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/02/20/monorepo-setup-guide/image-20240220153025970.png"
                      class="cgtiermxavih" alt="image-20240220153025970"
                >
<style>.mnhsppnlnebi{zoom:50%;}</style><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/02/20/monorepo-setup-guide/image-20240220153115691.png"
                      class="mnhsppnlnebi" alt="image-20240220153115691"
                >
<p>以下配置对于有 prettier 插件支持的编辑器来说是可选的。</p>
<p>安装 onchange 依赖</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">pnpm add -w -D onchange</span><br></pre></td></tr></table></figure></div>
<p>在项目根目录下的 package.json 中配置</p>
<div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="comment">//&quot;__prettier__comment&quot;: &quot;查阅prettier文档 https://prettier.io/docs/en/cli 了解cli工具的options, 查询链接https://prettier.io/docs/en/watching-files, https://www.npmjs.com/package/onchange 获取onchange文档&quot;,</span></span><br><span class="line">        <span class="attr">&quot;format&quot;</span><span class="punctuation">:</span> <span class="string">&quot;prettier --config .prettierrc &#x27;.&#x27; --write&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;format-watch&quot;</span><span class="punctuation">:</span> <span class="string">&quot;onchange -d 1000 &#x27;**/*&#x27; -- prettier --config .prettierrc --write &#123;&#123;changed&#125;&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div>
<p>在终端运行该脚本，它就会持续检测文件变化情况并根据配置格式化代码。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">pnpm run format-watch</span><br></pre></td></tr></table></figure></div>
<h4 id="eslint-与-prettier-适配"><a class="markdownIt-Anchor" href="#eslint-与-prettier-适配"></a> Eslint 与 Prettier 适配</h4>
<p>Eslint 中也包含了一部分格式化规则，但这些规则往往用不到，并且会与 Prettier 冲突。以下是通过一系列配置将 Prettier 的规则转换为 Eslint 的规则。</p>
<h5 id="eslint-config-prettier"><a class="markdownIt-Anchor" href="#eslint-config-prettier"></a> eslint-config-prettier</h5>
<p>该配置用于关闭所有可能干扰 Prettier 规则的 Eslint 规则，使 Prettier 规则可以覆盖 Eslint 规则。</p>
<h5 id="eslint-plugin-prettier"><a class="markdownIt-Anchor" href="#eslint-plugin-prettier"></a> eslint-plugin-prettier</h5>
<p>该配置用于将 Prettier 规则转换为 Eslint 规则</p>
<h5 id="安装依赖"><a class="markdownIt-Anchor" href="#安装依赖"></a> 安装依赖</h5>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">pnpm add -w -D eslint-config-prettier eslint-plugin-prettier</span><br></pre></td></tr></table></figure></div>
<h5 id="配置"><a class="markdownIt-Anchor" href="#配置"></a> 配置</h5>
<p>在 .eslintrc 中增加配置(在前面的配置中已经添加，这里单独说明一下)</p>
<div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="attr">&quot;extends&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="string">&quot;prettier&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="attr">&quot;plugins&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;@typescript-eslint&quot;</span><span class="punctuation">,</span><span class="string">&quot;prettier&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;rules&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;prettier/prettier&quot;</span><span class="punctuation">:</span> <span class="string">&quot;error&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;arrow-body-style&quot;</span><span class="punctuation">:</span> <span class="string">&quot;off&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;prefer-arrow-callback&quot;</span><span class="punctuation">:</span> <span class="string">&quot;off&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;@typescript-eslint/no-explicit-any&quot;</span><span class="punctuation">:</span> <span class="string">&quot;off&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div>
<p>至此 Eslint 与 Prettier 适配完成。</p>
<h4 id="3husky-创建管理-git-hook"><a class="markdownIt-Anchor" href="#3husky-创建管理-git-hook"></a> 3.Husky 创建管理 git hook</h4>
<blockquote>
<p>git hook 是由 git 提供的在满足特定条件下自动执行脚本的功能。</p>
</blockquote>
<p>安装依赖</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">pnpm add -w -D husky</span><br></pre></td></tr></table></figure></div>
<p>启用 git hook，该命令会在项目根目录下生成 .husky 文件夹</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">npx husky install</span><br></pre></td></tr></table></figure></div>
<p>在项目根目录下的 package.json 中配置</p>
<div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="comment">// 自动在git clone时自动通过husky启用git hook</span></span><br><span class="line">        <span class="attr">&quot;prepare&quot;</span><span class="punctuation">:</span> <span class="string">&quot;husky install&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div>
<p>第一个 git hook 是在提交 commit 之前执行 eslint 工具对代码进行质量和格式检查，即执行 package.json 中的 lint 脚本。</p>
<p>创建该 git hook，该命令会在 .husky 文件夹下生成 pre-commit 脚本。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">npx husky add .husky/pre-commit <span class="string">&quot;pnpm run lint&quot;</span></span><br></pre></td></tr></table></figure></div>
<p>如果在提交 commit 时检测到代码不符合 eslint 规则，会终止本次提交。在执行<code>pnpm run format-watch</code>格式化代码之后就能正常提交。</p>
<blockquote>
<p>不过这种方式还是会对所有文件进行检查，后面会介绍一种增量格式化的工具。</p>
</blockquote>
<h4 id="4lint-staged-增量格式化"><a class="markdownIt-Anchor" href="#4lint-staged-增量格式化"></a> 4.Lint-staged 增量格式化</h4>
<blockquote>
<p>lint-staged 是用于辅助 lint 的增强工具。</p>
</blockquote>
<p>安装依赖</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">pnpm add -w -D lint-staged</span><br></pre></td></tr></table></figure></div>
<p>在项目根目录下创建 .lintstagedrc.js (支持多种格式，具体参考官网文档)</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">ESLint</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;eslint&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">removeIgnoredFiles</span> = <span class="keyword">async</span> (<span class="params">files</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> eslint = <span class="keyword">new</span> <span class="title class_">ESLint</span>();</span><br><span class="line">    <span class="keyword">const</span> ignoredFiles = <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>(files.<span class="title function_">map</span>(<span class="function">(<span class="params">file</span>) =&gt;</span> eslint.<span class="title function_">isPathIgnored</span>(file)));</span><br><span class="line">    <span class="keyword">const</span> filteredFiles = files.<span class="title function_">filter</span>(<span class="function">(<span class="params">_, i</span>) =&gt;</span> !ignoredFiles[i]);</span><br><span class="line">    <span class="keyword">return</span> filteredFiles.<span class="title function_">join</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="string">&#x27;*&#x27;</span>: <span class="keyword">async</span> (files) =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> filesToLint = <span class="keyword">await</span> <span class="title function_">removeIgnoredFiles</span>(files);</span><br><span class="line">        <span class="keyword">return</span> [<span class="string">`eslint <span class="subst">$&#123;filesToLint&#125;</span> --max-warnings=0`</span>];</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>
<p>这段脚本的作用是对所有被 lint-staged 检测到的文件，过滤掉被忽略的文件，然后对这些文件执行 lint 脚本。</p>
<p>接下来需要手动更改 pre-commit 脚本如下</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env sh</span></span><br><span class="line">. <span class="string">&quot;<span class="subst">$(dirname -- <span class="string">&quot;<span class="variable">$0</span>&quot;</span>)</span>/_/husky.sh&quot;</span></span><br><span class="line"></span><br><span class="line">npx lint-staged</span><br></pre></td></tr></table></figure></div>
<p>之后提交 commit 时就只会对发生更改的文件进行检查。</p>
<h4 id="5commitlint-commitizen-规范提交"><a class="markdownIt-Anchor" href="#5commitlint-commitizen-规范提交"></a> 5.Commitlint + Commitizen 规范提交</h4>
<blockquote>
<p>commitlint 用于校验 commit message，commitizen 用于交互式生成 commit message，这两个组合使用对于 commit 规范的统一非常有帮助。</p>
</blockquote>
<h5 id="commitlint"><a class="markdownIt-Anchor" href="#commitlint"></a> Commitlint</h5>
<p>安装 commitlint 的依赖</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">pnpm add -w -D @commitlint/cli @commitlint/config-conventional </span><br></pre></td></tr></table></figure></div>
<p>在项目根目录下创建 .commitlintrc.json</p>
 <div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;extends&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;@commitlint/config-conventional&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;rules&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;scope-empty&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="number">2</span><span class="punctuation">,</span> <span class="string">&quot;never&quot;</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div>
<p>这里的<code>extends</code>是扩展 commitlint 官方的配置，<code>scope-empty</code>表示的是提交 commit 时，scope 范围不能为空。</p>
<p>创建 commit-msg 的git hook</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">npx husky add .husky/commit-msg <span class="string">&#x27;npx --no --commitlint --edit &quot;$1&quot;&#x27;</span></span><br></pre></td></tr></table></figure></div>
<p>该脚本的作用是在提交或修改 commit message 时进行校验，以确保项目拥有统一规范的 commit messgae。</p>
<h5 id="commitizen"><a class="markdownIt-Anchor" href="#commitizen"></a> Commitizen</h5>
<p>安装 commitizen 依赖</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">pnpm add -w -D commitizen cz-coventional-changelog </span><br></pre></td></tr></table></figure></div>
<p>在项目根目录下创建 .czrc 配置文件</p>
<div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cz-conventional-changelog&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div>
<p><code>cz-conventional-changelog</code>是 commitizen 的 conventional-changelog 适配器，该适配器会以 AngularJS 的 commit messgae 规范逐步引导完成 commit message 的创建。</p>
<p>在项目根目录下的 package.json 中配置</p>
<div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="attr">&quot;cz&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cz&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div>
<p>执行以下命令生成 AugularJS 规范的 commit message</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">pnpm run cz</span><br></pre></td></tr></table></figure></div>
<h4 id="vscode-的配置"><a class="markdownIt-Anchor" href="#vscode-的配置"></a> VsCode 的配置</h4>
<p>VsCode 编辑器自身也提供了一定的配置项。</p>
<p>在项目跟目录下创建 .vscode 文件夹，在文件夹内创建 extensions.json 和 settings.json。</p>
<p>extensions.json 用于推荐安装的插件，这里推荐 eslint 和 prettier 的插件。</p>
<div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;recommendations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;esbenp.prettier-vscode&quot;</span><span class="punctuation">,</span> <span class="string">&quot;dbaeumer.vscode-eslint&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div>
<p>settings.json 是 VsCode 的项目内配置，下面是一份参考配置。</p>
<div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;typescript.tsdk&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node_modules/typescript/lib&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;editor.formatOnSave&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;editor.defaultFormatter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;esbenp.prettier-vscode&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;editor.codeActionsOnSave&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;source.organizeImports&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;source.fixAll.eslint&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;editor.formatOnSaveMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;file&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;editor.formatOnType&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;editor.formatOnPaste&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;[typescript]&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;editor.formatOnSave&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;editor.defaultFormatter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;esbenp.prettier-vscode&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;editor.codeActionsOnSave&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;source.organizeImports&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;source.fixAll.eslint&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;editor.formatOnSaveMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;file&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;editor.formatOnType&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;editor.formatOnPaste&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div>
<p>至此基础的项目工程化配置完成。</p>
<h3 id="项目依赖安装方式"><a class="markdownIt-Anchor" href="#项目依赖安装方式"></a> 项目依赖安装方式</h3>
<p>Monorepo 中有两种项目，一种是 Monorepo 自身这个总体的项目，一种是由 Monorepo 管理的具体的模块项目。</p>
<p>前面操作的都是在总体项目下完成的，而具体的项目有两种依赖安装方式。</p>
<p>一种方式是进入到对应的目录下，执行不带<code>-w</code>参数的 pnpm 命令安装依赖。</p>
<p>另一种方式是在总体项目根目录下的 package.json 中添加脚本</p>
<div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="attr">&quot;project-name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pnpm --filter @monorepo-template/project-name&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div>
<p><code>project-name</code>为具体项目对应的名称。</p>
<p>然后可以在总体项目根目录下通过以下命令安装依赖</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">pnpm project-name add xxx</span><br></pre></td></tr></table></figure></div>
<p>如果遇到 pnpm 的 missing peer 警告信息，可以在总体项目根目录下创建 .npmrc，添加以下内容</p>
<div class="highlight-container" data-rel="Ini"><figure class="iseeu highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">auto-install-peers</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">strict-peer-dependencies</span>=<span class="literal">false</span></span><br></pre></td></tr></table></figure></div>
<p>具体可以参考<a class="link"   href="https://pnpm.io/zh/npmrc#auto-install-peers" >官方文档 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>。</p>
<h3 id="project-references-和-tsc-build"><a class="markdownIt-Anchor" href="#project-references-和-tsc-build"></a> Project References 和 tsc --build</h3>
<p>project references 也是由 typescript 提供的功能，用于具体指出多项目之间的依赖关系，从而实现多项目的管理。</p>
<p>实际生产环境中不会使用 ts-node 运行项目，而是把项目编译打包成 js 产物，使用 NodeJS 运行时直接运行 js 启动服务。</p>
<p>这里假设有一个 project-name 项目，依赖一个 package-name 本地包。</p>
<p>修改 project-name 项目的 package.json 文件</p>
<div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;debug&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ts-node ./src/app.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;clean&quot;</span><span class="punctuation">:</span> <span class="string">&quot;rm -rf ./dist *.tsbuildinfo&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;compile&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tsc --build&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pnpm run clean; pnpm run compile&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node ./dist/app.js&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div>
<p>然后修改 project-name 项目的 tsconfig.json 文件</p>
<div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;extends&quot;</span><span class="punctuation">:</span> <span class="string">&quot;../../tsconfig.option.json&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;declarationMap&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;emitDeclarationOnly&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;rootDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./src&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;outDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./dist&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div>
<p>在总体项目根目录下执行命令编译打包项目</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">pnpm project-name run build</span><br></pre></td></tr></table></figure></div>
<p>使用以下命令运行项目</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">pnpm project-name run start</span><br></pre></td></tr></table></figure></div>
<p>但是目前还不能直接通过该命令运行，需要进一步配置。</p>
<p>多项目编译打包需要修改 package-name 本地包的 package.json，修改之前的 main 的配置<code>./src/index.ts</code>为编译后的产物<code>./dist/index.js</code></p>
<div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./dist/index.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div>
<p>同样地配置 tsconfig.json</p>
<div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;extends&quot;</span><span class="punctuation">:</span> <span class="string">&quot;../../tsconfig.option.json&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;declarationMap&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;emitDeclarationOnly&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;rootDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./src&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;outDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./dist&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div>
<p>回到 project-name 项目的 tsconfig.json 文件，添加 references 配置，表明了当前项目的本地依赖包。</p>
<div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="attr">&quot;references&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="comment">//path具体到tsconfig.json所在的目录</span></span><br><span class="line">            <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;../../packages/package-name&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="comment">//可选配置，不进行增量编译，不生成d.ts文件，也不会生成.tsbuildinfo文件</span></span><br><span class="line">        <span class="attr">&quot;incremental&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;composite&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;declaration&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div>
<p>在编译 project-name 项目时，tsc 会自动编译 package-name 本地包的源码。</p>
<p>现在就能通过<code>pnpm project-name run build</code>一步编译项目和项目依赖的本地包。</p>
<p>Project References 用于明确依赖关系，检测依赖是否正确编译或是否是最新的编译，如果没有，将会自动对被依赖的包执行<code>tsc --build</code>进行编译更新。</p>
<h2 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h2>
<h3 id="视频资料"><a class="markdownIt-Anchor" href="#视频资料"></a> 视频资料</h3>
<p><a class="link"   href="https://www.bilibili.com/video/BV1hp4y1L7Mr/" >基于pnpm workspace，超清楚简单的monorepo项目创建与基础演示 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://www.bilibili.com/video/BV1a8411i77L/" >nodejs项目工程化 eslint prettier husky lint-staged commitlint commitizen <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://www.bilibili.com/video/BV1ku4y1r7pQ/" >monorepo中使用project refrences，基于fastify的NodeJS Web服务 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="源代码资料"><a class="markdownIt-Anchor" href="#源代码资料"></a> 源代码资料</h3>
<p><a class="link"   href="https://github.com/pnpm/pnpm" >pnpm <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://github.com/eslint/eslint" >eslint <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://github.com/prettier/prettier" >prettier <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://github.com/typicode/husky" >husky <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://github.com/lint-staged/lint-staged" >lint-staged <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://github.com/conventional-changelog/commitlint" >commitlint <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://github.com/commitizen-tools/commitizen" >commitizen <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://github.com/dmokel/startup-monorepo-fastify-phaser-colyseus-threejs" >startup-monorepo-fastify-phaser-colyseus-threejs <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <tags>
        <tag>monorepo</tag>
        <tag>nodejs</tag>
        <tag>pnpm</tag>
        <tag>typescript</tag>
      </tags>
  </entry>
  <entry>
    <title>多版本环境控制</title>
    <url>/2023/03/12/more-env-control/</url>
    <content><![CDATA[<p>在搭建开发环境时，通常是选择一个<code>LTS(Long Term Support)</code>版本，但是有时候需要在新发布的版本或者是在某个历史版本上搭建环境进行测试，需要重新搭建新环境，带来诸多不便。<span id="more"></span></p>
<p>关于多版本环境的搭建，笔者这里提供了<code>多版本管理工具</code>的方案，实现多个不同版本之间快速切换和管理，省去环境变量的重复配置。</p>
<p>以下是一些常用的开发环境多版本管理工具，大部分工具支持多平台，这里笔者使用的是<code>Archlinux</code>，其他操作系统也可在官网寻找对应平台的安装教程。</p>
<h2 id="java-开发环境"><a class="markdownIt-Anchor" href="#java-开发环境"></a> Java 开发环境</h2>
<p>JDK 多版本管理工具有很多种，这里主要介绍<code>SDKMAN</code>、<code>JEnv</code>、<code>Jabba</code>三种工具。</p>
<h3 id="1sdkman"><a class="markdownIt-Anchor" href="#1sdkman"></a> 1.SDKMAN</h3>
<h4 id="11-安装"><a class="markdownIt-Anchor" href="#11-安装"></a> 1.1 安装</h4>
<p><a class="link"   href="https://sdkman.io/install" >SDKMAN 官网安装教程 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，<code>SDKMAN</code>支持类<code>UNIX</code>的平台，<code>windows</code>系统可以使用<code>WSL</code>。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/03/12/more-env-control/image-20230312151735030.png"
                      class="" title="image-20230312151735030"
                >
<p>下载安装命令，如果使用<code>zsh</code>或者<code>fish</code>，则将下面的<code>bash</code>替换为你所使用的<code>shell</code></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -s &quot;https://get.sdkman.io&quot; | bash</span><br></pre></td></tr></table></figure></div>
<p>这里安装可能会出现缺少<code>zip</code>的问题，参考这篇<a class="link"   href="http://leetschau.github.io/install-sdkman-on-windows-git-bash.html" >文章 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>解决。</p>
<p>在<code>Archlinux</code>下直接用包管理器安装</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo pacman -S zip</span><br></pre></td></tr></table></figure></div>
<p>在<code>windows</code>操作系统下，访问<a class="link"   href="https://sourceforge.net/projects/gnuwin32/files/" >sourceforge <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>找到<code>zip</code>包文件列表，下载<a class="link"   href="https://sourceforge.net/projects/gnuwin32/files/zip/3.0/" >zip-3.0-bin.zip <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，并将下载的包解压到<code>C:\Program Files\Git\usr\bin</code>目录下，再次执行下载安装命令。</p>
<p>通过上面的命令安装后，接着执行下面的命令手动使配置生效或者开启一个新的终端</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">source &quot;$HOME/.sdkman/bin/sdkman-init.sh&quot;</span><br></pre></td></tr></table></figure></div>
<p>测试<code>SDKMAN</code>是否安装成功</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">sdk version</span><br></pre></td></tr></table></figure></div>
<p>输出版本信息即表示安装成功。</p>
<h4 id="12-使用"><a class="markdownIt-Anchor" href="#12-使用"></a> 1.2 使用</h4>
<p>查看可用的<code>JDK</code>版本列表</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">sdk list java</span><br></pre></td></tr></table></figure></div>
<p>使用<code>SDKMAN</code>安装<code>JDK</code></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">sdk install java 17.0.6-tem</span><br></pre></td></tr></table></figure></div>
<p>临时使用指定版本的<code>JDK</code>，在当前<code>shell</code>生效</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">sdk use java 17.0.6-tem</span><br></pre></td></tr></table></figure></div>
<p>指定全局<code>JDK</code>版本，在全局生效</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">sdk default java 17.0.6-tem</span><br></pre></td></tr></table></figure></div>
<p>卸载<code>JDK</code></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">sdk uninstall java 17.0.6-tem</span><br></pre></td></tr></table></figure></div>
<h4 id="13-卸载"><a class="markdownIt-Anchor" href="#13-卸载"></a> 1.3 卸载</h4>
<p><code>SDKMAN</code>没有自动化卸载的方法，需要手动进行卸载</p>
<p>备份源文件目录</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar zcvf ~/sdkman-backup_$(date +%F-%kh%M).tar.gz -C ~/ .sdkman</span><br></pre></td></tr></table></figure></div>
<p>删除源文件目录</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">rm -rf ~/.sdkman</span><br></pre></td></tr></table></figure></div>
<p>删除<code>.bashrc</code>，<code>.bash_profile</code>，<code>.zshrc</code>，<code>profile</code>文件中安装<code>SDKMAN</code>时写入的初始化配置信息，如果这些文件存在的话，具体要删除的代码片段如下</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">#THIS MUST BE AT THE END OF THE FILE FOR SDKMAN TO WORK!!!</span><br><span class="line">[[ -s &quot;/home/dudette/.sdkman/bin/sdkman-init.sh&quot; ]] &amp;&amp; source &quot;/home/dudette/.sdkman/bin/sdkman-init.sh&quot;</span><br></pre></td></tr></table></figure></div>
<h4 id="14-补充说明"><a class="markdownIt-Anchor" href="#14-补充说明"></a> 1.4 补充说明</h4>
<ul>
<li>
<p><code>SDKMAN</code>在国内存在无法下载或下载很慢的问题，可访问国内镜像站<a class="link"   href="https://www.injdk.cn/%E4%B8%8B%E8%BD%BD" >https://www.injdk.cn/下载 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</li>
<li>
<p><code>SDKMAN</code>不仅支持<code>JDK</code>的多版本管理，还支持其他的<code>SDK</code>，具体参考<a class="link"   href="https://sdkman.io/sdks" >https://sdkman.io/sdks <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</li>
</ul>
<h3 id="2jenv"><a class="markdownIt-Anchor" href="#2jenv"></a> 2.jEnv</h3>
<p><code>JEnv</code>与<code>SDKMAN</code>不同，<code>JEnv</code>不能直接安装<code>JDK</code>，而是对不同版本<code>JDK</code>环境变量的配置进行管理。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/03/12/more-env-control/image-20230312123733364.png"
                      class="" title="image-20230312123733364"
                >
<h4 id="21-安装"><a class="markdownIt-Anchor" href="#21-安装"></a> 2.1 安装</h4>
<p><a class="link"   href="https://www.jenv.be/" >jEnv 官网 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，支持大部分类<code>Unix</code>系统平台。</p>
<p><code>git</code>克隆下载</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/gcuisinier/jenv.git ~/.jenv</span><br></pre></td></tr></table></figure></div>
<p>在<code>Bash</code>中配置</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &#x27;export PATH=&quot;$HOME/.jenv/bin:$PATH&quot;&#x27; &gt;&gt; ~/.bash_profile</span><br><span class="line">echo &#x27;eval &quot;$(jenv init -)&quot;&#x27; &gt;&gt; ~/.bash_profile</span><br></pre></td></tr></table></figure></div>
<p>在<code>Zsh</code>中配置</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &#x27;export PATH=&quot;$HOME/.jenv/bin:$PATH&quot;&#x27; &gt;&gt; ~/.zshrc</span><br><span class="line">echo &#x27;eval &quot;$(jenv init -)&quot;&#x27; &gt;&gt; ~/.zshrc</span><br></pre></td></tr></table></figure></div>
<h4 id="22-使用"><a class="markdownIt-Anchor" href="#22-使用"></a> 2.2 使用</h4>
<p>首先需要去官网下载好对应的<code>JDK</code>源文件<code>tar.gz</code>，并解压到一个合适的目录下。</p>
<p>将已经下载好的<code>JDK</code>添加到<code>jEnv</code>中，以下是参考命令，具体的目录根据实际情况配置。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">jenv add /System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home</span><br><span class="line">jenv add /Library/Java/JavaVirtualMachines/jdk17011.jdk/Contents/Home</span><br></pre></td></tr></table></figure></div>
<p>使用指定版本的<code>JDK</code></p>
<p>查看管理的<code>JDK</code>版本，当前使用的<code>JDK</code>版本会在前面有一个<code>*</code>的标记</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">jenv versions</span><br></pre></td></tr></table></figure></div>
<p>配置全局使用的<code>JDK</code>版本，版本根据实际情况选择，命令仅供参考</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">jenv global oracle64-1.6.0.39</span><br></pre></td></tr></table></figure></div>
<p>配置本地使用的<code>JDK</code>版本（每个目录）</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">jenv local oracle64-1.6.0.39</span><br></pre></td></tr></table></figure></div>
<p>配置<code>shell</code>使用的<code>JDK</code>版本</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">jenv shell oracle64-1.6.0.39</span><br></pre></td></tr></table></figure></div>
<p>取消配置，默认会采用<code>system</code>的配置</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">jenv global --unset</span><br><span class="line">jenv local --unset</span><br><span class="line">jenv shell --unset</span><br></pre></td></tr></table></figure></div>
<h4 id="23-卸载"><a class="markdownIt-Anchor" href="#23-卸载"></a> 2.3 卸载</h4>
<p>参考<code>SDKMAN</code>的卸载方法</p>
<p>删除源文件目录</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">rm -rf ~/.jenv</span><br></pre></td></tr></table></figure></div>
<p>删除<code>.bashrc</code>，<code>.bash_profile</code>，<code>.zshrc</code>，<code>profile</code>文件中安装<code>SDKMAN</code>时写入的初始化配置信息，如果这些文件存在的话，具体要删除的代码片段如下</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">export PATH=&quot;$HOME/.jenv/bin:$PATH&quot;</span><br><span class="line">eval &quot;$(jenv init -)&quot;</span><br></pre></td></tr></table></figure></div>
<h3 id="3jabba"><a class="markdownIt-Anchor" href="#3jabba"></a> 3.Jabba</h3>
<p><code>jabba</code>是跨平台的Java版本管理工具，它是受<code>Node.js</code>的<code>nvm</code>启发，并且采用<code>Go</code>语言开发</p>
<p><code>jabba</code>的官方仓库：<a class="link"   href="https://github.com/shyiko/jabba" >https://github.com/shyiko/jabba <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h4 id="31-安装"><a class="markdownIt-Anchor" href="#31-安装"></a> 3.1 安装</h4>
<p><code>jabba</code>的安装参考文档：<a class="link"   href="https://www.cjavapy.com/article/96/" >Java JDK 版本管理工具jabba的安装 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>安装最新版本</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">export JABBA_GET=&quot;curl -sLk&quot;</span><br><span class="line">curl -sLk https://github.com/shyiko/jabba/raw/master/install.sh | bash &amp;&amp; . ~/.jabba/jabba.sh</span><br></pre></td></tr></table></figure></div>
<p>特别地，如果在<code>fish</code>下安装，使用以下命令</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -sLk https://github.com/shyiko/jabba/raw/master/install.sh | bash; and . ~/.jabba/jabba.fish</span><br></pre></td></tr></table></figure></div>
<p>测试安装是否成功</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">jabba --version</span><br></pre></td></tr></table></figure></div>
<h4 id="32-使用"><a class="markdownIt-Anchor" href="#32-使用"></a> 3.2 使用</h4>
<p>安装指定版本的<code>JDK</code></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">jabba install openjdk@1.14.0</span><br></pre></td></tr></table></figure></div>
<p>查看所有安装的<code>JDK</code>版本</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">jabba ls</span><br></pre></td></tr></table></figure></div>
<p>卸载指定版本的<code>JDK</code></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">jabba uninstall openjdk@1.14.0</span><br></pre></td></tr></table></figure></div>
<p>查看可用的<code>JDK</code>版本</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">jabba ls-remote</span><br></pre></td></tr></table></figure></div>
<p>切换<code>JDK</code>版本</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">jabba use openjdk@1.11.0</span><br></pre></td></tr></table></figure></div>
<p>更多命令参考<a class="link"   href="https://www.cjavapy.com/article/97/" >jabba的常用命令 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h4 id="33-卸载"><a class="markdownIt-Anchor" href="#33-卸载"></a> 3.3 卸载</h4>
<p>删除源文件目录</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">rm -rf .jabba</span><br></pre></td></tr></table></figure></div>
<p>删除<code>.bashrc</code>，<code>.bash_profile</code>，<code>.zshrc</code>，<code>profile</code>文件中安装<code>SDKMAN</code>时写入的初始化配置信息，如果这些文件存在的话，具体要删除的代码片段如下</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">[ -s &quot;/home/entropy/.jabba/jabba.sh&quot; ] &amp;&amp; source &quot;/home/entropy/.jabba/jabba.sh&quot;</span><br></pre></td></tr></table></figure></div>
<h4 id="34-补充说明"><a class="markdownIt-Anchor" href="#34-补充说明"></a> 3.4 补充说明</h4>
<p><code>jabba</code>同样存在国内无法下载或者下载很慢的问题。</p>
<h3 id="4archlinux-java"><a class="markdownIt-Anchor" href="#4archlinux-java"></a> 4.Archlinux-java</h3>
<p>由<code>Archlinux</code>提供的<code>java</code>多版本管理方案，是<code>Archlinux</code>自带的一个脚本文件，具体可参考<a class="link"   href="https://wiki.archlinux.org/title/Java#:~:text=%7C%7C%20luytenAUR-,Switching%20between%20JVM,-The%20helper%20script" >Arch Wiki <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>。</p>
<h2 id="go-开发环境"><a class="markdownIt-Anchor" href="#go-开发环境"></a> Go 开发环境</h2>
<h3 id="gvm"><a class="markdownIt-Anchor" href="#gvm"></a> GVM</h3>
<p><a class="link"   href="https://github.com/moovweb/gvm" >GVM 官方仓库 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，<code>GVM</code>是<code>Go</code>语言版本管理器，支持安装和管理多个<code>Go</code>版本</p>
<h4 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h4>
<p>如果使用<code>zsh</code>或者<code>fish</code>，则将下面的<code>bash</code>替换为你所使用的<code>shell</code></p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">bash &lt; &lt;(curl -s -S -L https://raw.githubusercontent.com/moovweb/gvm/master/binscripts/gvm-installer)</span><br></pre></td></tr></table></figure></div>
<p>执行下面的命令手动使配置生效或者打开一个新的终端</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">source $HOME/.gvm/scripts/gvm</span><br></pre></td></tr></table></figure></div>
<h4 id="使用"><a class="markdownIt-Anchor" href="#使用"></a> 使用</h4>
<p>先安装<code>Go1.4</code>的版本，之后再安装<code>Go1.5</code>及之后的版本，避免出现引导问题（由于<code>Go</code>在<code>1.5</code>版本实现了自举，因此安装高版本的<code>Go</code>还需要准备一个低版本的<code>Go</code>提供编译环境）</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">gvm install go1.4 -B</span><br><span class="line">gvm use go1.4 [--default]</span><br><span class="line">export GOROOT_BOOTSTRAP=$GOROOT</span><br><span class="line">gvm install go1.5</span><br></pre></td></tr></table></figure></div>
<p>临时使用指定的<code>Go</code>版本，加上<code>--default</code>参数指定，就可以默认使用该版本</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">gvm use go1.4</span><br><span class="line">gvm use go1.4 --default</span><br></pre></td></tr></table></figure></div>
<p>列出已安装的<code>Go</code>版本，在当前正在使用的版本前面会有<code>=&gt;</code>的前缀</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">gvm list</span><br></pre></td></tr></table></figure></div>
<p>列出所有可供下载的<code>Go</code>版本</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">gvm listall</span><br></pre></td></tr></table></figure></div>
<p>卸载<code>Go1.5</code></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">gvm uninstall go1.5</span><br></pre></td></tr></table></figure></div>
<h4 id="卸载"><a class="markdownIt-Anchor" href="#卸载"></a> 卸载</h4>
<p><code>GVM</code>提供了完全删除<code>GVM</code>自身和所有已安装的<code>Go</code>版本和软件包的命令</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">gvm implode</span><br></pre></td></tr></table></figure></div>
<h2 id="nodejs-开发环境"><a class="markdownIt-Anchor" href="#nodejs-开发环境"></a> Node.js 开发环境</h2>
<h3 id="nvm"><a class="markdownIt-Anchor" href="#nvm"></a> NVM</h3>
<p><a class="link"   href="https://github.com/nvm-sh/nvm#installing-and-updating" >NVM 官方仓库 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，<code>nvm</code>就是<code>node.js</code>的版本管理工具，在开发中可以通过它来安装和切换不同的<code>node.js</code>版本</p>
<h4 id="安装-2"><a class="markdownIt-Anchor" href="#安装-2"></a> 安装</h4>
<p>如果使用<code>zsh</code>或者<code>fish</code>，则将下面的<code>bash</code>替换为你所使用的<code>shell</code></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh | bash</span><br></pre></td></tr></table></figure></div>
<p>测试安装是否成功，关闭终端打开一个新的终端执行以下命令，输出<code>nvm</code>则表示安装成功</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">command -v nvm</span><br></pre></td></tr></table></figure></div>
<h4 id="使用-2"><a class="markdownIt-Anchor" href="#使用-2"></a> 使用</h4>
<p>列出所以可下载安装的<code>Nodejs</code>版本</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">nvm ls-remote</span><br></pre></td></tr></table></figure></div>
<p>列出已安装的<code>Nodejs</code>版本，在当前正在使用的版本前面会有<code>-&gt;</code>的前缀</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">nvm list</span><br></pre></td></tr></table></figure></div>
<p>安装指定版本的<code>Nodejs</code></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">nvm install v18.15.0</span><br></pre></td></tr></table></figure></div>
<p>临时使用指定版本的<code>Nodejs</code></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">nvm use v18.15.0</span><br></pre></td></tr></table></figure></div>
<p>默认使用指定版本的<code>Nodejs</code></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">nvm alias default v18.15.0</span><br></pre></td></tr></table></figure></div>
<p>卸载指定版本的<code>Nodejs</code></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">nvm uninstall v18.15.0</span><br></pre></td></tr></table></figure></div>
<h4 id="卸载-2"><a class="markdownIt-Anchor" href="#卸载-2"></a> 卸载</h4>
<p>删除源文件目录</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">rm -rf .nvm</span><br></pre></td></tr></table></figure></div>
<p>删除<code>.bashrc</code>，<code>.bash_profile</code>，<code>.zshrc</code>，<code>profile</code>文件中安装<code>SDKMAN</code>时写入的初始化配置信息，如果这些文件存在的话，具体要删除的代码片段如下</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">source /usr/share/nvm/init-nvm.sh</span><br></pre></td></tr></table></figure></div>
<h4 id="补充说明"><a class="markdownIt-Anchor" href="#补充说明"></a> 补充说明</h4>
<p><code>NVM</code>在国内可能存在无法下载或者下载很慢的问题，可在<code>.bashrc</code>，<code>.bash_profile</code>，<code>.zshrc</code>中选择<code>bash</code>或<code>zsh</code>对应的配置文件里添加以下配置</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">export NVM_NODEJS_ORG_MIRROR=https://npmmirror.com/mirrors/node</span><br></pre></td></tr></table></figure></div>
<h2 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h2>
<p><a class="link"   href="https://juejin.cn/post/7044711294984781838" >SDK管理利器：SDKMAN！ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://zhuanlan.zhihu.com/p/416897637" >Java 多版本管理工具（自由切换Java版本）Jenv使用（支持Linux Mac Windows） <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://www.cjavapy.com/article/631/" >Java JDK使用SDKMAN、JEnv和Jabba安装配置及版本切换 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://zhuanlan.zhihu.com/p/83375992" >如何灵活地进行 Go 版本管理 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://zhuanlan.zhihu.com/p/445799189" >Golang 多版本管理 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://zhuanlan.zhihu.com/p/483015085" >nvm安装-linux篇 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <tags>
        <tag>多版本控制</tag>
      </tags>
  </entry>
  <entry>
    <title>使用docker运行openGauss</title>
    <url>/2023/03/05/opengauss-env-build/</url>
    <content><![CDATA[<p>在linux上通过docker的方式运行开源数据库openGauss<span id="more"></span></p>
<h3 id="基本环境"><a class="markdownIt-Anchor" href="#基本环境"></a> 基本环境</h3>
<p>笔者使用的是<code>Archlinux</code>发行版，通过<code>Docker</code>容器技术运行基于<code>PostgreSQL</code>的开源数据库<code>openGauss</code></p>
<p><a class="link"   href="https://opengauss.org/zh/" >openGauss 中文社区官网 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://docker.p2hp.com/" >docker 中文网 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://hub.docker.com/" >dockerHub 远程仓库 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="docker-环境搭建"><a class="markdownIt-Anchor" href="#docker-环境搭建"></a> Docker 环境搭建</h3>
<h4 id="1安装-docker"><a class="markdownIt-Anchor" href="#1安装-docker"></a> 1.安装 docker</h4>
<p>linux发行版可以很方便地通过命令行安装（在此之前请先确保网络状态良好）</p>
<p>以下是<code>Archlinux</code>的安装方式</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pacman -S docker <span class="comment"># 安装docker</span></span><br><span class="line">sudo docker version   <span class="comment"># 查看docker版本</span></span><br><span class="line">sudo docker info      <span class="comment"># 查看docker信息</span></span><br></pre></td></tr></table></figure></div>
<p>其他的安装方式可参考<a class="link"   href="https://www.modb.pro/db/611595" >使用虚拟机VMwarepro1623镜像文件导入部署openGauss3.1.1指导手册 | 墨天轮(modb.pro) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h4 id="2启动-docker"><a class="markdownIt-Anchor" href="#2启动-docker"></a> 2.启动 docker</h4>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl start docker   <span class="comment"># 启动docker</span></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> docker  <span class="comment"># 允许docker开机自启</span></span><br><span class="line">sudo systemctl status docker  <span class="comment"># 查看docker运行状态</span></span><br><span class="line">sudo systemctl restart docker <span class="comment"># 重启docker</span></span><br></pre></td></tr></table></figure></div>
<h4 id="3docker-常用命令"><a class="markdownIt-Anchor" href="#3docker-常用命令"></a> 3.docker 常用命令</h4>
<p>主要参考自<a class="link"   href="https://www.runoob.com/docker/docker-container-usage.html" >菜鸟教程 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，关于部分命令的具体示例可参考下面 openGauss 环境的搭建</p>
<h5 id="容器使用相关命令"><a class="markdownIt-Anchor" href="#容器使用相关命令"></a> 容器使用相关命令</h5>
<table>
<thead>
<tr>
<th style="text-align:center">命令</th>
<th style="text-align:center">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">docker run</td>
<td style="text-align:center">创建并运行新的容器，使用<code>-it</code>参数指定命令行模式运行，使用<code>--name</code>参数指定容器名称，使用<code>-d</code>参数指定在后台运行容器，使用<code>-P</code>参数随机映射到主机端口或<code>-p</code>参数指定主机端口映射</td>
</tr>
<tr>
<td style="text-align:center">docker ps -a</td>
<td style="text-align:center">查找所有已存在的容器</td>
</tr>
<tr>
<td style="text-align:center">docker start</td>
<td style="text-align:center">启动一个已存在的容器，需要提供容器的ID</td>
</tr>
<tr>
<td style="text-align:center">docker stop</td>
<td style="text-align:center">停止一个已存在的容器，需要提供容器的ID</td>
</tr>
<tr>
<td style="text-align:center">docker restart</td>
<td style="text-align:center">重启一个已存在的容器，需要提供容器的ID</td>
</tr>
<tr>
<td style="text-align:center">docker attach</td>
<td style="text-align:center">进入一个已存在的容器，需要提供容器的ID。注意：该命令在退出容器之后会自动停止容器。退出容器使用<code>exit</code>命令</td>
</tr>
<tr>
<td style="text-align:center">docker exec</td>
<td style="text-align:center">进入一个已存在的容器，需要提供容器的ID，配合<code>-it</code>参数并指定终端<code>/bin/bash</code>进入容器命令行。该命令在退出容器之后，容器不会停止。退出容器使用<code>exit</code>命令。</td>
</tr>
<tr>
<td style="text-align:center">docker export</td>
<td style="text-align:center">导出一个已存在的容器，需要提供容器的ID，配合<code>&gt; xxx.tar</code>命令导出容器快照到本地文件<code>xxx.tar</code></td>
</tr>
<tr>
<td style="text-align:center">docker import</td>
<td style="text-align:center">导入容器快照文件，使用`cat ./xxx.tar</td>
</tr>
<tr>
<td style="text-align:center">docker rm</td>
<td style="text-align:center">删除一个已存在的容器，需要提供容器的ID，使用<code>-f</code>参数强制删除</td>
</tr>
<tr>
<td style="text-align:center">docker container</td>
<td style="text-align:center">批量处理容器，例如删除所有处于终止状态的容器<code>docker container prune</code></td>
</tr>
<tr>
<td style="text-align:center">docker port</td>
<td style="text-align:center">查看容器的端口映射，需要提供容器的ID</td>
</tr>
</tbody>
</table>
<h5 id="镜像使用相关命令"><a class="markdownIt-Anchor" href="#镜像使用相关命令"></a> 镜像使用相关命令</h5>
<table>
<thead>
<tr>
<th style="text-align:center">命令</th>
<th style="text-align:center">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">docker images</td>
<td style="text-align:center">列出本地主机上已存在的镜像</td>
</tr>
<tr>
<td style="text-align:center">docker search</td>
<td style="text-align:center">搜索指定的docker镜像</td>
</tr>
<tr>
<td style="text-align:center">docker pull</td>
<td style="text-align:center">拉取指定的docker镜像</td>
</tr>
<tr>
<td style="text-align:center">docker rmi</td>
<td style="text-align:center">删除指定的docker镜像</td>
</tr>
<tr>
<td style="text-align:center">docker commit</td>
<td style="text-align:center">从已有镜像的基础上创建新镜像，<code>-m=&quot;xxx&quot;</code>参数表示提交的描述信息，<code>-a=&quot;xxx&quot;</code>参数指定镜像的作者，<code>test/xxx:v2</code>参数指定镜像的名称和标签</td>
</tr>
<tr>
<td style="text-align:center">docker build</td>
<td style="text-align:center">从零开始创建一个新的镜像，需要先创建一个包含特定指令组的<code>Dockerfile</code>文件</td>
</tr>
<tr>
<td style="text-align:center">docker tag</td>
<td style="text-align:center">为docker镜像添加标签</td>
</tr>
</tbody>
</table>
<h4 id="4配置-docker-组"><a class="markdownIt-Anchor" href="#4配置-docker-组"></a> 4.配置 docker 组</h4>
<p>在linux中使用docker必须以root权限<code>sudo</code>执行命令或者切换到root用户身份运行（不推荐），否则所有的docker命令前都需要添加<code>sudo</code>，表示以root权限执行命令。这里新创建了一个用户组，专门用于操作docker</p>
<p>由于通过<code>pacman</code>方式安装<code>docker</code>时自动创建好了docker组，这里直接将当前普通用户添加至docker组中即可。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo gpasswd -a <span class="variable">$USER</span> docker <span class="comment"># 添加当前用户至docker组</span></span><br><span class="line">newgrp docker                <span class="comment"># 切换到docker用户组（注意该命令需要在每次新开终端时执行）</span></span><br><span class="line">docker ps                    <span class="comment"># 测试docker命令，这时就不需要在命令前添加sudo</span></span><br></pre></td></tr></table></figure></div>
<h4 id="5配置-docker-国内加速"><a class="markdownIt-Anchor" href="#5配置-docker-国内加速"></a> 5.配置 docker 国内加速</h4>
<p><a class="link"   href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors" >阿里云官网 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>获取用户专属的镜像加速地址</p>
<p>可以通过修改daemon配置文件/etc/docker/daemon.json来使用加速器</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">mkdir</span> -p /etc/docker</span><br><span class="line">sudo <span class="built_in">tee</span> /etc/docker/daemon.json &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;这里填写专属加速器地址&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br><span class="line"></span><br><span class="line">sudo docker info | grep <span class="string">&quot;专属加速器地址&quot;</span> <span class="comment"># 查看镜像是否配置成功，若有输出地址信息则表示配置成功</span></span><br></pre></td></tr></table></figure></div>
<p>参考<a class="link"   href="https://www.runoob.com/docker/docker-mirror-acceleration.html" >Docker 镜像加速 | 菜鸟教程(runoob.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h4 id="6docker-容器外部访问连接"><a class="markdownIt-Anchor" href="#6docker-容器外部访问连接"></a> 6.docker 容器外部访问连接</h4>
<p>默认启动的docker容器只能在容器内部访问，但有时需要在容器外部访问，比如后面使用数据库图形化管理工具远程连接 openGauss 数据库。</p>
<p>使用<code>docker run</code>配合<code>-p</code>或<code>-P</code>参数指定端口映射，这里指定端口映射方便后续查找</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --name opengauss --privileged=<span class="literal">true</span> -d -e GS_PASSWORD=openGauss@123 -p 15432:5432 enmotech/opengauss:latest</span><br></pre></td></tr></table></figure></div>
<p>通过<code>-p</code>命令指定docker容器内的<code>5432端口</code>（openGauss的默认监听端口）映射到主机的<code>15432端口</code>上。之后就可以通过主机的<code>15432端口</code>访问容器数据库。</p>
<h3 id="opengauss-环境搭建"><a class="markdownIt-Anchor" href="#opengauss-环境搭建"></a> openGauss 环境搭建</h3>
<p>这里使用<code>openGauss</code>的docker镜像，可直接参考镜像作者提供的<a class="link"   href="https://hub.docker.com/r/enmotech/opengauss" >文档 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h4 id="1拉取-docker-镜像"><a class="markdownIt-Anchor" href="#1拉取-docker-镜像"></a> 1.拉取 docker 镜像</h4>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">docker search openGauss <span class="comment"># 搜索openGauss的docker镜像</span></span><br></pre></td></tr></table></figure></div>
<p>搜索结果如下，这里选择 stars 收藏量最高的镜像</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/03/05/opengauss-env-build/image-20230305160339079.png"
                      class="" title="image-20230305160339079"
                >
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull enmotech/opengauss <span class="comment"># 拉取镜像</span></span><br></pre></td></tr></table></figure></div>
<h4 id="2启动-opengauss-容器"><a class="markdownIt-Anchor" href="#2启动-opengauss-容器"></a> 2.启动 openGauss 容器</h4>
<p>只在容器内访问</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --name opengauss --privileged=<span class="literal">true</span> -d -e GS_PASSWORD=openGauss@123 enmotech/opengauss:latest</span><br></pre></td></tr></table></figure></div>
<p>允许外部访问</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --name opengauss --privileged=<span class="literal">true</span> -d -e GS_PASSWORD=openGauss@123 -p 15432:5432 enmotech/opengauss:latest</span><br></pre></td></tr></table></figure></div>
<p><strong>注意<code>GS_PASSWORD</code>设置为你的密码，密码长度8个字符及以上，必须同时包含英文字母大小写，数字，以及特殊符号，用于后续图形化数据库管理工具连接</strong></p>
<h4 id="3进入-opengauss-容器"><a class="markdownIt-Anchor" href="#3进入-opengauss-容器"></a> 3.进入 openGauss 容器</h4>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">docker ps    <span class="comment"># 查看正在运行中的容器</span></span><br><span class="line">docker ps -a <span class="comment"># 查看所有已创建的容器</span></span><br><span class="line">docker <span class="built_in">exec</span> -it opengauss bash <span class="comment"># 进入容器，opengauss是前面创建容器时指定的名称</span></span><br></pre></td></tr></table></figure></div>
<h4 id="4使用-gsql-配置-opengauss"><a class="markdownIt-Anchor" href="#4使用-gsql-配置-opengauss"></a> 4.使用 gsql 配置 openGauss</h4>
<p>注意：openGauss的docker镜像版本是没有<code>gs_om</code>和<code>gs_guc</code>。另外，初次操作数据库时需要在omm用户下进行</p>
<h5 id="使用-gsql-连接到数据库"><a class="markdownIt-Anchor" href="#使用-gsql-连接到数据库"></a> 使用 gsql 连接到数据库</h5>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">su - omm <span class="comment"># 切换到omm用户</span></span><br><span class="line">gsql -d postgres -U gaussdb -W<span class="string">&#x27;openGauss@123&#x27;</span> -h 127.0.0.1 -p 5432 <span class="comment"># 在容器内部可以直接连接</span></span><br><span class="line"><span class="comment"># 注意用户名是gaussdb是默认存在的用户，密码是之前创建容器时自定义的，5432端口是默认的(根据实际情况调整)</span></span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>在内部访问数据库时也可以只写<code>gsql</code>不带任何参数的命令来连接数据库</p>
<p>这是因为该openGauss镜像配置了本地信任机制，因此在容器内连接数据库无需密码，但是如果要从容器外部（其它主机或者其它容器）连接则必须要输入密码</p>
<p>对于通过其他方式安装openGauss的，请另行参考其他教程</p>
</blockquote>
<h5 id="创建新的数据库用户"><a class="markdownIt-Anchor" href="#创建新的数据库用户"></a> 创建新的数据库用户</h5>
<p>omm用户的权限过大，主要用于访问初始数据库进行初始配置，为避免omm用户误操作对数据库造成重大损失，这里新创建一个普通用户并授予基本权限。</p>
<p>注意：sql语句结尾带分号。</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> stu <span class="keyword">with</span> password &quot;Bigdata@123&quot;; # 创建一个用户名为stu，密码为Bigdata<span class="variable">@123</span>的用户</span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">user</span> stu sysadmin; # 授予系统管理员权限</span><br></pre></td></tr></table></figure></div>
<h5 id="创建新的数据库"><a class="markdownIt-Anchor" href="#创建新的数据库"></a> 创建新的数据库</h5>
<p>openGauss数据库，虽然被称为数据库，但实际上它是一个RDBMS（Relational Database Management System，关系型数据库管理系统）。因此它并不是一个具体的数据库，而是一个管理多个数据库的系统。</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> database stu_test owner stu; # 创建一个名为stu_test的数据库并指定所有者为stu</span><br></pre></td></tr></table></figure></div>
<h5 id="使用新用户连接"><a class="markdownIt-Anchor" href="#使用新用户连接"></a> 使用新用户连接</h5>
<p>先使用<code>\q</code>命令退出数据库，再使用新用户连接数据库</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">gsql -d stu_test -U stu -W<span class="string">&#x27;Bigdata@123&#x27;</span> -h 127.0.0.1 -p 5432</span><br></pre></td></tr></table></figure></div>
<h4 id="5opengauss-数据库的使用"><a class="markdownIt-Anchor" href="#5opengauss-数据库的使用"></a> 5.openGauss 数据库的使用</h4>
<h5 id="基本操作"><a class="markdownIt-Anchor" href="#基本操作"></a> 基本操作</h5>
<ul>
<li>
<p>使用<code>\c dbname</code>切换数据库（dbname为数据库名称）</p>
</li>
<li>
<p>使用<code>\l</code>查看数据库系统的数据库列表</p>
<p>也可以通过<code>SELECT datname FROM pg_database;</code>的方式通过系统表查询数据库列表</p>
</li>
<li>
<p>使用<code>\dt</code>列举数据表，如果当前数据库内还没有数据表，则输出<code>No relations found.</code></p>
<p>使用<code>\d+</code>列举所有数据表、视图和索引</p>
<p>使用<code>\d+ tablename</code>查看指定数据表的属性</p>
<p>使用<code>\dn</code>列举架构（schema）</p>
<p>使用<code>\di</code>查看索引</p>
</li>
<li>
<p>使用<code>\db</code>查询表空间，也可通过<code>SELECT spcname FROM pg_tablespace;</code>实现</p>
</li>
<li>
<p>查看数据库用户列表<code>SELECT * FROM pg_user;</code></p>
</li>
<li>
<p>查看用户属性<code>SELECT * FROM pg_authid;</code></p>
</li>
<li>
<p>查看所有角色<code>SELECT * FROM PG_ROLES;</code></p>
</li>
<li>
<p>使用<code>\c - username</code>切换到其他数据库用户</p>
</li>
<li>
<p>使用<code>\q</code>命令退出数据库</p>
</li>
</ul>
<h5 id="创建-schema"><a class="markdownIt-Anchor" href="#创建-schema"></a> 创建 schema</h5>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> schema stu <span class="keyword">authorization</span> stu;</span><br></pre></td></tr></table></figure></div>
<h5 id="创建数据表"><a class="markdownIt-Anchor" href="#创建数据表"></a> 创建数据表</h5>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> stu_table (id <span class="type">int</span>);</span><br></pre></td></tr></table></figure></div>
<h5 id="向表中添加数据"><a class="markdownIt-Anchor" href="#向表中添加数据"></a> 向表中添加数据</h5>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stu_table <span class="keyword">values</span> (<span class="number">100</span>);</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> stu_table; # 查看数据表内容</span><br></pre></td></tr></table></figure></div>
<p>sql语法在大部分数据库管理系统（RDBMS）之间是通用的，更多sql语法可参考笔者的另一篇文章<a href="https://www.entropy-tree.top/2022/08/21/MySQL-Base/">MySQL基础</a></p>
<p>注意：<code>Postgresql</code>对大小写不敏感，使用sql语句创建出来的数据库、数据表的名称以及数据内容等默认全转换为小写字母，如果需要严格匹配字母大小写，请在编写sql语句时用英文双引号<code>&quot;&quot;</code>包围需要指定大小写的数据库、数据表的名称以及数据内容等。</p>
<h4 id="6图形化数据库连接工具"><a class="markdownIt-Anchor" href="#6图形化数据库连接工具"></a> 6.图形化数据库连接工具</h4>
<p>这里笔者参考了<a class="link"   href="https://zhuanlan.zhihu.com/p/366765114" >三款linux上可用的数据库客户端软件 | 知乎(zhihu.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，找到了几款linux平台上开源的数据库连接工具。这里以 <a class="link"   href="https://github.com/dbgate/dbgate" >DbGate <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 为例，其他连接工具也是类似的配置流程。</p>
<p>更多数据库连接工具推荐</p>
<p><a class="link"   href="https://zhuanlan.zhihu.com/p/160835224" >开源 5 款超好用的数据库 GUI 带你玩转 MongoDB、Redis、SQL 数据库 | 知乎(zhihu.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://zhuanlan.zhihu.com/p/532594566" >8个适用于 Linux 管理员的最佳MySQL/MariaDB GUI 工具 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h5 id="安装工具"><a class="markdownIt-Anchor" href="#安装工具"></a> 安装工具</h5>
<p>在<code>Archlinux</code>下可通过以下命令直接安装</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">yay -S dbgate-bin</span><br></pre></td></tr></table></figure></div>
<p>大致界面如下</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/03/05/opengauss-env-build/image-20230305214325422.png"
                      class="" title="image-20230305214325422"
                >
<h5 id="连接配置"><a class="markdownIt-Anchor" href="#连接配置"></a> 连接配置</h5>
<p>File —&gt; Add connection 添加一个新的连接</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/03/05/opengauss-env-build/image-20230305215251057.png"
                      class="" title="image-20230305215251057"
                >
<p>填写配置，其中<code>Connection type</code>设置为<code>PostgreSQL</code>，<code>Port</code>为docker映射的主机端口号，<code>User</code>和<code>Password</code>是前面新创建的数据库用户的名称和密码。最后用<code>Test</code>测试连接是否成功，用<code>Save</code>保存连接配置，用<code>Connect</code>连接数据库</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/03/05/opengauss-env-build/image-20230305215817927.png"
                      class="" title="image-20230305215817927"
                >
<p>最终连接结果如下</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/03/05/opengauss-env-build/image-20230305220707871.png"
                      class="" title="image-20230305220707871"
                >
<h5 id="编写-sql"><a class="markdownIt-Anchor" href="#编写-sql"></a> 编写 SQL</h5>
<p>File —&gt; New query 新建查询（.sql文件），在该文件中编写具体的sql语句。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/03/05/opengauss-env-build/image-20230305221246267.png"
                      class="" title="image-20230305221246267"
                >
<p>或者选中对应的数据库新建查询，确保新建查询和具体的数据库对应</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/03/05/opengauss-env-build/image-20230305225943364.png"
                      class="" title="image-20230305225943364"
                >
<p>编写并执行SQL语句</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/03/05/opengauss-env-build/image-20230305232407586.png"
                      class="" title="image-20230305232407586"
                >
<h4 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h4>
<p><a class="link"   href="https://www.modb.pro/db/27152" >opengauss docker安装 | 墨天轮(modb.pro) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://hub.docker.com/r/enmotech/opengauss" >enmotech/opengauss | dockerhub(hub.docker.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://www.modb.pro/doc/4656" >opengauss docker从环境搭建到运行 | 墨天轮(modb.pro) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://blog.csdn.net/zhuyue_shenfeng/article/details/116056437" >openGauss数据库基本操作 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>openGauss</tag>
      </tags>
  </entry>
  <entry>
    <title>分治法与大数乘法</title>
    <url>/2023/03/21/partition-calculate-bigdata/</url>
    <content><![CDATA[<p>使用分治法解决大数乘法问题<span id="more"></span></p>
<h2 id="问题分析"><a class="markdownIt-Anchor" href="#问题分析"></a> 问题分析</h2>
<p>大数乘法问题，由于不限制数据的大小，使用基本数据类型无法直接计算超过其最大表示范围的数据。因此需要考虑对大数进行<strong>分解</strong>。</p>
<p>首先观察一下，乘法最基础的计算方法——列竖式。以<code>999*999</code>为例</p>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">十万</th>
<th style="text-align:center">万</th>
<th style="text-align:center">千</th>
<th style="text-align:center">百</th>
<th style="text-align:center">十</th>
<th style="text-align:center">个</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">9</td>
<td style="text-align:center">9</td>
<td style="text-align:center">9</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">9</td>
<td style="text-align:center">9</td>
<td style="text-align:center">9</td>
</tr>
<tr>
<td style="text-align:center">9*9</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">8</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">90*9</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">8</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">900*9</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">8</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">9*90</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">8</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">90*90</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">8</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">900*90</td>
<td style="text-align:center"></td>
<td style="text-align:center">8</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">9*900</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">8</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">90*900</td>
<td style="text-align:center"></td>
<td style="text-align:center">8</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">900*900</td>
<td style="text-align:center">8</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">9</td>
<td style="text-align:center">9</td>
<td style="text-align:center">8</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
</tr>
</tbody>
</table>
<p>可以看到大数乘法被分解为了<strong>多步简单的计算</strong>，且每步计算是<strong>相互独立的</strong>，最后只需要将多步计算的结果累加即可。</p>
<h2 id="方法引入"><a class="markdownIt-Anchor" href="#方法引入"></a> 方法引入</h2>
<h3 id="分治法"><a class="markdownIt-Anchor" href="#分治法"></a> 分治法</h3>
<h4 id="思想"><a class="markdownIt-Anchor" href="#思想"></a> 思想</h4>
<p>将一个难以直接解决的大问题，分割成一些规模较小的相同问题，以便各个击破，分而治之。</p>
<h4 id="适用情况"><a class="markdownIt-Anchor" href="#适用情况"></a> 适用情况</h4>
<p>分治法能够解决的问题具有以下特征</p>
<ol>
<li>该问题的规模缩小到一定的程度就可以很容易地解决。</li>
<li>问题可以分解为多个规模较小的相同问题，即该问题具有<a class="link"   href="https://zhuanlan.zhihu.com/p/107755780" >最优子结构 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>。</li>
<li>将该问题所分解出的子问题的解合并就可以得到该问题的解。</li>
<li>该问题所分解出的各个子问题是相互独立的，即子问题之间不存在公共性的问题。</li>
</ol>
<p>特征1是大多数问题都能满足的</p>
<p>特征2是使用分治法的<strong>前提</strong>，也是大部分问题能够满足的</p>
<p>特征3是<strong>最关键的</strong>，能否在该问题上使用分治法<strong>完全取决于特征3</strong></p>
<p>特征4涉及到分治法的<strong>效率问题</strong>，如果子问题之间不是相互独立的，则分治法需要重复地解决公共的问题，降低效率。针对这个效率问题，就设计出了<strong>动态规划法</strong>来应对具有重叠子问题的最优子结构问题。</p>
<h4 id="使用步骤"><a class="markdownIt-Anchor" href="#使用步骤"></a> 使用步骤</h4>
<ol>
<li>将原问题分解为多个规模较小、相互独立且和原问题形式相同的子问题。</li>
<li>若子问题规模足够小则直接解决，否则使用<strong>递归</strong>进一步分解子问题直到能够解决为止。</li>
<li>将多个子问题的解返回，通过递归合并为原问题的解。</li>
</ol>
<h2 id="方法实现"><a class="markdownIt-Anchor" href="#方法实现"></a> 方法实现</h2>
<p>假设有大数a（长度为n）和b（长度为m）。这里使用二分法将大数进行拆分，则大数a、b可拆分为</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>a</mi><mo>=</mo><msub><mi>a</mi><mn>1</mn></msub><mo>∗</mo><mn>1</mn><msup><mn>0</mn><mrow><mi>n</mi><mi mathvariant="normal">/</mi><mn>2</mn></mrow></msup><mo>+</mo><msub><mi>a</mi><mn>0</mn></msub><mspace linebreak="newline"></mspace><mi>b</mi><mo>=</mo><msub><mi>b</mi><mn>1</mn></msub><mo>∗</mo><mn>1</mn><msup><mn>0</mn><mrow><mi>m</mi><mi mathvariant="normal">/</mi><mn>2</mn></mrow></msup><mo>+</mo><msub><mi>b</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">a=a_1*10^{n/2}+a_0\\
b=b_1*10^{m/2}+b_0
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.61528em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.0213299999999998em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mord mtight">/</span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.0213299999999998em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mord mtight">/</span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p>
<p>则</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right" columnspacing=""><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>a</mi><mo>∗</mo><mi>b</mi><mo>=</mo><mo stretchy="false">(</mo><msub><mi>a</mi><mn>1</mn></msub><mo>∗</mo><mn>1</mn><msup><mn>0</mn><mrow><mi>n</mi><mi mathvariant="normal">/</mi><mn>2</mn></mrow></msup><mo>+</mo><msub><mi>a</mi><mn>0</mn></msub><mo stretchy="false">)</mo><mo>∗</mo><mo stretchy="false">(</mo><msub><mi>b</mi><mn>1</mn></msub><mo>∗</mo><mn>1</mn><msup><mn>0</mn><mrow><mi>m</mi><mi mathvariant="normal">/</mi><mn>2</mn></mrow></msup><mo>+</mo><msub><mi>b</mi><mn>0</mn></msub><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mo>=</mo><msub><mi>a</mi><mn>1</mn></msub><mo>∗</mo><msub><mi>b</mi><mn>1</mn></msub><mo>∗</mo><mn>1</mn><msup><mn>0</mn><mrow><mi>n</mi><mi mathvariant="normal">/</mi><mn>2</mn><mo>+</mo><mi>m</mi><mi mathvariant="normal">/</mi><mn>2</mn></mrow></msup><mo>+</mo><msub><mi>a</mi><mn>1</mn></msub><mo>∗</mo><msub><mi>b</mi><mn>0</mn></msub><mo>∗</mo><mn>1</mn><msup><mn>0</mn><mrow><mi>n</mi><mi mathvariant="normal">/</mi><mn>2</mn></mrow></msup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mo>+</mo><msub><mi>a</mi><mn>0</mn></msub><mo>∗</mo><msub><mi>b</mi><mn>1</mn></msub><mo>∗</mo><mn>1</mn><msup><mn>0</mn><mrow><mi>m</mi><mi mathvariant="normal">/</mi><mn>2</mn></mrow></msup><mo>+</mo><msub><mi>a</mi><mn>0</mn></msub><mo>∗</mo><msub><mi>b</mi><mn>0</mn></msub></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}
a*b=(a_1*10^{n/2}+a_0)*(b_1*10^{m/2}+b_0)\\
=a_1*b_1*10^{n/2+m/2}+a_1*b_0*10^{n/2}\\+a_0*b_1*10^{m/2}+a_0*b_0
\end{aligned}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.7940000000000005em;vertical-align:-2.1470000000000002em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6470000000000002em;"><span style="top:-4.7090000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mord mtight">/</span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mord mtight">/</span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-3.111em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mord mtight">/</span><span class="mord mtight">2</span><span class="mbin mtight">+</span><span class="mord mathnormal mtight">m</span><span class="mord mtight">/</span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mord mtight">/</span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span style="top:-1.513em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">+</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mord mtight">/</span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1470000000000002em;"><span></span></span></span></span></span></span></span></span></span></span></span></p>
<p>可以发现大数乘法分解成了四个小数乘法，即<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mn>1</mn></msub><mo>∗</mo><msub><mi>b</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">a_1*b_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61528em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>、<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mn>1</mn></msub><mo>∗</mo><msub><mi>b</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">a_1*b_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61528em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>、<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mn>0</mn></msub><mo>∗</mo><msub><mi>b</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">a_0*b_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61528em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>、<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mn>0</mn></msub><mo>∗</mo><msub><mi>b</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">a_0*b_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61528em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>。如果分解出来的数字还是过大可以进一步分解。这里考虑将大数a、b分解到只有一位数字的规模进行求解。</p>
<h3 id="方法函数设计"><a class="markdownIt-Anchor" href="#方法函数设计"></a> 方法函数设计</h3>
<p>函数原型：以字符串类型传递两个大数</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">string <span class="title">cal</span><span class="params">(string, string)</span></span>;</span><br></pre></td></tr></table></figure></div>
<p>先设计对较小规模的方法处理，判断两个字符串长度，将两个字符串转为<code>int</code>进行计算之后再转回字符串返回</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (a.<span class="built_in">length</span>() &lt; <span class="number">2</span> &amp;&amp; b.<span class="built_in">length</span>() &lt; <span class="number">2</span>) &#123;</span><br><span class="line">  <span class="type">int</span> ai = <span class="built_in">stoi</span>(a);</span><br><span class="line">  <span class="type">int</span> bi = <span class="built_in">stoi</span>(b);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">to_string</span>(ai * bi);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>再设计递归表达式，这里使用二分法分解大数。</p>
<p>二分法获取大数的前半部分和后半部分，主要通过<code>substr</code>函数实现。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 长度对半分</span></span><br><span class="line"><span class="type">int</span> ahalflen = a.<span class="built_in">length</span>() / <span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> bhalflen = b.<span class="built_in">length</span>() / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 大整数分成前半部分和后半部分</span></span><br><span class="line">string ahead = <span class="string">&quot;0&quot;</span>;</span><br><span class="line">string atail = <span class="string">&quot;0&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (a.<span class="built_in">length</span>() &gt; ahalflen &amp;&amp; ahalflen &gt; <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="comment">// substr(pos, len) 截取一个字符串从pos位置开始，长度为len的部分</span></span><br><span class="line">  ahead = a.<span class="built_in">substr</span>(<span class="number">0</span>, ahalflen);</span><br><span class="line">  atail = a.<span class="built_in">substr</span>(ahalflen, a.<span class="built_in">length</span>() - ahalflen);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  ahead = <span class="string">&quot;0&quot;</span>;</span><br><span class="line">  atail = a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">string bhead = <span class="string">&quot;0&quot;</span>;</span><br><span class="line">string btail = <span class="string">&quot;0&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (b.<span class="built_in">length</span>() &gt; bhalflen &amp;&amp; bhalflen &gt; <span class="number">0</span>) &#123;</span><br><span class="line">  bhead = b.<span class="built_in">substr</span>(<span class="number">0</span>, bhalflen);</span><br><span class="line">  btail = b.<span class="built_in">substr</span>(bhalflen, b.<span class="built_in">length</span>() - bhalflen);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  bhead = <span class="string">&quot;0&quot;</span>;</span><br><span class="line">  btail = b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>递归表达式的设计，参考前面将大数a、b的乘法分解为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mn>1</mn></msub><mo>∗</mo><msub><mi>b</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">a_1*b_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61528em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>、<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mn>1</mn></msub><mo>∗</mo><msub><mi>b</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">a_1*b_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61528em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>、<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mn>0</mn></msub><mo>∗</mo><msub><mi>b</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">a_0*b_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61528em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>、<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mn>0</mn></msub><mo>∗</mo><msub><mi>b</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">a_0*b_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61528em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>四个乘法，这里也设计四个递归表达式对应四个乘法。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line">string ahbh = <span class="built_in">cal</span>(ahead, bhead);</span><br><span class="line">string atbt = <span class="built_in">cal</span>(atail, btail);</span><br><span class="line">string ahbt = <span class="built_in">cal</span>(ahead, btail);</span><br><span class="line">string atbh = <span class="built_in">cal</span>(atail, bhead);</span><br></pre></td></tr></table></figure></div>
<p>对乘法的解进行相应的补位。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line">ahbh.<span class="built_in">append</span>((a.<span class="built_in">length</span>() - ahalflen) + (b.<span class="built_in">length</span>() - bhalflen), <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">ahbt.<span class="built_in">append</span>(a.<span class="built_in">length</span>() - ahalflen, <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">atbh.<span class="built_in">append</span>(b.<span class="built_in">length</span>() - bhalflen, <span class="string">&#x27;0&#x27;</span>);</span><br></pre></td></tr></table></figure></div>
<p>将四个乘法的解合并并返回，其中<code>add</code>函数是自定义设计的用于大数加法计算的函数</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line">string res = <span class="string">&quot;&quot;</span>;</span><br><span class="line">res = <span class="built_in">add</span>(ahbh, ahbt);</span><br><span class="line">res = <span class="built_in">add</span>(res, atbh);</span><br><span class="line">res = <span class="built_in">add</span>(res, atbt);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> res;</span><br></pre></td></tr></table></figure></div>
<p>关于<code>add</code>函数的设计思路：使用<code>int</code>数组从后往前依次存储大数的每一位数，同时最后的<code>int</code>数组根据实际情况额外存储一位因进位而产生的数字。</p>
<p>具体流程</p>
<p>获取两个大数中最大的长度，反转两个大数字符串从个位数开始计算。</p>
<p>每次计算取出对应位数上的数字转为<code>int</code>进行计算，判断其值是否需要做进位处理。</p>
<p>计算完成后，由于此时字符串是反转的状态，还需要对字符串进行一次反转。</p>
<p>这里的反转的循环从后往前，去除掉高位上不需要的0，同时使用<code>zeroStart</code>来处理需要保留的中间部分的0，将需要保留的数字从后往前拼接起来并返回计算结果。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">string <span class="title">add</span><span class="params">(string a, string b)</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> maxlen = <span class="built_in">max</span>(a.<span class="built_in">length</span>(), b.<span class="built_in">length</span>());</span><br><span class="line">  <span class="type">int</span> *sum = <span class="keyword">new</span> <span class="type">int</span>[maxlen]();</span><br><span class="line"></span><br><span class="line">  <span class="built_in">reverse</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>());</span><br><span class="line">  <span class="built_in">reverse</span>(b.<span class="built_in">begin</span>(), b.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; maxlen; i++) &#123;</span><br><span class="line">    <span class="type">int</span> a_bit = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> b_bit = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; a.<span class="built_in">length</span>()) &#123;</span><br><span class="line">      <span class="comment">// string(num, c) 生成一个字符串，包含num个c字符</span></span><br><span class="line">      a_bit = <span class="built_in">stoi</span>(<span class="built_in">string</span>(<span class="number">1</span>, a.<span class="built_in">at</span>(i)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (i &lt; b.<span class="built_in">length</span>()) &#123;</span><br><span class="line">      b_bit = <span class="built_in">stoi</span>(<span class="built_in">string</span>(<span class="number">1</span>, b.<span class="built_in">at</span>(i)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sum[i] += (a_bit + b_bit);</span><br><span class="line">    <span class="keyword">if</span> (i &lt; maxlen - <span class="number">1</span> &amp;&amp; sum[i] &gt; <span class="number">9</span>) &#123;</span><br><span class="line">      sum[i + <span class="number">1</span>] = sum[i] / <span class="number">10</span>;</span><br><span class="line">      sum[i] %= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  string res = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="type">bool</span> zeroStart = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = maxlen - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">    <span class="keyword">if</span> (sum[i] == <span class="number">0</span> &amp;&amp; zeroStart) &#123;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    zeroStart = <span class="literal">false</span>;</span><br><span class="line">    res.<span class="built_in">append</span>(<span class="built_in">to_string</span>(sum[i]));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>通过<code>add</code>函数和<code>cal</code>函数就能实现任意大数的乘法运算，解题的关键在于考虑将两个大数的乘法分解为多个小数的乘法。</p>
<h2 id="源代码"><a class="markdownIt-Anchor" href="#源代码"></a> 源代码</h2>
<p>完整源代码参考如下</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">add</span><span class="params">(string a, string b)</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> maxlen = <span class="built_in">max</span>(a.<span class="built_in">length</span>(), b.<span class="built_in">length</span>());</span><br><span class="line">  <span class="type">int</span> *sum = <span class="keyword">new</span> <span class="type">int</span>[maxlen]();</span><br><span class="line"></span><br><span class="line">  <span class="built_in">reverse</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>());</span><br><span class="line">  <span class="built_in">reverse</span>(b.<span class="built_in">begin</span>(), b.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; maxlen; i++) &#123;</span><br><span class="line">    <span class="type">int</span> a_bit = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> b_bit = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; a.<span class="built_in">length</span>()) &#123;</span><br><span class="line">      <span class="comment">// string(num, c) 生成一个字符串，包含num个c字符</span></span><br><span class="line">      a_bit = <span class="built_in">stoi</span>(<span class="built_in">string</span>(<span class="number">1</span>, a.<span class="built_in">at</span>(i)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (i &lt; b.<span class="built_in">length</span>()) &#123;</span><br><span class="line">      b_bit = <span class="built_in">stoi</span>(<span class="built_in">string</span>(<span class="number">1</span>, b.<span class="built_in">at</span>(i)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sum[i] += (a_bit + b_bit);</span><br><span class="line">    <span class="keyword">if</span> (i &lt; maxlen - <span class="number">1</span> &amp;&amp; sum[i] &gt; <span class="number">9</span>) &#123;</span><br><span class="line">      sum[i + <span class="number">1</span>] = sum[i] / <span class="number">10</span>;</span><br><span class="line">      sum[i] %= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  string res = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="type">bool</span> zeroStart = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = maxlen - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">    <span class="keyword">if</span> (sum[i] == <span class="number">0</span> &amp;&amp; zeroStart) &#123;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    zeroStart = <span class="literal">false</span>;</span><br><span class="line">    res.<span class="built_in">append</span>(<span class="built_in">to_string</span>(sum[i]));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">cal</span><span class="params">(string a, string b)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 规模足够小直接返回结果</span></span><br><span class="line">  <span class="keyword">if</span> (a.<span class="built_in">length</span>() &lt; <span class="number">2</span> &amp;&amp; b.<span class="built_in">length</span>() &lt; <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="type">int</span> ai = <span class="built_in">stoi</span>(a);</span><br><span class="line">    <span class="type">int</span> bi = <span class="built_in">stoi</span>(b);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">to_string</span>(ai * bi);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 长度对半分</span></span><br><span class="line">  <span class="type">int</span> ahalflen = a.<span class="built_in">length</span>() / <span class="number">2</span>;</span><br><span class="line">  <span class="type">int</span> bhalflen = b.<span class="built_in">length</span>() / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 大整数分成前半部分和后半部分</span></span><br><span class="line">  string ahead = <span class="string">&quot;0&quot;</span>;</span><br><span class="line">  string atail = <span class="string">&quot;0&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (a.<span class="built_in">length</span>() &gt; ahalflen &amp;&amp; ahalflen &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// substr(pos, len) 截取一个字符串从pos位置开始，长度为len的部分</span></span><br><span class="line">    ahead = a.<span class="built_in">substr</span>(<span class="number">0</span>, ahalflen);</span><br><span class="line">    atail = a.<span class="built_in">substr</span>(ahalflen, a.<span class="built_in">length</span>() - ahalflen);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    ahead = <span class="string">&quot;0&quot;</span>;</span><br><span class="line">    atail = a;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  string bhead = <span class="string">&quot;0&quot;</span>;</span><br><span class="line">  string btail = <span class="string">&quot;0&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span> (b.<span class="built_in">length</span>() &gt; bhalflen &amp;&amp; bhalflen &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    bhead = b.<span class="built_in">substr</span>(<span class="number">0</span>, bhalflen);</span><br><span class="line">    btail = b.<span class="built_in">substr</span>(bhalflen, b.<span class="built_in">length</span>() - bhalflen);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    bhead = <span class="string">&quot;0&quot;</span>;</span><br><span class="line">    btail = b;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  string ahbh = <span class="built_in">cal</span>(ahead, bhead);</span><br><span class="line">  string atbt = <span class="built_in">cal</span>(atail, btail);</span><br><span class="line">  string ahbt = <span class="built_in">cal</span>(ahead, btail);</span><br><span class="line">  string atbh = <span class="built_in">cal</span>(atail, bhead);</span><br><span class="line"></span><br><span class="line">  ahbh.<span class="built_in">append</span>((a.<span class="built_in">length</span>() - ahalflen) + (b.<span class="built_in">length</span>() - bhalflen), <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">  ahbt.<span class="built_in">append</span>(a.<span class="built_in">length</span>() - ahalflen, <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">  atbh.<span class="built_in">append</span>(b.<span class="built_in">length</span>() - bhalflen, <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  string res = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  res = <span class="built_in">add</span>(ahbh, ahbt);</span><br><span class="line">  res = <span class="built_in">add</span>(res, atbh);</span><br><span class="line">  res = <span class="built_in">add</span>(res, atbt);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  string a, b;</span><br><span class="line">  cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">  cout &lt;&lt; <span class="built_in">cal</span>(a, b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h2>
<p><a class="link"   href="https://zhuanlan.zhihu.com/p/305669278" >看了就会的大整数乘法运算与分治算法 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://blog.csdn.net/weixin_43872728/article/details/101082875" >分治算法详解 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>分治</tag>
      </tags>
  </entry>
  <entry>
    <title>在linux上启用QEMU/KVM</title>
    <url>/2023/09/05/qemu-kvm/</url>
    <content><![CDATA[<p>虚拟机的起源可追溯到1966年IBM的CP-40和CP-67虚拟机操作系统，虚拟化技术最初是为了解决大型系统中的资源利用率问题而开发的。<span id="more"></span>而发展到了现在，无论是在大型企业上还是在个人电脑上，都会以某种方式使用到虚拟机和虚拟化技术。</p>
<p>不过本文的目的是介绍linux平台上的虚拟机QEMU/KVM，学习QEMU/KVM的简单配置。</p>
<p>这里笔者的宿主系统是<code>Archlinux</code>、<code>x86_64</code>架构。</p>
<h3 id="qemukvm环境搭建"><a class="markdownIt-Anchor" href="#qemukvm环境搭建"></a> qemu/kvm环境搭建</h3>
<p>linux内核中有KVM内核模块，这使其在linux平台上拥有相对出色的性能。不过KVM能否使用还要看硬件是否支持。</p>
<p>执行以下命令查看系统架构是否为<strong>x86_64</strong></p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">uname</span> -m</span><br></pre></td></tr></table></figure></div>
<p>执行以下命令检测硬件虚拟化支持</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo lscpu</span><br></pre></td></tr></table></figure></div>
<p>确认硬件环境没有问题之后，还需要下载相关的工具包。KVM并不能单独使用，通常配合QEMU使用。</p>
<p>安装QEMU等工具包，命令如下</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pacman -S qemu-base virt-manager libvirt virt-viewer dnsmasq vde2 bridge-utils openbsd-netcat ebtables libguestfs</span><br><span class="line"><span class="comment"># 关于qemu还可以选择qemu-full包，支持更多的架构</span></span><br></pre></td></tr></table></figure></div>
<p>以上只是列举了所有可能用到的包，这些包并不需要全部安装，下面进一步说明</p>
<ul>
<li>
<p>qemu：开源的机器模拟器和虚拟机。安装这个包之后，其实已经可以用命令行启动虚拟机了，但是所有的操作都得通过命令行实现。</p>
</li>
<li>
<p>libvirt：用于控制KVM、QEMU等虚拟化引擎的一组软件的汇集。</p>
<ul>
<li>
<p>virt-manager：libvirt的图形化管理工具，是一个全功能的虚拟机管理程序。</p>
</li>
<li>
<p>virt-viewer：更轻量的libvirt的图形化工具，主要用于查看虚拟机的图形控制台，功能没有virt-manager全面。也就说虚拟机的创建还是在命令行完成。</p>
<blockquote>
<p>可以根据需求在virt-manager和virt-viewer中选择一个安装。virt-manager包含了virt-viewer的功能。</p>
</blockquote>
</li>
<li>
<p>dnsmasq：用于虚拟机的NAT/DHCP网络。</p>
</li>
<li>
<p>bridge-utils：用于虚拟机桥接网络。</p>
</li>
<li>
<p>openbsd-netcat：用于多虚拟机之间建立TCP/IP连接。</p>
</li>
<li>
<p>vde2：以太网虚拟化，用于模拟复杂网络环境。</p>
</li>
<li>
<p>ebtables：桥接防火墙，用于控制多虚拟机之间的流量。</p>
</li>
</ul>
</li>
<li>
<p>libguestfs：虚拟机磁盘镜像处理工具，用于查看和修改虚拟机镜像、转换镜像格式等。具体使用参考这篇<a class="link"   href="https://thiscute.world/posts/qemu-kvm-usage/" >文章 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</li>
</ul>
<p>如果只是需要简单地使用qemu创建单一虚拟机，那么安装以下包即可。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pacman -S qemu-base libvirt virt-manager dnsmasq bridge-utils</span><br></pre></td></tr></table></figure></div>
<h3 id="启用嵌套虚拟化可选"><a class="markdownIt-Anchor" href="#启用嵌套虚拟化可选"></a> 启用嵌套虚拟化(可选)</h3>
<p>嵌套虚拟化，即在虚拟机里嵌套虚拟机，这个可根据实际需求选择是否启用。相关命令如下</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启用嵌套虚拟化</span></span><br><span class="line">sudo modprobe -r kvm_intel</span><br><span class="line">sudo modprobe kvm_intel nested=1</span><br><span class="line"><span class="comment"># 验证嵌套虚拟化，输出类似Y或1的字符则表示成功</span></span><br><span class="line"><span class="built_in">cat</span> /sys/module/kvm_intel/parameters/nested</span><br></pre></td></tr></table></figure></div>
<h3 id="非root用户使用qemukvm虚拟化"><a class="markdownIt-Anchor" href="#非root用户使用qemukvm虚拟化"></a> 非root用户使用qemu/kvm虚拟化</h3>
<p>qemu/kvm默认需要root权限才能使用。为了方便使用，可以编辑配置文件，配置文件位于<code>/etc/libvirt/libvirtd.conf</code>(另外还有一个<code>libvirt.conf</code>文件，注意不要混淆)。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/libvirt/libvirtd.conf</span><br></pre></td></tr></table></figure></div>
<ol>
<li>
<p>找到<code>unix_sock_group = &quot;libvirt&quot;</code>，取消这一行的注释，允许<code>libvirt</code>组的用户使用unix套接字。</p>
</li>
<li>
<p>找到<code>unix_sock_rw_perms = &quot;0770&quot;</code>，取消这一行的注释，允许用户读写unix套接字。</p>
</li>
</ol>
<p>将当前普通用户添加到libvirt组，<code>$USER</code>会获取当前用户的名称。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo usermod -aG libvirt <span class="variable">$USER</span></span><br></pre></td></tr></table></figure></div>
<p>启动libvirtd服务</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> --now libvirtd</span><br></pre></td></tr></table></figure></div>
<p>启动virt-manager图形界面</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">virt-manager</span><br></pre></td></tr></table></figure></div>
<h3 id="补充"><a class="markdownIt-Anchor" href="#补充"></a> 补充</h3>
<h4 id="kvm和qemu的关系"><a class="markdownIt-Anchor" href="#kvm和qemu的关系"></a> kvm和qemu的关系</h4>
<ul>
<li>qemu本身是跨平台的，它并不依赖于kvm内核模块，可以自行选择单独工作或者是启用kvm模块辅助工作，kvm相当于qemu的性能优化插件。只是kvm是linux内核模块，因此qemu在linux上的体验可能是最好的。</li>
<li>kvm依赖于硬件是否支持虚拟化以及需要使用qemu这样的工具与其交互。</li>
<li>kvm是为x86架构量身定做的，启用了kvm的虚拟机，意味着qemu的跨平台虚拟化会受到限制，但是性能会得到明显提升。</li>
<li>不使用kvm虚拟化的qemu虚拟机能够凭借其完整的系统仿真实现最佳的跨平台虚拟化支持，但是系统开销会更高。</li>
</ul>
<h4 id="virtualbox-vmware-or-qemukvm"><a class="markdownIt-Anchor" href="#virtualbox-vmware-or-qemukvm"></a> virtualbox、vmware or qemu/kvm?</h4>
<ul>
<li>virtualbox和vmware已经能够满足大部分的非重度使用用户了，它们本身的使用易于上手，相关的学习资料也很多。</li>
<li>qemu/kvm主要是在linux平台上使用，目的是为了在linux上获得更高的性能和效率。在virt-manager的辅助下，使用也很方便。</li>
</ul>
<h3 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h3>
<p><a class="link"   href="https://linux.cn/article-16153-1.html" >什么是虚拟机？| linux中国 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://cn.linux-console.net/?p=3102#gsc.tab=0" >如何在 Manjaro/Archlinux 上安装 KVM/QEMU <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://wiki.archlinuxcn.org/wiki/QEMU" >QEMU | archwiki <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://thiscute.world/posts/qemu-kvm-usage/" >QEMU/KVM 虚拟化环境的搭建与使用 | This Cute World <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://cn.linux-console.net/?p=12047#gsc.tab=0" >QEMU 与 KVM：您应该使用哪一个进行虚拟化？ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>qemu</tag>
        <tag>kvm</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建RSS信息聚合体系</title>
    <url>/2024/03/02/rss-workflow/</url>
    <content><![CDATA[<p>记录搭建 Miniflux + RSSHub + Wallabag + Fluent Reader 组合构成的一个较为完整的聚合信息管理和阅读体系<span id="more"></span></p>
<p>Miniflux 和 RSSHub 为服务端提供内容聚合和RSS源生成，Wallabag 允许保存和稍后阅读网页内容，而 Fluent Reader 作为本地客户端，提供丰富的阅读体验。这个体系涵盖了从内容获取、管理到阅读的全过程，为 RSS 阅读用户提供了一套全面的解决方案。</p>
<h2 id="基础环境"><a class="markdownIt-Anchor" href="#基础环境"></a> 基础环境</h2>
<p>本文使用 docker-compose 搭建所有环境，为了避免一些版本不兼容问题，使用以下方式安装 docker-compose</p>
<p>下载最新 release 版本</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo curl -L https://github.com/docker/compose/releases/download/v2.24.6/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure></div>
<p>其中的<code>2.24.6</code>是截至本文更新时间的 docker-compose 最新的 release，后续可以视情况访问 <a class="link"   href="https://github.com/docker/compose/releases" >docker compose 官方仓库 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>获取最新 release 的信息。</p>
<p>赋予可执行权限</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">chmod</span> +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure></div>
<p>添加环境变量(如果之前没有添加过)</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;PATH=$PATH:/usr/local/bin/docker-compose&#x27;</span> &gt;&gt; ~/.bashrc &amp;&amp; <span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure></div>
<p>检查 docker-compose 版本</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose -v</span><br></pre></td></tr></table></figure></div>
<p><strong>注意：本文的搭建操作均在 docker-compose 2.24.6 版本下完成，低版本会有兼容性问题，无法直接使用本文的 docker-compose.yaml</strong></p>
<h2 id="rsshub-订阅源生成"><a class="markdownIt-Anchor" href="#rsshub-订阅源生成"></a> RSSHub 订阅源生成</h2>
<p>RSSHub 是一个生成订阅源的平台，借助爬虫或类似的技术为那些不提供 RSS 服务的网站生成 RSS 订阅源。</p>
<h3 id="官方示例"><a class="markdownIt-Anchor" href="#官方示例"></a> 官方示例</h3>
<p>可参考官方部署文档，编写以下 docker-compose.yaml</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.9&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">    <span class="attr">rsshub:</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">diygod/rsshub:chromium-bundled</span></span><br><span class="line">        <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&#x27;1200:1200&#x27;</span></span><br><span class="line">        <span class="attr">environment:</span></span><br><span class="line">            <span class="attr">NODE_ENV:</span> <span class="string">production</span></span><br><span class="line">            <span class="attr">CACHE_TYPE:</span> <span class="string">redis</span></span><br><span class="line">            <span class="attr">REDIS_URL:</span> <span class="string">&#x27;redis://redis:6379/&#x27;</span></span><br><span class="line">            <span class="attr">PROXY_URI:</span> <span class="string">&#x27;socks5h://warp-socks:9091&#x27;</span></span><br><span class="line">        <span class="attr">depends_on:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">redis</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">redis:</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">redis:alpine</span></span><br><span class="line">        <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">        <span class="attr">volumes:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">redis-data:/data</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">warp-socks:</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">monius/docker-warp-socks:latest</span></span><br><span class="line">        <span class="attr">privileged:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">        <span class="attr">volumes:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">/lib/modules:/lib/modules</span></span><br><span class="line">        <span class="attr">cap_add:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">NET_ADMIN</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">SYS_MODULE</span></span><br><span class="line">        <span class="attr">sysctls:</span></span><br><span class="line">            <span class="attr">net.ipv6.conf.all.disable_ipv6:</span> <span class="number">0</span></span><br><span class="line">            <span class="attr">net.ipv4.conf.all.src_valid_mark:</span> <span class="number">1</span></span><br><span class="line">        <span class="attr">healthcheck:</span></span><br><span class="line">            <span class="attr">test:</span> [<span class="string">&quot;CMD&quot;</span>, <span class="string">&quot;curl&quot;</span>, <span class="string">&quot;-f&quot;</span>, <span class="string">&quot;https://www.cloudflare.com/cdn-cgi/trace&quot;</span>]</span><br><span class="line">            <span class="attr">interval:</span> <span class="string">30s</span></span><br><span class="line">            <span class="attr">timeout:</span> <span class="string">10s</span></span><br><span class="line">            <span class="attr">retries:</span> <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">    <span class="attr">redis-data:</span></span><br></pre></td></tr></table></figure></div>
<p>在对应目录下执行<code>docker-compose up -d</code>运行。启动完成之后可以访问<code>127.0.0.1:1200</code>或服务器 IP + 1200 端口观察能否访问。</p>
<h3 id="精简版"><a class="markdownIt-Anchor" href="#精简版"></a> 精简版</h3>
<p>去除了 WARP 服务及相关配置，可能导致无法访问严格反爬的订阅源。该版本的目的是为了尊重目标网站的反爬政策以及遵守相关的互联网规则等。</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.9&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">    <span class="attr">rsshub:</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">diygod/rsshub:chromium-bundled</span></span><br><span class="line">        <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&#x27;1200:1200&#x27;</span></span><br><span class="line">        <span class="attr">environment:</span></span><br><span class="line">            <span class="attr">NODE_ENV:</span> <span class="string">production</span></span><br><span class="line">            <span class="attr">CACHE_TYPE:</span> <span class="string">redis</span></span><br><span class="line">            <span class="attr">REDIS_URL:</span> <span class="string">&#x27;redis://redis:6379/&#x27;</span></span><br><span class="line">        <span class="attr">depends_on:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">redis</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">redis:</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">redis:alpine</span></span><br><span class="line">        <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">        <span class="attr">volumes:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">redis-data:/data</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">    <span class="attr">redis-data:</span></span><br></pre></td></tr></table></figure></div>
<p>如果自建的 rsshub 仅供个人使用也可以不对外开放端口，在 miniflux 中直接使用容器的 ip + port 即可，例如<code>172.17.0.1:1200</code>。</p>
<h2 id="miniflux-内容聚合"><a class="markdownIt-Anchor" href="#miniflux-内容聚合"></a> Miniflux 内容聚合</h2>
<p>Miniflux 是一个 RSS 订阅管理的服务端，可以方便地添加、管理各种 RSS 订阅，同时也可以作为一个网页版的 RSS 阅读器使用。此外，Miniflux 还提供了跨平台客户端软件订阅同步的服务。</p>
<h3 id="官方示例-2"><a class="markdownIt-Anchor" href="#官方示例-2"></a> 官方示例</h3>
<p>官方文档的基础示例如下</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">miniflux:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">miniflux/miniflux:latest</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;80:8080&quot;</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="attr">db:</span></span><br><span class="line">        <span class="attr">condition:</span> <span class="string">service_healthy</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DATABASE_URL=postgres://miniflux:secret@db/miniflux?sslmode=disable</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">RUN_MIGRATIONS=1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CREATE_ADMIN=1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ADMIN_USERNAME=admin</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ADMIN_PASSWORD=test123</span></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">postgres:15</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">POSTGRES_USER=miniflux</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">POSTGRES_PASSWORD=secret</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">POSTGRES_DB=miniflux</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">miniflux-db:/var/lib/postgresql/data</span></span><br><span class="line">    <span class="attr">healthcheck:</span></span><br><span class="line">      <span class="attr">test:</span> [<span class="string">&quot;CMD&quot;</span>, <span class="string">&quot;pg_isready&quot;</span>, <span class="string">&quot;-U&quot;</span>, <span class="string">&quot;miniflux&quot;</span>]</span><br><span class="line">      <span class="attr">interval:</span> <span class="string">10s</span></span><br><span class="line">      <span class="attr">start_period:</span> <span class="string">30s</span></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">miniflux-db:</span></span><br></pre></td></tr></table></figure></div>
<p>配置完成后，在对应目录下执行<code>docker-compose up -d</code>运行。</p>
<h3 id="修改版"><a class="markdownIt-Anchor" href="#修改版"></a> 修改版</h3>
<p>以下是笔者使用的参考自<a class="link"   href="https://blog.yfi.moe/post/rsshub-miniflux/" >完整的 RSS 解决方案：自建 RSSHub 与 Miniflux <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>一文的 docker-compose.yaml 配置，修改了映射端口和增加了一些可选配置，<strong>其中的默认用户名和密码由自己设定，最好在第一次登录后立即修改</strong>。</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.9&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">miniflux:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">miniflux/miniflux:latest</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8080:8080&quot;</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="attr">db:</span></span><br><span class="line">        <span class="attr">condition:</span> <span class="string">service_healthy</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DATABASE_URL=postgres://miniflux:secret@db/miniflux?sslmode=disable</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">RUN_MIGRATIONS=1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">FETCH_YOUTUBE_WATCH_TIME=1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CREATE_ADMIN=1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ADMIN_USERNAME=admin</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ADMIN_PASSWORD=test123</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">BASE_URL=http://127.0.0.1:8080</span> <span class="comment"># miniflux 的域名</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">POLLING_FREQUENCY=60</span> <span class="comment"># 每个 feed 的刷新间隔</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">POLLING_PARSING_ERROR_LIMIT=0</span> <span class="comment"># 拉取出错后不会停止拉去，还是会按计划继续拉</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">BATCH_SIZE=100</span> <span class="comment"># 每次拉取的 feed 数量</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">POLLING_SCHEDULER=entry_frequency</span> <span class="comment"># 拉取类型，根据上周的平均更新周期来拉取</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SCHEDULER_ENTRY_FREQUENCY_MAX_INTERVAL=30</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">PROXY_OPTION=all</span> <span class="comment"># 图片代理功能，Miniflux 先把源端的图片缓存到服务器上来，后续就不用客户端去源服务器拉了</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">PROXY_PRIVATE_KEY=password</span> <span class="comment"># 使用客户端缓存过文章，然后某个时间重启了 docker 实例，那么会导致图片无法显示的情况，这是因为每次重启会随机生成 PROXY_PRIVATE_KEY,所以可以增加参数 PROXY_PRIVATE_KEY 固化 key ，便于解决更新、重启等场景下的图片显示问题。</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DATABASE_MAX_CONNS=50</span> <span class="comment"># 增加数据库连接数，对于多图片的 feed 非常有效，可以大幅提升加载和访问速度</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DATABASE_MIN_CONNS=5</span> <span class="comment"># 同上</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">WORKER_POOL_SIZE=10</span>  <span class="comment"># 默认，或适当加大</span></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">postgres:15</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">POSTGRES_USER=miniflux</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">POSTGRES_PASSWORD=secret</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">POSTGRES_DB=miniflux</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">miniflux-db:/var/lib/postgresql/data</span></span><br><span class="line">    <span class="attr">healthcheck:</span></span><br><span class="line">      <span class="attr">test:</span> [<span class="string">&quot;CMD&quot;</span>, <span class="string">&quot;pg_isready&quot;</span>, <span class="string">&quot;-U&quot;</span>, <span class="string">&quot;miniflux&quot;</span>]</span><br><span class="line">      <span class="attr">interval:</span> <span class="string">10s</span></span><br><span class="line">      <span class="attr">start_period:</span> <span class="string">30s</span></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">miniflux-db:</span></span><br></pre></td></tr></table></figure></div>
<p>更多配置参数可以参考<a class="link"   href="https://miniflux.app/docs/configuration.html" >官方文档 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>。启动完成之后可以访问<code>127.0.0.1:8080</code>或服务器 IP + 8080 端口，也可以使用反向代理服务配置一个域名访问。</p>
<p><strong>注意：如果后续需要在多个客户端使用 miniflux 的服务进行同步，则<code>BASE_URL</code>项一定要配置一个互联网可访问的地址。除非你所有的客户端与服务端都处于同一个局域网中，则可以配置一个局域网的地址。</strong></p>
<h3 id="基本操作"><a class="markdownIt-Anchor" href="#基本操作"></a> 基本操作</h3>
<p>登录之后，Miniflux 的默认页面是这样的</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/03/02/rss-workflow/image-20240302171154106.png"
                      class="" title="image-20240302171154106"
                >
<p>先修改用户名和密码，在 Settings 中设置即可。</p>
<p>添加订阅源，例如 RSSHub 文档中提供了 Bing Daily Wallpaper 的路由为<code>/bing</code>，假设本地自建的 RSSHub 地址为<code>172.17.0.1:1200</code>，则订阅源为<code>http://172.17.0.1:1200/bing</code></p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/03/02/rss-workflow/image-20240302172042379.png"
                      class="" title="image-20240302172042379"
                >
<p>添加完成后就能在主页看到订阅信息</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/03/02/rss-workflow/image-20240302172203629.png"
                      class="" title="image-20240302172203629"
                >
<p>这样就完成了基本的订阅，可以查看订阅信息。更多的操作可以自行探索。</p>
<h3 id="补充"><a class="markdownIt-Anchor" href="#补充"></a> 补充</h3>
<p>除了 Miniflux 以外还有<a class="link"   href="https://tt-rss.org/" >Tiny Tiny RSS (ttrss) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>、<a class="link"   href="https://github.com/FreshRSS/FreshRSS" >FreshRSS <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>等 RSS 订阅管理服务端，Miniflux 是极简风格，如果想尝试更多增强配置，可以考虑使用其它的服务端。以下是一些相关的参考资料：</p>
<ul>
<li>
<p><a class="link"   href="https://blognas.hwb0307.com/linux/docker/788" >Docker系列 安装个人RSS服务TTRSS 手机完美适配 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</li>
<li>
<p><a class="link"   href="https://blog.l3zc.com/2023/07/rsshub-freshrss-information-flow/" >重新捡起 RSS：RSSHub + FreshRSS 建立我的信息流 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</li>
</ul>
<h2 id="wallabag-稍后阅读"><a class="markdownIt-Anchor" href="#wallabag-稍后阅读"></a> Wallabag 稍后阅读</h2>
<p>Wallabag 作为一个辅助工具可以和 Miniflux 集成使用，提供更好的使用体验。</p>
<h3 id="官方示例-3"><a class="markdownIt-Anchor" href="#官方示例-3"></a> 官方示例</h3>
<p>参考<a class="link"   href="https://github.com/wallabag/docker" >官方仓库 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>的文档，一份示例的 docker-compose.yaml 配置如下，关于每个配置项的说明可以参考<a class="link"   href="https://hub.docker.com/r/wallabag/wallabag" >docker hub 仓库 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>的文档。</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">wallabag:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">wallabag/wallabag</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_ROOT_PASSWORD=wallaroot</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SYMFONY__ENV__DATABASE_DRIVER=pdo_mysql</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SYMFONY__ENV__DATABASE_HOST=db</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SYMFONY__ENV__DATABASE_PORT=3306</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SYMFONY__ENV__DATABASE_NAME=wallabag</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SYMFONY__ENV__DATABASE_USER=wallabag</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SYMFONY__ENV__DATABASE_PASSWORD=wallapass</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SYMFONY__ENV__DATABASE_CHARSET=utf8mb4</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SYMFONY__ENV__DATABASE_TABLE_PREFIX=&quot;wallabag_&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SYMFONY__ENV__MAILER_DSN=smtp://127.0.0.1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SYMFONY__ENV__FROM_EMAIL=wallabag@example.com</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SYMFONY__ENV__DOMAIN_NAME=https://your-wallabag-instance.wallabag.org</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SYMFONY__ENV__SERVER_NAME=&quot;Your</span> <span class="string">wallabag</span> <span class="string">instance&quot;</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;80&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/opt/wallabag/images:/var/www/wallabag/web/assets/images</span></span><br><span class="line">    <span class="attr">healthcheck:</span></span><br><span class="line">      <span class="attr">test:</span> [<span class="string">&quot;CMD&quot;</span>, <span class="string">&quot;wget&quot;</span> ,<span class="string">&quot;--no-verbose&quot;</span>, <span class="string">&quot;--tries=1&quot;</span>, <span class="string">&quot;--spider&quot;</span>, <span class="string">&quot;http://localhost&quot;</span>]</span><br><span class="line">      <span class="attr">interval:</span> <span class="string">1m</span></span><br><span class="line">      <span class="attr">timeout:</span> <span class="string">3s</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">db</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis</span></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mariadb</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_ROOT_PASSWORD=wallaroot</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/opt/wallabag/data:/var/lib/mysql</span></span><br><span class="line">    <span class="attr">healthcheck:</span></span><br><span class="line">      <span class="attr">test:</span> [<span class="string">&quot;CMD&quot;</span>, <span class="string">&quot;mysqladmin&quot;</span> ,<span class="string">&quot;ping&quot;</span>, <span class="string">&quot;-h&quot;</span>, <span class="string">&quot;localhost&quot;</span>]</span><br><span class="line">      <span class="attr">interval:</span> <span class="string">20s</span></span><br><span class="line">      <span class="attr">timeout:</span> <span class="string">3s</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis:alpine</span></span><br><span class="line">    <span class="attr">healthcheck:</span></span><br><span class="line">      <span class="attr">test:</span> [<span class="string">&quot;CMD&quot;</span>, <span class="string">&quot;redis-cli&quot;</span>, <span class="string">&quot;ping&quot;</span>]</span><br><span class="line">      <span class="attr">interval:</span> <span class="string">20s</span></span><br><span class="line">      <span class="attr">timeout:</span> <span class="string">3s</span></span><br></pre></td></tr></table></figure></div>
<p>配置完成后，在对应目录下执行<code>docker-compose up -d</code>运行。</p>
<h3 id="修改版-2"><a class="markdownIt-Anchor" href="#修改版-2"></a> 修改版</h3>
<p>以下是参考自<a class="link"   href="https://blognas.hwb0307.com/linux/docker/1833" >Docker系列 Wallabag助力个性化网页RSS化 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>的配置</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">wallabag:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">wallabag/wallabag</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_ROOT_PASSWORD=wallaroot</span> <span class="comment"># 自行设置密码</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SYMFONY__ENV__DATABASE_DRIVER=pdo_mysql</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SYMFONY__ENV__DATABASE_HOST=db</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SYMFONY__ENV__DATABASE_PORT=3306</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SYMFONY__ENV__DATABASE_NAME=wallabag</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SYMFONY__ENV__DATABASE_USER=wallabag</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SYMFONY__ENV__DATABASE_PASSWORD=wallapass</span> <span class="comment"># 自行设置密码</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SYMFONY__ENV__DATABASE_CHARSET=utf8mb4</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SYMFONY__ENV__DATABASE_TABLE_PREFIX=&quot;wallabag_&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SYMFONY__ENV__MAILER_DSN=smtp://127.0.0.1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SYMFONY__ENV__FROM_EMAIL=example@example.com</span> <span class="comment"># 自行设置邮箱</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SYMFONY__ENV__DOMAIN_NAME=http://127.0.0.1:8888</span> <span class="comment"># 自定义域名</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SYMFONY__ENV__SERVER_NAME=&quot;wallabag</span> <span class="string">service&quot;</span> <span class="comment"># 服务名称</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8888:80&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./images:/var/www/wallabag/web/assets/images</span></span><br><span class="line">    <span class="attr">healthcheck:</span></span><br><span class="line">      <span class="attr">test:</span> [<span class="string">&quot;CMD&quot;</span>, <span class="string">&quot;wget&quot;</span> ,<span class="string">&quot;--no-verbose&quot;</span>, <span class="string">&quot;--tries=1&quot;</span>, <span class="string">&quot;--spider&quot;</span>, <span class="string">&quot;http://localhost&quot;</span>]</span><br><span class="line">      <span class="attr">interval:</span> <span class="string">1m</span></span><br><span class="line">      <span class="attr">timeout:</span> <span class="string">3s</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">db</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis</span></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mariadb</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_ROOT_PASSWORD=wallaroot</span> <span class="comment"># 这里对应前面同名环境变量的密码</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data:/var/lib/mysql</span></span><br><span class="line">    <span class="attr">healthcheck:</span></span><br><span class="line">      <span class="attr">test:</span> [<span class="string">&quot;CMD&quot;</span>, <span class="string">&quot;mysqladmin&quot;</span> ,<span class="string">&quot;ping&quot;</span>, <span class="string">&quot;-h&quot;</span>, <span class="string">&quot;localhost&quot;</span>]</span><br><span class="line">      <span class="attr">interval:</span> <span class="string">20s</span></span><br><span class="line">      <span class="attr">timeout:</span> <span class="string">3s</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis:alpine</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">healthcheck:</span></span><br><span class="line">      <span class="attr">test:</span> [<span class="string">&quot;CMD&quot;</span>, <span class="string">&quot;redis-cli&quot;</span>, <span class="string">&quot;ping&quot;</span>]</span><br><span class="line">      <span class="attr">interval:</span> <span class="string">20s</span></span><br><span class="line">      <span class="attr">timeout:</span> <span class="string">3s</span></span><br></pre></td></tr></table></figure></div>
<p>配置完成后，在对应目录下执行<code>docker-compose up -d</code>运行。启动完成之后可以访问<code>127.0.0.1:8888</code>或服务器 IP + 8888 端口，也可以使用反向代理服务配置一个域名访问。</p>
<p><strong>注意：wallabag 服务的启动需要一些时间，一开始可能还不能直接访问成功，建议等待几分钟后再尝试访问。</strong></p>
<h3 id="postgres-版本"><a class="markdownIt-Anchor" href="#postgres-版本"></a> postgres 版本</h3>
<p>这里额外提供一份以<code>postgresql</code>作为数据库的配置，用于替换<code>mariadb</code>以支持一些<code>mariadb</code>不支持的系统架构，例如<code>linux/arm/v7</code>架构。如果遇到架构不支持的问题，请尝试以下配置</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">wallabag:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">wallabag/wallabag</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">POSTGRES_PASSWORD=wallaroot</span> <span class="comment"># 自行设置密码  </span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">POSTGRES_USER=wallabag_admin</span> <span class="comment"># 自行设置用户名</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SYMFONY__ENV__DATABASE_DRIVER=pdo_pgsql</span> <span class="comment"># 适用于 pgsql 的驱动</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SYMFONY__ENV__DATABASE_HOST=db</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SYMFONY__ENV__DATABASE_PORT=5432</span> <span class="comment"># pgsql 的默认端口</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SYMFONY__ENV__DATABASE_NAME=wallabag</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SYMFONY__ENV__DATABASE_USER=wallabag</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SYMFONY__ENV__DATABASE_PASSWORD=wallapass</span> <span class="comment"># 自行设置密码</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SYMFONY__ENV__DATABASE_TABLE_PREFIX=&quot;wallabag_&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SYMFONY__ENV__MAILER_DSN=smtp://127.0.0.1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SYMFONY__ENV__FROM_EMAIL=example@example.com</span> <span class="comment"># 自行设置邮箱</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SYMFONY__ENV__DOMAIN_NAME=http://127.0.0.1:8888</span> <span class="comment"># 自定义域名</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SYMFONY__ENV__SERVER_NAME=&quot;wallabag</span> <span class="string">service&quot;</span> <span class="comment"># 服务名称</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8888:80&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./images:/var/www/wallabag/web/assets/images</span></span><br><span class="line">    <span class="attr">healthcheck:</span></span><br><span class="line">      <span class="attr">test:</span> [<span class="string">&quot;CMD&quot;</span>, <span class="string">&quot;wget&quot;</span> ,<span class="string">&quot;--no-verbose&quot;</span>, <span class="string">&quot;--tries=1&quot;</span>, <span class="string">&quot;--spider&quot;</span>, <span class="string">&quot;http://localhost&quot;</span>]</span><br><span class="line">      <span class="attr">interval:</span> <span class="string">1m</span></span><br><span class="line">      <span class="attr">timeout:</span> <span class="string">3s</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">db</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis</span></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">postgres:9.6</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">POSTGRES_PASSWORD=wallaroot</span> <span class="comment"># 这里对应前面同名环境变量的密码  </span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">POSTGRES_USER=wallabag_admin</span> <span class="comment"># 这里对应前面同名环境变量的用户名</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data:/var/lib/mysql</span></span><br><span class="line">    <span class="attr">healthcheck:</span></span><br><span class="line">      <span class="attr">test:</span> [<span class="string">&quot;CMD&quot;</span>, <span class="string">&quot;mysqladmin&quot;</span> ,<span class="string">&quot;ping&quot;</span>, <span class="string">&quot;-h&quot;</span>, <span class="string">&quot;localhost&quot;</span>]</span><br><span class="line">      <span class="attr">interval:</span> <span class="string">20s</span></span><br><span class="line">      <span class="attr">timeout:</span> <span class="string">3s</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis:alpine</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">healthcheck:</span></span><br><span class="line">      <span class="attr">test:</span> [<span class="string">&quot;CMD&quot;</span>, <span class="string">&quot;redis-cli&quot;</span>, <span class="string">&quot;ping&quot;</span>]</span><br><span class="line">      <span class="attr">interval:</span> <span class="string">20s</span></span><br><span class="line">      <span class="attr">timeout:</span> <span class="string">3s</span></span><br></pre></td></tr></table></figure></div>
<h3 id="基础服务配置"><a class="markdownIt-Anchor" href="#基础服务配置"></a> 基础服务配置</h3>
<p>默认的用户名和密码都是<code>wallabag</code>（这个在 docker hub 文档中有说明）</p>
<p>登录之后，先去 Config 中修改 PASSWORD，修改完成后再进行 API 服务的配置。</p>
<h4 id="创建-api-服务"><a class="markdownIt-Anchor" href="#创建-api-服务"></a> 创建 API 服务</h4>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/03/02/rss-workflow/image-20240302185752088.png"
                      class="" title="image-20240302185752088"
                >
<p>创建一个新的客户端，取一个名称，然后创建即可。</p>
<style>.indrtlammowe{zoom: 50%;}</style><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/03/02/rss-workflow/image-20240302185856950.png"
                      class="indrtlammowe" alt="image-20240302185856950"
                >
<p>创建完客户端之后就会提供客户端 ID 和密钥，此时不要直接刷新网页避免重置 ID 和密钥。</p>
<h4 id="配置插件"><a class="markdownIt-Anchor" href="#配置插件"></a> 配置插件</h4>
<p>访问对应浏览器的插件商店，下载同名的 wallabag 插件进行配置，配置说明如下</p>
<style>.wbenqtiecnop{zoom:50%;}</style><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/03/02/rss-workflow/image-20240302191015666.png"
                      class="wbenqtiecnop" alt="image-20240302191015666"
                >
<p>填写完成后获取 token 即可使用。</p>
<h4 id="基础使用"><a class="markdownIt-Anchor" href="#基础使用"></a> 基础使用</h4>
<p>在任意的网页上右键，可以看到 wallabag 的选项，点击之后就会保存当前网页到 wallabage 后台。</p>
<blockquote>
<p>如果浏览器隐藏了插件图标，建议将 wallabag 插件图标显示在浏览器上，方便观察状态。</p>
<p>另外，有些网站无法使用 wallabag 保存，可能是采取了严格的反爬手段。</p>
</blockquote>
<h3 id="miniflux-集成-wallabag"><a class="markdownIt-Anchor" href="#miniflux-集成-wallabag"></a> Miniflux 集成 Wallabag</h3>
<p>在 Wallabag 后台 Config 的 FEEDS 里面进行设置</p>
<style>.ncxywtgctsrb{zoom:50%;}</style><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/03/02/rss-workflow/image-20240302192701866.png"
                      class="ncxywtgctsrb" alt="image-20240302192701866"
                >
<p>生成完 token 后，下面会提供 4 个订阅链接，初始的选项是未读、收藏、归档、全部，按需选择其中几个订阅导入 Miniflux 即可。后面的订阅包含最大项目数按需配置即可。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/03/02/rss-workflow/image-20240302192926038.png"
                      class="" title="image-20240302192926038"
                >
<p>配置完成后保存。</p>
<p>后续对于需要稍后阅读的网页，可以采取 wallabag 保存到后台并生成 RSS 订阅源，由 miniflux 同步 wallabag RSS 订阅源的方式来阅读网页信息。不需要在后台持续挂着网页，并且能很方便地跨平台同步。</p>
<h3 id="补充-2"><a class="markdownIt-Anchor" href="#补充-2"></a> 补充</h3>
<p>关于 miniflux 和 wallabag 的集成其实有两种方式：一种就是使用自建的 wallabag 服务和浏览器插件，然后将订阅源导入 miniflux (也就是前面介绍的方式)；另一种方式是在 miniflux 中直接配置 wallabag，这种配置主要用于实现 miniflux 的离线保存，不过这种方式可能使用得相对较少，大部分用户基本不需要考虑这种方式，简单了解即可。有离线阅读需求的用户可以考虑<a href="#%E5%8F%A6%E4%B8%80%E7%A7%8D%E6%96%B9%E6%A1%88">另一种方案</a>。</p>
<p>根据笔者的个人使用体验，wallabag 的导出功能对于某些格式存在乱码的问题，目前也没有解决方案，参考了网上的一些教程似乎也没有提到这一点，因此可以推断 wallabag 的导出功能几乎没什么使用需求。</p>
<blockquote>
<p>下面这部分内容感兴趣的可以看看，不感兴趣的可以直接转到<a href="#%E5%8F%A6%E4%B8%80%E7%A7%8D%E6%96%B9%E6%A1%88">另一种方案</a>。</p>
</blockquote>
<h4 id="使用-wallabag-服务和浏览器插件然后将订阅源导入-miniflux"><a class="markdownIt-Anchor" href="#使用-wallabag-服务和浏览器插件然后将订阅源导入-miniflux"></a> 使用 Wallabag 服务和浏览器插件，然后将订阅源导入 Miniflux</h4>
<p>这种方法涉及到在 wallabag 和 miniflux 之间手动创建一个连接，具体步骤如下：</p>
<ol>
<li><strong>wallabag 服务和浏览器插件</strong>：通过 wallabag 的浏览器插件，用户可以快速保存他们想要稍后阅读的网页到 wallabag 服务中。</li>
<li><strong>生成订阅源</strong>：wallabag 允许用户生成一个 RSS 订阅源，这个源包含了所有保存在 wallabag 中的文章。</li>
<li><strong>导入 miniflux</strong>：将 wallabag 生成的 RSS 订阅源导入到 miniflux 中，这样就可以在 miniflux 中阅读通过 wallabag 保存的文章了。</li>
</ol>
<p><strong>优点</strong>：这种方式允许用户在 miniflux 中阅读通过 wallabag 保存的文章，同时保持了两个应用的独立性。用户可以利用 wallabag 强大的保存和离线阅读功能，以及 miniflux 高效的 RSS 订阅管理能力。</p>
<p><strong>缺点</strong>：需要手动设置和维护两个应用之间的连接，这可能对一些用户来说稍显复杂。</p>
<h4 id="在-miniflux-中直接配置-wallabag"><a class="markdownIt-Anchor" href="#在-miniflux-中直接配置-wallabag"></a> 在 Miniflux 中直接配置 Wallabag</h4>
<p>miniflux 提供了一个内置的功能，允许用户直接在 miniflux 的设置中配置 wallabag，具体步骤如下：</p>
<ol>
<li>
<p><strong>配置 wallabag</strong>：在 miniflux 的设置中填写 wallabag 的服务地址和用户认证信息。</p>
<blockquote>
<p>这一步填写的信息其实和在浏览器插件配置时填写的信息基本一致。不过这里不需要使用浏览器插件。</p>
</blockquote>
</li>
<li>
<p><strong>一键保存</strong>：阅读 RSS 订阅时，用户可以通过一键操作将感兴趣的文章保存到 wallabag 中，无需离开 miniflux。</p>
</li>
</ol>
<p><strong>优点</strong>：这种方式提供了一个更为紧密的集成，使用户在使用 miniflux 阅读 RSS 订阅的同时，轻松地将文章保存到 wallabag。操作更为便捷，用户体验更佳。</p>
<p><strong>缺点</strong>：这种方式主要是将文章从 miniflux 保存到 wallabag，而不是在 miniflux 中阅读 wallabag 的内容。如果用户想要在 miniflux 中阅读通过 wallabag 保存的文章，这种方式不适用。</p>
<h4 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h4>
<p>选择哪种方式取决于你的具体需求：</p>
<ul>
<li>如果你希望在 miniflux 中阅读通过 wallabag 保存的文章，可以考虑第一种方法。</li>
<li>如果你主要使用 miniflux 阅读 RSS 订阅，并希望有一个快速方便的方式将文章保存到 wallabag 以供离线阅读，那么直接在 miniflux 中配置 wallabag 可能是更好的选择。</li>
</ul>
<p>当然其实也可以考虑同时使用这两种方式，但是需要明确需求以达成最佳的工具组合，让每一个工具专一地负责某一个具体需求，否则会有功能重叠以及增加不必要的管理工作量。以下是一些参考的思路和做法：</p>
<p>wallabag 的最主要的功能是可以<strong>快速地保存当前网页内容</strong>(如果网页不限制 wallabag )并且能在<strong>离线模式下阅读网页</strong>。因此，wallabag 可以负责以下几个需求：</p>
<ul>
<li>专门保存一些你感兴趣的但是并没有专门提供 RSS 订阅的网页或者是没有收录在 RSSHub 的小众网页，然后提供订阅源给 miniflux 使用。</li>
<li>导出你需要进一步阅读或者是需要供以后参考的内容。</li>
</ul>
<p>miniflux 的目的很简单，主要就是管理订阅源以及多平台同步。</p>
<p>关于 miniflux 中的订阅信息如果需要离线阅读，可以考虑以下几种方案：</p>
<ul>
<li>配置 miniflux 内置的 wallabag 集成，之后可以将感兴趣的订阅信息保存到 wallabag 中 (如果配置了 wallabag，会在订阅的位置显示“保存”的选项)。</li>
<li>使用本地客户端，本地客户端提供了一定的离线阅读功能。</li>
</ul>
<p>关于大量订阅信息内容的整理和分类，可以由 miniflux 集中管理，wallabag 负责快速生成一个“稍后阅读”的 RSS 源，然后在 miniflux 中对这个 RSS 源再进行具体的整理和分类。如果遇到希望离线保存的信息，则在 wallabag 中进行导出。</p>
<h4 id="另一种方案"><a class="markdownIt-Anchor" href="#另一种方案"></a> 另一种方案</h4>
<p>使用<a class="link"   href="https://github.com/Kenshin/simpread" >simpread <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>(一个浏览器插件)提供的网页导出功能来实现离线阅读的需求，不过这个插件本身需要一定学习成本，可以根据需求专门学习其中的几个功能。</p>
<p>这样就有一套明确的工作流：使用 RSSHub 生成一些知名网站的 RSS 源，借助 Wallabag 收藏一些没有 RSS 源提供的网页，两者组合提供较为丰富的 RSS 订阅源；使用 Miniflux 集中管理来自 RSSHub 和 Wallabag 的 RSS 订阅源，借助 simpread 插件保存 Miniflux 中的一些网页到本地以供离线阅读。</p>
<h2 id="fluent-reader-本地客户端"><a class="markdownIt-Anchor" href="#fluent-reader-本地客户端"></a> Fluent Reader 本地客户端</h2>
<p><a class="link"   href="https://github.com/yang991178/fluent-reader" >fluent-reader <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>是一个跨平台的 PC 客户端，可以使用 miniflux 的服务提供更好的客户端阅读体验。</p>
<p>对于移动设备，可以使用同样是由 fluent-reader 开发团队开发的<a class="link"   href="https://github.com/yang991178/fluent-reader-lite" >fluent-reader-lite <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>。</p>
<h3 id="miniflux-配置-api"><a class="markdownIt-Anchor" href="#miniflux-配置-api"></a> Miniflux 配置 API</h3>
<blockquote>
<p>先确保前面的<code>BASE_URL</code>项配置的是一个互联网可访问的地址，否则无法使用 miniflux 服务，除非 miniflux 和客户端处于同一个局域网中。</p>
</blockquote>
<p>在 miniflux 的 Settings 里面配置 API 密钥，在 API 密钥管理页面中已经包含了所有 fluent-reader 需要配置的信息。</p>
<h3 id="fluent-reader-启用-miniflux-服务"><a class="markdownIt-Anchor" href="#fluent-reader-启用-miniflux-服务"></a> Fluent Reader 启用 Miniflux 服务</h3>
<p>在 fluent-reader 的“设置”——”服务“中可以看到 miniflux 服务的选项，选择后会进入 miniflux 服务的配置，对照前面 miniflux 的 API 密钥管理页面中的信息，将配置项填写完后确认即可。</p>
<p>更新订阅源可能需要一定的时间，建议在使用 miniflux 服务更新订阅之前，先将 fluent-reader 中原来的订阅导出一份备份文件到本地。</p>
<h2 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h2>
<p><a class="link"   href="https://docs.rsshub.app/zh/install" >部署 | RSSHub <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://miniflux.app/" >Miniflux 官网 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://v2ex.com/t/963837" >2023 年，我为什么选择 Miniflux 作为 RSS 主力工具 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://blog.yfi.moe/post/rsshub-miniflux/" >完整的 RSS 解决方案：自建 RSSHub 与 Miniflux <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://blognas.hwb0307.com/linux/docker/1833" >Docker系列 Wallabag助力个性化网页RSS化 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://blognas.hwb0307.com/linux/docker/788" >Docker系列 安装个人RSS服务TTRSS 手机完美适配 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://blog.l3zc.com/2023/07/rsshub-freshrss-information-flow/" >重新捡起 RSS：RSSHub + FreshRSS 建立我的信息流 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <tags>
        <tag>RSS</tag>
        <tag>miniflux</tag>
        <tag>RSSHub</tag>
        <tag>Wallabag</tag>
        <tag>Fluent Reader</tag>
      </tags>
  </entry>
  <entry>
    <title>在linux终端显示系统信息</title>
    <url>/2022/12/30/screenfetch-neofetch/</url>
    <content><![CDATA[<p>在linux操作系统的桌面用户群体中, 一个能够打印linux发行版logo以及相关系统信息的命令, 一定程度上能够使不同用户的linux系统更加个性化。基于Ubuntu22.04LTS, 下面介绍两个相关命令<span id="more"></span></p>
<h3 id="screenfetch命令"><a class="markdownIt-Anchor" href="#screenfetch命令"></a> screenfetch命令</h3>
<h4 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h4>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install screenfetch</span><br></pre></td></tr></table></figure></div>
<h4 id="使用"><a class="markdownIt-Anchor" href="#使用"></a> 使用</h4>
<p>直接在终端输入以下命令即可</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">screenfetch</span><br></pre></td></tr></table></figure></div>
<p>效果如下</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2022/12/30/screenfetch-neofetch/screenfetch-202212300156995.png"
                      class="" title="screenfetch-202212300156995"
                >
<h4 id="可能出现的问题"><a class="markdownIt-Anchor" href="#可能出现的问题"></a> 可能出现的问题</h4>
<p>Ubuntu22.04LTS直接使用screenfetch可能会出现操作数问题, 从而导致部分信息无法正确显示。可以根据提示信息找到对应脚本文件进行修改</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /usr/bin/screenfetch</span><br></pre></td></tr></table></figure></div>
<p>找到提示的配置文件所在行</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2022/12/30/screenfetch-neofetch/screenfetch202212300215987.png"
                      class="" title="screenfetch202212300215987"
                >
<p><strong>经过测试实际上是awk命令识别错误</strong></p>
<p>使用free命令查看相关信息, 配合awk查看输出情况</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">free -b</span><br><span class="line">free -b | awk <span class="string">&#x27;&#123;print $1&quot;-&quot;$6&#125;&#x27;</span></span><br><span class="line">free -b | awk <span class="string">&#x27;&#123;print $2&quot;-&quot;$7&#125;&#x27;</span></span><br><span class="line">free -b | awk -F <span class="string">&#x27;:&#x27;</span> <span class="string">&#x27;NR==2&#123;print $1&#125;&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&quot;-&quot;$7&#125;&#x27;</span></span><br></pre></td></tr></table></figure></div>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2022/12/30/screenfetch-neofetch/screenfetch202212300228383.png"
                      class="" title="screenfetch202212300228383"
                >
<p>修改脚本文件中的命令</p>
<p>将原本的<code>free -b | awk -F ':' 'NR==2&#123;print $2&#125;' | awk '&#123;print $1&quot;-&quot;$6&#125;'</code>替换为<code>free -b | awk -F ':' 'NR==2&#123;print $1&#125;' | awk '&#123;print $2&quot;-&quot;$7&#125;'</code></p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2022/12/30/screenfetch-neofetch/screenfetch202212300256553.png"
                      class="" title="screenfetch202212300256553"
                >
<p>重新运行screenfetch, 效果如下, 所有信息都能正常输出</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2022/12/30/screenfetch-neofetch/screenfetch202212300258212.png"
                      class="" title="screenfetch202212300258212"
                >
<h3 id="neofetch命令"><a class="markdownIt-Anchor" href="#neofetch命令"></a> neofetch命令</h3>
<p>neofetch相对于screenfetch可定制性更高, 推荐使用</p>
<h4 id="安装-2"><a class="markdownIt-Anchor" href="#安装-2"></a> 安装</h4>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install neofetch</span><br></pre></td></tr></table></figure></div>
<h4 id="手动编译安装"><a class="markdownIt-Anchor" href="#手动编译安装"></a> 手动编译安装</h4>
<p>从github克隆下来的源代码编译安装, 可使用最新版本的neofetch</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/dylanaraps/neofetch</span><br><span class="line"><span class="built_in">cd</span> neofetch</span><br><span class="line">make install</span><br></pre></td></tr></table></figure></div>
<h4 id="使用-2"><a class="markdownIt-Anchor" href="#使用-2"></a> 使用</h4>
<p>直接在终端输入以下命令即可</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">neofetch</span><br></pre></td></tr></table></figure></div>
<p>效果如下(这里我使用了kde环境)</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2022/12/30/screenfetch-neofetch/neofetch202212300318461.png"
                      class="" title="neofetch202212300318461"
                >
<p>注意neofetch默认不显示Disk信息, 可修改配置文件来显示Disk信息</p>
<p>编辑配置文件</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim ~/.config/neofetch/config.conf</span><br></pre></td></tr></table></figure></div>
<p>添加如下的Disk配置即可, 同理其它信息显示也可以通过类似配置实现输出</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2022/12/30/screenfetch-neofetch/neofetch202212300326391.png"
                      class="" title="neofetch202212300326391"
                >
<h4 id="其他用法"><a class="markdownIt-Anchor" href="#其他用法"></a> 其他用法</h4>
<h5 id="显示另一个发行版的标志"><a class="markdownIt-Anchor" href="#显示另一个发行版的标志"></a> 显示另一个发行版的标志</h5>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># neofetch --ascii_distro distroname</span></span><br><span class="line">neofetch --ascii_distro <span class="built_in">arch</span></span><br><span class="line">neofetch --ascii_distro debian</span><br><span class="line"><span class="comment"># 在发行版名称后面加上后缀_small可输出对应发行版的迷你标志</span></span><br><span class="line">neofetch --ascii_distro arch_small</span><br><span class="line">neofetch --ascii_distro debian_small</span><br></pre></td></tr></table></figure></div>
<p>效果如下</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2022/12/30/screenfetch-neofetch/neofetch202212300335106.png"
                      class="" title="neofetch202212300335106"
                >
<h5 id="隐藏logo信息"><a class="markdownIt-Anchor" href="#隐藏logo信息"></a> 隐藏logo信息</h5>
<p>只输出系统信息</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">neofetch --off</span><br></pre></td></tr></table></figure></div>
<h5 id="隐藏系统信息"><a class="markdownIt-Anchor" href="#隐藏系统信息"></a> 隐藏系统信息</h5>
<p>只输出logo信息</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">neofetch -l</span><br></pre></td></tr></table></figure></div>
<h5 id="渐变色logo"><a class="markdownIt-Anchor" href="#渐变色logo"></a> 渐变色logo</h5>
<p><strong>neofetch配合lolcat实现渐变色的logo</strong></p>
<p>安装lolcat</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install lolcat</span><br></pre></td></tr></table></figure></div>
<p>使用管道命令</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">neofetch | lolcat</span><br></pre></td></tr></table></figure></div>
<h5 id="自定义图片logo"><a class="markdownIt-Anchor" href="#自定义图片logo"></a> 自定义图片logo</h5>
<p><strong>neofetch配合w3m自定义图片作为logo在终端展示</strong></p>
<p>安装w3m-img</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install w3m-img</span><br></pre></td></tr></table></figure></div>
<p>测试一下能否显示图片</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">w3m www.baidu.com</span><br></pre></td></tr></table></figure></div>
<p>添加图片路径, 否则默认为桌面壁纸</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">neofetch --w3m img/logo.png <span class="comment"># 图片路径根据实际情况编写</span></span><br></pre></td></tr></table></figure></div>
<p>在这边的测试环境下w3m出现了一定的显示问题, 可仿照上述格式替换参数进行测试</p>
<p>其它的显示图片参数caca、jp2a显示的是字符组成的logo, chafa显示的是低像素图, iterm2、sixel显示的是高像素图</p>
<p><strong>注意: 测试环境为kde, 不同环境包括不同配置在终端展示的图片不一定具有同等效果, 且存在一定的瑕疵, 请根据实际情况进行配置</strong></p>
<h4 id="默认终端启动时自动执行neofetch"><a class="markdownIt-Anchor" href="#默认终端启动时自动执行neofetch"></a> 默认终端启动时自动执行neofetch</h4>
<p>查看shell配置</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> /etc/shells</span><br></pre></td></tr></table></figure></div>
<p>根据实际配置修改对应配置文件, Ubuntu22.04LTS默认为bash, 另外还有zsh</p>
<p>修改bash配置文件</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim ~/.bashrc</span><br></pre></td></tr></table></figure></div>
<p>修改zsh配置文件</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo vim ~/.zshrc</span><br></pre></td></tr></table></figure></div>
<p>在文件末尾添加<strong>neofetch</strong>即可</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux优化</tag>
      </tags>
  </entry>
  <entry>
    <title>简单配置 Linux 上的 NVIDIA</title>
    <url>/2024/01/25/simple-nvidia-setup-for-linux/</url>
    <content><![CDATA[<p>本文主要介绍在 Linux 上简单地配置 NVIDIA 用于特定应用程序(例如游戏)的图形加速，而非全局性的设置。<span id="more"></span></p>
<p>以 <a class="link"   href="https://github.com/HMCL-dev/HMCL" >HMCL <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 为例，只需安装一些基础包，进行简单的配置即可让 Minecraft 在 NVIDIA 显卡下工作。</p>
<h3 id="基础安装"><a class="markdownIt-Anchor" href="#基础安装"></a> 基础安装</h3>
<blockquote>
<p>这里仅列举需要安装的包，大部分包可能已经被安装了。</p>
</blockquote>
<p><code>nvidia nvidia-settings lib32-nvidia-utils</code>：这三个是必须安装的包，是 NVIDIA 的基础驱动。</p>
<p><code>nvidia-prime</code>：可选安装，是用于指定应用程序使用 NVIDIA 显卡加速。本质上是通过设置环境变量实现。</p>
<blockquote>
<p>以下是用于监控 NVIDIA 工作情况的一些选项。</p>
</blockquote>
<p>命令行工具</p>
<ol>
<li>
<p><strong>nvidia-smi（NVIDIA System Management Interface）：</strong></p>
<ul>
<li><code>nvidia-smi</code> 是 NVIDIA 提供的一个命令行工具，它能够显示 NVIDIA GPU 的详细状态，包括温度、使用率、显存使用情况等。</li>
<li>使用方法：在终端中输入 <code>nvidia-smi</code>。你也可以使用 <code>watch -n 1 nvidia-smi</code> 命令来每秒刷新显示状态。</li>
</ul>
</li>
<li>
<p><strong>nvtop：</strong></p>
<ul>
<li>
<p><code>nvtop</code> 是一个类似于 <code>htop</code> 的工具，但专门用于 NVIDIA GPU。它提供了一个基于文本的用户界面，显示 GPU 的使用率、显存使用情况、正在运行的进程等信息。</p>
</li>
<li>
<p>安装方法：在许多 Linux 发行版中，<code>nvtop</code> 可以通过包管理器安装，如 <code>sudo apt install nvtop</code>（在基于 Debian 的系统上）或 <code>sudo pacman -S nvtop</code>（在 Arch Linux 上）。</p>
</li>
</ul>
</li>
</ol>
<p>图形化工具</p>
<ol>
<li>
<p><strong>NVIDIA X Server Settings：</strong></p>
<ul>
<li>如果你使用的是 NVIDIA 官方驱动，那么 NVIDIA X Server Settings 工具应该已经包含在驱动安装包中。</li>
<li>这个图形界面工具提供了关于显卡状态的信息，包括温度、显存使用量等。</li>
</ul>
</li>
<li>
<p><strong>Conky：</strong></p>
<ul>
<li>Conky 是一个轻量级的系统监控工具，它可以配置为显示 NVIDIA GPU 的状态。</li>
<li>Conky 需要一些配置工作才能显示 GPU 信息，但它提供了很高的可定制性。</li>
</ul>
</li>
</ol>
<h3 id="使用-prime-run-命令控制"><a class="markdownIt-Anchor" href="#使用-prime-run-命令控制"></a> 使用 prime-run 命令控制</h3>
<p>如果选择安装<code>nvidia-prime</code>包，可以直接执行如下格式的命令</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">prime-run program</span><br></pre></td></tr></table></figure></div>
<p>在一些启动应用程序的命令之前添加<code>prime-run</code>命令即可使其工作在NVIDIA 显卡下。</p>
<h3 id="设置环境变量控制"><a class="markdownIt-Anchor" href="#设置环境变量控制"></a> 设置环境变量控制</h3>
<p>如果选择手动设置环境，大部分时候只需要关注三个环境变量，更多时候可能只需要关注两个环境变量。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">__NV_PRIME_RENDER_OFFLOAD=1			<span class="comment"># 启用 PRIME Render Offload，允许应用程序使用 NVIDIA GPU</span></span><br><span class="line">__GLX_VENDOR_LIBRARY_NAME=<span class="string">&quot;nvidia&quot;</span>	<span class="comment"># 指定使用 NVIDIA 的 GLX 实现，确保 OpenGL 调用通过 NVIDIA GPU</span></span><br><span class="line">__VK_LAYER_NV_optimus=<span class="string">&quot;NVIDIA_only&quot;</span>	<span class="comment"># 专门用于 Vulkan 应用程序强制使用 NVIDIA GPU</span></span><br></pre></td></tr></table></figure></div>
<p>对于大部分不使用<code>vulkan</code>图形 API 的应用程序来说，不需要关心<code>__VK_LAYER_NV_optimus</code>这个环境变量。</p>
<p>以该方式运行一个应用程序，手动执行命令如下</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">__NV_PRIME_LIBRARY_RENDER_OFFLOAD=1 __CLX_VENDOR_LIBRARY_NAME=nvidia program</span><br></pre></td></tr></table></figure></div>
<p>如果觉得该方式比较繁琐，也可自行编写脚本并进行软链接，用于自定义需要使用 NVIDIA 的应用程序</p>
<p>参考脚本如下</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置环境变量以使用NVIDIA显卡</span></span><br><span class="line"><span class="built_in">export</span> __NV_PRIME_RENDER_OFFLOAD=1</span><br><span class="line"><span class="built_in">export</span> __GLX_VENDOR_LIBRARY_NAME=nvidia</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动你的应用程序</span></span><br><span class="line"><span class="built_in">exec</span> program</span><br></pre></td></tr></table></figure></div>
<h3 id="在-hmcl-中配置-nvidia-加速游戏"><a class="markdownIt-Anchor" href="#在-hmcl-中配置-nvidia-加速游戏"></a> 在 HMCL 中配置 NVIDIA 加速游戏</h3>
<blockquote>
<p>HMCL 本身是一个游戏启动器，这里需要加速的是游戏，而非启动器本身。</p>
</blockquote>
<p>先启动 HMCL，进入“设置”页面，选择“修改高级设置”</p>
<style>.oonznuvuvnpl{zoom: 50%;}</style><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/01/25/simple-nvidia-setup-for-linux/image-20240125175909038.png"
                      class="oonznuvuvnpl" alt="image-20240125175909038"
                >
<p>如果选择使用<code>prime-run</code>的方式，可以在“自定义命令”模块的“包装命令”中填入<code>prime-run</code></p>
<style>.sgeajsflmeep{zoom:50%;}</style><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/01/25/simple-nvidia-setup-for-linux/image-20240125182631549.png"
                      class="sgeajsflmeep" alt="image-20240125182631549"
                >
<p>如果选择设置环境变量的方式，可以在“Java 虚拟机设置”模块的”环境变量“中填入<code>__NV_PRIME_RENDER_OFFLOAD=1 __GLX_VENDOR_LIBRARY_NAME=nvidia</code></p>
<style>.hweyrbfpiyrh{zoom:50%;}</style><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/01/25/simple-nvidia-setup-for-linux/image-20240125182927742.png"
                      class="hweyrbfpiyrh" alt="image-20240125182927742"
                >
<p>接下来就可以运行游戏，在 NVIDIA 显卡下工作，可以通过前面提到的 NVIDIA 的监控工具查看 NVIDIA 显卡是否在工作。</p>
<h3 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h3>
<p><a class="link"   href="https://archlinuxstudio.github.io/ArchLinuxTutorial/#/rookie/graphic_driver" >显卡驱动 | archlinuxstudio <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <tags>
        <tag>nvidia</tag>
        <tag>hmcl</tag>
      </tags>
  </entry>
  <entry>
    <title>Git中的特殊文件</title>
    <url>/2023/09/18/special-git-files/</url>
    <content><![CDATA[<p>对于经常使用Git来进行版本控制的用户来说，接触最多的可能就是那几个核心的命令了。不过这篇文章的主要目的并不是研究命令，而是了解一些可能比较冷门的知识。<span id="more"></span></p>
<h3 id="特殊文件"><a class="markdownIt-Anchor" href="#特殊文件"></a> 特殊文件</h3>
<p>在Git中，有一些特殊的文件可以提交到仓库，这些文件对于项目的管理和开发非常有用。以下是一些主要的Git特殊文件:</p>
<ul>
<li>
<p><strong>.gitignore 文件</strong>：用于指定哪些文件和目录应该被Git忽略，不进行版本控制。通常在这个文件中列出一些<strong>临时文件、日志文件、编译产生的文件、敏感信息文件</strong>等，避免将它们包含到代码仓库中。</p>
</li>
<li>
<p><strong>.gitattributes 文件</strong>：用于配置Git的文件属性，根据不同的文件类型，指定不同的行为。这些属性可以决定文件的换行符、文件编码，以及是否进行二进制合并等。这在<strong>处理跨平台开发时的换行符问题</strong>非常有用。不过如果项目团队是在同一个操作系统下开发，那么这个文件可能就没有什么必要。</p>
</li>
<li>
<p><strong>.gitmodules 文件</strong>：用于管理Git仓库中的子模块。子模块是指一个独立的Git仓库，可以作为父项目的一部分。</p>
</li>
<li>
<p><strong>.gitkeep 文件</strong>：用于保持Git的目录结构，即使目录中没有实际文件也可以提交到仓库中。在创建一个空的文件夹时，如果想要保持这个文件夹在Git中存在，可以添加一个名为<code>.gitkeep</code>的空文件。</p>
</li>
<li>
<p><strong>.gitmessage 文件</strong>：用于自定义Git提交时的默认信息。当使用git commit命令进行提交时，如果没有提供自定义的提交信息，Git就会使用<code>.gitmessage</code>文件中的内容作为默认提交信息。</p>
</li>
</ul>
<p>以上这些特殊文件其实在特定的应用场景下使用得会很频繁，只是大部分普通用户只需要一些基本的核心命令即可满足日常需求。这些特殊文件在项目的管理和开发中起到了重要的作用，尤其可以让团队更好的组织和管理项目。</p>
<h3 id="提交规范"><a class="markdownIt-Anchor" href="#提交规范"></a> 提交规范</h3>
<p>Git提交规范对于代码的可维护性和版本管理非常重要。常见的提交规范如下：</p>
<ul>
<li>
<p>提交信息格式：</p>
<p>每个Git提交信息都应该包含一个清晰简洁的标题和一个更详细的描述。推荐的提交信息格式如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;</span><br><span class="line">&lt;BLANK LINE&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;BLANK LINE&gt;</span><br><span class="line">&lt;footer&gt;</span><br></pre></td></tr></table></figure></div>
<p>其中，<code>&lt;type&gt;</code>代表提交的类型，<code>&lt;scope&gt;</code>代表影响范围，<code>&lt;subject&gt;</code>是提交信息的简短描述，<code>&lt;body&gt;</code>是详细描述，<code>&lt;footer&gt;</code>是一些元数据，比如关联的issue、PR等。</p>
</li>
<li>
<p>提交类型：</p>
<p>每个类型值都表示了不同的含义，类型值必须是以下的其中一个：</p>
<ul>
<li><code>feat</code>：提交新功能</li>
<li><code>fix</code>：修复了bug</li>
<li><code>docs</code>：只修改了文档</li>
<li><code>style</code>：调整代码格式，未修改代码逻辑（比如修改空格、格式化等不影响代码的正常运行）</li>
<li><code>refactor</code>：代码重构，不修复bug也不增加新功能</li>
<li><code>perf</code>：性能优化，提高性能而不影响正常功能的代码修改</li>
<li><code>test</code>：增加或修改代码测试功能</li>
<li><code>chore</code>：对构建流程或辅助工具和依赖库（如文档生成）的更改</li>
</ul>
</li>
<li>
<p>代码回滚：</p>
<p>代码回滚比较特殊，若本次提交是为了恢复到之前的某个提交，那么提交信息必须是以<code>revert:</code>开头，后面跟上那个提交的完整标题。然后在信息正文中写上<code>This reverts commit &lt;hash&gt;</code>，其中的<code>&lt;hash&gt;</code>是要还原的那个提交的SHA值。</p>
</li>
<li>
<p>影响范围：</p>
<p>范围不是固定值，它可以是你提交代码实际影响到的任何内容。唯一需要注意的是它必须足够简短。当影响范围较大时也可以使用<code>*</code>来表示。</p>
</li>
<li>
<p>标题：</p>
<p>标题是对变更的简明描述，使用祈使句，现在时态，首字母不要大写，结尾不要加句号。</p>
</li>
<li>
<p>正文：</p>
<p>正文是对标题的补充，但它不是必须的。和标题一样，它也要求使用祈使句和现在时态。正文应该包含更详细的信息，如代码修改的目的，与修改前的代码对比等。</p>
</li>
<li>
<p>页脚：</p>
<p>任何<code>Breaking Changes</code>(破坏性变更，不向下兼容)都应该在页脚中进行说明，它经常也用来引用本次提交解决的Github Issue。<code>Breaking Changes</code>应该以<code>BREAKING CHANGE:</code>开头，然后紧跟一个空格或两个换行符。</p>
</li>
</ul>
<p>以下给出一份提交信息的具体示例：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;feat(login): add login functionality</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">This commit adds a new login functionality to the login module.Now, users can login to the application using their email and password.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Related issues: #123 #456&quot;</span></span><br></pre></td></tr></table></figure></div>
<p>看上去是这样，但实际上在终端这种特殊环境里，回车换行会导致命令直接被执行。实际写法可能是用<code>$'...\n\n...'</code>或者在每行结尾加上一个反斜杠<code>\</code>来实现换行和空行以满足固定的格式要求，那么后面就介绍直接使用<code>git commit</code>命令配合<code>.gitmessage</code>文件来规范提交。</p>
<h3 id="使用gitmessage规范提交模板"><a class="markdownIt-Anchor" href="#使用gitmessage规范提交模板"></a> 使用.gitmessage规范提交模板</h3>
<p>前面提到<code>.gitmessage</code>可以用于自定义Git提交时的默认信息，在使用<code>git commit</code>命令提交如果没有提供自定义的提交信息，Git就会使用<code>.gitmessge</code>文件中的内容作为默认提交信息。那么下面说明如何设置提交模板：</p>
<ol>
<li>
<p>在项目目录中创建一个名为<code>.gitmessage</code>的文件</p>
</li>
<li>
<p>在<code>.gitmessage</code>文件中写入以下参考的提交模板</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">类型(必填): feat、fix、docs、style、refactor、perf、test、chore</span><br><span class="line">影响范围(可选)：尽量简短</span><br><span class="line">标题(必填): 尽量简短</span><br><span class="line">正文：详细说明修改</span><br><span class="line">页脚：关联的Issue号</span><br><span class="line"></span><br><span class="line">特别注意</span><br><span class="line">代码回滚请以revert:开头，并在正文指定回滚提交的SHA值</span><br><span class="line">Breaking Changes请务必在页脚注明</span><br></pre></td></tr></table></figure></div>
<p>保存文件并退出</p>
</li>
<li>
<p>设置<code>.gitmessage</code>文件为默认的提交模板，在父目录中执行以下命令</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 局部设置，影响单个仓库的所有分支</span></span><br><span class="line">git config commit.template .gitmessage</span><br><span class="line"><span class="comment"># 全局设置，影响全部仓库</span></span><br><span class="line">git config --global commit.template .gitmessage</span><br></pre></td></tr></table></figure></div>
</li>
<li>
<p>之后，每次直接使用<code>git commit</code>命令将会自动显示该文件中的内容用于规范提交信息。效果如下</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/18/special-git-files/image-20230918233735676.png"
                      class="" title="image-20230918233735676"
                >
</li>
<li>
<p>如果要撤销模板设置可以使用以下命令</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 撤销局部设置</span></span><br><span class="line">git config --<span class="built_in">unset</span> commit.template</span><br><span class="line"><span class="comment"># 撤销全局设置</span></span><br><span class="line">git config --global --<span class="built_in">unset</span> commit.template</span><br></pre></td></tr></table></figure></div>
</li>
</ol>
<p><code>.gitmessage</code>相比直接在命令行里写提交信息主要有以下区别：</p>
<ul>
<li><code>.gitmessage</code>文件可以帮助你定义一个统一的提交信息模板，从而保证每次提交时的信息格式的一致性。这对于多人协作开发的项目来说非常有用，它可以帮助团队成员更好地理解每次提交的信息。</li>
<li>直接在命令行中写提交信息更加灵活，但是可能会导致提交信息的格式不一致，在多人协作项目中不利于提交信息的理解和共享。</li>
</ul>
<h3 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h3>
<p>在广大的用户群体中，这些特殊文件和提交规范可能都不是特别关注的对象，实际上很多用户本身都不是团队开发成员，可能仅仅只是使用过Git的一个命令就不再去深入了解其他的内容。但是在一些特殊的应用场景中，对于Git深度用户来说这可能是很基础的内容。不过在很多时候，还是有人可能并不会严格根据规范来执行，毕竟规范的目的都是为了更好的理解，而规范本身的设计也并不一定完全合理。总之，选择一种最妥善的表达方式，提交规范可以提供一个不错的参考。</p>
<h3 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h3>
<p><a class="link"   href="https://deepinout.com/git/git-questions/154_git_what_are_all_available_git_special_files_that_can_be_committed_to_a_repository.html" >Git 可以提交到仓库的所有特殊文件 | 极客笔记 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://zhuanlan.zhihu.com/p/67804026" >Git提交规范 | 知乎 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>不经意的发现</tag>
        <tag>记录</tag>
      </tags>
  </entry>
  <entry>
    <title>后缀表达式</title>
    <url>/2022/10/27/suffix-expression/</url>
    <content><![CDATA[<h3 id="基于stl的中缀转后缀实现"><a class="markdownIt-Anchor" href="#基于stl的中缀转后缀实现"></a> 基于STL的中缀转后缀实现</h3>
<h4 id="1定义分析"><a class="markdownIt-Anchor" href="#1定义分析"></a> 1.定义分析</h4>
<p><strong>首先明确后缀表达式的定义</strong></p>
<p>后缀表达式是一种不需要括号的表达式，这表示在将中缀表达式转化为后缀表达式时，如果中缀表达式中存在括号，<strong>不能将括号写入后缀表达式</strong><span id="more"></span></p>
<p>那么这里引出一个问题，后缀表达式中不存在括号那要如何表示运算的优先级？</p>
<p><strong>理解后缀表达式的运算过程</strong></p>
<p>以(1+5-4)*(6-9)为例，它的后缀表达式是15+4-69-*</p>
<p>先分析中缀表达式的运算过程，参与运算过程的操作符依次是+ - - *，正好是后缀表达式中从左往右的操作符顺序。而操作符所涉及到的2个操作数都是位于该操作符的前面。</p>
<p>那么回到上面的问题来看，中缀表达式中的<strong>括号的作用如何在后缀表达式中体现出来</strong>？</p>
<p>以1+2*3、(1+2)*3为例</p>
<p>1+2*3的后缀表达式为123*+</p>
<p>(1+2)*3的后缀表达式为12+3*</p>
<p>通过对比可以发现当表达式中存在括号时，<strong>括号中的操作符提前输出</strong>了，这表示在遇到括号的情况时，可以将括号内的操作符提前输出。</p>
<p><strong>此外，还需要考虑四则运算中，乘除的优先级高于加减</strong></p>
<p>以1+2*3为例，如果不加以判断直接转化后缀表达式，结果为12+3*，先运算+再运算*，这显然违背了基本的四则运算法则，实际上正确的结果应该是123*+</p>
<p>通过对比两个结果，可以发现优先级较低的操作符移到了后面，这表示在运算过程中可以<strong>先将优先级低的操作符存储起来</strong>，而将<strong>优先级高的运算符输出</strong>。</p>
<h4 id="2思路分析"><a class="markdownIt-Anchor" href="#2思路分析"></a> 2.思路分析</h4>
<p>采用STL模板实现中缀转后缀，这里使用的是stack。定义一个stack字符栈专门用于存储操作符</p>
<p><font color='red'>这里特别说明一下字符栈，字符栈栈底的操作符优先级最低，栈顶的操作符优先级最高</font></p>
<p><strong>1.输入中缀表达式的字符串依次获取字符串中的每个字符</strong></p>
<p><strong>2.对字符进行以下的判断和操作</strong></p>
<ul>
<li>数字字符，直接输出</li>
<li>左括号字符，直接存入stack</li>
<li>右括号字符，将stack中的操作符依次输出，直到遇到左括号时停止，将左括号出栈但不输出</li>
<li>加减乘除字符
<ul>
<li>优先级高的字符直接存入stack</li>
<li>优先级低的字符，则比较当前字符栈栈顶操作符的优先级，遇到优先级更低的操作符或左括号字符时不出栈，并将当前操作符入栈</li>
</ul>
</li>
</ul>
<p><strong>3.当字符串遍历完成后，再依次输出字符栈内剩余的操作符</strong></p>
<h4 id="3实现过程分析"><a class="markdownIt-Anchor" href="#3实现过程分析"></a> 3.实现过程分析</h4>
<p>以(1+5-4)*(6-9)为例，字符串长度为13</p>
<p>获取到的字符：(</p>
<blockquote>
<p>表达式：</p>
<p>字符栈：(</p>
</blockquote>
<p>获取到的字符：1</p>
<blockquote>
<p>表达式：1</p>
<p>字符栈：(</p>
</blockquote>
<p>获取到的字符：+</p>
<blockquote>
<p>表达式：1</p>
<p>字符栈：(+</p>
</blockquote>
<p>获取到的字符：5</p>
<blockquote>
<p>表达式：15</p>
<p>字符栈：(+</p>
</blockquote>
<p>获取到的字符：-</p>
<blockquote>
<p>表达式：15+</p>
<p>字符栈：(-</p>
</blockquote>
<p>获取到的字符：4</p>
<blockquote>
<p>表达式：15+4</p>
<p>字符栈：(-</p>
</blockquote>
<p>获取到的字符：)</p>
<blockquote>
<p>表达式：15+4-</p>
<p>字符栈：</p>
</blockquote>
<p>获取到的字符：*</p>
<blockquote>
<p>表达式：15+4-</p>
<p>字符栈：*</p>
</blockquote>
<p>获取到的字符：(</p>
<blockquote>
<p>表达式：15+4-</p>
<p>字符栈：*(</p>
</blockquote>
<p>获取到的字符：6</p>
<blockquote>
<p>表达式：15+4-6</p>
<p>字符栈：*(</p>
</blockquote>
<p>获取到的字符：-</p>
<blockquote>
<p>表达式：15+4-6</p>
<p>字符栈：*(-</p>
</blockquote>
<p>获取到的字符：9</p>
<blockquote>
<p>表达式：15+4-69</p>
<p>字符栈：*(-</p>
</blockquote>
<p>获取到的字符：)</p>
<blockquote>
<p>表达式：15+4-69-</p>
<p>字符栈：*</p>
</blockquote>
<p>最后，依次输出字符栈中所有的操作符</p>
<blockquote>
<p>表达式：15+4-69-*</p>
</blockquote>
<h4 id="4源代码"><a class="markdownIt-Anchor" href="#4源代码"></a> 4.源代码</h4>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;list&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function">list&lt;string&gt; <span class="title">transfer</span><span class="params">(string s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> len = s.<span class="built_in">length</span>(); <span class="comment">//记录长度</span></span><br><span class="line">    list&lt;string&gt; listIn;  <span class="comment">//存储中缀表达式</span></span><br><span class="line">    list&lt;string&gt; listOut; <span class="comment">//存储后缀表达式</span></span><br><span class="line">    stack&lt;<span class="type">char</span>&gt; symbol;   <span class="comment">//符号栈</span></span><br><span class="line">    stack&lt;<span class="type">char</span>&gt; ans;      <span class="comment">//结果表达式</span></span><br><span class="line"></span><br><span class="line">    listIn.<span class="built_in">push_back</span>(s);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//思路</span></span><br><span class="line">        <span class="comment">//数字直接存入ans</span></span><br><span class="line">        <span class="comment">//运算符:</span></span><br><span class="line">        <span class="comment">//如果是&#x27;(&#x27;直接存入symbol</span></span><br><span class="line">        <span class="comment">//如果是&#x27;)&#x27;依次出栈symbol中的运算符并存入ans, 直到遇到&#x27;(&#x27;, &#x27;(&#x27;不存入ans</span></span><br><span class="line">        <span class="comment">//其他符号, 依次出栈symbol中的运算符并存入ans, 直到遇到优先级更低的运算符或&#x27;(&#x27;时, 将当前符号存入symbol</span></span><br><span class="line">        <span class="comment">//字符串遍历完成后, 依次出栈符号栈中剩余的运算符并存入ans</span></span><br><span class="line">        <span class="keyword">if</span> (listIn.<span class="built_in">back</span>()[i] &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; listIn.<span class="built_in">back</span>()[i] &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">            ans.<span class="built_in">push</span>(listIn.<span class="built_in">back</span>()[i]);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (listIn.<span class="built_in">back</span>()[i] == <span class="string">&#x27;(&#x27;</span>)</span><br><span class="line">            symbol.<span class="built_in">push</span>(listIn.<span class="built_in">back</span>()[i]);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (listIn.<span class="built_in">back</span>()[i] == <span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (symbol.<span class="built_in">top</span>() != <span class="string">&#x27;(&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                ans.<span class="built_in">push</span>(symbol.<span class="built_in">top</span>());</span><br><span class="line">                symbol.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            symbol.<span class="built_in">pop</span>(); <span class="comment">//将&#x27;(&#x27;出栈</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//这里手动优先考虑乘除的优先级高于加减</span></span><br><span class="line">            <span class="keyword">if</span> (listIn.<span class="built_in">back</span>()[i] == <span class="string">&#x27;+&#x27;</span> || listIn.<span class="built_in">back</span>()[i] == <span class="string">&#x27;-&#x27;</span>) <span class="comment">//加减符号优先级最低</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">while</span> (!symbol.<span class="built_in">empty</span>() &amp;&amp; symbol.<span class="built_in">top</span>() != <span class="string">&#x27;(&#x27;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    ans.<span class="built_in">push</span>(symbol.<span class="built_in">top</span>()); <span class="comment">//直接存入symbol中的运算符</span></span><br><span class="line">                    symbol.<span class="built_in">pop</span>();</span><br><span class="line">                &#125;</span><br><span class="line">                symbol.<span class="built_in">push</span>(listIn.<span class="built_in">back</span>()[i]); <span class="comment">//符号栈存入当前从listIn中获取的符号</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="comment">//乘除符号优先级高直接存入符号栈</span></span><br><span class="line">            &#123;</span><br><span class="line">                symbol.<span class="built_in">push</span>(listIn.<span class="built_in">back</span>()[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!symbol.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        ans.<span class="built_in">push</span>(symbol.<span class="built_in">top</span>());</span><br><span class="line">        symbol.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将结果表达式的值存入listOut</span></span><br><span class="line">    <span class="comment">//先利用已经清空的symbol实现反转</span></span><br><span class="line">    <span class="keyword">while</span> (!ans.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        symbol.<span class="built_in">push</span>(ans.<span class="built_in">top</span>());</span><br><span class="line">        ans.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    string res = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">while</span> (!symbol.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        res += symbol.<span class="built_in">top</span>();</span><br><span class="line">        symbol.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    listOut.<span class="built_in">push_back</span>(res);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> listOut;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string s;</span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; s)</span><br><span class="line">    &#123;</span><br><span class="line">        list&lt;string&gt; res = <span class="built_in">transfer</span>(s);</span><br><span class="line">        cout &lt;&lt; res.<span class="built_in">front</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>栈</tag>
      </tags>
  </entry>
  <entry>
    <title>webflux-project</title>
    <url>/2024/02/09/webflux-project/</url>
    <content><![CDATA[<p>记录首次基于 Spring Webflux 响应式框架的后端项目开发过程中涉及到的一些东西。<span id="more"></span></p>
<p>webflux 框架是一个异步非阻塞的响应式框架，旨在提高吞吐量和并发量。webflux 框架的使用过程中涉及到很多函数式编程与响应式编程。下面是一些学习使用过程中的整理。</p>
<h3 id="对象模型-po-bo-dto-vo-do"><a class="markdownIt-Anchor" href="#对象模型-po-bo-dto-vo-do"></a> 对象模型 PO BO DTO VO (DO)</h3>
<h4 id="基本概念"><a class="markdownIt-Anchor" href="#基本概念"></a> 基本概念</h4>
<ul>
<li><strong>PO (Persistent Object) 持久对象</strong>：直接映射到数据库表的一个对象。通常与数据库表结构一一对应，用于ORM（对象关系映射）框架。</li>
<li><strong>BO (Business Object) 业务对象</strong>：包含业务逻辑的对象，一般位于业务层。BO通常从DAO（数据访问对象）获取数据，进行业务逻辑处理，并返回结果给前端。</li>
<li><strong>DTO (Data Transfer Object) 数据传输对象</strong>：用于服务层和外部的通信，或是不同服务间的数据传输。DTO主要用于远程调用时减少单个方法调用的参数数量，或是封装方法调用的返回结果。</li>
<li><strong>VO (Value Object) 值对象</strong>：主要用于表示展示层和客户端的数据对象。VO通常是根据界面的需求来创建的，包含界面显示所需要的数据。</li>
<li><strong>DO (Domain Object) 领域对象</strong>：在领域驱动设计（DDD）中，领域对象包含了业务逻辑，它代表了业务领域内的一个实体或概念，这时候等同于<strong>BO</strong>。在另外的开发规范中，DO (Data Object) 作为数据对象，对象属性与数据库字段形成映射关系，这时候等同于<strong>PO</strong>。</li>
</ul>
<h4 id="数据来源"><a class="markdownIt-Anchor" href="#数据来源"></a> 数据来源</h4>
<p><strong>VO</strong></p>
<ul>
<li><strong>数据来源</strong>：通常直接对应于前端视图展示的数据需求，可能来自于单个PO的转换，或者是多个PO、DTO的组合与转换的结果。</li>
<li><strong>简单场景案例</strong>：在一个CRUD应用中，创建用户的表单提交结果可能直接映射为一个<code>UserVO</code>，该VO包含用户的姓名、邮箱等信息，然后直接转换为PO进行数据库操作。</li>
</ul>
<p><strong>DTO</strong></p>
<ul>
<li><strong>数据来源</strong>：DTO通常用于服务层之间的数据传输，它的数据可能来源于数据库的多表查询结果，或者是BO的转换和封装。</li>
<li><strong>简单场景案例</strong>：在微服务架构中，<code>OrderService</code>调用<code>UserService</code>获取用户信息时，<code>UserService</code>可能会返回一个<code>UserDTO</code>，包含用户的基本信息，这个DTO可能是直接从数据库查询得到的，也可能是一个或多个PO转换而来。</li>
</ul>
<p><strong>BO</strong></p>
<ul>
<li><strong>数据来源</strong>：BO主要在业务逻辑层使用，它的数据来源可能是数据库查询得到的PO，或者是经过业务逻辑处理的DTO。</li>
<li><strong>简单场景案例</strong>：在处理订单支付逻辑时，<code>PaymentBO</code>可能包含订单详情、用户信息等多个方面的数据，这些数据可能通过查询数据库得到的PO转换而来，然后<code>PaymentBO</code>会封装支付处理的具体逻辑。</li>
</ul>
<p><strong>PO</strong></p>
<ul>
<li><strong>数据来源</strong>：PO就是直接对应数据库中的每一张数据表。</li>
<li><strong>简单场景案例</strong>：在数据库中存在<code>user</code>、<code>order</code>、<code>record</code>等数据表，根据每一张表的字段定义对应的PO。</li>
</ul>
<blockquote>
<h2 id="复杂场景案例"><a class="markdownIt-Anchor" href="#复杂场景案例"></a> 复杂场景案例</h2>
<p>一个典型的复杂场景案例，展示了一个电商系统中订单处理的流程，涉及用户下单、订单处理、支付、以及最终的订单状态更新和通知用户。</p>
<h3 id="场景描述"><a class="markdownIt-Anchor" href="#场景描述"></a> 场景描述</h3>
<p>假设有一个电商平台，用户可以浏览商品、添加商品到购物车、下单和支付。系统需要处理订单创建、库存检查、支付处理、订单状态更新和通知用户等一系列操作。</p>
<h3 id="涉及的模型和层次"><a class="markdownIt-Anchor" href="#涉及的模型和层次"></a> 涉及的模型和层次</h3>
<ul>
<li><strong>PO（持久对象）</strong>：<code>Order</code>、<code>OrderItem</code>、<code>Product</code>、<code>User</code>等，直接映射数据库中的订单表、订单项表、产品表和用户表。</li>
<li><strong>DTO（数据传输对象）</strong>：<code>OrderCreationDTO</code>、<code>PaymentInfoDTO</code>等，用于在服务层之间传递订单创建和支付信息。</li>
<li><strong>BO（业务对象）</strong>：<code>OrderBO</code>，封装订单处理的业务逻辑，如验证库存、计算价格等。</li>
<li><strong>VO（值对象）</strong>：<code>OrderSummaryVO</code>、<code>PaymentResultVO</code>等，用于向用户展示订单摘要信息和支付结果。</li>
</ul>
<h3 id="数据流转"><a class="markdownIt-Anchor" href="#数据流转"></a> 数据流转</h3>
<ol>
<li><strong>用户下单</strong>：
<ul>
<li>用户在前端页面提交订单，前端发送包含订单详情（如商品ID、数量等）的<code>OrderCreationDTO</code>到后端。</li>
<li>Controller层接收<code>OrderCreationDTO</code>，调用Service层处理订单。</li>
</ul>
</li>
<li><strong>订单处理</strong>：
<ul>
<li>Service层将<code>OrderCreationDTO</code>转换或直接使用来创建<code>OrderBO</code>。</li>
<li><code>OrderBO</code>负责业务逻辑处理，如验证库存、计算总价等，并使用PO操作数据库创建订单和订单项。</li>
<li>如果涉及到跨服务调用（如库存服务），可能会使用其他的<code>DTO</code>进行数据传输。</li>
</ul>
</li>
<li><strong>支付处理</strong>：
<ul>
<li>用户选择支付方式并提交支付信息，后端接收支付信息（如<code>PaymentInfoDTO</code>）并处理支付。</li>
<li>支付服务可能是一个独立的服务，Service层将支付信息封装在<code>DTO</code>中调用支付服务。</li>
<li>支付完成后，更新订单状态，并将结果封装在<code>PaymentResultVO</code>中返回给前端。</li>
</ul>
</li>
<li><strong>订单完成和通知</strong>：
<ul>
<li>订单支付成功后，Service层更新订单状态（使用PO操作数据库）。</li>
<li>系统通知用户订单已完成，可能通过发送<code>OrderSummaryVO</code>到前端展示订单摘要，或发送邮件/短信通知（内容可能基于<code>VO</code>生成）。</li>
</ul>
</li>
</ol>
</blockquote>
<h4 id="在-springboot-三层架构中的使用"><a class="markdownIt-Anchor" href="#在-springboot-三层架构中的使用"></a> 在 SpringBoot 三层架构中的使用</h4>
<h5 id="controller层"><a class="markdownIt-Anchor" href="#controller层"></a> Controller层</h5>
<ul>
<li><strong>VO（值对象）</strong>：主要用于Controller层与前端的数据交互。VO专门针对视图（View）的需求设计，封装了用户界面展示所需的数据。Controller层可能会接收前端传来的VO，也可能将数据封装成VO返回给前端。</li>
</ul>
<h5 id="service层"><a class="markdownIt-Anchor" href="#service层"></a> Service层</h5>
<ul>
<li><strong>DTO（数据传输对象）</strong>：Service层广泛使用DTO来传输跨层次、跨服务的数据。DTO用于封装从Controller传到Service层的数据，或者从Service层传到其他服务的数据。</li>
<li><strong>BO（业务对象）</strong>：BO包含业务逻辑和业务状态信息，Service层使用BO来执行具体的业务操作。BO可以看作是Service层的核心，封装了业务规则和算法。</li>
</ul>
<h5 id="dao或repository层"><a class="markdownIt-Anchor" href="#dao或repository层"></a> DAO（或Repository）层</h5>
<ul>
<li><strong>PO（持久对象）</strong>：DAO层使用PO与数据库表直接映射。ORM（对象关系映射）框架如Hibernate、JPA等通常操作PO，将数据库行记录映射成PO，或将PO持久化到数据库中。PO仅仅反映了数据库的结构，而没有复杂的业务逻辑。</li>
</ul>
<h5 id="数据流转-2"><a class="markdownIt-Anchor" href="#数据流转-2"></a> 数据流转</h5>
<ol>
<li><strong>前端到后端</strong>：前端发送请求，Controller层接收封装成VO的数据 -&gt; Service层将VO转换成DTO或直接使用DTO接收数据，进行业务处理，可能会涉及到BO -&gt; DAO层使用PO与数据库交互。</li>
<li><strong>后端到前端</strong>：DAO层查询数据库，将结果封装成PO -&gt; Service层处理业务逻辑，可能会转换PO为BO或DTO进行业务逻辑的处理 -&gt; Controller层将DTO或BO转换为VO，返回给前端。</li>
</ol>
<style>.weweuvnarrij{zoom: 80%;}</style><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/02/09/webflux-project/274001.png"
                      class="weweuvnarrij" alt="图片"
                >
<h3 id="外键关联约束下-po-的映射行为"><a class="markdownIt-Anchor" href="#外键关联约束下-po-的映射行为"></a> 外键关联约束下 PO 的映射行为</h3>
<h4 id="1-基本类型"><a class="markdownIt-Anchor" href="#1-基本类型"></a> 1. 基本类型</h4>
<ul>
<li><strong>定义</strong>：使用基本数据类型或其包装类直接在PO中表示外键字段。</li>
<li><strong>适用场景</strong>：当你只需要知道关联表的ID，而不需要访问关联表其他字段的详细信息时。</li>
<li><strong>建议</strong>：这种方式简单且高效，适用于关联关系较为简单的场景。</li>
</ul>
<h4 id="2-变量级组合"><a class="markdownIt-Anchor" href="#2-变量级组合"></a> 2. 变量级组合</h4>
<ul>
<li><strong>定义</strong>：在PO中通过对象变量的形式包含关联表的PO，以此来表示外键关系。</li>
<li><strong>适用场景</strong>：需要访问或操作关联表的详细信息时，如展示用户信息时同时需要展示用户的订单信息。</li>
<li><strong>建议</strong>：采用变量级组合可以增强模型的表达力，适用于需要在业务逻辑中处理关联数据的场景。使用ORM框架时，这种关系可以通过注解（如JPA的<code>@ManyToOne</code>、<code>@OneToMany</code>等）来实现。</li>
</ul>
<h4 id="3-类级组合bo"><a class="markdownIt-Anchor" href="#3-类级组合bo"></a> 3. 类级组合(BO)</h4>
<ul>
<li><strong>定义</strong>：通过创建新的类来封装多个表的组合数据，这些类不直接对应单一的数据库表，而是根据业务需求组合多个PO的数据(BO的来源之一)。</li>
<li><strong>适用场景</strong>：跨表查询结果的封装，或需要根据业务逻辑组合多个表数据的场景。</li>
<li><strong>建议</strong>：类级组合适用于复杂的业务逻辑处理，以及需要将多个表的数据作为一个整体进行处理的情况。这种方法可以提高代码的可读性和维护性，但需要注意避免过度使用，以免引入不必要的复杂性。</li>
</ul>
<h4 id="4-数据传输对象dto"><a class="markdownIt-Anchor" href="#4-数据传输对象dto"></a> 4. 数据传输对象(DTO)</h4>
<ul>
<li><strong>定义</strong>：特别地，可以创建DTO来封装从数据库查询得到的数据，特别是多表查询的结果，DTO不直接映射到数据库的表结构，而是根据展示或传输的需要定制。</li>
<li><strong>适用场景</strong>：在跨服务传输数据，或者在层与层之间传输经过处理的数据时。</li>
<li><strong>建议</strong>：当PO与视图或服务间的数据需求不一一对应时，使用DTO可以提供更大的灵活性和清晰的分层。</li>
</ul>
<h3 id="各种-er-关系下的对象模型设计"><a class="markdownIt-Anchor" href="#各种-er-关系下的对象模型设计"></a> 各种 ER 关系下的对象模型设计</h3>
<blockquote>
<p>使用变量级别的组合描述实体关系，简要地说明一个参考的对象模型设计方案。</p>
</blockquote>
<p>一个简单的图书管理系统，其中包括<code>Author</code>（作者）、<code>Book</code>（书籍）、<code>Review</code>（书评）和<code>BookDetail</code>（书籍详情）四个实体。</p>
<h4 id="实体关系"><a class="markdownIt-Anchor" href="#实体关系"></a> 实体关系</h4>
<ul>
<li><strong>多对多关系</strong>：一本书可以由多个作者共同编写，一个作者也可以写多本书（<code>Book</code> &lt;-&gt; <code>Author</code>）。</li>
<li><strong>一对多关系</strong>：一本书可以有多条书评，但每条书评只针对一本书（<code>Book</code> -&gt; <code>Review</code>）。</li>
<li><strong>一对一关系</strong>：为了方便展示一对一的关系，可以引入一个新的实体：书籍详情（BookDetail），假设每本书都有一个与之对应的详细信息页（<code>Book</code> -&gt; <code>BookDetail</code>）。</li>
</ul>
<h4 id="po-的设计"><a class="markdownIt-Anchor" href="#po-的设计"></a> PO 的设计</h4>
<p>对应数据表中的各个字段，分析实体关系进行设计。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Author</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Book&gt; books; <span class="comment">// 与Book的多对多关系</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造器、Getter和Setter</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Author&gt; authors; <span class="comment">// 与Author的多对多关系</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Review&gt; reviews; <span class="comment">// 与Review的一对多关系</span></span><br><span class="line">    <span class="keyword">private</span> BookDetail bookDetail; <span class="comment">// 与BookDetail的一对一关系</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造器、Getter和Setter</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Review</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line">    <span class="keyword">private</span> Book book; <span class="comment">// 指向Book的外键，表示这条书评属于哪本书</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造器、Getter和Setter</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDetail</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String isbn;</span><br><span class="line">    <span class="keyword">private</span> String publisher;</span><br><span class="line">    <span class="keyword">private</span> Book book; <span class="comment">// 指向Book的引用，一对一关系</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造器、Getter和Setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h4 id="dto-的设计"><a class="markdownIt-Anchor" href="#dto-的设计"></a> DTO 的设计</h4>
<p>封装多表查询的数据结构，用于服务层和展示层的数据传输。（根据多表查询的结果、前端的请求数据结构等设计，这里是多表查询<code>Book</code>和<code>BookDetail</code>的示例，用来展示书籍列表，其中包括书名、作者名字列表和ISBN号。)</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookListDTO</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; authorsNames; <span class="comment">// 书的所有作者的名字</span></span><br><span class="line">    <span class="keyword">private</span> String isbn; <span class="comment">// 书籍详情中的ISBN号</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造器、Getter和Setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h4 id="vo的设计"><a class="markdownIt-Anchor" href="#vo的设计"></a> VO的设计</h4>
<p>VO用于表示层，封装最终用户界面所需的数据。（根据前端展示要求设计，例如展示书籍的详细信息，包括书名、ISBN号、出版社、作者列表和书评列表，可以是由若干个 PO、DTO 单独或者组合转换而来。）</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDetailVO</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String isbn;</span><br><span class="line">    <span class="keyword">private</span> String publisher;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; authors;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; reviews; <span class="comment">// 用户对书籍的评论</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造器、Getter和Setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h4 id="bo的设计"><a class="markdownIt-Anchor" href="#bo的设计"></a> BO的设计</h4>
<p>BO封装业务逻辑，基于PO进行操作，可能会涉及多个PO之间的逻辑关系。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookManagementBO</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Book book;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Author&gt; authors;</span><br><span class="line">    <span class="keyword">private</span> BookDetail bookDetail;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Review&gt; reviews;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BookManagementBO</span><span class="params">(Book book)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.book = book;</span><br><span class="line">        <span class="comment">// 假设这里填充了authors、bookDetail、reviews等信息</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">publishBook</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 实现发布书籍的业务逻辑，可能包括保存书籍信息、保存作者信息等</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addReview</span><span class="params">(Review review)</span> &#123;</span><br><span class="line">        <span class="comment">// 添加书评到书籍</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更多业务逻辑方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>BO 的设计有些特殊，它主要负责处理业务逻辑，并可以直接访问DAO（数据访问对象）层。但是它的业务逻辑操作的类型又不同于在服务层的业务逻辑操作：</p>
<h5 id="服务层service-layer"><a class="markdownIt-Anchor" href="#服务层service-layer"></a> 服务层（Service Layer）</h5>
<p>服务层主要负责协调应用程序中不同部分的业务逻辑。它为表示层提供了一组可用的操作（API），这些操作代表了应用程序可以执行的业务操作。服务层的职责包括：</p>
<ul>
<li><strong>事务管理</strong>：确保业务操作的事务性，处理应用程序中的事务边界。</li>
<li><strong>应用逻辑</strong>：实现应用级别的业务逻辑，如用户权限验证、工作流控制等。</li>
<li><strong>协调数据访问</strong>：调用下层的数据访问对象（DAO）来访问和修改数据。</li>
<li><strong>聚合业务操作</strong>：组合和协调多个BO的操作，以执行复杂的业务逻辑。</li>
</ul>
<h5 id="业务对象bo"><a class="markdownIt-Anchor" href="#业务对象bo"></a> 业务对象（BO）</h5>
<p>业务对象通常更接近于特定的业务领域模型，封装了与之相关的数据以及对数据进行操作的业务逻辑。BO的职责包括：</p>
<ul>
<li><strong>封装业务规则</strong>：实现特定业务领域的规则和逻辑。</li>
<li><strong>状态管理</strong>：管理和维护业务对象的状态。</li>
<li><strong>数据验证</strong>：确保业务数据的完整性和有效性。</li>
<li><strong>数据转换</strong>：在业务模型和数据模型之间转换数据。</li>
</ul>
<h5 id="如何划分"><a class="markdownIt-Anchor" href="#如何划分"></a> 如何划分</h5>
<ul>
<li><strong>粒度和复杂性</strong>：如果业务操作涉及多个实体之间的复杂交互或需要执行跨实体的事务管理，通常这些操作应该放在服务层完成。服务层可以调用一个或多个BO来实现这些复杂的业务逻辑。</li>
<li><strong>领域逻辑</strong>：如果操作主要涉及单一实体内部的业务规则或逻辑，这些操作可以封装在相应的BO中。BO可以提供细粒度的业务方法，服务层可以利用这些方法来完成更高级别的业务操作。</li>
<li><strong>数据访问</strong>：尽管BO可以直接调用DAO来进行数据操作，但更常见的做法是在服务层中调用DAO，然后通过服务层来协调数据访问和业务逻辑。这样做有助于保持业务逻辑层的一致性和事务的完整性。</li>
</ul>
<h5 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h5>
<ul>
<li><strong>在服务层中操作</strong>：当业务逻辑需要跨多个领域模型或需要应用级别的逻辑处理时。例如针对上面的 DTO 的数据结构查询结果。</li>
<li><strong>在BO中操作</strong>：当业务逻辑主要针对单一领域模型且比较独立时。例如针对书籍的发布涉及到保存和查询两个连续操作，添加书评需要对书评的内容进行敏感词过滤等。</li>
</ul>
<h3 id="基础环境"><a class="markdownIt-Anchor" href="#基础环境"></a> 基础环境</h3>
<h4 id="项目依赖环境"><a class="markdownIt-Anchor" href="#项目依赖环境"></a> 项目依赖环境</h4>
<p>下面的 pom.xml 是项目涉及到的全部依赖</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.entropy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>webflux-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>gradems<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>17<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-mongodb-reactive<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-r2dbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis-reactive<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.12.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt-impl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.12.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt-jackson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.12.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-webflux<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-docker-compose<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.postgresql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>postgresql<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.postgresql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>r2dbc-postgresql<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.projectreactor<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>reactor-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">exclude</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<h4 id="数据库环境搭建"><a class="markdownIt-Anchor" href="#数据库环境搭建"></a> 数据库环境搭建</h4>
<p>使用以下 docker-compose.yaml 配置文件即可快速搭建 postgresql、mongodb、redis 三个数据库</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.8&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">postgres:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">gradms-postgres</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">&#x27;postgres:latest&#x27;</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;POSTGRES_DB=gradems&#x27;</span>		<span class="comment"># postgresql 数据库名称</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;POSTGRES_PASSWORD=gradems&#x27;</span>	<span class="comment"># postgresql 数据库密码</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;POSTGRES_USER=admin&#x27;</span>		<span class="comment"># postgresql 数据库用户名</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;5432:5432&#x27;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;postgres_data:/var/lib/postgresql/data&#x27;</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">gradms-redis</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">&#x27;redis:latest&#x27;</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;6379:6379&#x27;</span></span><br><span class="line">  <span class="attr">mongodb:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">gradms-mongodb</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">&#x27;mongo:latest&#x27;</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;27017:27017&#x27;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;mongodb_data:/data/db&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">postgres_data:</span></span><br><span class="line">  <span class="attr">mongodb_data:</span></span><br></pre></td></tr></table></figure></div>
<p>运行命令<code>docker-compose up -d</code>启动。</p>
<p>至此，基本的项目依赖环境和数据库环境准备完成。</p>
<h3 id="webflux-控制层"><a class="markdownIt-Anchor" href="#webflux-控制层"></a> Webflux 控制层</h3>
<p>Webflux 的控制层有两种不同的编写风格，一种是传统控制器风格，一种是函数式端点风格。</p>
<h4 id="传统控制器风格"><a class="markdownIt-Anchor" href="#传统控制器风格"></a> 传统控制器风格</h4>
<p>只需要在传统的控制器上将返回值设置为<code>Mono</code>或<code>Flux</code>两个特殊的类型即可。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyController</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;String&gt; <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Mono.just(<span class="string">&quot;Hello, World!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>在 Spring Webflux 中，<code>Mono</code>和<code>Flux</code>是响应式编程中的两种基本类型，它们来自于 Reactor 库：</p>
<ul>
<li><strong>Mono</strong>：代表单个值或空值的异步序列。它用于处理最多一个数据项的场景。例如，一个查询单个对象的数据库操作可以返回<code>Mono</code>。</li>
<li><strong>Flux</strong>：代表多个值的异步序列。它用于处理0到N个数据项的场景。例如，一个查询多个对象的数据库操作可以返回<code>Flux</code>。</li>
</ul>
<blockquote>
<p>控制层返回值的改动也会影响到服务层，数据访问层的代码。</p>
</blockquote>
<h4 id="函数式端点风格"><a class="markdownIt-Anchor" href="#函数式端点风格"></a> 函数式端点风格</h4>
<p>首先创建一个处理器类(handler)，需要返回固定的<code>Mono&lt;ServerResponse&gt;</code>类型。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyHandler</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Mono&lt;ServerResponse&gt; <span class="title function_">hello</span><span class="params">(ServerRequest request)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ServerResponse.ok().body(Mono.just(<span class="string">&quot;Hello, WebFlux!&quot;</span>), String.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>然后是创建路由配置类，用于定义路由节点。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RouterConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RouterFunction&lt;ServerResponse&gt; <span class="title function_">route</span><span class="params">(MyHandler handler)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> RouterFunctions</span><br><span class="line">            .route(RequestPredicates.GET(<span class="string">&quot;/hello&quot;</span>), handler::hello);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>此时传统的控制器被分成了处理器和路由配置两部分。</p>
<h4 id="统一响应结构"><a class="markdownIt-Anchor" href="#统一响应结构"></a> 统一响应结构</h4>
<p>在前后端分离项目，前后端之间的数据交互通常遵循统一的固定格式。</p>
<p>一个典型的固定格式包含以下几个关键部分：</p>
<ol>
<li><strong>状态码（Code）</strong>：表示请求处理的结果（如成功、错误的详细信息）。这通常是一个整数值，例如200表示成功，400表示客户端错误，500表示服务器错误。</li>
<li><strong>消息（Message）</strong>：提供关于请求处理结果的简短描述，尤其是在发生错误时。这有助于前端开发人员理解发生了什么问题，甚至可能向用户显示这些消息。</li>
<li><strong>数据（Data）</strong>：实际的响应数据，可以是任何结构，如对象、数组或简单值。这是请求的主要内容，包含了前端需要的所有数据。</li>
</ol>
<p>下面通过自定义 API 响应类来设置响应体格式</p>
<p>创建一个 API 响应类</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApiResponse</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="keyword">private</span> T data; <span class="comment">// 使用泛型代替Object提高类型安全</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ApiResponse</span><span class="params">(Integer code, String message, T data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.message = message;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略getters和setters...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>在处理器中使用自定义的 API 响应类封装数据</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyHandler</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Mono&lt;ServerResponse&gt; <span class="title function_">hello</span><span class="params">(ServerRequest request)</span> &#123;</span><br><span class="line">        Mono&lt;ApiResponse&gt; resp = Mono.just(<span class="keyword">new</span> <span class="title class_">ApiResponse</span>(<span class="number">200</span>, <span class="string">&quot;OK&quot;</span>, <span class="string">&quot;Hello, WebFlux!&quot;</span>););</span><br><span class="line">        <span class="keyword">return</span> ServerResponse.ok().body(resp, ApiResponse.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyHandler</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Mono&lt;ServerResponse&gt; <span class="title function_">hello</span><span class="params">(ServerRequest request)</span> &#123;</span><br><span class="line">        Mono&lt;ApiResponse&gt; resp = Mono.fromSupplier(() -&gt; <span class="keyword">new</span> <span class="title class_">ApiResponse</span>(<span class="number">200</span>, <span class="string">&quot;OK&quot;</span>, <span class="string">&quot;Hello, WebFlux!&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> ServerResponse.ok().body(resp, ApiResponse.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>这里<code>Mono.just</code>和<code>Mono.fromSupplier</code>的区别是：</p>
<p><code>just</code>是立即创建并包装一个已经存在的值。当你需要包装一个已知的非异步值或非阻塞操作的结果时适合使用<code>just</code>。</p>
<p><code>fromSupplier</code>允许你在响应式流中延迟执行并动态地生成单个值。当你的操作是异步的或者你想要延迟执行某个操作直到订阅发生时适合使用<code>fromSupplier</code>。</p>
<blockquote>
<p>相关资料推荐：<a class="link"   href="https://zhuanlan.zhihu.com/p/334809573" >一文搞懂什么是RESTful API <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</blockquote>
<h4 id="crud-操作"><a class="markdownIt-Anchor" href="#crud-操作"></a> CRUD 操作</h4>
<p>Webflux 中进行 CRUD 操作的代码也和传统的 web 框架不太一样，这里大概介绍一下 Webflux 控制层中增删改查操作涉及的常用方法。</p>
<h5 id="路径参数与请求体的提取"><a class="markdownIt-Anchor" href="#路径参数与请求体的提取"></a> 路径参数与请求体的提取</h5>
<p>路径参数是 RESTful 风格中的概念，将 URL 中指定的值直接提取出来，不同于传统的查询参数，路径参数只包括了值本身，而“键”是在路由配置中定义的。</p>
<p>增删改和条件查询(单个结果)通常都需要一个路径参数指定全局唯一资源</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 增加(POST)</span></span><br><span class="line"><span class="keyword">public</span> Mono&lt;ServerResponse&gt; <span class="title function_">createItem</span><span class="params">(ServerRequest request)</span> &#123;</span><br><span class="line">    Mono&lt;Item&gt; itemMono = request.bodyToMono(Item.class);</span><br><span class="line">    <span class="keyword">return</span> itemMono.flatMap(item -&gt; service.createItem(item))</span><br><span class="line">                   .flatMap(item -&gt; ServerResponse.ok().bodyValue(<span class="keyword">new</span> <span class="title class_">ApiResponse</span>&lt;&gt;(<span class="number">200</span>, <span class="string">&quot;Item Created Successfully&quot;</span>, item)));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 删除(DELETE)</span></span><br><span class="line"><span class="keyword">public</span> Mono&lt;ServerResponse&gt; <span class="title function_">deleteItem</span><span class="params">(ServerRequest request)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> request.pathVariable(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> service.deleteItem(id)</span><br><span class="line">                  .flatMap(item -&gt; ServerResponse.ok().bodyValue(<span class="keyword">new</span> <span class="title class_">ApiResponse</span>&lt;&gt;(<span class="number">200</span>, <span class="string">&quot;Item Deleted Successfully&quot;</span>, item)));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 更新(PUT)</span></span><br><span class="line"><span class="keyword">public</span> Mono&lt;ServerResponse&gt; <span class="title function_">updateItem</span><span class="params">(ServerRequest request)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> request.pathVariable(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">    Mono&lt;Item&gt; itemMono = request.bodyToMono(Item.class);</span><br><span class="line">    <span class="keyword">return</span> itemMono.flatMap(item -&gt; service.updateItem(id, item))</span><br><span class="line">                   .flatMap(item -&gt; ServerResponse.ok().bodyValue(<span class="keyword">new</span> <span class="title class_">ApiResponse</span>&lt;&gt;(<span class="number">200</span>, <span class="string">&quot;Item Updated Successfully&quot;</span>, item)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>这里的<code>bodyToMono</code>方法用于将请求体转换为相应类型的<code>Mono</code>，主要是针对增加和更新操作，而<code>pathVariable</code>方法用于提取路径变量，主要是针对查询和删除操作。如果使用传统的查询参数可以使用<code>ServerRequest.queryParam</code>的方法获取。</p>
<h5 id="小结"><a class="markdownIt-Anchor" href="#小结"></a> 小结</h5>
<p>在 WebFlux 的函数式端点风格中，<code>ServerRequest</code>提供了多种方法来获取 HTTP 请求中的不同类型的数据：</p>
<ol>
<li><strong>获取响应体数据</strong>： 使用<code>request.bodyToMono(Class&lt;T&gt;)</code>来获取请求体中的数据，适用于 POST 和 PUT 请求。</li>
<li><strong>获取路径参数</strong>： 使用<code>request.pathVariable(&quot;name&quot;)</code>来获取 URL 路径中的变量，适用于任何类型的 HTTP 请求。</li>
<li><strong>获取查询参数</strong>： 使用<code>request.queryParam(&quot;name&quot;)</code>来获取 URL 查询参数，适用于 GET 请求。</li>
</ol>
<blockquote>
<h2 id="关于-flatmap"><a class="markdownIt-Anchor" href="#关于-flatmap"></a> 关于 flatMap</h2>
<p><code>flatMap</code>是响应式编程中的一个重要操作符，它用于处理流（如<code>Mono</code>或<code>Flux</code>中的元素），并将每个元素转换成另一个流，最后将这些流“扁平化”为一个流。在Reactor库中，这个操作符常用于处理异步操作的结果，尤其是当这些操作本身返回<code>Mono</code>或<code>Flux</code>时。</p>
<h3 id="具体是什么"><a class="markdownIt-Anchor" href="#具体是什么"></a> 具体是什么？</h3>
<p><code>flatMap</code>操作符接收一个函数作为参数。这个函数对源流中的每个元素进行操作，返回一个新的<code>Publisher</code>（<code>Mono</code>或<code>Flux</code>）。然后，<code>flatMap</code>将这些返回的<code>Publisher</code>合并成一个单一的<code>Publisher</code>。这使得<code>flatMap</code>非常适合处理嵌套的异步操作。</p>
<h3 id="应该在哪里使用它"><a class="markdownIt-Anchor" href="#应该在哪里使用它"></a> 应该在哪里使用它？</h3>
<ol>
<li><strong>链式异步调用</strong>：当你需要执行一系列的异步操作，并且后一个操作依赖于前一个操作的结果时。例如，从数据库查询一个对象，然后根据该对象的信息去查询另一个服务。</li>
<li><strong>转换和合并流</strong>：当你需要将流中的元素转换为另一种类型的流，并且希望最终结果是一个单一流时。</li>
<li><strong>处理嵌套的<code>Mono</code>或<code>Flux</code></strong>：当操作返回嵌套的<code>Mono&lt;Mono&lt;T&gt;&gt;</code>或<code>Flux&lt;Flux&lt;T&gt;&gt;</code>时，使用<code>flatMap</code>可以将其“扁平化”为<code>Mono&lt;T&gt;</code>或<code>Flux&lt;T&gt;</code>。</li>
</ol>
<h3 id="什么情况下使用它"><a class="markdownIt-Anchor" href="#什么情况下使用它"></a> 什么情况下使用它？</h3>
<ul>
<li>当你想要异步地转换数据，并且每个转换本身返回一个<code>Mono</code>或<code>Flux</code>时。</li>
<li>当你需要处理一个操作的结果，这个操作异步地返回另一个可观察的流时。</li>
<li>当你希望并发执行异步操作，并且需要合并它们的结果时。<code>flatMap</code>允许并发执行，但如果需要控制并发度，你可能需要使用其变体如<code>flatMapSequential</code>（保持原始序列顺序）或<code>flatMap</code>带有并发限制的重载方法。</li>
</ul>
</blockquote>
<h3 id="webflux-数据访问层"><a class="markdownIt-Anchor" href="#webflux-数据访问层"></a> Webflux 数据访问层</h3>
<h4 id="整合r2dbc"><a class="markdownIt-Anchor" href="#整合r2dbc"></a> 整合R2DBC</h4>
<h5 id="连接配置"><a class="markdownIt-Anchor" href="#连接配置"></a> 连接配置</h5>
<p>配置 application.yaml 文件，重点关注 url、username、password 这里的配置。</p>
<ul>
<li><strong>url</strong>：使用 r2dbc 协议连接 postgresql 数据库，默认本地端口 5432，数据库名称为 gradems。</li>
<li><strong>username</strong>：数据库用户名。在前面的 docker-compose.yaml 配置文件中已经指定。</li>
<li><strong>password</strong>：数据库密码。在前面的 docker-compose.yaml 配置文件中已经指定。</li>
</ul>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">r2dbc:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">r2dbc:postgresql://localhost:5432/gradems</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">admin</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">gradems</span></span><br><span class="line">    <span class="attr">pool:</span></span><br><span class="line">      <span class="attr">initial-size:</span> <span class="number">5</span></span><br><span class="line">      <span class="attr">max-size:</span> <span class="number">20</span></span><br></pre></td></tr></table></figure></div>
<h5 id="代码实现方式"><a class="markdownIt-Anchor" href="#代码实现方式"></a> 代码实现方式</h5>
<p>在使用 WebFlux 框架时，结合 R2DBC 进行反应式数据库操作，主要有以下几种实现方式：</p>
<ol>
<li><strong>Repository方式</strong>：利用Spring Data R2DBC提供的Repository支持，可以通过定义接口来自动实现反应式CRUD操作。这种方式极大简化了数据访问层的代码，开发者只需定义接口并选择性地添加查询方法，Spring Data R2DBC会自动实现这些接口。</li>
<li><strong>DatabaseClient API</strong>：Spring Data R2DBC提供了一个高级的<code>DatabaseClient</code> API，适用于更灵活的数据库访问和查询构建。它支持声明式的查询操作，允许开发者以链式调用的方式构建查询并处理结果。这种方式提供了比Repository更灵活的数据访问能力，适合于复杂查询和自定义操作。</li>
<li><strong>R2DBC EntityTemplate</strong>：<code>R2dbcEntityTemplate</code>提供了一个基于模板的方法来执行数据库操作，包括插入、更新、查询和删除等CRUD操作。它为操作单一实体或批量实体提供了便捷的API，并且可以与R2DBC的反应式特性很好地结合使用。</li>
<li><strong>自定义R2DBC使用</strong>：除了上述封装好的高级API外，开发者还可以直接使用R2DBC的底层API来执行数据库操作。这种方式需要开发者手动管理数据库连接和查询执行，提供了最大的灵活性和控制力，适用于需要高度定制化数据库操作的场景。</li>
<li><strong>R2DBC QueryDSL</strong>：对于需要构建类型安全的复杂查询的应用，可以考虑使用QueryDSL与R2DBC结合的方式。这种方法允许开发者以DSL（Domain-Specific Language）的方式构建查询，提高了代码的可读性和维护性。</li>
</ol>
<p>这里主要介绍最常用的 Repository 方式和 DatabaseClient API 方式，基本满足大部分应用场景。</p>
<p>首先创建以下实体类<code>Person</code></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Table(&quot;people&quot;)</span> <span class="comment">// 如果数据表名和类名匹配，则该注解可省略，否则需要指定映射数据表名</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="meta">@Column(&quot;name&quot;)</span> <span class="comment">// 与@Table类似的映射作用，如果名称相同可以省略</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Getters and setters...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><code>@Id</code>注解告诉Spring Data R2DBC框架哪个属性用作数据库表中的主键列。Spring Data R2DBC 依赖于该注解来识别实体的唯一标识符（ID），从而执行诸如查找、更新或删除特定实体的操作。如果缺少<code>@Id</code>注解，Spring Data R2DBC 可能无法正确执行这些操作，因为它无法确定哪个字段是实体的主键。</p>
<h6 id="使用repository-方式"><a class="markdownIt-Anchor" href="#使用repository-方式"></a> <strong>使用Repository 方式</strong></h6>
<p>定义<code>PersonRepository</code>接口，<code>ReactiveCrudRepository</code>具有方法名解析的功能，即可以通过方法名解析自动实现该方法的功能，方法名需要遵循特定的命名规则。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PersonRepository</span> <span class="keyword">extends</span> <span class="title class_">ReactiveCrudRepository</span>&lt;Person, Long&gt; &#123;</span><br><span class="line">    Mono&lt;Person&gt; <span class="title function_">findByName</span><span class="params">(String name)</span>; <span class="comment">// 查询单个结果</span></span><br><span class="line">    Flux&lt;Person&gt; <span class="title function_">findByAge</span><span class="params">(<span class="type">int</span> age)</span>; <span class="comment">// 查询多个结果</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>CRUD 操作示例 <strong>(在服务层实现)</strong></p>
<blockquote>
<p>这里涉及的方法是<code>ReactiveCrudRepository</code>自带的接口实现。</p>
</blockquote>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 增加</span></span><br><span class="line"><span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">person.setName(<span class="string">&quot;John Doe&quot;</span>);</span><br><span class="line">person.setAge(<span class="number">25</span>);</span><br><span class="line">Mono&lt;Person&gt; savedPerson = personRepository.save(person);</span><br><span class="line"><span class="comment">// 删除</span></span><br><span class="line">Mono&lt;Void&gt; deletePerson = personRepository.deleteById(<span class="number">1L</span>);</span><br><span class="line"><span class="comment">// 局部更新</span></span><br><span class="line">Mono&lt;Person&gt; updatedPerson = personRepository.findById(<span class="number">1L</span>)</span><br><span class="line">    .map(p -&gt; &#123;</span><br><span class="line">        p.setName(<span class="string">&quot;Jane Doe&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;)</span><br><span class="line">    .flatMap(personRepository::save);</span><br><span class="line"><span class="comment">// 更新</span></span><br><span class="line"><span class="comment">// 更新实际上是通过 save 方法实现的，如果对象存在则更新，否则插入</span></span><br><span class="line"><span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">person.setName(<span class="string">&quot;John Doe&quot;</span>);</span><br><span class="line">person.setAge(<span class="number">30</span>);</span><br><span class="line">Mono&lt;Person&gt; savedPerson = personRepository.save(person);</span><br><span class="line"><span class="comment">// 查询</span></span><br><span class="line"><span class="comment">// 查询单个结果</span></span><br><span class="line">Mono&lt;Person&gt; person = personRepository.findById(<span class="number">1L</span>);</span><br><span class="line"><span class="comment">// 查询多个结果</span></span><br><span class="line">Flux&lt;Person&gt; people = personRepository.findAll();</span><br></pre></td></tr></table></figure></div>
<h6 id="使用databaseclient-api"><a class="markdownIt-Anchor" href="#使用databaseclient-api"></a> <strong>使用DatabaseClient API</strong></h6>
<p>当使用Spring Data R2DBC的<code>DatabaseClient</code>进行数据库操作时，你会遇到一系列的链式调用方法，这些方法为构建和执行数据库命令提供了灵活的接口。下面是这些方法的简要说明：</p>
<p><code>.sql(String sql)</code></p>
<ul>
<li><strong>含义</strong>: 该方法用于指定要执行的SQL命令。</li>
<li><strong>用法</strong>: <code>.sql(&quot;SELECT * FROM my_table WHERE id = :id&quot;)</code>，其中字符串为要执行的SQL命令。</li>
</ul>
<p><code>.bind(String name, Object value)</code></p>
<ul>
<li><strong>含义</strong>: 用于绑定SQL命令中的参数。这是一个防止SQL注入的安全做法，比直接在SQL命令字符串中拼接参数更安全。</li>
<li><strong>用法</strong>: <code>.bind(&quot;id&quot;, 1)</code>，这会将SQL命令中的<code>:id</code>参数替换为<code>1</code>。</li>
</ul>
<p><code>.bind(index, value)</code></p>
<ul>
<li><strong>含义</strong>: 除了按名称绑定参数外，也可以按位置绑定参数。这在使用没有命名参数的数据库或驱动时特别有用。</li>
<li><strong>用法</strong>: <code>.bind(0, &quot;value&quot;)</code>，这会将SQL命令中的第一个参数（基于0的索引）绑定为指定的值。</li>
</ul>
<p><code>.bindNull(String name, Class&lt;?&gt; type)</code></p>
<ul>
<li><strong>含义</strong>: 用于绑定SQL命令中的参数为<code>NULL</code>值，同时指定该<code>NULL</code>值的类型。</li>
<li><strong>用法</strong>: <code>.bindNull(&quot;parameterName&quot;, String.class)</code>，这会将SQL命令中的<code>:parameterName</code>参数绑定为<code>NULL</code>，类型为<code>String</code>。</li>
</ul>
<p><code>.then()</code></p>
<ul>
<li>
<p><strong>含义</strong>: 在Reactor中，<code>.then()</code>方法用于忽略前面步骤的结果，并在上一个操作完成后继续执行。在<code>DatabaseClient</code>的上下文中，<code>.then()</code>通常用于执行完数据库操作（如插入、更新、删除）后，不需要处理任何返回结果，只需知道操作已成功完成。</p>
</li>
<li>
<p><strong>用法</strong>: <code>.then()</code>用于链式调用的最后，返回一个<code>Mono&lt;Void&gt;</code>，表示操作完成的信号。</p>
<blockquote>
<p>使用<code>.then()</code>方法后就不能使用<code>.fetch()</code>方法，因为一个不需要返回实际结果，一个需要返回结果。</p>
</blockquote>
</li>
</ul>
<p><code>.map(Function&lt;Row, T&gt; mappingFunction)</code></p>
<ul>
<li>
<p><strong>含义</strong>: 该方法用于将结果集中的每一行（<code>Row</code>）映射（或转换）为另一种类型（<code>T</code>）。这是通过提供一个函数来完成的，该函数接受一个<code>Row</code>对象并返回一个新类型的对象。</p>
</li>
<li>
<p><strong>用法</strong>: <code>.map(row -&gt; new MyObject(row.get(&quot;column_name&quot;, String.class)))</code>，其中<code>MyObject</code>是自定义类，<code>column_name</code>是结果集中的列名。<strong><code>.map</code>方法在查询操作中几乎是一定会使用到的方法。</strong></p>
<blockquote>
<p><code>.map()</code>在这里是对结果集中的每一项进行转换的操作，它是基于结果流<code>Flux</code>或单个结果<code>Mono</code>的Reactor操作符。当需要对查询结果进行转换时，<code>.map()</code>方法通常与<code>.all()</code>, <code>.one()</code>, 或<code>.first()</code>一起使用。</p>
</blockquote>
</li>
</ul>
<p><code>.one()</code></p>
<ul>
<li>
<p><strong>含义</strong>: 用于从反应式数据库操作中获取恰好一个结果的<code>Mono&lt;T&gt;</code>。如果查询结果为空，则返回<code>Mono.empty()</code>；如果查询结果有多于一条记录，通常会抛出异常。这适用于你期望查询返回单一结果的场景。</p>
</li>
<li>
<p><strong>用法</strong>: 在执行数据库查询操作时使用，适合于返回单条记录的查询。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">Mono&lt;Person&gt; person = databaseClient</span><br><span class="line">    .sql(<span class="string">&quot;SELECT * FROM person WHERE id = :id&quot;</span>)</span><br><span class="line">    .bind(<span class="string">&quot;id&quot;</span>, <span class="number">1</span>)</span><br><span class="line">    .map(row -&gt; <span class="keyword">new</span> <span class="title class_">Person</span>(</span><br><span class="line">        row.get(<span class="string">&quot;id&quot;</span>, Long.class), </span><br><span class="line">        row.get(<span class="string">&quot;name&quot;</span>, String.class), </span><br><span class="line">        row.get(<span class="string">&quot;age&quot;</span>, Integer.class)))</span><br><span class="line">    .one();</span><br></pre></td></tr></table></figure></div>
</li>
</ul>
<p><code>.first()</code></p>
<ul>
<li>
<p><strong>含义</strong>: 与<code>.one()</code>类似，但当存在多条记录时，它会返回结果集中的第一条记录包装在<code>Mono&lt;T&gt;</code>中。如果查询结果为空，则返回<code>Mono.empty()</code>。这适用于你只关心结果集的第一条记录，而不在乎是否还有其他记录的场景。</p>
</li>
<li>
<p><strong>用法</strong>: 在执行数据库查询操作时使用，当你只需要查询结果中的第一条记录。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">Mono&lt;Person&gt; person = databaseClient</span><br><span class="line">    .sql(<span class="string">&quot;SELECT * FROM person&quot;</span>)</span><br><span class="line">    .map(row -&gt; <span class="keyword">new</span> <span class="title class_">Person</span>(</span><br><span class="line">        row.get(<span class="string">&quot;id&quot;</span>, Long.class), </span><br><span class="line">        row.get(<span class="string">&quot;name&quot;</span>, String.class), </span><br><span class="line">        row.get(<span class="string">&quot;age&quot;</span>, Integer.class)))</span><br><span class="line">    .first();</span><br></pre></td></tr></table></figure></div>
</li>
</ul>
<p><code>.all()</code></p>
<ul>
<li>
<p><strong>含义</strong>: 用于获取操作结果中的所有记录，返回一个包含所有结果的<code>Flux&lt;T&gt;</code>。这适用于你需要处理查询返回的所有记录的场景。</p>
</li>
<li>
<p><strong>用法</strong>: 在执行数据库查询操作时使用，特别是当你期望获取多条记录作为响应。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">Flux&lt;Person&gt; people = databaseClient</span><br><span class="line">    .sql(<span class="string">&quot;SELECT * FROM person&quot;</span>)</span><br><span class="line">    .map(row -&gt; <span class="keyword">new</span> <span class="title class_">Person</span>(</span><br><span class="line">        row.get(<span class="string">&quot;id&quot;</span>, Long.class), </span><br><span class="line">        row.get(<span class="string">&quot;name&quot;</span>, String.class), </span><br><span class="line">        row.get(<span class="string">&quot;age&quot;</span>, Integer.class)))</span><br><span class="line">    .all();</span><br></pre></td></tr></table></figure></div>
</li>
</ul>
<p><code>.fetch()</code></p>
<ul>
<li>
<p><strong>含义</strong>: 该方法用于执行前面定义的SQL命令，并开始处理返回的结果。</p>
</li>
<li>
<p><strong>用法</strong>: 通常跟在<code>.sql()</code>和参数绑定方法（如<code>.bind()</code>）之后使用。</p>
<blockquote>
<p><code>.fetch()</code>方法用于指定如何处理SQL执行的结果，它返回一个<code>FetchSpec</code>，允许你使用<code>.rowsUpdated()</code>来获取受影响的行数(只对于增加、更新、删除等影响到实际数据的操作)。</p>
<p><code>fetch</code>同样可以结合<code>one</code>、<code>first</code>、<code>all</code>使用，但是因为<code>fetch</code>返回的是<code>FetchSpec&lt;Map&lt;String, Object&gt;&gt;</code>类型，需要手动强制转换，对于需要查询返回大量字段的操作不是很推荐，通常查询只返回单个字段或少量字段的可以使用。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">Mono&lt;Person&gt; person = databaseClient</span><br><span class="line">    .sql(<span class="string">&quot;SELECT * FROM person WHERE id = :id&quot;</span>)</span><br><span class="line">    .bind(<span class="string">&quot;id&quot;</span>, <span class="number">1</span>)</span><br><span class="line">    .fetch()</span><br><span class="line">    .one()</span><br><span class="line">    .map(row -&gt; <span class="keyword">new</span> <span class="title class_">Person</span>(</span><br><span class="line">        (Long) row.get(<span class="string">&quot;id&quot;</span>), </span><br><span class="line">        (String) row.get(<span class="string">&quot;name&quot;</span>), </span><br><span class="line">        (Integer) row.get(<span class="string">&quot;age&quot;</span>)));</span><br><span class="line"></span><br><span class="line">Mono&lt;Person&gt; person = databaseClient</span><br><span class="line">    .sql(<span class="string">&quot;SELECT * FROM person WHERE id = :id&quot;</span>)</span><br><span class="line">    .bind(<span class="string">&quot;id&quot;</span>, <span class="number">1</span>)</span><br><span class="line">    .fetch()</span><br><span class="line">    .first()</span><br><span class="line">    .map(row -&gt; <span class="keyword">new</span> <span class="title class_">Person</span>(</span><br><span class="line">        (Long) row.get(<span class="string">&quot;id&quot;</span>), </span><br><span class="line">        (String) row.get(<span class="string">&quot;name&quot;</span>), </span><br><span class="line">        (Integer) row.get(<span class="string">&quot;age&quot;</span>)));</span><br><span class="line"></span><br><span class="line">Flux&lt;Person&gt; person = databaseClient</span><br><span class="line">    .sql(<span class="string">&quot;SELECT * FROM person&quot;</span>)</span><br><span class="line">    .fetch()</span><br><span class="line">    .all()</span><br><span class="line">    .map(row -&gt; <span class="keyword">new</span> <span class="title class_">Person</span>(</span><br><span class="line">        (Long) row.get(<span class="string">&quot;id&quot;</span>), </span><br><span class="line">        (String) row.get(<span class="string">&quot;name&quot;</span>), </span><br><span class="line">        (Integer) row.get(<span class="string">&quot;age&quot;</span>)));</span><br></pre></td></tr></table></figure></div>
<h3 id="比较两个版本"><a class="markdownIt-Anchor" href="#比较两个版本"></a> 比较两个版本</h3>
<ul>
<li><strong><code>fetch</code>版本</strong>：遵循了更常见的Spring Data R2DBC使用模式，即先执行<code>.fetch().all()</code>获取查询结果，然后通过<code>.map()</code>转换。</li>
<li><strong><code>map</code>版本</strong>：利用了Spring Data R2DBC提供的一个更直接的映射策略，允许在定义SQL之后立即应用映射函数。这个方法的优势在于代码更简洁，但可能在某些情况下减少了对查询结果处理流程的可见性。</li>
</ul>
</blockquote>
</li>
</ul>
<p><code>.rowsUpdated()</code></p>
<ul>
<li>
<p><strong>含义</strong>: 在执行更新、插入或删除操作后，<code>.rowsUpdated()</code>用于返回受这些操作影响的行数。</p>
</li>
<li>
<p><strong>用法</strong>: 用于确认操作影响了多少行数据。这个方法只会在增删改等影响实际数据的操作中使用。</p>
<blockquote>
<p><code>.fetch().rowsUpdated()</code>组合使用返回受影响的行数。</p>
</blockquote>
</li>
</ul>
<p>CRUD 操作示例 <strong>(在数据访问层实现)</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 增加</span></span><br><span class="line"><span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">person.setName(<span class="string">&quot;John Doe&quot;</span>);</span><br><span class="line">person.setAge(<span class="number">25</span>);</span><br><span class="line">Mono&lt;Person&gt; savedPerson = databaseClient.sql(<span class="string">&quot;INSERT INTO person (name, age) VALUES (:name, :age)&quot;</span>)</span><br><span class="line">    .bind(<span class="string">&quot;name&quot;</span>, person.getName())</span><br><span class="line">    .bind(<span class="string">&quot;age&quot;</span>, person.getAge())</span><br><span class="line">    .fetch()</span><br><span class="line">    .rowsUpdated();</span><br><span class="line"><span class="comment">// 删除</span></span><br><span class="line">Mono&lt;Long&gt; deleteResult = databaseClient.sql(<span class="string">&quot;DELETE FROM person WHERE id = :id&quot;</span>)</span><br><span class="line">    .bind(<span class="string">&quot;id&quot;</span>, <span class="number">1</span>)</span><br><span class="line">    .fetch()</span><br><span class="line">    .rowsUpdated();</span><br><span class="line"><span class="comment">// 更新</span></span><br><span class="line">Mono&lt;Long&gt; updateResult = databaseClient.sql(<span class="string">&quot;UPDATE person SET name = :name WHERE id = :id&quot;</span>)</span><br><span class="line">    .bind(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;Jane Doe&quot;</span>)</span><br><span class="line">    .bind(<span class="string">&quot;id&quot;</span>, <span class="number">1</span>)</span><br><span class="line">    .fetch()</span><br><span class="line">    .rowsUpdated();</span><br><span class="line"><span class="comment">// 查询</span></span><br><span class="line"><span class="comment">// 查询单个结果</span></span><br><span class="line">Mono&lt;Person&gt; person = databaseClient.sql(<span class="string">&quot;SELECT * FROM person WHERE id = :id&quot;</span>)</span><br><span class="line">    .bind(<span class="string">&quot;id&quot;</span>, <span class="number">1</span>)</span><br><span class="line">    .map(row -&gt; <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="comment">/* initialize properties from row */</span>))</span><br><span class="line">    .one();</span><br><span class="line"><span class="comment">// 查询多个结果</span></span><br><span class="line">Flux&lt;Person&gt; people = databaseClient.sql(<span class="string">&quot;SELECT * FROM person&quot;</span>)    </span><br><span class="line">    .map(row -&gt; <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="comment">/* initialize properties from row */</span>))</span><br><span class="line">    .all();</span><br></pre></td></tr></table></figure></div>
<p>批量增删改操作示例</p>
<blockquote>
<p>对于批量操作，更推荐的做法是使用请求体（Request Body）来传递数据，特别是使用<code>POST</code>或<code>PUT</code>方法时。这样可以无限制地传递大量数据，同时保持URL的简洁和安全性。</p>
</blockquote>
<p>普通版本</p>
<ul>
<li>
<p>批量增加操作</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">Flux&lt;Person&gt; persons = Flux.just(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;John Doe&quot;</span>, <span class="number">25</span>), <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Jane Doe&quot;</span>, <span class="number">30</span>));</span><br><span class="line">Mono&lt;Long&gt; insertResults = persons.flatMap(person -&gt;</span><br><span class="line">    databaseClient.sql(<span class="string">&quot;INSERT INTO person (name, age) VALUES (:name, :age)&quot;</span>)</span><br><span class="line">        .bind(<span class="string">&quot;name&quot;</span>, person.getName())</span><br><span class="line">        .bind(<span class="string">&quot;age&quot;</span>, person.getAge())</span><br><span class="line">        .fetch()</span><br><span class="line">        .rowsUpdated()</span><br><span class="line">).reduce(<span class="number">0L</span>, Long::sum); <span class="comment">// 计数所有操作的总影响行数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line">List&lt;Person&gt; persons = Arrays.asList(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;John Doe&quot;</span>, <span class="number">25</span>), <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Jane Doe&quot;</span>, <span class="number">30</span>));</span><br><span class="line">Mono&lt;Long&gt; insertResults = Flux.fromIterable(persons)</span><br><span class="line">    .flatMap(person -&gt;</span><br><span class="line">        databaseClient.sql(<span class="string">&quot;INSERT INTO person (name, age) VALUES (:name, :age)&quot;</span>)</span><br><span class="line">            .bind(<span class="string">&quot;name&quot;</span>, person.getName())</span><br><span class="line">            .bind(<span class="string">&quot;age&quot;</span>, person.getAge())</span><br><span class="line">            .fetch()</span><br><span class="line">            .rowsUpdated()</span><br><span class="line">    ).reduce(<span class="number">0L</span>, Long::sum);</span><br></pre></td></tr></table></figure></div>
<blockquote>
<p><code>count</code>和<code>reduce</code>都是统计总数的方法，不过<code>count</code>统计的是流中元素的数量，是操作的总数，而<code>reduce</code>统计的是实际操作成功的总数。</p>
</blockquote>
</li>
<li>
<p>批量删除操作</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">Flux&lt;Long&gt; idsToDelete = Flux.just(<span class="number">1L</span>, <span class="number">2L</span>, <span class="number">3L</span>); <span class="comment">// 假设这是要删除的ID列表</span></span><br><span class="line">Mono&lt;Long&gt; deleteResults = idsToDelete.collectList().flatMap(ids -&gt;</span><br><span class="line">    databaseClient.sql(<span class="string">&quot;DELETE FROM person WHERE id IN (:ids)&quot;</span>)</span><br><span class="line">        .bind(<span class="string">&quot;ids&quot;</span>, ids)</span><br><span class="line">        .fetch()</span><br><span class="line">        .rowsUpdated()</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line">List&lt;Long&gt; idsToDelete = Arrays.asList(<span class="number">1L</span>, <span class="number">2L</span>, <span class="number">3L</span>);</span><br><span class="line">Mono&lt;Long&gt; deleteResults = Flux.fromIterable(idsToDelete)</span><br><span class="line">    .collectList()</span><br><span class="line">    .flatMap(ids -&gt;</span><br><span class="line">        databaseClient.sql(<span class="string">&quot;DELETE FROM person WHERE id IN (:ids)&quot;</span>)</span><br><span class="line">            .bind(<span class="string">&quot;ids&quot;</span>, ids)</span><br><span class="line">            .fetch()</span><br><span class="line">            .rowsUpdated()</span><br><span class="line">    );</span><br></pre></td></tr></table></figure></div>
</li>
<li>
<p>批量更新操作</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 假设要将所有指定ID的人的年龄更新为30</span></span><br><span class="line">Flux&lt;Long&gt; idsToUpdate = Flux.just(<span class="number">1L</span>, <span class="number">2L</span>, <span class="number">3L</span>);</span><br><span class="line">Mono&lt;Long&gt; updateResults = idsToUpdate.flatMap(ids -&gt;</span><br><span class="line">    databaseClient.sql(<span class="string">&quot;UPDATE person SET age = :age WHERE id = (:ids)&quot;</span>)</span><br><span class="line">        .bind(<span class="string">&quot;age&quot;</span>, <span class="number">30</span>)</span><br><span class="line">        .bind(<span class="string">&quot;ids&quot;</span>, ids)</span><br><span class="line">        .fetch()</span><br><span class="line">        .rowsUpdated()</span><br><span class="line">).reduce(<span class="number">0L</span>, Long::sum);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line">List&lt;Long&gt; idsToUpdate = Arrays.asList(<span class="number">1L</span>, <span class="number">2L</span>, <span class="number">3L</span>);</span><br><span class="line">Mono&lt;Long&gt; updateResults = Flux.fromIterable(idsToUpdate)</span><br><span class="line">    .flatMap(ids -&gt;</span><br><span class="line">        databaseClient.sql(<span class="string">&quot;UPDATE person SET age = :age WHERE id = (:ids)&quot;</span>)</span><br><span class="line">    		.bind(<span class="string">&quot;age&quot;</span>, <span class="number">30</span>)</span><br><span class="line">        	.bind(<span class="string">&quot;ids&quot;</span>, ids)</span><br><span class="line">        	.fetch()</span><br><span class="line">        	.rowsUpdated()</span><br><span class="line">).reduce(<span class="number">0L</span>, Long::sum);</span><br></pre></td></tr></table></figure></div>
</li>
</ul>
<p><code>Flux.defer</code>版本</p>
<ul>
<li>
<p>批量增加操作</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Person&gt; persons = Arrays.asList(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;John Doe&quot;</span>, <span class="number">25</span>), <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Jane Doe&quot;</span>, <span class="number">30</span>));</span><br><span class="line">Mono&lt;Long&gt; insertResults = Flux.defer(() -&gt; </span><br><span class="line">    Flux.fromIterable(persons)</span><br><span class="line">        .flatMap(person -&gt;</span><br><span class="line">            databaseClient.sql(<span class="string">&quot;INSERT INTO person (name, age) VALUES (:name, :age)&quot;</span>)</span><br><span class="line">                .bind(<span class="string">&quot;name&quot;</span>, person.getName())</span><br><span class="line">                .bind(<span class="string">&quot;age&quot;</span>, person.getAge())</span><br><span class="line">                .fetch()</span><br><span class="line">                .rowsUpdated()</span><br><span class="line">        )</span><br><span class="line">).reduce(<span class="number">0L</span>, Long::sum);</span><br></pre></td></tr></table></figure></div>
</li>
<li>
<p>批量删除操作</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Long&gt; idsToDelete = Arrays.asList(<span class="number">1L</span>, <span class="number">2L</span>, <span class="number">3L</span>);</span><br><span class="line">Mono&lt;Long&gt; deleteResults = Flux.defer(() -&gt; </span><br><span class="line">    Flux.fromIterable(idsToDelete)</span><br><span class="line">        .collectList()</span><br><span class="line">        .flatMap(ids -&gt;</span><br><span class="line">            databaseClient.sql(<span class="string">&quot;DELETE FROM person WHERE id IN (:ids)&quot;</span>)</span><br><span class="line">                .bind(<span class="string">&quot;ids&quot;</span>, ids)</span><br><span class="line">                .fetch()</span><br><span class="line">                .rowsUpdated()</span><br><span class="line">        )</span><br><span class="line">).reduce(<span class="number">0L</span>, Long::sum);</span><br></pre></td></tr></table></figure></div>
</li>
<li>
<p>批量修改操作</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Long&gt; idsToUpdate = Arrays.asList(<span class="number">1L</span>, <span class="number">2L</span>, <span class="number">3L</span>);</span><br><span class="line">Mono&lt;Long&gt; updateResults = Flux.defer(() -&gt; </span><br><span class="line">	Flux.fromIterable(idsToUpdate)</span><br><span class="line">    .flatMap(ids -&gt;</span><br><span class="line">        databaseClient.sql(<span class="string">&quot;UPDATE person SET age = :age WHERE id = (:ids)&quot;</span>)</span><br><span class="line">    		.bind(<span class="string">&quot;age&quot;</span>, <span class="number">30</span>)</span><br><span class="line">        	.bind(<span class="string">&quot;ids&quot;</span>, ids)</span><br><span class="line">        	.fetch()</span><br><span class="line">        	.rowsUpdated()</span><br><span class="line">).reduce(<span class="number">0L</span>, Long::sum);</span><br></pre></td></tr></table></figure></div>
</li>
</ul>
<blockquote>
<p>使用<code>Flux.defer</code>适合于某些特定的场景，主要是当你想确保每次订阅时都执行最新的操作逻辑，特别是在处理动态数据或需要确保操作使用最新状态的场景下。<code>Flux.defer</code>通过延迟操作的创建直到订阅发生，可以确保数据的实时性和操作的最新性。然而，并不是所有场景都适合使用<code>Flux.defer</code>。下面是一些考虑因素：</p>
<h3 id="适合使用fluxdefer的场景"><a class="markdownIt-Anchor" href="#适合使用fluxdefer的场景"></a> 适合使用<code>Flux.defer</code>的场景</h3>
<ul>
<li><strong>动态数据源</strong>：当数据源是动态变化的，比如依赖于时间或外部系统状态，使用<code>Flux.defer</code>可以确保每次订阅都获取最新数据。</li>
<li><strong>避免不必要的计算</strong>：如果有一些计算成本较高的操作，你只想在实际需要数据时才执行，<code>Flux.defer</code>可以帮助避免不必要的计算。</li>
<li><strong>条件性操作</strong>：当操作需要基于每次订阅时的特定条件来执行，使用<code>Flux.defer</code>可以确保操作符合当前的条件。</li>
</ul>
<h3 id="不适合使用fluxdefer的场景"><a class="markdownIt-Anchor" href="#不适合使用fluxdefer的场景"></a> 不适合使用<code>Flux.defer</code>的场景</h3>
<ul>
<li><strong>静态数据或一次性计算</strong>：对于不会改变的数据或只需要计算一次的操作，使用<code>Flux.defer</code>可能没有必要，直接使用<code>Flux.just</code>或<code>Mono.just</code>等操作可能更合适。</li>
<li><strong>共享操作结果</strong>：如果你想让所有订阅者共享同一个操作结果，而不是为每个订阅者重新执行操作，那么<code>Flux.defer</code>不是一个好选择。在这种情况下，可以考虑使用<code>.cache()</code>操作符。</li>
<li><strong>需要即时执行的操作</strong>：由于<code>Flux.defer</code>会延迟操作直到订阅发生，如果你需要在定义流的同时立即执行某些操作（例如，预加载数据），<code>Flux.defer</code>可能不适合。</li>
</ul>
</blockquote>
<h5 id="关于响应式-defer-的理解"><a class="markdownIt-Anchor" href="#关于响应式-defer-的理解"></a> 关于响应式 <code>defer</code> 的理解</h5>
<ol>
<li><strong>对于动态或实时数据</strong>：如果操作涉及获取可能随时间变化的数据，或者其结果依赖于当前的系统状态（如数据库中的数据、系统时间或外部服务的状态），那么使用<code>defer</code>是合适的。这确保了每次订阅都能获取到最新的数据，避免了由于早期执行而可能导致的数据过时问题。</li>
<li><strong>避免抢注问题</strong>：在用户注册的场景中，使用<code>defer</code>可以确保在订阅（也就是实际执行注册逻辑）的时刻检查用户名是否已存在。这有助于减少因多个用户几乎同时注册相同用户名而导致的冲突。</li>
<li><strong>非一成不变的数据</strong>：对于不是一成不变的数据，特别是那些可能受到外部状态影响的操作，使用<code>defer</code>来延迟操作的创建和执行，直到订阅发生，是一个很好的实践。这样做可以确保操作的执行反映了最新的状态，提高了程序的健壮性和数据的准确性。</li>
<li><strong>有副作用的操作</strong>：如果操作具有副作用（如修改数据库、调用外部服务等），使用<code>Mono.defer</code>确保副作用操作在每次订阅时执行，而不是在声明阶段就执行，这有助于更好地控制副作用的发生时机。</li>
</ol>
<p><strong>通俗理解</strong></p>
<ul>
<li>如果结果可能随着时间或状态的变化而变化，或者操作具有副作用，那么使用<code>defer</code>。</li>
<li>对于静态的、确定不变的数据或结果，直接使用<code>Mono.just</code>或<code>Flux.fromIterable</code>等其他不涉及延迟执行的操作符即可。</li>
</ul>
<p>不过，如果完全采用响应式编程，大部分情况下，都不需要显式地使用<code>defer</code>。</p>
<p><code>defer</code>在响应式编程中通常在以下几种情况下需要显式使用：</p>
<ol>
<li>
<p><strong>确保操作延迟执行</strong>：当你需要确保某个操作（如数据库查询、外部服务调用等）确实在每次订阅时执行，而不是在声明流时就执行。这对于包含时间相关的操作或依赖于每次请求可能不同的上下文信息的操作尤其重要。</p>
</li>
<li>
<p><strong>使用动态或实时参数</strong>：当操作的参数在声明流的时间点可能还不确定，或者参数值可能随时间变化（例如，依赖于用户的实时输入或其他变化的系统状态）时，<code>defer</code>可以确保参数是在实际执行操作时才被评估和使用。</p>
</li>
<li>
<p><strong>避免副作用的预先执行</strong>：如果某个操作具有副作用（比如修改全局状态或外部资源），使用<code>defer</code>可以防止这些副作用在不适当的时间（如流声明时）就发生，确保副作用操作在订阅时才执行。</p>
</li>
<li>
<p><strong>封装非响应式操作</strong>：当需要将非响应式操作（比如传统的同步方法调用）转换为响应式流时，<code>defer</code>可以用来封装这些操作，确保它们在响应式上下文中以非阻塞的方式延迟执行。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReactiveService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 假设这是一个非响应式的同步操作</span></span><br><span class="line">    String <span class="title function_">nonReactiveOperation</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 模拟一些耗时操作，比如数据库查询或远程服务调用</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>); <span class="comment">// 模拟耗时</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            Thread.currentThread().interrupt();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;非响应式操作的结果&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用Mono.defer封装非响应式操作</span></span><br><span class="line">    Mono&lt;String&gt; <span class="title function_">wrapNonReactiveOperationWithDefer</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Mono.defer(() -&gt; &#123;</span><br><span class="line">            <span class="comment">// 调用非响应式的同步操作，并将其结果封装为Mono</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> nonReactiveOperation();</span><br><span class="line">            <span class="keyword">return</span> Mono.just(result);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
</ol>
<h4 id="整合-reactive-mongodb-reactive-redis"><a class="markdownIt-Anchor" href="#整合-reactive-mongodb-reactive-redis"></a> 整合 Reactive MongoDB、Reactive Redis</h4>
<h5 id="文档存储"><a class="markdownIt-Anchor" href="#文档存储"></a> 文档存储</h5>
<p>文档存储是一种非关系型数据库（NoSQL）存储方式，它以文档的形式存储和管理数据。文档存储数据库将数据存储为文档，这些文档可以是JSON、XML或其他类似的格式。文档内部可以包含嵌套的数据结构，如列表或字典，从而允许存储复杂的数据结构。文档存储数据库的例子包括 MongoDB、CouchDB 和 Amazon DynamoDB 等。</p>
<p>文档存储与传统的关系型数据库存储（如MySQL、PostgreSQL等）相比，主要有以下区别：</p>
<ol>
<li><strong>数据模型</strong>：关系型数据库基于表格模型，数据以行和列的形式存储，且每个表格通常需要预定义的模式（schema）。文档存储数据库则以更灵活的文档格式存储数据，每个文档可以有不同的结构，不需要预定义模式。</li>
<li><strong>灵活性</strong>：文档存储数据库因其无模式（schema-less）特性而提供更高的灵活性，便于存储结构化或半结构化数据，同时也更容易适应数据结构的变化。</li>
<li><strong>查询语言</strong>：关系型数据库使用标准的SQL作为查询语言，而文档存储数据库使用基于文档的查询语言，这些语言通常更适合于处理文档型数据。</li>
<li><strong>扩展性</strong>：文档存储数据库通常更容易水平扩展，支持分布式数据存储，而关系型数据库的扩展通常更复杂，尤其是在处理大规模数据时。</li>
<li><strong>一致性和事务处理</strong>：传统的关系型数据库通常提供强一致性和复杂的事务处理特性。相比之下，许多文档存储数据库采用最终一致性模型，并可能提供较为有限的事务处理能力，虽然一些文档存储数据库（如最新版本的MongoDB）已开始支持更复杂的事务处理。</li>
<li><strong>用例</strong>：文档存储数据库适合于需要存储大量非结构化或半结构化数据的应用场景，如内容管理系统、电商平台等。而关系型数据库则适合于需要复杂查询和事务处理的传统企业级应用。</li>
</ol>
<h5 id="键值对存储"><a class="markdownIt-Anchor" href="#键值对存储"></a> 键值对存储</h5>
<p>键值对存储是一种简单的数据存储模型，它通过键（key）来访问和存储数据值（value）。这种模型类似于字典或哈希表，其中每个键唯一对应一个值。键值对存储系统通常用于缓存、会话存储、简单的数据记录等场景。与文档存储和关系型数据库相比，键值对存储提供了高速的查找和存储能力，但在数据结构的复杂性和查询能力上相对有限。键值对存储数据库的典型例子就是 Redis。</p>
<p>以下是键值对存储方式的一些主要特点和与传统数据库存储的区别：</p>
<ol>
<li><strong>数据模型简单</strong>：键值对存储的数据模型极其简单，每个键对应一个值，值可以是字符串、数字或者更复杂的数据结构（取决于具体的键值对存储系统）。不同于关系型数据库的行和列或文档存储的JSON文档，键值对存储不关心值的内部结构。</li>
<li><strong>高性能</strong>：由于数据模型的简单，键值对存储能够提供非常高的读写性能。这使得键值对存储非常适合用作应用程序的缓存层，可以快速响应数据读取请求。</li>
<li><strong>易于扩展</strong>：键值对存储通常支持水平扩展，可以通过添加更多节点来增加数据库的容量和吞吐量，而不需要复杂的数据迁移或重构。</li>
<li><strong>灵活性</strong>：虽然键值对存储的数据模型相对简单，但其值的存储格式可以非常灵活。一些键值对存储系统允许存储复杂的数据结构作为值，如列表、集合或哈希表等。</li>
<li><strong>有限的查询能力</strong>：与关系型数据库或文档存储相比，键值对存储的查询能力较为有限。通常，只能通过键直接访问数据，缺乏对值的复杂查询能力，如基于值的内容进行搜索或过滤。</li>
<li><strong>适用场景</strong>：键值对存储特别适合于需要快速读写访问的场景，如缓存、会话存储（session storage）、实时计数器等。它不适合需要复杂查询或数据关联分析的应用。</li>
</ol>
<blockquote>
<p>关于 MongoDB 和 Redis 的详细介绍参考<a class="link"   href="https://www.runoob.com/mongodb/mongodb-tutorial.html" >MongoDB 教程 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 和 <a class="link"   href="https://www.runoob.com/redis/redis-tutorial.html" >Redis 教程 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>。</p>
</blockquote>
<h5 id="连接配置-2"><a class="markdownIt-Anchor" href="#连接配置-2"></a> 连接配置</h5>
<p>配置 application.yaml 文件，参考如下</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment"># ... r2dbc 的配置内容</span></span><br><span class="line">  <span class="attr">data:</span></span><br><span class="line">    <span class="attr">mongodb:</span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">mongodb://localhost:27017/your_database</span> <span class="comment"># MongoDB连接URI</span></span><br><span class="line">    <span class="attr">redis:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">      <span class="attr">reactive:</span></span><br><span class="line">        <span class="attr">pool:</span></span><br><span class="line">          <span class="attr">max-active:</span> <span class="number">8</span> <span class="comment"># 根据需要调整连接池大小</span></span><br></pre></td></tr></table></figure></div>
<p>这里的<code>your_database</code>是自定义的数据库名称，它会在保存数据时自动创建，不需要手动创建。</p>
<p>特别的，对于 Redis，由于其本身的技术特性和数据模型，导致其无法通过简单的声明式配置实现，通常还需要专门的编程式配置，即配置类。</p>
<p>下面提供了两种配置类：</p>
<blockquote>
<p>注意：部分基础配置已经在前面的 application.yaml 中配置完成，下面的配置都是高度自定义的配置。</p>
</blockquote>
<p>使用<code>Jackson2JsonRedisSerializer</code>配置</p>
<p>当使用<code>Jackson2JsonRedisSerializer</code>时，你需要为每种类型提供一个序列化器实例。这意味着如果你有多种类型的数据需要存储，你可能需要为每种类型配置不同的<code>ReactiveRedisTemplate</code>实例。不过，通常情况下，一个应用中使用单一类型的情况较多。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JacksonRedisConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; ReactiveRedisTemplate&lt;String, T&gt; <span class="title function_">reactiveRedisTemplateWithJackson</span><span class="params">(ReactiveRedisConnectionFactory connectionFactory, Class&lt;T&gt; type)</span> &#123;</span><br><span class="line">        Jackson2JsonRedisSerializer&lt;T&gt; valueSerializer = <span class="keyword">new</span> <span class="title class_">Jackson2JsonRedisSerializer</span>&lt;&gt;(type);</span><br><span class="line">        <span class="type">StringRedisSerializer</span> <span class="variable">keySerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>();</span><br><span class="line">        </span><br><span class="line">        RedisSerializationContext.RedisSerializationContextBuilder&lt;String, T&gt; builder =</span><br><span class="line">                RedisSerializationContext.newSerializationContext(keySerializer);</span><br><span class="line">        RedisSerializationContext&lt;String, T&gt; context = builder.value(valueSerializer).build();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ReactiveRedisTemplate</span>&lt;&gt;(connectionFactory, context);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>使用<code>GenericJackson2JsonRedisSerializer</code>配置</p>
<p><code>GenericJackson2JsonRedisSerializer</code>的一个优点是它可以在序列化时包含类型信息，从而支持多种类型的数据而无需为每种类型提供单独的序列化器实例。这使得它在处理多种数据类型的场景下更为方便。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GenericJacksonRedisConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ReactiveRedisTemplate&lt;String, Object&gt; <span class="title function_">reactiveRedisTemplateWithGenericJackson</span><span class="params">(ReactiveRedisConnectionFactory connectionFactory)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建一个定制化的ObjectMapper实例</span></span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        mapper.registerModule(<span class="keyword">new</span> <span class="title class_">JavaTimeModule</span>()); <span class="comment">// 注册JavaTimeModule</span></span><br><span class="line">        mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS); <span class="comment">// 确保Java 8日期/时间类型以ISO格式序列化</span></span><br><span class="line">        mapper.findAndRegisterModules(); <span class="comment">// 自动注册所有可用的模块（包括JavaTimeModule）</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用定制化的ObjectMapper实例创建GenericJackson2JsonRedisSerializer</span></span><br><span class="line">        <span class="type">GenericJackson2JsonRedisSerializer</span> <span class="variable">valueSerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GenericJackson2JsonRedisSerializer</span>(mapper);</span><br><span class="line">        <span class="comment">// 上面的配置是为了支持LocalDate、LocalTime、LocalDateTime的序列化</span></span><br><span class="line">        <span class="comment">// GenericJackson2JsonRedisSerializer valueSerializer = new GenericJackson2JsonRedisSerializer();</span></span><br><span class="line">        <span class="type">StringRedisSerializer</span> <span class="variable">keySerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>();</span><br><span class="line">        </span><br><span class="line">        RedisSerializationContext.RedisSerializationContextBuilder&lt;String, Object&gt; builder =</span><br><span class="line">                RedisSerializationContext.newSerializationContext(keySerializer);</span><br><span class="line">        RedisSerializationContext&lt;String, Object&gt; context = builder.value(valueSerializer).build();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ReactiveRedisTemplate</span>&lt;&gt;(connectionFactory, context);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>对比</p>
<ul>
<li>如果你的应用主要处理单一类型的数据或者你需要对序列化过程有更细致的控制，<code>Jackson2JsonRedisSerializer</code>可能是一个好的选择。</li>
<li>如果你需要在Redis中存储多种类型的数据，并希望简化序列化和反序列化的处理，那么<code>GenericJackson2JsonRedisSerializer</code>可能更适合你的需求。</li>
</ul>
<p>通常<code>GenericJackson2JsonRedisSerializer</code>通用性更强，但是由于其类型自动处理的功能导致在某些情况下性能不如<code>Jackson2JsonRedisSerializer</code>高，而且生成的 json 数据包含了类型信息，不如<code>Jackson2JsonRedisSerializer</code>简洁，不方便开发者进行调试。此外，初学者学习推荐先从<code>Jackson2JsonRedisSerializer</code>开始再到<code>GenericJackson2JsonRedisSerializer</code>。</p>
<blockquote>
<h2 id="不同的配置方式"><a class="markdownIt-Anchor" href="#不同的配置方式"></a> 不同的配置方式</h2>
<p>在Spring Boot应用中，通过<code>application.properties</code>或<code>application.yml</code>文件进行配置属于<strong>声明式配置</strong>。这种方式允许开发者以简洁明了的形式指定应用配置，而无需编写额外的代码。Spring Boot的自动配置特性会根据这些属性以及应用的依赖关系自动设置合理的默认配置。</p>
<h3 id="声明式配置"><a class="markdownIt-Anchor" href="#声明式配置"></a> 声明式配置</h3>
<p><strong>声明式配置</strong>通常用于配置数据库连接、应用参数、日志级别等。例如，配置MongoDB和PostgreSQL的连接信息：</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># MongoDB</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">data:</span></span><br><span class="line">    <span class="attr">mongodb:</span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">mongodb://username:password@localhost:27017/databaseName</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># PostgreSQL</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:postgresql://localhost:5432/databaseName</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">username</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">password</span></span><br></pre></td></tr></table></figure></div>
<h3 id="编程式配置"><a class="markdownIt-Anchor" href="#编程式配置"></a> 编程式配置</h3>
<p><strong>编程式配置</strong>涉及创建配置类（通常带有<code>@Configuration</code>注解的类），在这些类中，你可以使用Java代码定义Bean和配置应用程序的行为。这种方式提供了更高的灵活性和控制力，适用于需要根据复杂逻辑或条件动态决定配置的场景。</p>
<p>例如，创建Redis的配置类：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> LettuceConnectionFactory <span class="title function_">redisConnectionFactory</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LettuceConnectionFactory</span>(<span class="keyword">new</span> <span class="title class_">RedisStandaloneConfiguration</span>(<span class="string">&quot;localhost&quot;</span>, <span class="number">6379</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="其他配置方式"><a class="markdownIt-Anchor" href="#其他配置方式"></a> 其他配置方式</h3>
<p>除了声明式配置和编程式配置，Spring Boot还支持通过<strong>环境变量</strong>、<strong>命令行参数</strong>、<strong>外部配置文件</strong>等多种方式来覆盖或指定配置。这提供了极大的灵活性，使得同一个应用可以在不同环境下使用不同的配置。</p>
<h3 id="使用配置类配置mongodb和postgresql"><a class="markdownIt-Anchor" href="#使用配置类配置mongodb和postgresql"></a> 使用配置类配置MongoDB和PostgreSQL</h3>
<p>理论上，你也可以使用配置类去配置MongoDB和PostgreSQL，就像配置Redis那样。然而，考虑到Spring Boot提供了对这些数据库的广泛自动配置支持，通常没有必要手动创建这些配置类。通过声明式配置，你可以更加简洁地利用Spring Boot的自动配置特性，减少样板代码，同时也能够更容易地管理和修改配置。在大多数Spring Boot应用中，采用声明式配置来利用Spring Boot的自动配置功能通常更为简便和高效。这样做不仅减少了配置的复杂性，也使得配置更加集中和易于管理。只有在需要高度自定义配置或Spring Boot的自动配置不能满足需求时，才考虑使用编程式配置。</p>
</blockquote>
<h5 id="代码实现方式-2"><a class="markdownIt-Anchor" href="#代码实现方式-2"></a> 代码实现方式</h5>
<p>MongoDB 也有类似于 R2DBC 的 <code>ReactiveMongoRepository</code>(继承了<code>ReactiveCrudRepository</code>接口)，提供了类似的数据访问方式：自带的方法实现、方法名解析、自定义方法(<code>ReactiveMongoTemplate</code>实现)等。</p>
<p>Redis 则没有响应式接口支持，需要自定义实现，主要是通过<code>ReactiveRedisTemplate</code>实现数据库操作。</p>
<p><strong>实体类注解</strong></p>
<p>关于实体类，MongoDB 提供了一些相关的注解</p>
<ul>
<li>
<p><strong>@Document</strong>: 用于指定实体类对应的MongoDB集合（collection）。可以通过<code>collection</code>属性指定集合的名称，如果不指定，默认使用类的名称（首字母小写）。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Document(collection = &quot;departments&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Department</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li>
<p><strong>@Id</strong>: 用于标记实体类中的属性作为文档的ID。MongoDB文档总是有一个<code>_id</code>字段作为唯一标识符，使用此注解可以映射类的属性到这个字段。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Id</span></span><br><span class="line"><span class="keyword">private</span> String id;</span><br></pre></td></tr></table></figure></div>
</li>
<li>
<p><strong>@Field</strong>: 用于指定实体类属性映射到文档中的字段。可以通过它自定义字段的名称。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Field(&quot;dept_name&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String departmentName;</span><br></pre></td></tr></table></figure></div>
</li>
<li>
<p><strong>@Indexed</strong>: 用于标记一个字段应该被索引。这对于提高查询性能非常有用，特别是对于经常作为查询条件的字段。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Indexed(unique = true)</span></span><br><span class="line"><span class="keyword">private</span> String departmentCode;</span><br></pre></td></tr></table></figure></div>
</li>
<li>
<p><strong>@Transient</strong>: 标记为<code>@Transient</code>的字段不会被持久化到MongoDB中。这对于临时状态或计算得出的属性很有用。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transient</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> memberCount;</span><br></pre></td></tr></table></figure></div>
</li>
<li>
<p><strong>@CompoundIndex</strong>: 用于类级别，指定复合索引。这可以用来在多个字段上创建索引，以优化特定类型的查询。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Document</span></span><br><span class="line"><span class="meta">@CompoundIndex(def = &quot;&#123;&#x27;departmentCode&#x27;: 1, &#x27;departmentName&#x27;: -1&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Department</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
</ul>
<p>Redis 关于实体类的注解没有那么多，主要是以下几个，部分注解是通用的。</p>
<ul>
<li><strong>@RedisHash</strong>: 用于类，标记该类的对象将被存储在Redis的哈希结构中。<code>@RedisHash</code>注解可以接受一个可选的参数，用于指定在Redis中存储时使用的哈希的名称。</li>
<li><strong>@Id</strong>: 用于标记实体的id字段，这个字段的值将被用作Redis哈希结构中的key。</li>
<li><strong>@Indexed</strong>: 可以用于字段上，表示该字段将被索引，适用于进行查询操作。</li>
<li><strong>@TimeToLive</strong>: 可以用于字段上，指定一个实体或其部分的过期时间（生存时间）。</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RedisHash(&quot;people&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Indexed</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TimeToLive</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Long</span> <span class="variable">expiration</span> <span class="operator">=</span> <span class="number">86400L</span>; <span class="comment">// 生存时间设置为24小时（86400秒）</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略构造函数、Getter和Setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><strong>注意：使用 Redis 缓存的数据都需要实现可序列化接口<code>Serializable</code>。</strong></p>
<p><strong>CRUD 操作示例</strong></p>
<p>由于 Reactive MongoDB 的<code>ReactiveMongoRepository</code>是继承<code>ReactiveCrudRepository</code>接口实现的，这里只介绍自定义方法实现，即通过<code>ReactiveMongoTemplate</code>实现。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 增加</span></span><br><span class="line"><span class="comment">// 单个对象</span></span><br><span class="line"><span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;John Doe&quot;</span>, <span class="number">30</span>);</span><br><span class="line">Mono&lt;Person&gt; insertMono = reactiveMongoTemplate.insert(person);</span><br><span class="line"><span class="comment">// 多个对象</span></span><br><span class="line">List&lt;Person&gt; persons = Arrays.asList(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;John Doe&quot;</span>, <span class="number">30</span>), <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Jane Doe&quot;</span>, <span class="number">25</span>));</span><br><span class="line">Flux&lt;Person&gt; insertFlux = reactiveMongoTemplate.insertAll(persons);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除</span></span><br><span class="line"><span class="comment">// 单个对象</span></span><br><span class="line"><span class="type">Query</span> <span class="variable">query</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Query</span>(Criteria.where(<span class="string">&quot;name&quot;</span>).is(<span class="string">&quot;John Doe&quot;</span>));</span><br><span class="line">Mono&lt;DeleteResult&gt; deleteMono = reactiveMongoTemplate.remove(query, Person.class);</span><br><span class="line"><span class="comment">// 多个对象</span></span><br><span class="line"><span class="type">Query</span> <span class="variable">query</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Query</span>(Criteria.where(<span class="string">&quot;age&quot;</span>).lt(<span class="number">25</span>));</span><br><span class="line">Mono&lt;DeleteResult&gt; deleteMono = reactiveMongoTemplate.remove(query, Person.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新</span></span><br><span class="line"><span class="comment">// 单个对象</span></span><br><span class="line"><span class="type">Query</span> <span class="variable">query</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Query</span>(Criteria.where(<span class="string">&quot;name&quot;</span>).is(<span class="string">&quot;John Doe&quot;</span>));</span><br><span class="line"><span class="type">Update</span> <span class="variable">update</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Update</span>().set(<span class="string">&quot;age&quot;</span>, <span class="number">31</span>);</span><br><span class="line">Mono&lt;UpdateResult&gt; updateMono = reactiveMongoTemplate.updateFirst(query, update, Person.class);</span><br><span class="line"><span class="comment">// 多个对象</span></span><br><span class="line"><span class="type">Query</span> <span class="variable">query</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Query</span>(Criteria.where(<span class="string">&quot;age&quot;</span>).lt(<span class="number">30</span>));</span><br><span class="line"><span class="type">Update</span> <span class="variable">update</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Update</span>().set(<span class="string">&quot;status&quot;</span>, <span class="string">&quot;active&quot;</span>);</span><br><span class="line">Mono&lt;UpdateResult&gt; updateMono = reactiveMongoTemplate.updateMulti(query, update, Person.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询</span></span><br><span class="line"><span class="comment">// 单个对象</span></span><br><span class="line">Mono&lt;Person&gt; personMono = reactiveMongoTemplate.findById(<span class="string">&quot;someId&quot;</span>, Person.class);</span><br><span class="line"><span class="type">Query</span> <span class="variable">query</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Query</span>(Criteria.where(<span class="string">&quot;name&quot;</span>).is(<span class="string">&quot;John Doe&quot;</span>)); <span class="comment">// 或者使用查询对象 Query</span></span><br><span class="line">Mono&lt;Person&gt; personMono = reactiveMongoTemplate.findOne(query, Person.class);</span><br><span class="line"><span class="comment">// 多个对象</span></span><br><span class="line"><span class="type">Query</span> <span class="variable">query</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Query</span>(Criteria.where(<span class="string">&quot;age&quot;</span>).gt(<span class="number">20</span>));</span><br><span class="line">Flux&lt;Person&gt; personsFlux = reactiveMongoTemplate.find(query, Person.class);</span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>上述示例中的<code>UpdateResult</code>和<code>DeleteResult</code>是来自于<code>com.mongodb.reactivestreams.client</code>包，它们提供了操作的结果信息，比如影响的文档数量等。</p>
</blockquote>
<p>Redis 也有类似的 CRUD 操作，但是需要考虑更多的模式和策略。</p>
<p>下面先给出 CRUD 操作的示例</p>
<p><strong>单对象 CRUD 操作</strong></p>
<ol>
<li>
<p>创建或更新（单个对象）</p>
<p>使用<code>ReactiveRedisTemplate</code>的<code>opsForValue().set()</code>方法可以存储单个对象。如果键已存在，它会被更新。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Mono&lt;Boolean&gt; <span class="title function_">savePerson</span><span class="params">(Person person)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;person:&quot;</span> + person.getId();</span><br><span class="line">    <span class="keyword">return</span> reactiveRedisTemplate.opsForValue().set(key, person);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li>
<p>查询（单个对象）</p>
<p>使用<code>opsForValue().get()</code>方法根据键查询单个对象。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Mono&lt;Person&gt; <span class="title function_">findPerson</span><span class="params">(String id)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;person:&quot;</span> + id;</span><br><span class="line">    <span class="keyword">return</span> reactiveRedisTemplate.opsForValue().get(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li>
<p>删除（单个对象）</p>
<p>使用<code>delete()</code>方法根据键删除单个对象。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Mono&lt;Boolean&gt; <span class="title function_">deletePerson</span><span class="params">(String id)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;person:&quot;</span> + id;</span><br><span class="line">    <span class="keyword">return</span> reactiveRedisTemplate.opsForValue().delete(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
</ol>
<p><strong>多对象 CRUD 操作</strong></p>
<ol>
<li>
<p>创建或更新（多个对象）</p>
<p>Redis 并不直接支持一次性创建或更新多个对象的操作。你需要对每个对象进行遍历并分别调用设置方法。这可以通过<code>Flux</code>来实现。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Flux&lt;Boolean&gt; <span class="title function_">savePersons</span><span class="params">(List&lt;Person&gt; persons)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Flux.fromIterable(persons)</span><br><span class="line">        .flatMap(person -&gt; savePerson(person)); <span class="comment">// savePerson 就是前面单对象操作中的实现方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li>
<p>查询（多个对象）</p>
<p>查询多个对象通常涉及到根据多个键查询。在Redis中，可以使用<code>Flux</code>来遍历键并查询。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Flux&lt;Person&gt; <span class="title function_">findPersons</span><span class="params">(List&lt;String&gt; ids)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Flux.fromIterable(ids)</span><br><span class="line">        .flatMap(id -&gt; findPerson(id));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li>
<p>删除（多个对象）</p>
<p>删除多个对象也需要对每个键进行遍历并删除。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Flux&lt;Boolean&gt; <span class="title function_">deletePersons</span><span class="params">(List&lt;String&gt; ids)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Flux.fromIterable(ids)</span><br><span class="line">        .flatMap(id -&gt; deletePerson(id));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
</ol>
<p><strong>实现策略</strong></p>
<p>存储多对象数据</p>
<ol>
<li><strong>每个对象存储一份数据</strong>：这种方式适合于需要频繁访问或更新单个对象的场景。通过使用唯一键为每个对象存储一份数据，可以快速地访问和更新单个对象而不影响其他对象。</li>
<li><strong>存储对象集合</strong>：当需要一次性加载或处理多个对象时，可以将这些对象作为一个集合存储。这种方式适用于数据一致性要求不高或同时操作整个集合的场景。例如，可以将对象序列化为JSON数组存储在单个键下。</li>
</ol>
<p>Redis中的 CRUD 和缓存失效策略</p>
<ul>
<li><strong>创建和更新（C和U）</strong>：在Redis中创建和更新操作通常是通过设置键值对来完成的。如果数据发生变化，直接更新对应的键值对即可。对于缓存场景，如果是更新操作，通常会直接更新缓存中的数据，或者删除缓存中的旧数据让其在下次访问时重新加载。</li>
<li><strong>读取（R）</strong>：读取操作是Redis中最常见的用例之一，特别是作为缓存时。由于Redis的读取性能非常高，它非常适合用作频繁读取的数据的缓存。</li>
<li><strong>删除（D）</strong>：在数据变更或不再需要时，可以通过删除操作移除Redis中的数据。对于缓存，当底层数据发生变化导致缓存数据过时时，常见的做法是直接删除缓存中的数据，避免提供过时的信息。</li>
</ul>
<p>缓存失效策略</p>
<ul>
<li><strong>主动失效</strong>：应用程序在更新底层数据时主动删除或更新缓存中的数据。这种策略可以确保缓存数据的一致性，但需要应用程序显式地管理缓存的失效。</li>
<li><strong>被动失效</strong>：利用Redis的<code>EXPIRE</code>命令为缓存数据设置生存时间（TTL），让数据在指定时间后自动过期。这种策略适用于那些即使数据稍微过时也不会造成大问题的场景。</li>
</ul>
<blockquote>
<h2 id="更新缓存-or-清空缓存"><a class="markdownIt-Anchor" href="#更新缓存-or-清空缓存"></a> 更新缓存 or 清空缓存?</h2>
<h3 id="更新缓存"><a class="markdownIt-Anchor" href="#更新缓存"></a> 更新缓存</h3>
<p><strong>适用场景</strong>：</p>
<ul>
<li>数据频繁读取且更新成本相对较低的情况。</li>
<li>需要保证数据一致性，且能够容易地计算出更新后的值。</li>
<li>应用场景对数据实时性要求较高，必须确保缓存中的数据尽可能反映最新状态。</li>
</ul>
<p><strong>优点</strong>：</p>
<ul>
<li>减少对后端数据源的查询压力，提高数据访问速度。</li>
<li>保持缓存数据的实时性和一致性。</li>
</ul>
<p><strong>缺点</strong>：</p>
<ul>
<li>实现复杂度较高，尤其是当更新逻辑复杂或与原始数据生成逻辑不一致时。</li>
<li>在高并发场景下，更新缓存可能引入竞态条件，需要额外的同步机制。</li>
</ul>
<h3 id="清空缓存"><a class="markdownIt-Anchor" href="#清空缓存"></a> 清空缓存</h3>
<p><strong>适用场景</strong>：</p>
<ul>
<li>数据更新频率低，或者更新操作对性能影响较大的场景。</li>
<li>数据一致性要求不是非常严格，可以接受短时间内缓存数据与数据库数据的不一致。</li>
<li>更新操作涉及复杂逻辑，直接重新生成缓存内容比更新现有缓存更简单或更高效。</li>
</ul>
<p><strong>优点</strong>：</p>
<ul>
<li>实现简单，只需删除缓存项即可，无需处理复杂的更新逻辑。</li>
<li>避免了因缓存数据更新不当而导致的数据不一致问题。</li>
</ul>
<p><strong>缺点</strong>：</p>
<ul>
<li>频繁清空缓存可能导致对后端数据源的访问增加，影响性能。</li>
<li>用户可能会遇到缓存失效后的延迟增加，尤其是对于计算或获取成本较高的数据。</li>
</ul>
<h3 id="总结-2"><a class="markdownIt-Anchor" href="#总结-2"></a> 总结</h3>
<ul>
<li>如果能够容易且准确地更新缓存以反映最新数据，而且这样做对性能影响不大，则<strong>更新缓存</strong>可能是更好的选择。</li>
<li>如果更新缓存的逻辑复杂，或者保持数据最新性的成本较高，清空（删除）缓存然后在下次访问时重新生成可能是更简单、更有效的方法。</li>
</ul>
</blockquote>
<p><strong>封装到数据访问层</strong></p>
<p>MongoDB 可以将自定义的接口和主接口组合起来</p>
<p>首先创建自定义的 repository 接口，声明自定义方法</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CustomPersonRepository</span> &#123;</span><br><span class="line">    Flux&lt;Person&gt; <span class="title function_">findCustomQuery</span><span class="params">(String criteria)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>然后创建自定义接口的实现类，注入<code>ReactiveMongoTemplate</code>来执行实际的数据库操作</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomPersonRepositoryImpl</span> <span class="keyword">implements</span> <span class="title class_">CustomPersonRepository</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ReactiveMongoTemplate mongoTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CustomPersonRepositoryImpl</span><span class="params">(ReactiveMongoTemplate mongoTemplate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.mongoTemplate = mongoTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Flux&lt;Person&gt; <span class="title function_">findCustomQuery</span><span class="params">(String criteria)</span> &#123;</span><br><span class="line">        <span class="type">Query</span> <span class="variable">query</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Query</span>(Criteria.where(<span class="string">&quot;someField&quot;</span>).is(criteria));</span><br><span class="line">        <span class="keyword">return</span> mongoTemplate.find(query, Person.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>最后组合自定义 repository 接口到主 repository 接口，让主 repository 接口扩展自定义的接口</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PersonRepository</span> <span class="keyword">extends</span> <span class="title class_">ReactiveMongoRepository</span>&lt;Person, String&gt;, CustomPersonRepository &#123;</span><br><span class="line">    <span class="comment">// 自带的CRUD方法和查询方法名解析方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>Redis 直接定义接口和实现类即可</p>
<p>创建接口</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ReactivePersonRepository</span> &#123;</span><br><span class="line">    Mono&lt;Person&gt; <span class="title function_">save</span><span class="params">(Person person)</span>;</span><br><span class="line">    Mono&lt;Person&gt; <span class="title function_">findById</span><span class="params">(String id)</span>;</span><br><span class="line">    Flux&lt;Person&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line">    Mono&lt;Void&gt; <span class="title function_">deleteById</span><span class="params">(String id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>创建实现类，注入<code>ReactiveRedisTemplate</code>和<code>ReactiveValueOperations</code>(实际上就是对<code>ReactiveRedisTemplate.opsForValue()</code>的引用，简化了代码)</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReactivePersonRepositoryImpl</span> <span class="keyword">implements</span> <span class="title class_">ReactivePersonRepository</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ReactiveRedisTemplate&lt;String, Person&gt; redisTemplate;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ReactiveValueOperations&lt;String, Person&gt; reactiveValueOps;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ReactivePersonRepositoryImpl</span><span class="params">(ReactiveRedisTemplate&lt;String, Person&gt; redisTemplate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.redisTemplate = redisTemplate;</span><br><span class="line">        <span class="built_in">this</span>.reactiveValueOps = redisTemplate.opsForValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Person&gt; <span class="title function_">save</span><span class="params">(Person person)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> reactiveValueOps.set(person.getId(), person).thenReturn(person);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Person&gt; <span class="title function_">findById</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> reactiveValueOps.get(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Flux&lt;Person&gt; <span class="title function_">findAll</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.execute(connection -&gt; </span><br><span class="line">            connection.keyCommands().scan(ScanOptions.scanOptions().match(<span class="string">&quot;*&quot;</span>).build()))</span><br><span class="line">            .flatMap(cursor -&gt; Flux.fromIterable(cursor)</span><br><span class="line">            .flatMap(key -&gt; reactiveValueOps.get(<span class="keyword">new</span> <span class="title class_">String</span>(key)).cast(T.class)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">deleteById</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> reactiveValueOps.delete(id).then();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>更通用的泛型写法</p>
<p>接口</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ReactiveGenericRepository</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存一个对象到Redis。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key Redis键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 要保存的对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt; 对象的类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 保存后的对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    &lt;T&gt; Mono&lt;T&gt; <span class="title function_">save</span><span class="params">(String key, T value)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据键查找一个对象。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key Redis键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt; 对象的预期类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 找到的对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    &lt;T&gt; Mono&lt;T&gt; <span class="title function_">findById</span><span class="params">(String key)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查找所有对象。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz 对象的类类型，用于类型转换</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt; 对象的预期类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 找到的所有对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    &lt;T&gt; Flux&lt;T&gt; <span class="title function_">findAll</span><span class="params">(Class&lt;T&gt; clazz)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据键删除一个对象。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key Redis键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 删除操作的结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Mono&lt;Boolean&gt; <span class="title function_">deleteById</span><span class="params">(String key)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>实现类</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReactiveGenericRepositoryImpl</span> <span class="keyword">implements</span> <span class="title class_">ReactiveGenericRepository</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ReactiveRedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ReactiveValueOperations&lt;String, Object&gt; reactiveValueOps;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ReactiveGenericRepositoryImpl</span><span class="params">(ReactiveRedisTemplate&lt;String, Object&gt; redisTemplate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.redisTemplate = redisTemplate;</span><br><span class="line">        <span class="built_in">this</span>.reactiveValueOps = redisTemplate.opsForValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; Mono&lt;T&gt; <span class="title function_">save</span><span class="params">(String key, T value)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> reactiveValueOps.set(key, value).thenReturn(value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; Mono&lt;T&gt; <span class="title function_">findById</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> reactiveValueOps.get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; Flux&lt;T&gt; <span class="title function_">findAll</span><span class="params">(Class&lt;T&gt; clazz)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.scan(ScanOptions.scanOptions().match(<span class="string">&quot;*&quot;</span>).build())</span><br><span class="line">            .flatMap(key -&gt; redisTemplate.opsForValue().get(key));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Boolean&gt; <span class="title function_">deleteById</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> reactiveValueOps.delete(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<blockquote>
<h3 id="关于泛型的使用"><a class="markdownIt-Anchor" href="#关于泛型的使用"></a> 关于泛型的使用</h3>
<p>泛型可以在类、接口或方法上使用，具体取决于设计的需求：</p>
<ol>
<li>
<p><strong>类或接口上的泛型</strong>：当你希望定义一个类或接口时就确定其操作的数据类型，可以在类或接口上声明泛型参数。这种方式适用于整个类或接口中所有方法操作的数据类型是一致的情况。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Repository</span>&lt;T&gt; &#123;</span><br><span class="line">    Mono&lt;T&gt; <span class="title function_">save</span><span class="params">(T entity)</span>;</span><br><span class="line">    Mono&lt;T&gt; <span class="title function_">findById</span><span class="params">(String id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li>
<p><strong>方法上的泛型</strong>：当你希望在具体的方法调用时确定数据类型，可以在方法上声明泛型参数。这种方式提供了更高的灵活性，允许在同一个类或接口中支持不同类型的操作。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">GenericRepository</span> &#123;</span><br><span class="line">    &lt;T&gt; Mono&lt;T&gt; <span class="title function_">save</span><span class="params">(String key, T value)</span>;</span><br><span class="line">    &lt;T&gt; Mono&lt;T&gt; <span class="title function_">findById</span><span class="params">(String key, Class&lt;T&gt; clazz)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
</ol>
</blockquote>
<h3 id="webflux-服务层"><a class="markdownIt-Anchor" href="#webflux-服务层"></a> Webflux 服务层</h3>
<h4 id="多数据库联合操作"><a class="markdownIt-Anchor" href="#多数据库联合操作"></a> 多数据库联合操作</h4>
<h5 id="策略"><a class="markdownIt-Anchor" href="#策略"></a> 策略</h5>
<p>在实际业务场景中，联合多种数据库操作需要考虑诸多的策略：</p>
<p><strong>1.查询策略</strong></p>
<ul>
<li><strong>缓存优先</strong>：对于读操作，通常采用缓存优先的策略。首先查询Redis缓存，如果缓存命中，则直接返回缓存中的数据；如果缓存未命中，则查询MongoDB或PostgreSQL，并将查询结果缓存到Redis中，以便后续请求能够直接从缓存中获取数据。</li>
</ul>
<p><strong>2.数据存储和一致性</strong></p>
<ul>
<li>
<p><strong>分离存储</strong>：MongoDB和PostgreSQL应该处理各自业务范围内的数据，避免存储重复数据。例如，MongoDB可以用于存储文档型或半结构化数据，而PostgreSQL用于存储关系数据和进行复杂查询。</p>
</li>
<li>
<p><strong>数据一致性</strong>：在进行增删改操作时，直接对MongoDB或PostgreSQL进行操作。操作完成后，根据业务需求和数据一致性要求决定是更新Redis缓存还是清空缓存。</p>
</li>
</ul>
<p><strong>3.缓存失效策略</strong></p>
<ul>
<li>
<p><strong>缓存更新</strong>：如果数据变更不频繁，或者实时性要求高，可以在数据变更后更新Redis缓存。这可以减少缓存不一致的窗口期，但需要额外的开销来维护缓存数据的更新。</p>
</li>
<li>
<p><strong>缓存清空</strong>：对于高变更频率的数据，或者当缓存更新逻辑较为复杂时，可以选择在数据变更后清空（删除）相关的Redis缓存。这简化了缓存管理，但可能导致更频繁的数据库查询。</p>
</li>
</ul>
<p><strong>4.事务和一致性模型</strong></p>
<ul>
<li>
<p><strong>事务管理</strong>：在涉及到多个数据操作的业务逻辑中，考虑使用事务（对于支持事务的数据库，如PostgreSQL）来保证操作的原子性和一致性。</p>
</li>
<li>
<p><strong>最终一致性</strong>：在分布式系统中，完全的一致性很难实现，可以采用最终一致性模型，通过合理的缓存策略和数据同步机制，确保数据在一定时间内达到一致状态。</p>
</li>
</ul>
<p><strong>5.数据备份和恢复</strong></p>
<ul>
<li><strong>备份策略</strong>：定期备份数据是保证数据安全的重要措施。MongoDB和PostgreSQL都提供了备份和恢复的机制，应该根据业务需求制定备份计划并定期执行。</li>
<li><strong>灾难恢复</strong>：设计灾难恢复计划，确保在数据丢失或系统故障的情况下能够快速恢复服务。</li>
</ul>
<p><strong>6.性能优化</strong></p>
<ul>
<li><strong>索引优化</strong>：对于MongoDB和PostgreSQL，合理使用索引可以显著提高查询效率。需要定期评估索引的使用情况和性能影响，并根据实际查询模式进行优化。</li>
<li><strong>缓存策略</strong>：对于Redis，合理设计缓存策略，包括选择合适的数据过期时间、使用合适的数据结构等，可以提高缓存效率和命中率。</li>
</ul>
<p><strong>7.安全性考虑</strong></p>
<ul>
<li><strong>访问控制</strong>：确保数据库的访问控制得当，只有授权的用户和服务才能访问敏感数据。</li>
<li><strong>数据加密</strong>：对敏感数据进行加密，包括在传输过程中的加密（如使用SSL/TLS）和存储时的加密。</li>
</ul>
<p><strong>8.监控和警报</strong></p>
<ul>
<li><strong>性能监控</strong>：监控数据库的性能指标，如响应时间、查询负载等，可以帮助及时发现和解决性能问题。</li>
<li><strong>系统警报</strong>：设置警报机制，当出现潜在的问题，如访问异常、资源使用率过高等时，能够及时通知到相关人员。</li>
</ul>
<p><strong>9.微服务架构下的数据管理</strong></p>
<ul>
<li><strong>服务间数据一致性</strong>：在微服务架构中，不同服务可能会操作不同的数据库实例或类型。设计合理的服务间通信和数据同步机制，以保证跨服务的数据一致性。</li>
<li><strong>API网关和服务聚合</strong>：考虑使用API网关来聚合来自不同微服务的数据请求和响应，提供统一的数据访问入口。</li>
</ul>
<blockquote>
<h3 id="命令查询责任分离-cqrs"><a class="markdownIt-Anchor" href="#命令查询责任分离-cqrs"></a> 命令查询责任分离 CQRS</h3>
<p>命令查询责任分离（Command Query Responsibility Segregation，CQRS）是一种软件架构模式，它将应用的读操作（查询）和写操作（命令）明确分离开来。CQRS的核心思想是对读和写使用不同的模型，以优化性能、可伸缩性和安全性。这种模式并不一定要求使用两个物理不同的数据库，但在某些实现中，确实会使用不同的数据存储来分别处理读和写操作，以此来充分利用每种存储的优势。</p>
<h3 id="cqrs的关键概念"><a class="markdownIt-Anchor" href="#cqrs的关键概念"></a> CQRS的关键概念</h3>
<ul>
<li><strong>命令（Command）</strong>：表示对系统的写操作（如创建、更新、删除），这些操作可以改变系统的状态但不返回任何值。</li>
<li><strong>查询（Query）</strong>：表示对系统的读操作，这些操作返回系统的当前状态，但不改变状态。</li>
</ul>
<h3 id="cqrs的优势"><a class="markdownIt-Anchor" href="#cqrs的优势"></a> CQRS的优势</h3>
<ul>
<li><strong>性能优化</strong>：通过分离读写操作，可以针对查询和命令操作分别优化数据模型和存储机制，从而提高应用的性能。</li>
<li><strong>可伸缩性</strong>：可以独立地扩展读操作和写操作的处理能力，适应不同的负载需求。</li>
<li><strong>安全性与复杂性管理</strong>：简化复杂的业务逻辑，因为读模型可以专门针对查询进行优化，而写模型则专注于业务规则和数据一致性。</li>
<li><strong>灵活的技术选择</strong>：可以针对读和写操作选择最适合的技术和数据库。</li>
</ul>
<h3 id="cqrs与数据一致性"><a class="markdownIt-Anchor" href="#cqrs与数据一致性"></a> CQRS与数据一致性</h3>
<p>在使用CQRS时，确实可能会涉及到不同的数据存储系统，这在某些情况下可能引入数据一致性的挑战。例如，当一个命令操作更新了写模型的数据后，读模型的数据可能需要一些时间才能反映这些更改，这导致了最终一致性的情况而不是即时一致性。</p>
<p>为了管理这种一致性问题，通常会采用以下策略之一：</p>
<ul>
<li><strong>即时同步</strong>：在命令操作后立即更新读模型。这种方式尽可能保持读写模型的同步，但可能会影响写操作的性能。</li>
<li><strong>异步更新</strong>：通过事件驱动的方式，当写模型更新后异步更新读模型。这种方式可以提高写操作的性能，但读模型可能会暂时与写模型不一致，实现最终一致性。</li>
</ul>
<p><strong>CQRS最适合那些读写负载差异大、对数据一致性要求较为宽松的场景。在需要强一致性或读写模式没有显著差异的应用中，CQRS可能带来过多的复杂性而不是收益。</strong></p>
<h4 id="cqrs适用场景读写负载差异大对数据一致性要求宽松"><a class="markdownIt-Anchor" href="#cqrs适用场景读写负载差异大对数据一致性要求宽松"></a> CQRS适用场景：读写负载差异大，对数据一致性要求宽松</h4>
<ul>
<li><strong>社交网络的Feed流</strong>：用户的动态更新（写操作）可能不是非常频繁，但是用户浏览Feed流（读操作）非常频繁。此外，用户通常可以接受Feed流不是实时更新的，即如果某个好友的动态延迟几秒钟出现在Feed中通常是可接受的。在这种情况下，CQRS可以用来优化Feed流的读取性能，通过将写操作和Feed流的生成/查询逻辑分离来实现。</li>
<li><strong>电商平台的商品推荐系统</strong>：商品的购买和评价（写操作）相对于商品推荐的阅读（读操作）来说较少。推荐系统可以基于用户的历史行为和偏好生成，且用户通常可以接受推荐信息不是实时更新的。使用CQRS可以将推荐生成（写操作）和推荐展示（读操作）分离，优化用户的阅读体验。</li>
</ul>
<h4 id="非cqrs适用场景强一致性需求或读写模式没有显著差异"><a class="markdownIt-Anchor" href="#非cqrs适用场景强一致性需求或读写模式没有显著差异"></a> 非CQRS适用场景：强一致性需求或读写模式没有显著差异</h4>
<ul>
<li><strong>银行系统</strong>：在处理金融交易（如转账）时，系统必须保证数据的强一致性，以确保账户余额的准确性。在这种场景下，读写操作对数据一致性的要求非常高，采用CQRS可能会引入不必要的复杂性和风险。</li>
<li><strong>实时协作工具</strong>：如在线文档编辑器，允许多个用户同时编辑同一个文档。这类应用需要实时同步不同用户的操作，以保持所有用户视图的一致性。由于读写操作紧密相关且对实时性要求很高，CQRS可能不是最佳选择。</li>
</ul>
<h4 id="针对-cqrs-逻辑读写分离而非物理读写分离的案例"><a class="markdownIt-Anchor" href="#针对-cqrs-逻辑读写分离而非物理读写分离的案例"></a> 针对 CQRS 逻辑读写分离而非物理读写分离的案例</h4>
<p>由于实践过程中，简化的设计通常是按物理数据库来划分读写职责，但这可能会造成“ CQRS 就是将两个数据库分成一个主要用于读取的数据库(读取的数据仍需要通过另一个数据库同步写入)和一个只用于写入数据库”的误解（这是在十分理想化的情况下）。</p>
<p>设计一个更复杂的场景，其中PostgreSQL和MongoDB都承担读写操作，但各自侧重于不同类型的读写负载。这样的设计可以展示CQRS并非简单地物理划分读写操作到不同的数据库，而是根据操作的性质和数据模型的优化需求来逻辑分配任务。</p>
<h3 id="场景设定"><a class="markdownIt-Anchor" href="#场景设定"></a> 场景设定</h3>
<p>假设我们正在开发一个电商平台，其中包含产品管理和用户行为分析两大功能。</p>
<h3 id="使用postgresql和mongodb的cqrs实现"><a class="markdownIt-Anchor" href="#使用postgresql和mongodb的cqrs实现"></a> 使用PostgreSQL和MongoDB的CQRS实现</h3>
<ul>
<li><strong>PostgreSQL</strong>：
<ul>
<li><strong>写操作</strong>：负责产品的创建、更新和删除。这些操作需要事务支持和一致性保证，适合关系数据库的特点。</li>
<li><strong>复杂读操作</strong>：负责执行复杂的SQL查询，如生成报表、聚合查询等。这些操作利用了PostgreSQL强大的SQL支持和优化器。</li>
</ul>
</li>
<li><strong>MongoDB</strong>：
<ul>
<li><strong>写操作</strong>：负责记录用户行为数据，如页面浏览、点击事件等。这些操作对写入速度有很高要求，并且数据结构可能经常变化，适合文档数据库的特点。</li>
<li><strong>简单读操作</strong>：负责提供快速的查询响应，如用户行为数据的即时查询。MongoDB的灵活性和索引优化可以提供高效的查询性能。</li>
</ul>
</li>
</ul>
<h3 id="数据同步和一致性"><a class="markdownIt-Anchor" href="#数据同步和一致性"></a> 数据同步和一致性</h3>
<p>在这个例子中，PostgreSQL和MongoDB都承担读写操作，但针对不同的业务场景。为了保持数据一致性：</p>
<ul>
<li><strong>数据同步</strong>：可以使用事件驱动机制同步必要的数据变更。例如，当一个新产品在PostgreSQL中被创建或更新后，相关的信息可以异步同步到MongoDB中的用户行为分析模型。</li>
<li><strong>CQRS视角</strong>：从CQRS的视角看，我们在逻辑上区分了命令（写操作）和查询（读操作），并根据不同操作的特点选择了最合适的数据存储。即便每种数据库都执行读写操作，但这些操作服务于不同的业务需求和数据模型。</li>
</ul>
<p>除了命令查询责任分离 CQRS 根据读写职责划分来设计多个数据库行为以外，另一种架构则是按照业务边界划分来设计多个数据库行为。</p>
<p>这种架构下，每一个数据库之间不需要考虑数据同步和一致性问题，因为它们负责的是从业务逻辑上分离的数据，任何一个数据库的业务操作都不会影响另一个数据库的业务操作，就像两个可以独立运行的模块。这种架构设计比较接近于微服务架构的理念：在微服务架构中，应用被分解成一系列较小、松耦合的服务，每个服务围绕着特定的业务功能构建，并可以独立部署、扩展和维护。每个服务通常管理自己的数据库（或数据存储），以保持业务边界的清晰和数据的封装性。</p>
</blockquote>
<h5 id="代码实现"><a class="markdownIt-Anchor" href="#代码实现"></a> 代码实现</h5>
<blockquote>
<p>使用PostgreSQL存储核心业务数据，MongoDB存储文档或日志类型的数据，而Redis作为缓存层来提高数据读取的性能。</p>
</blockquote>
<p>一个博客系统，其中PostgreSQL用于存储文章信息，MongoDB用于存储用户评论，Redis用于缓存热门文章。</p>
<p>有以下已经提前准备好的 repository 接口，假设里面的方法都已经实现</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 假设的PostgreSQL文章Repository</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ArticleRepository</span> &#123;</span><br><span class="line">    Mono&lt;Article&gt; <span class="title function_">saveArticle</span><span class="params">(Article article)</span>;</span><br><span class="line">    Mono&lt;Article&gt; <span class="title function_">findArticleById</span><span class="params">(String id)</span>;</span><br><span class="line">    Mono&lt;Void&gt; <span class="title function_">deleteArticleById</span><span class="params">(String id)</span>;</span><br><span class="line">    Flux&lt;Article&gt; <span class="title function_">findAllArticles</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 假设的MongoDB评论Repository</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">CommentRepository</span> &#123;</span><br><span class="line">    Mono&lt;Comment&gt; <span class="title function_">saveComment</span><span class="params">(Comment comment)</span>;</span><br><span class="line">    Flux&lt;Comment&gt; <span class="title function_">findCommentsByArticleId</span><span class="params">(String articleId)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 假设的Redis缓存操作</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">CacheService</span> &#123;</span><br><span class="line">    &lt;T&gt; Mono&lt;T&gt; <span class="title function_">findInCache</span><span class="params">(String key, Class&lt;T&gt; type)</span>;</span><br><span class="line">    &lt;T&gt; Mono&lt;Boolean&gt; <span class="title function_">updateCache</span><span class="params">(String key, T data)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>然后基于这些方法编写服务层，协调不同数据库的操作</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BlogService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ArticleRepository articleRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CommentRepository commentRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CacheService cacheService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Article&gt; <span class="title function_">createOrUpdateArticle</span><span class="params">(Article article)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> articleRepository.saveArticle(article)</span><br><span class="line">                .flatMap(savedArticle -&gt; cacheService.updateCache(<span class="string">&quot;article_&quot;</span> + savedArticle.getId(), savedArticle)</span><br><span class="line">                        .thenReturn(savedArticle));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Article&gt; <span class="title function_">getArticleById</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> cacheService.findInCache(<span class="string">&quot;article_&quot;</span> + id, Article.class)</span><br><span class="line">                .switchIfEmpty(articleRepository.findArticleById(id)</span><br><span class="line">                        .flatMap(article -&gt; cacheService.updateCache(<span class="string">&quot;article_&quot;</span> + article.getId(), article)</span><br><span class="line">                                .thenReturn(article)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Flux&lt;Comment&gt; <span class="title function_">getCommentsByArticleId</span><span class="params">(String articleId)</span> &#123;</span><br><span class="line">        <span class="comment">// 直接从MongoDB获取评论，因为评论不适合缓存</span></span><br><span class="line">        <span class="keyword">return</span> commentRepository.findCommentsByArticleId(articleId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">deleteArticleById</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> articleRepository.deleteArticleById(id)</span><br><span class="line">                .then(cacheService.updateCache(<span class="string">&quot;article_&quot;</span> + id, <span class="literal">null</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>逻辑说明</p>
<ul>
<li><strong>文章操作（PostgreSQL + Redis）</strong>：文章的创建、更新、查询和删除操作主要依赖PostgreSQL。Redis用作文章信息的缓存，以加速热门文章的读取性能。</li>
<li><strong>评论操作（MongoDB）</strong>：评论数据由于其量可能很大并且更新频繁，因此存储在MongoDB中，并且通常不被缓存。</li>
<li><strong>缓存逻辑（Redis）</strong>：在文章创建或更新后更新缓存，在文章查询时先尝试从缓存获取，缓存未命中则从数据库加载并更新缓存。</li>
</ul>
<h3 id="webflux-安全层"><a class="markdownIt-Anchor" href="#webflux-安全层"></a> Webflux 安全层</h3>
<h4 id="整合spring-security-jwt"><a class="markdownIt-Anchor" href="#整合spring-security-jwt"></a> 整合Spring Security、JWT</h4>
<p>在引入 Spring Security 之前，建议先实现 JWT 的生成和验证逻辑，这样方便后面整合 Spring Security 框架来进行认证和授权。</p>
<h5 id="jwt-工具类"><a class="markdownIt-Anchor" href="#jwt-工具类"></a> JWT 工具类</h5>
<p>创建一个 JWT 工具类来处理 JWT 的创建、解析和验证</p>
<blockquote>
<p>一个更完善的版本还应该包括Token的有效期、处理异常、以及更安全的密钥管理等方面的考虑</p>
</blockquote>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtUtil</span> &#123;</span><br><span class="line">    <span class="comment">// 生产环境中应从配置文件或环境变量中安全地获取密钥</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Key</span> <span class="variable">key</span> <span class="operator">=</span> Keys.secretKeyFor(SignatureAlgorithm.HS256); <span class="comment">// 使用HS256算法生成密钥</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> <span class="variable">expiration</span> <span class="operator">=</span> <span class="number">3600000</span>; <span class="comment">// Token有效期，这里示例为1小时（单位毫秒）</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">generateToken</span><span class="params">(String username, List&lt;String&gt; roles)</span> &#123;</span><br><span class="line">        <span class="comment">// Date now = new Date();</span></span><br><span class="line">        <span class="comment">// Date expiryDate = new Date(now.getTime() + expiration); // 设置Token过期时间</span></span><br><span class="line">        <span class="comment">// 如果不希望使用Date，可以使用以下方法实现</span></span><br><span class="line">        <span class="type">Instant</span> <span class="variable">now</span> <span class="operator">=</span> Instant.now();</span><br><span class="line">        <span class="type">Instant</span> <span class="variable">expiryDate</span> <span class="operator">=</span> now.plus(<span class="number">1</span>, ChronoUnit.HOURS); <span class="comment">// 设置Token过期时间为1小时后</span></span><br><span class="line">        <span class="keyword">return</span> Jwts.builder()</span><br><span class="line">            .setSubject(username)</span><br><span class="line">            .setIssuedAt(Date.from(now))</span><br><span class="line">            .setExpiration(Date.from(expiryDate))</span><br><span class="line">            .claim(<span class="string">&quot;roles&quot;</span>, roles) <span class="comment">// 在这里添加角色信息，方便Spring Security认证</span></span><br><span class="line">            .signWith(key) <span class="comment">// 使用生成的密钥签名</span></span><br><span class="line">            .compact();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Claims <span class="title function_">validateToken</span><span class="params">(String token)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Jwts.parser()</span><br><span class="line">                .setSigningKey(key) <span class="comment">// 使用密钥验证</span></span><br><span class="line">                .build()</span><br><span class="line">                .parseClaimsJws(token)</span><br><span class="line">                .getBody();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsernameFromToken</span><span class="params">(String token)</span> &#123;</span><br><span class="line">        <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> validateToken(token);</span><br><span class="line">        <span class="keyword">return</span> claims.getSubject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">getRolesFromToken</span><span class="params">(String token)</span> &#123;</span><br><span class="line">        <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> validateToken(token);</span><br><span class="line">        <span class="keyword">return</span> claims.get(<span class="string">&quot;roles&quot;</span>, List.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isTokenExpired</span><span class="params">(String token)</span> &#123;</span><br><span class="line">        <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> validateToken(token);</span><br><span class="line">        <span class="comment">// return claims.getExpiration().before(new Date());</span></span><br><span class="line">        <span class="keyword">return</span> claims.getExpiration().toInstant().isBefore(Instant.now());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>使用<code>Keys.secretKeyFor</code>生成密钥</p>
<ul>
<li><strong>生产环境</strong>：在生产环境中使用<code>Keys.secretKeyFor(SignatureAlgorithm.HS256)</code>来生成密钥是推荐的做法，因为它能为所使用的签名算法生成足够强度的密钥。为了安全起见，密钥不应该硬编码在代码中，而是应该通过安全的方式（如环境变量、配置服务等）提供，并且保证其安全性（不被泄露）。</li>
<li><strong>测试环境</strong>：在测试环境中，使用<code>Keys.secretKeyFor(SignatureAlgorithm.HS256)</code>同样适用，它可以帮助确保测试环境尽可能地模拟生产环境的配置和安全性。然而，考虑到测试环境的便利性和调试需求，可能会选择使用更简单的密钥管理方式，但应确保测试用的密钥不会用于生产环境。</li>
</ul>
<p>下面提供一个简单的测试类用于测试该工具类的功能</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">JwtUtilTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">JwtUtil</span> <span class="variable">jwtUtil</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JwtUtil</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testGenerateAndValidateToken</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;testUser&quot;</span>;</span><br><span class="line">        List&lt;String&gt; roles = Arrays.asList(<span class="string">&quot;ROLE_USER&quot;</span>, <span class="string">&quot;ROLE_ADMIN&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Generate token</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> jwtUtil.generateToken(username, roles);</span><br><span class="line">        assertNotNull(token);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Validate token and extract claims</span></span><br><span class="line">        <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> jwtUtil.validateToken(token);</span><br><span class="line">        assertNotNull(claims);</span><br><span class="line">        assertEquals(username, claims.getSubject());</span><br><span class="line">        assertTrue(claims.get(<span class="string">&quot;roles&quot;</span>) <span class="keyword">instanceof</span> List);</span><br><span class="line">        assertEquals(roles, claims.get(<span class="string">&quot;roles&quot;</span>, List.class));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Check if token is not expired</span></span><br><span class="line">        assertFalse(jwtUtil.isTokenExpired(token));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testTokenExpiration</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="comment">// Assuming we have a very short expiry time for testing</span></span><br><span class="line">        jwtUtil.setExpiration(<span class="number">10</span>); <span class="comment">// Set token expiration to 10 milliseconds for the test</span></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;testUser&quot;</span>;</span><br><span class="line">        List&lt;String&gt; roles = Arrays.asList(<span class="string">&quot;ROLE_USER&quot;</span>, <span class="string">&quot;ROLE_ADMIN&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Generate token</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> jwtUtil.generateToken(username, roles);</span><br><span class="line">        Thread.sleep(<span class="number">20</span>); <span class="comment">// Wait longer than the token expiration time</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Verify the token is expired</span></span><br><span class="line">        assertTrue(jwtUtil.isTokenExpired(token));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testToken</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;user123&quot;</span>;</span><br><span class="line">        List&lt;String&gt; roles = Arrays.asList(<span class="string">&quot;ROLE_USER&quot;</span>, <span class="string">&quot;ROLE_ADMIN&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Generate token with user information</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> jwtUtil.generateToken(username, roles);</span><br><span class="line">        System.out.println(<span class="string">&quot;Generated Token: &quot;</span> + token);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Assume token is being sent to and received from a client in a real application</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Validate token and extract user information</span></span><br><span class="line">        <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> jwtUtil.validateToken(token);</span><br><span class="line">        <span class="type">String</span> <span class="variable">extractedUsername</span> <span class="operator">=</span> claims.getSubject();</span><br><span class="line">        List&lt;String&gt; extractedRoles = claims.get(<span class="string">&quot;roles&quot;</span>, List.class);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;Username from Token: &quot;</span> + extractedUsername);</span><br><span class="line">        System.out.println(<span class="string">&quot;Roles from Token: &quot;</span> + extractedRoles);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>在这个测试类中，<code>testGenerateAndValidateToken</code>测试用例生成一个Token，并验证Token是否正确包含了用户名和角色信息。<code>testTokenExpiration</code>测试用例则是为了测试Token过期逻辑是否正常。这里为了方便测试过期逻辑，在<code>JwtUtil</code>类中定义了<code>setExpiration</code>方法来动态设置Token的过期时间，这主要用于测试目的，实际生产环境中不应该使用此方法。<code>testToken</code>测试用例是用于展示一个简单的Token各个阶段的信息内容。</p>
<p><strong>JWT Token</strong></p>
<p>JWT Token可以包含多种标准的声明（Claim），以下是一些常见的标准声明：</p>
<ul>
<li><strong>iss (Issuer)</strong>：Token的发行者。</li>
<li><strong>sub (Subject)</strong>：Token的主题，通常用来存储用户的唯一标识。</li>
<li><strong>aud (Audience)</strong>：Token的接收方。</li>
<li><strong>exp (Expiration Time)</strong>：Token的过期时间，通常是一个时间戳，表示Token在此时间之后不再有效。</li>
<li><strong>nbf (Not Before)</strong>：Token的生效时间，表示在此时间之前，Token不可用。</li>
<li><strong>iat (Issued At)</strong>：Token的发行时间。</li>
<li><strong>jti (JWT ID)</strong>：Token的唯一标识符。</li>
</ul>
<p>除了这些标准声明外，还可以在 Token 中添加自定义声明来存储特定于应用的信息，如用户角色、权限等。使用<code>Claims</code>对象，可以通过<code>get</code>方法以键值对的形式访问这些自定义声明，例如</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">role</span> <span class="operator">=</span> claims.get(<span class="string">&quot;role&quot;</span>, String.class); <span class="comment">// 假设我们在Token中添加了一个名为&quot;role&quot;的自定义声明</span></span><br></pre></td></tr></table></figure></div>
<blockquote>
<h3 id="案例"><a class="markdownIt-Anchor" href="#案例"></a> 案例</h3>
<p>假设有一个简单的Web应用，用于文章的阅读和评论，用户需要登录才能评论。在用户登录时，系统会生成一个JWT Token，其中包含如下标准声明：</p>
<ul>
<li><strong>iss (Issuer)</strong>：<code>&quot;MyArticleApp&quot;</code>。这表明Token是由&quot;MyArticleApp&quot;应用发行的。</li>
<li><strong>sub (Subject)</strong>：<code>&quot;1234567890&quot;</code>。这是用户的唯一标识，通常可以是用户ID、用户名或其他唯一标识用户的信息。在这个例子中，假设它是用户ID。</li>
<li><strong>aud (Audience)</strong>：<code>&quot;MyArticleAppUsers&quot;</code>。这指示了Token的预期接收者，确保Token只被指定的受众使用。</li>
<li><strong>exp (Expiration Time)</strong>：<code>1627499999</code>。这是一个UNIX时间戳，表示Token的过期时间。假设这代表Token将在未来某个时间点过期。</li>
<li><strong>nbf (Not Before)</strong>：<code>1627480000</code>。这同样是一个UNIX时间戳，表示Token在这个时间之前不应被接受。</li>
<li><strong>iat (Issued At)</strong>：<code>1627486400</code>。这表示Token的发行时间。</li>
<li><strong>jti (JWT ID)</strong>：<code>&quot;a87ff679a2f3e71d9181a67b7542122c&quot;</code>。这是Token的唯一标识符，用于防止重放攻击。</li>
</ul>
<h3 id="如何使用这些信息安全地识别用户身份"><a class="markdownIt-Anchor" href="#如何使用这些信息安全地识别用户身份"></a> 如何使用这些信息安全地识别用户身份？</h3>
<ol>
<li><strong>验证Token的签名</strong>：首先，确保Token的签名是有效的，这通过使用发行Token时用到的相同密钥来验证。这一步是必需的，以确保Token未被篡改。</li>
<li><strong>检查Token的发行者（iss）和受众（aud）</strong>：确认Token的<code>iss</code>和<code>aud</code>声明与你的应用期望的值匹配。这有助于确保Token是为你的应用发行的，且仅供指定的受众使用。</li>
<li><strong>验证Token的有效期</strong>：检查当前时间是否在Token的<code>nbf</code>（Not Before）和<code>exp</code>（Expiration Time）声明指定的时间范围内。如果不在这个范围内，Token应被认为是无效的。</li>
<li><strong>获取和验证用户身份</strong>：一旦Token通过了上述验证，你可以信任Token中的<code>sub</code>（Subject）声明。在这个例子中，<code>sub</code>是用户ID<code>&quot;1234567890&quot;</code>。你可以使用这个ID从数据库或其他存储系统中检索用户的详细信息，并在需要时进行进一步的授权检查。</li>
</ol>
</blockquote>
<p>在基于Spring Security和Spring WebFlux的应用中使用JWT进行认证时，<code>JwtAuthenticationManager</code>、<code>JwtSecurityContextRepository</code>和<code>JwtAuthenticationFilter</code>可以协作以支持认证流程。这三个组件各自承担不同的职责，以下是它们如何协作的简化示例及解释：</p>
<h5 id="jwtauthenticationfilter"><a class="markdownIt-Anchor" href="#jwtauthenticationfilter"></a> JwtAuthenticationFilter</h5>
<p>这个过滤器负责拦截进入的HTTP请求，从请求中提取JWT Token，并尝试对其进行验证。</p>
<ul>
<li>
<p><strong>职责</strong>：从HTTP请求中提取JWT Token，并创建一个未经认证的<code>Authentication</code>对象（如<code>UsernamePasswordAuthenticationToken</code>），然后将其提交给<code>AuthenticationManager</code>进行认证。</p>
</li>
<li>
<p><strong>用途</strong>：负责拦截进入的请求，从中提取JWT Token，并尝试进行认证。它是连接前端请求和后端安全逻辑的桥梁。</p>
</li>
<li>
<p><strong>适用场景</strong>：几乎所有需要JWT认证的场景。</p>
</li>
<li>
<p><strong>实现</strong>：这个过滤器通常继承自<code>WebFilter</code>接口（对于WebFlux应用）。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtAuthenticationFilter</span> <span class="keyword">implements</span> <span class="title class_">WebFilter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> JwtAuthenticationManager authenticationManager;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JwtAuthenticationFilter</span><span class="params">(JwtAuthenticationManager authenticationManager)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.authenticationManager = authenticationManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, WebFilterChain chain)</span> &#123;</span><br><span class="line">        <span class="type">ServerHttpRequest</span> <span class="variable">request</span> <span class="operator">=</span> exchange.getRequest();</span><br><span class="line">        <span class="comment">// 提取JWT Token的逻辑</span></span><br><span class="line">        <span class="comment">// 简单示例中，可以不实现具体逻辑，或根据需要添加</span></span><br><span class="line">        <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li>
<p><strong>参考示例</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtAuthenticationFilter</span> <span class="keyword">implements</span> <span class="title class_">WebFilter</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> JwtAuthenticationManager authenticationManager;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JwtAuthenticationFilter</span><span class="params">(JwtAuthenticationManager authenticationManager)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.authenticationManager = authenticationManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, WebFilterChain chain)</span> &#123;</span><br><span class="line">        <span class="comment">// 提取请求中的Authorization头部</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">authHeader</span> <span class="operator">=</span> exchange.getRequest().getHeaders().getFirst(HttpHeaders.AUTHORIZATION);</span><br><span class="line">        <span class="keyword">if</span> (authHeader != <span class="literal">null</span> &amp;&amp; authHeader.startsWith(<span class="string">&quot;Bearer &quot;</span>)) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">authToken</span> <span class="operator">=</span> authHeader.substring(<span class="number">7</span>);</span><br><span class="line">            <span class="comment">// 创建未认证的Authentication Token</span></span><br><span class="line">            <span class="type">Authentication</span> <span class="variable">authRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UsernamePasswordAuthenticationToken</span>(authToken, authToken);</span><br><span class="line">            <span class="comment">// 使用JwtAuthenticationManager进行认证</span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.authenticationManager.authenticate(authRequest)</span><br><span class="line">                .flatMap(auth -&gt; chain.filter(exchange).contextWrite(ReactiveSecurityContextHolder.withAuthentication(auth)))</span><br><span class="line">                .onErrorResume(e -&gt; chain.filter(exchange)); <span class="comment">// 处理认证失败</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 对于没有Bearer Token的请求直接放行</span></span><br><span class="line">        <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>如果在后面实现了<code>JwtSecurityContextRepository</code>，则上面的代码可简化为以下代码</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtAuthenticationFilter</span> <span class="keyword">implements</span> <span class="title class_">WebFilter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> JwtSecurityContextRepository jwtSecurityContextRepository;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JwtAuthenticationFilter</span><span class="params">(JwtSecurityContextRepository jwtSecurityContextRepository)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.jwtSecurityContextRepository = jwtSecurityContextRepository;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, WebFilterChain chain)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> jwtSecurityContextRepository.load(exchange)</span><br><span class="line">                .flatMap(context -&gt; chain.filter(exchange).contextWrite(ReactiveSecurityContextHolder.withSecurityContext(Mono.just(context))))</span><br><span class="line">                .switchIfEmpty(chain.filter(exchange));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><code>JwtAuthenticationFilter</code>在请求到达时提取JWT Token，并使用<code>JwtAuthenticationManager</code>进行认证。这个过程实际上在<code>JwtSecurityContextRepository</code>的<code>load</code>方法中已经体现。</p>
</li>
</ul>
<h5 id="jwtauthenticationmanager"><a class="markdownIt-Anchor" href="#jwtauthenticationmanager"></a> JwtAuthenticationManager</h5>
<p>这是一个自定义的<code>AuthenticationManager</code>，负责处理由<code>JwtAuthenticationFilter</code>提交的未经认证的<code>Authentication</code>对象。</p>
<ul>
<li>
<p><strong>职责</strong>：验证<code>Authentication</code>对象中的JWT Token的有效性，如果Token有效，则创建一个已认证的<code>Authentication</code>对象，并设置用户的权限。</p>
</li>
<li>
<p><strong>用途</strong>：对通过<code>JwtAuthenticationFilter</code>提取出的Token进行验证，确定用户的身份并授权。在WebFlux中，它通常是<code>ReactiveAuthenticationManager</code>的实现，在Spring MVC中，则是<code>AuthenticationManager</code>的实现。</p>
</li>
<li>
<p><strong>适用场景</strong>：需要验证用户Token的场景，实现自定义的认证逻辑。</p>
</li>
<li>
<p><strong>实现</strong>：可以通过实现<code>ReactiveAuthenticationManager</code>接口来自定义认证逻辑。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtAuthenticationManager</span> <span class="keyword">implements</span> <span class="title class_">ReactiveAuthenticationManager</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Authentication&gt; <span class="title function_">authenticate</span><span class="params">(Authentication authentication)</span> &#123;</span><br><span class="line">        <span class="comment">// 在这里实现JWT验证逻辑</span></span><br><span class="line">        <span class="comment">// 简单示例中，可以直接返回已认证的Authentication，或根据需要添加逻辑</span></span><br><span class="line">        <span class="keyword">return</span> Mono.just(authentication);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li>
<p><strong>参考示例</strong></p>
<p>在<code>JwtAuthenticationManager</code>验证Token并创建已认证的<code>Authentication</code>对象时，需要从Token中解析用户的角色或权限，并将它们转换为<code>GrantedAuthority</code>对象，以便Spring Security进行授权判断。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtAuthenticationManager</span> <span class="keyword">implements</span> <span class="title class_">ReactiveAuthenticationManager</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> JwtUtil jwtUtil;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JwtAuthenticationManager</span><span class="params">(JwtUtil jwtUtil)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.jwtUtil = jwtUtil;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Authentication&gt; <span class="title function_">authenticate</span><span class="params">(Authentication authentication)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">authToken</span> <span class="operator">=</span> authentication.getCredentials().toString();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> jwtUtil.getUsernameFromToken(authToken);</span><br><span class="line">            <span class="keyword">if</span> (!jwtUtil.isTokenExpired(authToken)) &#123;</span><br><span class="line">                List&lt;String&gt; roles = jwtUtil.getRolesFromToken(authToken);</span><br><span class="line">                List&lt;SimpleGrantedAuthority&gt; authorities =</span><br><span class="line">                        roles</span><br><span class="line">                                .stream()</span><br><span class="line">                                .map(role -&gt; <span class="keyword">new</span> <span class="title class_">SimpleGrantedAuthority</span>(<span class="string">&quot;ROLE_&quot;</span> + role.toUpperCase()))</span><br><span class="line">                                .collect(Collectors.toList());</span><br><span class="line">                <span class="type">Authentication</span> <span class="variable">auth</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UsernamePasswordAuthenticationToken</span>(username, authToken, authorities);</span><br><span class="line">                <span class="keyword">return</span> Mono.just(auth);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> Mono.empty();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> Mono.empty();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
</ul>
<h5 id="jwtsecuritycontextrepository"><a class="markdownIt-Anchor" href="#jwtsecuritycontextrepository"></a> JwtSecurityContextRepository</h5>
<p>这个组件用于在请求处理过程中加载和保存<code>SecurityContext</code>。对于基于JWT的无状态认证，它通常不会保存<code>SecurityContext</code>，但会在每个请求中基于JWT Token加载<code>SecurityContext</code>。</p>
<ul>
<li>
<p><strong>职责</strong>：基于每个请求中的JWT Token动态构建<code>SecurityContext</code>。</p>
</li>
<li>
<p><strong>用途</strong>：负责在每个请求中重建<code>SecurityContext</code>，根据JWT Token中的信息设置用户的认证状态。由于JWT认证是无状态的，它通常不用于保存状态，而是用于在请求之间重建状态。</p>
</li>
<li>
<p><strong>适用场景</strong>：适用于所有基于JWT进行认证的场景，尤其是在需要将JWT Token信息转化为Spring Security认识的认证信息时。</p>
</li>
<li>
<p><strong>实现</strong>：实现<code>ServerSecurityContextRepository</code>接口，通常在<code>load</code>方法中处理Token的解析和验证。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtSecurityContextRepository</span> <span class="keyword">implements</span> <span class="title class_">ServerSecurityContextRepository</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">save</span><span class="params">(ServerWebExchange exchange, SecurityContext context)</span> &#123;</span><br><span class="line">        <span class="comment">// JWT是无状态的，不需要实现保存</span></span><br><span class="line">        <span class="keyword">return</span> Mono.error(<span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>(<span class="string">&quot;Save method not supported&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;SecurityContext&gt; <span class="title function_">load</span><span class="params">(ServerWebExchange exchange)</span> &#123;</span><br><span class="line">        <span class="comment">// 在这里实现JWT解析和安全上下文的加载</span></span><br><span class="line">        <span class="comment">// 简单示例中，可以直接返回空Mono，或根据需要添加逻辑</span></span><br><span class="line">        <span class="keyword">return</span> Mono.empty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li>
<p><strong>参考示例</strong></p>
<p>在Spring Security中，<code>ServerSecurityContextRepository</code>用于在每个请求上加载或创建<code>SecurityContext</code>，这是处理安全上下文的一部分。默认行为是，在请求开始时尝试加载安全上下文，以便在处理请求时可以使用当前安全状态。也就是说默认<code>load</code>方法总是会在每次请求的时候被执行，因此对于不需要认证的路径（如使用<code>permitAll()</code>配置的路径），如果没有有效的认证Token，方法应该能够快速返回，而不影响请求的处理。否则就会造成“你需要先认证才能登录，而你又需要先登录才能认证”的局面。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtSecurityContextRepository</span> <span class="keyword">implements</span> <span class="title class_">ServerSecurityContextRepository</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ReactiveAuthenticationManager authenticationManager;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JwtSecurityContextRepository</span><span class="params">(ReactiveAuthenticationManager authenticationManager)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.authenticationManager = authenticationManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">save</span><span class="params">(ServerWebExchange exchange, SecurityContext context)</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>(<span class="string">&quot;Save method is not supported&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;SecurityContext&gt; <span class="title function_">load</span><span class="params">(ServerWebExchange exchange)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> exchange.getRequest().getURI().getPath();</span><br><span class="line">        <span class="comment">// 对于不需要认证的接口，直接返回Mono.empty()</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;/login&quot;</span>.equals(path) || <span class="string">&quot;/register&quot;</span>.equals(path)) &#123;</span><br><span class="line">            <span class="keyword">return</span> Mono.empty();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> extractToken(exchange.getRequest());</span><br><span class="line">        <span class="comment">// 如果Token为空，也直接返回Mono.empty()</span></span><br><span class="line">        <span class="keyword">if</span> (token == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Mono.empty();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Authentication</span> <span class="variable">auth</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UsernamePasswordAuthenticationToken</span>(token, token);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.jwtAuthenticationManager.authenticate(auth).map(SecurityContextImpl::<span class="keyword">new</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">extractToken</span><span class="params">(ServerHttpRequest request)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">bearerToken</span> <span class="operator">=</span> request.getHeaders().getFirst(HttpHeaders.AUTHORIZATION);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.hasText(bearerToken) &amp;&amp; bearerToken.startsWith(<span class="string">&quot;Bearer &quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> bearerToken.substring(<span class="number">7</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
</ul>
<p><strong>协作示例</strong></p>
<p>当一个请求到达应用时：</p>
<ol>
<li>**<code>JwtAuthenticationFilter</code>**拦截请求，从请求头中提取JWT Token，并构造一个未经认证的<code>Authentication</code>对象，然后提交给<code>JwtAuthenticationManager</code>。</li>
<li>**<code>JwtAuthenticationManager</code>**接收到未经认证的<code>Authentication</code>对象，验证JWT Token的有效性。如果验证通过，它将创建一个已认证的<code>Authentication</code>对象，包含用户的权限等信息。</li>
<li>在整个请求处理流程中，**<code>JwtSecurityContextRepository</code>**负责根据<code>JwtAuthenticationManager</code>验证后的<code>Authentication</code>对象构建<code>SecurityContext</code>，并使其在当前请求上下文中可用。</li>
<li>根据<code>SecurityContext</code>中的认证信息，Spring Security框架执行后续的授权判断。</li>
</ol>
<p>这三个组件的协作实现了一个完整的基于JWT的认证和授权流程，使得应用能够处理无状态的HTTP请求。</p>
<blockquote>
<p>以上三个核心组件虽然覆盖了JWT认证流程的主要部分：提取Token、验证Token、以及根据Token重建安全上下文。不过，根据具体的应用需求和安全要求，可能还会涉及其他重要的组件或配置。以下是一些可能涉及到的额外组件或方法：</p>
<h3 id="1-authenticationentrypoint"><a class="markdownIt-Anchor" href="#1-authenticationentrypoint"></a> 1. AuthenticationEntryPoint</h3>
<p>用于处理认证过程中的异常，如Token无效或过期时的情况。<code>AuthenticationEntryPoint</code>负责在认证失败时返回适当的响应，比如一个401 Unauthorized状态码。</p>
<p>简单示例</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtAuthenticationEntryPoint</span> <span class="keyword">implements</span> <span class="title class_">ServerAuthenticationEntryPoint</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">commence</span><span class="params">(ServerWebExchange exchange, AuthenticationException e)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Mono.fromRunnable(() -&gt; &#123;</span><br><span class="line">            exchange.getResponse().setStatusCode(HttpStatus.UNAUTHORIZED);</span><br><span class="line">            <span class="comment">// 你可以添加更多的响应设置，如设置响应体</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="2-accessdeniedhandler"><a class="markdownIt-Anchor" href="#2-accessdeniedhandler"></a> 2. AccessDeniedHandler</h3>
<p>当用户尝试访问他们没有权限访问的资源时，<code>AccessDeniedHandler</code>负责处理这种授权失败的情况。它可以用于返回一个403 Forbidden响应或重定向到一个错误页面。</p>
<h3 id="3-corsconfigurationsource"><a class="markdownIt-Anchor" href="#3-corsconfigurationsource"></a> 3. CorsConfigurationSource</h3>
<p>在前后端分离的应用中，跨源资源共享（CORS）配置变得非常重要。<code>CorsConfigurationSource</code>用于定义CORS策略，允许或拒绝来自不同源的请求。</p>
<h3 id="4-tokenrefreshmechanism"><a class="markdownIt-Anchor" href="#4-tokenrefreshmechanism"></a> 4. TokenRefreshMechanism</h3>
<p>虽然不是Spring Security的标准部分，但在许多基于Token的认证系统中，实现Token刷新机制是一个常见需求。这涉及到提供一个机制，允许客户端在当前Token快要过期时，通过一个有效的刷新Token来获取一个新的访问Token。</p>
<h3 id="5-userdetails和userdetailsservice"><a class="markdownIt-Anchor" href="#5-userdetails和userdetailsservice"></a> 5. UserDetails和UserDetailsService</h3>
<p><code>UserDetailsService</code>用于在认证过程中加载用户特定的数据。它通常与<code>UserDetails</code>接口一起使用，后者表示一个用户的认证信息。在JWT认证过程中，一旦Token被验证，可以通过<code>UserDetailsService</code>加载用户的详细信息，并构建一个<code>UserDetails</code>对象，进一步用于构建<code>Authentication</code>对象。</p>
<h3 id="6-reactive-counterparts-for-webflux"><a class="markdownIt-Anchor" href="#6-reactive-counterparts-for-webflux"></a> 6. Reactive counterparts for WebFlux</h3>
<p>对于使用Spring WebFlux的应用，上述组件（如<code>AuthenticationEntryPoint</code>、<code>AccessDeniedHandler</code>等）有相应的反应式版本或等效方法，以支持响应式编程模型。</p>
</blockquote>
<p><strong>其他重要的方法</strong></p>
<p><strong>Token的生成和响应</strong>：在用户登录成功后，需要一个服务或控制器方法来生成JWT Token，并将其返回给客户端。这通常发生在用户认证成功后的登录接口中。<strong>这里的功能需要在三层架构中实现，下文中会提到三层架构的适配。</strong></p>
<h5 id="spring-security-配置"><a class="markdownIt-Anchor" href="#spring-security-配置"></a> Spring Security 配置</h5>
<p>接下来，配置 Spring Security 以集成 JWT 认证。这包括定义一个自定义的认证管理器和安全过滤器链，用于解析请求中的 JWT Token 并进行认证</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebFluxSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义JwtUtil Bean</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> JwtUtil <span class="title function_">jwtUtil</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JwtUtil</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义JwtAuthenticationManager Bean</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> JwtAuthenticationManager <span class="title function_">jwtAuthenticationManager</span><span class="params">(JwtUtil jwtUtil)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JwtAuthenticationManager</span>(jwtUtil);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义JwtSecurityContextRepository Bean，依赖JwtAuthenticationManager</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> JwtSecurityContextRepository <span class="title function_">jwtSecurityContextRepository</span><span class="params">(JwtAuthenticationManager jwtAuthenticationManager)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JwtSecurityContextRepository</span>(jwtAuthenticationManager);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义JwtAuthenticationFilter Bean，依赖JwtSecurityContextRepository</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> JwtAuthenticationFilter <span class="title function_">jwtAuthenticationFilter</span><span class="params">(JwtSecurityContextRepository jwtSecurityContextRepository)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JwtAuthenticationFilter</span>(jwtSecurityContextRepository);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SecurityWebFilterChain <span class="title function_">securityWebFilterChain</span><span class="params">(ServerHttpSecurity http,</span></span><br><span class="line"><span class="params">                                                         JwtAuthenticationManager jwtAuthenticationManager,</span></span><br><span class="line"><span class="params">                                                         JwtSecurityContextRepository jwtSecurityContextRepository)</span> &#123;</span><br><span class="line">        http</span><br><span class="line">                .csrf(ServerHttpSecurity.CsrfSpec::disable) <span class="comment">// 禁用CSRF保护，对于REST API是常见的做法</span></span><br><span class="line">                .authenticationManager(jwtAuthenticationManager) <span class="comment">// 设置自定义的认证管理器</span></span><br><span class="line">                .securityContextRepository(jwtSecurityContextRepository) <span class="comment">// 设置自定义的安全上下文仓库</span></span><br><span class="line">                .authorizeExchange(exchanges -&gt; exchanges</span><br><span class="line">                        .pathMatchers(<span class="string">&quot;/api/public/**&quot;</span>).permitAll() <span class="comment">// 公开访问的路径</span></span><br><span class="line">                        .anyExchange().authenticated() <span class="comment">// 其他所有路径都需要认证</span></span><br><span class="line">                )</span><br><span class="line">                .addFilterAt(jwtAuthenticationFilter(jwtSecurityContextRepository), SecurityWebFiltersOrder.AUTHENTICATION); <span class="comment">// 添加自定义JWT认证过滤器</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> http.build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h4 id="三层架构的适配"><a class="markdownIt-Anchor" href="#三层架构的适配"></a> 三层架构的适配</h4>
<p>设置好基于JWT的认证机制并且配置了Spring Security之后，下一步是确保三层架构（表示层、业务逻辑层、数据访问层）能够与这些安全配置无缝协作。以下是参考的适配流程</p>
<h5 id="大致流程"><a class="markdownIt-Anchor" href="#大致流程"></a> 大致流程</h5>
<p><strong>1.定义安全模型</strong></p>
<p>首先，定义应用中的安全模型，包括用户角色和权限模型。这可能涉及到在数据库中创建角色和权限表，并确定哪些API端点对应哪些角色或权限。</p>
<p><strong>2.调整用户模型和数据访问层</strong></p>
<ul>
<li>确保用户模型（通常是<code>User</code>实体）包含与安全相关的属性，如密码、角色列表等。</li>
<li>更新用户的数据访问层（例如，用户的Repository），以支持查找用户的安全凭证（用户名和密码）、角色和权限。</li>
</ul>
<p><strong>3.实现UserDetailsService</strong></p>
<ul>
<li>实现<code>UserDetailsService</code>接口，提供一种从数据库加载用户详情（包括权限）的方式。这是Spring Security调用来获取用户信息并进行认证的服务。</li>
<li>在<code>loadUserByUsername</code>方法中，根据用户名查找用户，构建并返回一个<code>UserDetails</code>对象，这个对象应包含用户名、密码和权限信息。</li>
</ul>
<p><strong>4.配置方法级别的安全性</strong></p>
<ul>
<li>使用<code>@PreAuthorize</code>、<code>@PostAuthorize</code>、<code>@Secured</code>等注解来指定方法级别的安全要求。例如，可以在服务层的方法上使用这些注解来限定只有特定角色的用户才能调用某个方法。</li>
</ul>
<p><strong>5.保护API端点</strong></p>
<ul>
<li>根据的安全模型调整<code>SecurityWebFilterChain</code>中的<code>.authorizeExchange()</code>部分，指定哪些API端点是公开的，哪些需要认证，以及它们所需的权限或角色。</li>
<li>例如，可以使用<code>.pathMatchers(&quot;/api/admin/**&quot;).hasRole(&quot;ADMIN&quot;)</code>来保护以<code>/api/admin/</code>开头的所有端点，使其只能由拥有<code>ADMIN</code>角色的用户访问。</li>
</ul>
<p><strong>6.处理认证和授权失败</strong></p>
<ul>
<li>自定义认证失败和授权失败的处理逻辑，比如返回特定的HTTP状态码或错误信息给客户端。这可以通过自定义<code>AuthenticationEntryPoint</code>和<code>AccessDeniedHandler</code>来实现。</li>
</ul>
<p><strong>7.测试</strong></p>
<ul>
<li>对整个安全配置进行测试，包括但不限于：
<ul>
<li>测试未认证的请求是否被正确拒绝。</li>
<li>测试具有不同角色的用户是否只能访问他们有权限的API端点。</li>
<li>测试用户认证流程，包括使用JWT进行认证。</li>
</ul>
</li>
</ul>
<p>上面的流程仅供参考，实际简单场景可能不需要考虑那么多繁琐的步骤。</p>
<h5 id="具体实现"><a class="markdownIt-Anchor" href="#具体实现"></a> 具体实现</h5>
<h6 id="数据库"><a class="markdownIt-Anchor" href="#数据库"></a> 数据库</h6>
<p>首先创建好数据库中对应的数据表和初始测试数据，主键采用<code>serial</code>伪类型自动递增，参考如下</p>
<div class="highlight-container" data-rel="Postgresql"><figure class="iseeu highlight postgresql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 用户</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> users</span><br><span class="line">(</span><br><span class="line">    id       <span class="type">serial</span> <span class="keyword">primary key</span>,</span><br><span class="line">    username <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">unique</span> <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    <span class="keyword">password</span> <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> users (username, <span class="keyword">password</span>) <span class="keyword">values</span> (<span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;admin&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> users (username, <span class="keyword">password</span>) <span class="keyword">values</span> (<span class="string">&#x27;user&#x27;</span>, <span class="string">&#x27;user&#x27;</span>);</span><br><span class="line"><span class="comment">-- 角色</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> roles</span><br><span class="line">(</span><br><span class="line">    id   <span class="type">serial</span> <span class="keyword">primary key</span>,</span><br><span class="line">    <span class="type">name</span> <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> roles (<span class="type">name</span>) <span class="keyword">values</span> (<span class="string">&#x27;admin&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> roles (<span class="type">name</span>) <span class="keyword">values</span> (<span class="string">&#x27;user&#x27;</span>);</span><br><span class="line"><span class="comment">-- 用户角色</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> user_role</span><br><span class="line">(</span><br><span class="line">    user_id <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    role_id <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    <span class="keyword">primary key</span> (user_id, role_id),</span><br><span class="line">    <span class="keyword">constraint</span> fk_user_id <span class="keyword">foreign key</span> (user_id) <span class="keyword">references</span> users (id),</span><br><span class="line">    <span class="keyword">constraint</span> fk_role_id <span class="keyword">foreign key</span> (role_id) <span class="keyword">references</span> roles (id)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> user_role (user_id, role_id) <span class="keyword">values</span> (<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> user_role (user_id, role_id) <span class="keyword">values</span> (<span class="number">2</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>不推荐直接将密码明文存储在数据库中，这里是为了方便测试，通常应该将明文加密后再存储到数据库中。</p>
</blockquote>
<h6 id="实体类"><a class="markdownIt-Anchor" href="#实体类"></a> 实体类</h6>
<p>然后创建好对应的实体类</p>
<p>users 数据表对应实体类 User</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Table(&quot;users&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>roles 数据表对应实体类 Role</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Table(&quot;roles&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Role</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>user_role 数据表对应实体类 UserRole</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserRole</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line">    <span class="keyword">private</span> Integer roleId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h6 id="数据访问层"><a class="markdownIt-Anchor" href="#数据访问层"></a> 数据访问层</h6>
<p>这里假设已经提供了<code>databaseClient</code></p>
<ul>
<li>登录的逻辑被拆分为两次查询，第一次查询是验证该用户是否存在，第二次查询是获取用户所有的角色列表。密码验证的逻辑在服务层实现。</li>
<li>注册的逻辑比较复杂，注册提供的数据有用户名、密码和角色名称列表。首先是根据用户名查询<code>users</code>表判断该用户名是否已经注册，如果该用户名未被注册，则新增数据并返回新增数据的<code>id</code>字段（在 Postgresql 中通过<code>returning</code>语法实现新增时返回新增数据的<code>id</code>字段），然后是根据角色名称列表查询<code>roles</code>表得到角色id列表，最后将唯一的用户id和角色id列表批量增加到<code>user_role</code>表中。</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Mono&lt;User&gt; <span class="title function_">findByUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> databaseClient.sql(<span class="string">&quot;select * from users where username = :username&quot;</span>)</span><br><span class="line">        .bind(<span class="string">&quot;username&quot;</span>, username)</span><br><span class="line">        .map((row, rowMetadata) -&gt; <span class="keyword">new</span> <span class="title class_">User</span>(</span><br><span class="line">            row.get(<span class="string">&quot;id&quot;</span>, Integer.class), <span class="comment">// 这里的id是自增的，所以不需要传入</span></span><br><span class="line">            row.get(<span class="string">&quot;username&quot;</span>, String.class),</span><br><span class="line">            row.get(<span class="string">&quot;password&quot;</span>, String.class)))</span><br><span class="line">        .one();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Mono&lt;UserRoleDTO&gt; <span class="title function_">getUserRole</span><span class="params">(String username)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> databaseClient.sql(<span class="string">&quot;select username, name &quot;</span> +</span><br><span class="line">                              <span class="string">&quot;from users u &quot;</span> +</span><br><span class="line">                              <span class="string">&quot;join user_role ur on u.id = ur.user_id &quot;</span> +</span><br><span class="line">                              <span class="string">&quot;join roles r on ur.role_id = r.id &quot;</span> +</span><br><span class="line">                              <span class="string">&quot;where username = :username&quot;</span>)</span><br><span class="line">        .bind(<span class="string">&quot;username&quot;</span>, username)</span><br><span class="line">        .map((row, rowMetadata) -&gt; Tuples.of(</span><br><span class="line">            row.get(<span class="string">&quot;username&quot;</span>, String.class),</span><br><span class="line">            row.get(<span class="string">&quot;name&quot;</span>, String.class)))</span><br><span class="line">        .all()</span><br><span class="line">        .collectMultimap(tuple -&gt; tuple.getT1(), tuple -&gt; tuple.getT2())</span><br><span class="line">        .flatMap(map -&gt; &#123;</span><br><span class="line">            <span class="comment">// 从map中取出username和对应的roles列表</span></span><br><span class="line">            <span class="keyword">return</span> Mono.justOrEmpty(map.entrySet().stream()</span><br><span class="line">                                    .map(entry -&gt; <span class="keyword">new</span> <span class="title class_">UserRoleDTO</span>(entry.getKey(), <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(entry.getValue())))</span><br><span class="line">                                    .findFirst());</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Mono&lt;Integer&gt; <span class="title function_">insertUser</span><span class="params">(User user)</span> &#123;</span><br><span class="line">    <span class="comment">// 返回插入的id，这里的密码应该是加密后的</span></span><br><span class="line">    <span class="keyword">return</span> databaseClient.sql(<span class="string">&quot;insert into users (username, password) values (:username, :password) returning id&quot;</span>)</span><br><span class="line">        .bind(<span class="string">&quot;username&quot;</span>, user.getUsername())</span><br><span class="line">        .bind(<span class="string">&quot;password&quot;</span>, user.getPassword())</span><br><span class="line">        .map((row, rowMetadata) -&gt; row.get(<span class="string">&quot;id&quot;</span>, Integer.class))</span><br><span class="line">        .first();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Mono&lt;Long&gt; <span class="title function_">insertUserRole</span><span class="params">(Integer userId, UserRoleDTO userRoleDTO)</span> &#123;</span><br><span class="line">    <span class="comment">// 根据角色名查询对应的id，然后插入到user_role表中</span></span><br><span class="line">    <span class="keyword">return</span> databaseClient.sql(<span class="string">&quot;select id from roles where name in (:names)&quot;</span>)</span><br><span class="line">        .bind(<span class="string">&quot;names&quot;</span>, userRoleDTO.getRoles())</span><br><span class="line">        .fetch()</span><br><span class="line">        .all()</span><br><span class="line">        .flatMap(row -&gt;</span><br><span class="line">                 databaseClient.sql(<span class="string">&quot;insert into user_role (user_id, role_id) values (:user_id, :role_id)&quot;</span>)</span><br><span class="line">                 .bind(<span class="string">&quot;user_id&quot;</span>, userId)</span><br><span class="line">                 .bind(<span class="string">&quot;role_id&quot;</span>, (Integer) row.get(<span class="string">&quot;id&quot;</span>))</span><br><span class="line">                 .fetch()</span><br><span class="line">                 .rowsUpdated()</span><br><span class="line">                ).reduce(<span class="number">0L</span>, Long::sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>这里提供了一个<code>UserRoleDTO</code>，对应前面的 Token 生成逻辑，传入<code>username</code>和<code>roles</code>用于 Token 的生成</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserRoleDTO</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; roles;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h6 id="服务层"><a class="markdownIt-Anchor" href="#服务层"></a> 服务层</h6>
<ul>
<li>
<p><strong><code>login</code></strong>：先根据<code>username</code>参数查询用户，然后比较<code>password</code>（实际的密码比较应该使用专门的类处理，下文会补充），如果通过了验证，则使用<code>UserDTO</code>的数据生成 Token，并将 Token 传输到控制层。</p>
</li>
<li>
<p><strong><code>register</code></strong>：先用<code>UserRoleDTO</code>的<code>username</code>查询用户是否已注册，如果没有注册过则将<code>username</code>和<code>password</code>封装成一个<code>User</code>用于新增用户，然后用新增用户返回的<code>userId</code>和<code>UserRoleDTO</code>一并传给新增用户角色方法，用户角色列表数据新增完成后生成 Token 并传输到控制层。</p>
</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Mono&lt;String&gt; <span class="title function_">login</span><span class="params">(String username, String password)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> userRepo.findByUsername(username)</span><br><span class="line">        .flatMap(user -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (user.getPassword().equals(password)) &#123;</span><br><span class="line">                <span class="keyword">return</span> userRepo.getUserRole(username)</span><br><span class="line">                    .flatMap(userRole -&gt; Mono.fromSupplier(() -&gt;</span><br><span class="line">                                                           jwtUtil.generateToken(username, userRole.getRoles()))</span><br><span class="line">                            );</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> Mono.empty();</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Mono&lt;String&gt; <span class="title function_">register</span><span class="params">(UserRoleDTO userRoleDTO, String password)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> userRepo.findByUsername(userRoleDTO.getUsername())</span><br><span class="line">        .flatMap(user -&gt; Mono.just(<span class="string">&quot;User already exists&quot;</span>))</span><br><span class="line">        .switchIfEmpty(Mono.defer(() -&gt; &#123;</span><br><span class="line">            <span class="comment">// id为null，由数据库自动生成</span></span><br><span class="line">            <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="literal">null</span>, userRoleDTO.getUsername(), password);</span><br><span class="line">            <span class="keyword">return</span> userRepo.insertUser(user)</span><br><span class="line">                .flatMap(userId -&gt; userRepo.insertUserRole(userId, userRoleDTO)</span><br><span class="line">                         .thenReturn(jwtUtil.generateToken(userRoleDTO.getUsername(), userRoleDTO.getRoles())));</span><br><span class="line">        &#125;));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h6 id="控制层"><a class="markdownIt-Anchor" href="#控制层"></a> 控制层</h6>
<p>handler 处理器中将 Token 存入响应头，或者也可以存入封装好的响应体中</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Mono&lt;ServerResponse&gt; <span class="title function_">login</span><span class="params">(ServerRequest request)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> request.bodyToMono(LoginRequest.class)</span><br><span class="line">        .flatMap(login -&gt;</span><br><span class="line">                 userService.login(login.getUsername(), login.getPassword())</span><br><span class="line">                )</span><br><span class="line">        .flatMap(token -&gt;</span><br><span class="line">                 ServerResponse.ok()</span><br><span class="line">                 .header(HttpHeaders.AUTHORIZATION, <span class="string">&quot;Bearer &quot;</span> + token) <span class="comment">// 将生成的Token放入响应头</span></span><br><span class="line">                 .bodyValue(<span class="keyword">new</span> <span class="title class_">ApiResponse</span>&lt;&gt;(<span class="number">200</span>, token))</span><br><span class="line">                )</span><br><span class="line">        .switchIfEmpty(ServerResponse.status(HttpStatus.UNAUTHORIZED).build());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Mono&lt;ServerResponse&gt; <span class="title function_">register</span><span class="params">(ServerRequest request)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> request.bodyToMono(RegisterRequest.class)</span><br><span class="line">        .flatMap(register -&gt; &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> register.getUsername();</span><br><span class="line">            <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> register.getPassword();</span><br><span class="line">            List&lt;String&gt; roles = register.getRoles();</span><br><span class="line">            <span class="type">UserRoleDTO</span> <span class="variable">userRoleDTO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserRoleDTO</span>(username, roles);</span><br><span class="line">            <span class="keyword">return</span> userService.register(userRoleDTO, password)</span><br><span class="line">                .flatMap(token -&gt; &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="string">&quot;User already exists&quot;</span>.equals(token)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> ServerResponse.status(HttpStatus.CONFLICT)</span><br><span class="line">                            .bodyValue(<span class="keyword">new</span> <span class="title class_">ApiResponse</span>&lt;&gt;(<span class="number">409</span>, token));</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> ServerResponse.ok()</span><br><span class="line">                        .header(HttpHeaders.AUTHORIZATION, <span class="string">&quot;Bearer &quot;</span> + token) <span class="comment">// 将生成的Token放入响应头</span></span><br><span class="line">                        .bodyValue(<span class="keyword">new</span> <span class="title class_">ApiResponse</span>&lt;&gt;(<span class="number">200</span>, token));</span><br><span class="line">                &#125;</span><br><span class="line">                        );</span><br><span class="line">        &#125;)</span><br><span class="line">        .switchIfEmpty(ServerResponse.status(HttpStatus.UNAUTHORIZED).build());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>在这里需要接受前端不同的请求数据，为了方便处理自定义了<code>LoginRequst</code>和<code>RegisterRequest</code>，内容如下</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// LoginRequest.java</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginRequest</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// RegisterRequest.java</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegisterRequest</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; roles;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>RouterConfig 路由配置中定义请求方式和 URL</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> RouterFunction&lt;ServerResponse&gt; <span class="title function_">userRoutes</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> RouterFunctions</span><br><span class="line">        .route(RequestPredicates.POST(<span class="string">&quot;/login&quot;</span>), userHandler::login)</span><br><span class="line">        .andRoute(RequestPredicates.POST(<span class="string">&quot;/register&quot;</span>), userHandler::register);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h6 id="安全层"><a class="markdownIt-Anchor" href="#安全层"></a> 安全层</h6>
<p>只需要添加对应路径的角色权限即可，例如<code>/api/admin/</code>前缀的所有路径需要<code>ROLE_ADMIN</code>权限。这个权限的加载已经在前面的<code>JwtAuthenticationManager</code>中实现。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> SecurityWebFilterChain <span class="title function_">securityWebFilterChain</span><span class="params">(ServerHttpSecurity http)</span> &#123;</span><br><span class="line">    http</span><br><span class="line">        .csrf(ServerHttpSecurity.CsrfSpec::disable)</span><br><span class="line">        .formLogin(ServerHttpSecurity.FormLoginSpec::disable)</span><br><span class="line">        .httpBasic(ServerHttpSecurity.HttpBasicSpec::disable)</span><br><span class="line">        .authenticationManager(jwtAuthenticationManager())</span><br><span class="line">        .securityContextRepository(jwtSecurityContextRepository())</span><br><span class="line">        .authorizeExchange(exchanges -&gt; exchanges</span><br><span class="line">                           .pathMatchers(<span class="string">&quot;/login&quot;</span>, <span class="string">&quot;/register&quot;</span>).permitAll()</span><br><span class="line">                           .pathMatchers(<span class="string">&quot;/api/admin/**&quot;</span>).hasRole(<span class="string">&quot;ADMIN&quot;</span>)</span><br><span class="line">                           .anyExchange().authenticated()</span><br><span class="line">                          )</span><br><span class="line">        .addFilterAt(jwtAuthenticationFilter(), SecurityWebFiltersOrder.AUTHENTICATION);</span><br><span class="line">    <span class="keyword">return</span> http.build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h4 id="passwordencoder-密码加密"><a class="markdownIt-Anchor" href="#passwordencoder-密码加密"></a> PasswordEncoder 密码加密</h4>
<p>前面直接比较明文密码（<code>user.getPassword().equals(password)</code>）并不是一个安全的做法。为了增强安全性，应该使用密码哈希值进行存储和验证。Spring Security提供了<code>PasswordEncoder</code>接口来帮助实现密码的加密和验证。</p>
<h5 id="引入passwordencoder"><a class="markdownIt-Anchor" href="#引入passwordencoder"></a> 引入<code>PasswordEncoder</code></h5>
<p>首先，需要在 Spring 配置中定义一个<code>PasswordEncoder</code>的Bean。自Spring Security 5起，推荐使用<code>BCryptPasswordEncoder</code>，它是一种基于bcrypt强哈希方法的密码编码器</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h5 id="更新用户注册逻辑"><a class="markdownIt-Anchor" href="#更新用户注册逻辑"></a> 更新用户注册逻辑</h5>
<p>在用户注册或创建密码时，使用<code>PasswordEncoder</code>对密码进行加密，并存储加密后的密码</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Mono&lt;String&gt; <span class="title function_">register</span><span class="params">(UserRoleDTO userRoleDTO, String rawPassword)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> userRepo.findByUsername(userRoleDTO.getUsername())</span><br><span class="line">        .flatMap(user -&gt; Mono.just(<span class="string">&quot;User already exists&quot;</span>))</span><br><span class="line">        .switchIfEmpty(Mono.defer(() -&gt; &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> passwordEncoder.encode(rawPassword); <span class="comment">// 使用encode方法加密密码</span></span><br><span class="line">            <span class="comment">// id为null，由数据库自动生成</span></span><br><span class="line">            <span class="comment">// 创建User对象，设置加密后的密码，然后保存User对象</span></span><br><span class="line">            <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="literal">null</span>, userRoleDTO.getUsername(), password);</span><br><span class="line">            <span class="keyword">return</span> userRepo.insertUser(user)</span><br><span class="line">                .flatMap(userId -&gt; userRepo.insertUserRole(userId, userRoleDTO)</span><br><span class="line">                         .thenReturn(jwtUtil.generateToken(userRoleDTO.getUsername(), userRoleDTO.getRoles())));</span><br><span class="line">        &#125;));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h5 id="更新登录验证逻辑"><a class="markdownIt-Anchor" href="#更新登录验证逻辑"></a> 更新登录验证逻辑</h5>
<p>在登录逻辑中，使用<code>PasswordEncoder</code>的<code>matches</code>方法来验证提交的密码与存储的加密密码是否匹配</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> PasswordEncoder passwordEncoder;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Mono&lt;String&gt; <span class="title function_">login</span><span class="params">(String username, String rawPassword)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> userRepo.findByUsername(username)</span><br><span class="line">        .flatMap(user -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (passwordEncoder.matches(rawPassword, user.getPassword())) &#123; <span class="comment">// 使用matches方法验证密码</span></span><br><span class="line">                <span class="keyword">return</span> userRepo.getUserRole(username)</span><br><span class="line">                    .flatMap(userRole -&gt; Mono.fromSupplier(() -&gt;</span><br><span class="line">                                                           jwtUtil.generateToken(username, userRole.getRoles()))</span><br><span class="line">                            );</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> Mono.empty(); <span class="comment">// 密码不匹配时返回空</span></span><br><span class="line">        &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>通过使用<code>PasswordEncoder</code>，可以增强系统的安全性，防止密码泄露时直接暴露用户的明文密码。同时，这也是符合安全最佳实践的做法。</p>
<h3 id="总结-3"><a class="markdownIt-Anchor" href="#总结-3"></a> 总结</h3>
<p>关于 Spring Webflux 还有很多其它可以实践的内容，例如整合<code>OAuth2</code>进行第三方服务鉴权认证、使用响应式 Web 客户端<code>WebClient</code>调用外部 HTTP 服务等。</p>
<p>以上就是基于 Spring Webflux 响应式框架后端项目开发过程中涉及到的主要内容。其实关于 Spring Webflux 的应用并没有传统的 Spring Web 那么广泛，而且使用 Spring Webflux 需要有一定的函数式编程与响应式编程的熟练度，对于习惯了传统 Spring Web 框架的开发者来说是具有一定的难度，但是它提供了一种不同于传统同步阻塞模型的异步非阻塞模型的视角来看待问题。</p>
]]></content>
      <tags>
        <tag>Spring Webflux</tag>
      </tags>
  </entry>
  <entry>
    <title>关于yarn禁止在此系统上运行脚本</title>
    <url>/2022/09/05/yarn-problem/</url>
    <content><![CDATA[<h3 id="nodejs中使用yarn安装依赖失败"><a class="markdownIt-Anchor" href="#nodejs中使用yarn安装依赖失败"></a> nodejs中使用yarn安装依赖失败</h3>
<h4 id="错误原因"><a class="markdownIt-Anchor" href="#错误原因"></a> 错误原因</h4>
<p>windows默认执行策略禁止脚本<span id="more"></span></p>
<h4 id="解决方法"><a class="markdownIt-Anchor" href="#解决方法"></a> 解决方法</h4>
<ol>
<li>在电脑的开始菜单中，搜索<strong>PowerShell</strong>，并<strong>以管理员身份运行</strong></li>
<li>在窗口输入命令<code>get-ExecutionPolicy</code>查看权限，如果返回值是<strong>Restricted</strong>，则表示当前是禁用状态</li>
<li>在窗口输入命令<code>set-ExecutionPolicy</code>设置权限</li>
<li>为<strong>ExecutionPolicy</strong>参数提供值<strong>RemoteSigned</strong>，后面输入<strong>A</strong>之后再回车（默认为否），开启所有脚本权限</li>
<li>重新测试yarn命令</li>
</ol>
]]></content>
      <tags>
        <tag>nodejs</tag>
      </tags>
  </entry>
</search>
